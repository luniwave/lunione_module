
luni_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058b8  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b4  080059f8  080059f8  000159f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006fac  08006fac  00016fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006fb4  08006fb4  00016fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  08006fbc  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000014c  20000098  0800704c  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001e4  0800704c  000201e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013783  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000029b8  00000000  00000000  0003384b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001520  00000000  00000000  00036208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001410  00000000  00000000  00037728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002235d  00000000  00000000  00038b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000131d4  00000000  00000000  0005ae95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d9834  00000000  00000000  0006e069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014789d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ff8  00000000  00000000  001478f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	080059e0 	.word	0x080059e0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	080059e0 	.word	0x080059e0

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <EpdDigitalWriteCallback>:
		EPD_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10e      	bne.n	8000552 <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	4413      	add	r3, r2
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	b29b      	uxth	r3, r3
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f001 fad4 	bl	8001af8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8000550:	e00d      	b.n	800056e <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	4413      	add	r3, r2
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	f001 fac5 	bl	8001af8 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000b4 	.word	0x200000b4

0800057c <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <EpdDigitalReadCallback+0x38>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800058c:	4909      	ldr	r1, [pc, #36]	; (80005b4 <EpdDigitalReadCallback+0x38>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	b29b      	uxth	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	4610      	mov	r0, r2
 800059c:	f001 fa94 	bl	8001ac8 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d101      	bne.n	80005aa <EpdDigitalReadCallback+0x2e>
    return HIGH;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 80005aa:	2300      	movs	r3, #0
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000b4 	.word	0x200000b4

080005b8 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f001 f809 	bl	80015d8 <HAL_Delay>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005e0:	6852      	ldr	r2, [r2, #4]
 80005e2:	b291      	uxth	r1, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fa86 	bl	8001af8 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80005ec:	1df9      	adds	r1, r7, #7
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	2201      	movs	r2, #1
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <EpdSpiTransferCallback+0x48>)
 80005f6:	f003 f908 	bl	800380a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <EpdSpiTransferCallback+0x44>)
 8000600:	6852      	ldr	r2, [r2, #4]
 8000602:	b291      	uxth	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fa76 	bl	8001af8 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000b4 	.word	0x200000b4
 8000618:	200000d4 	.word	0x200000d4

0800061c <EpdInitCallback>:

int EpdInitCallback(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <EpdInitCallback+0x48>)
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <EpdInitCallback+0x4c>)
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <EpdInitCallback+0x48>)
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <EpdInitCallback+0x50>)
 8000630:	3308      	adds	r3, #8
 8000632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000636:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <EpdInitCallback+0x48>)
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <EpdInitCallback+0x54>)
 800063e:	3310      	adds	r3, #16
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <EpdInitCallback+0x48>)
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <EpdInitCallback+0x58>)
 800064c:	3318      	adds	r3, #24
 800064e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000652:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200000b4 	.word	0x200000b4
 8000668:	20000008 	.word	0x20000008
 800066c:	20000010 	.word	0x20000010
 8000670:	20000018 	.word	0x20000018
 8000674:	20000020 	.word	0x20000020

08000678 <EPD_Init>:
#include <stdlib.h>
#include "epd2in9.h"
#include "main.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	epd->reset_pin = RST_PIN;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
	epd->dc_pin = DC_PIN;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
	epd->cs_pin = CS_PIN;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
	epd->busy_pin = BUSY_PIN;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2203      	movs	r2, #3
 8000698:	60da      	str	r2, [r3, #12]
	epd->width = EPD_WIDTH;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	611a      	str	r2, [r3, #16]
	epd->height = EPD_HEIGHT;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80006a6:	615a      	str	r2, [r3, #20]
	/* this calls the peripheral hardware interface, see epdif */
	if (EpdInitCallback() != 0) {
 80006a8:	f7ff ffb8 	bl	800061c <EpdInitCallback>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <EPD_Init+0x40>
		return -1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b6:	e073      	b.n	80007a0 <EPD_Init+0x128>
	}

	epd->lut = lut;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	619a      	str	r2, [r3, #24]

	EPD_Reset(epd);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f8f6 	bl	80008b0 <EPD_Reset>

	EPD_WaitUntilIdle(epd);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f8dc 	bl	8000882 <EPD_WaitUntilIdle>
	EPD_SendCommand(epd,SW_RESET); // soft reset
 80006ca:	2112      	movs	r1, #18
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f892 	bl	80007f6 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f8d5 	bl	8000882 <EPD_WaitUntilIdle>

	EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 80006d8:	2101      	movs	r1, #1
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f88b 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x27);
 80006e0:	2127      	movs	r1, #39	; 0x27
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f8aa 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, 0x01);
 80006e8:	2101      	movs	r1, #1
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f8a6 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, 0x00);
 80006f0:	2100      	movs	r1, #0
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f000 f8a2 	bl	800083c <EPD_SendData>

	// Entrymode
	EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 80006f8:	2111      	movs	r1, #17
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f87b 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x03);
 8000700:	2103      	movs	r1, #3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f89a 	bl	800083c <EPD_SendData>

	// Curseur de mémoire
	EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000708:	f240 1327 	movw	r3, #295	; 0x127
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	237f      	movs	r3, #127	; 0x7f
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f9f2 	bl	8000afe <EPD_SetMemoryArea>

	// Update mode
	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_1);
 800071a:	2121      	movs	r1, #33	; 0x21
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f86a 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x00);
 8000722:	2100      	movs	r1, #0
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f889 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, 0x80);
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f885 	bl	800083c <EPD_SendData>

	// Set the cursor
	EPD_SetMemoryPointer(epd,0,0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 fa1c 	bl	8000b74 <EPD_SetMemoryPointer>
	EPD_WaitUntilIdle(epd);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f8a0 	bl	8000882 <EPD_WaitUntilIdle>

	// Set lut
	EPD_SetLut(epd,epd->lut);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f9b3 	bl	8000ab4 <EPD_SetLut>


	EPD_SendCommand(epd, LUT_INIT_RESERVED);
 800074e:	213f      	movs	r1, #63	; 0x3f
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f850 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x22); // TBC
 8000756:	2122      	movs	r1, #34	; 0x22
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f86f 	bl	800083c <EPD_SendData>

	EPD_SendCommand(epd, GATE_VOLTAGE);
 800075e:	2103      	movs	r1, #3
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f848 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x17); // TBC
 8000766:	2117      	movs	r1, #23
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f867 	bl	800083c <EPD_SendData>

	EPD_SendCommand(epd, SOURCE_VOLTAGE);
 800076e:	2104      	movs	r1, #4
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f000 f840 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x41); // TBC
 8000776:	2141      	movs	r1, #65	; 0x41
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f85f 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, 0x00); // TBC
 800077e:	2100      	movs	r1, #0
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f000 f85b 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, 0x32); // TBC
 8000786:	2132      	movs	r1, #50	; 0x32
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f000 f857 	bl	800083c <EPD_SendData>

	EPD_SendCommand(epd, WRITE_VCOM_REGISTER);
 800078e:	212c      	movs	r1, #44	; 0x2c
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f830 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0x36); // TBC
 8000796:	2136      	movs	r1, #54	; 0x36
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f84f 	bl	800083c <EPD_SendData>


	/* EPD hardware init end */
	return 0;
 800079e:	2300      	movs	r3, #0



}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b084      	sub	sp, #16
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
	EpdDigitalWriteCallback(pin, value);
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	68b8      	ldr	r0, [r7, #8]
 80007b8:	f7ff feb4 	bl	8000524 <EpdDigitalWriteCallback>
}
 80007bc:	bf00      	nop
 80007be:	3710      	adds	r7, #16
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	return EpdDigitalReadCallback(pin);
 80007ce:	6838      	ldr	r0, [r7, #0]
 80007d0:	f7ff fed4 	bl	800057c <EpdDigitalReadCallback>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}

080007de <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 80007de:	b580      	push	{r7, lr}
 80007e0:	b082      	sub	sp, #8
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	6039      	str	r1, [r7, #0]
	EpdDelayMsCallback(delaytime);
 80007e8:	6838      	ldr	r0, [r7, #0]
 80007ea:	f7ff fee5 	bl	80005b8 <EpdDelayMsCallback>
}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	6078      	str	r0, [r7, #4]
 80007fe:	460b      	mov	r3, r1
 8000800:	70fb      	strb	r3, [r7, #3]
	EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	4619      	mov	r1, r3
 800080a:	6878      	ldr	r0, [r7, #4]
 800080c:	f7ff ffcc 	bl	80007a8 <EPD_DigitalWrite>
	EPD_DigitalWrite(epd, epd->cs_pin, LOW);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	689b      	ldr	r3, [r3, #8]
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	6878      	ldr	r0, [r7, #4]
 800081a:	f7ff ffc5 	bl	80007a8 <EPD_DigitalWrite>
	EpdSpiTransferCallback(command);
 800081e:	78fb      	ldrb	r3, [r7, #3]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fed5 	bl	80005d0 <EpdSpiTransferCallback>
	EPD_DigitalWrite(epd, epd->cs_pin, HIGH);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	6878      	ldr	r0, [r7, #4]
 8000830:	f7ff ffba 	bl	80007a8 <EPD_DigitalWrite>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
 8000844:	460b      	mov	r3, r1
 8000846:	70fb      	strb	r3, [r7, #3]
	EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2201      	movs	r2, #1
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ffa9 	bl	80007a8 <EPD_DigitalWrite>
	EPD_DigitalWrite(epd, epd->cs_pin, LOW);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	689b      	ldr	r3, [r3, #8]
 800085a:	2200      	movs	r2, #0
 800085c:	4619      	mov	r1, r3
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffa2 	bl	80007a8 <EPD_DigitalWrite>
	EpdSpiTransferCallback(data);
 8000864:	78fb      	ldrb	r3, [r7, #3]
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff feb2 	bl	80005d0 <EpdSpiTransferCallback>
	EPD_DigitalWrite(epd, epd->cs_pin, HIGH);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff ff97 	bl	80007a8 <EPD_DigitalWrite>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes LOW
 */
void EPD_WaitUntilIdle(EPD* epd) {
 8000882:	b580      	push	{r7, lr}
 8000884:	b082      	sub	sp, #8
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
	while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 800088a:	e003      	b.n	8000894 <EPD_WaitUntilIdle+0x12>
		EPD_DelayMs(epd, 100);
 800088c:	2164      	movs	r1, #100	; 0x64
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff ffa5 	bl	80007de <EPD_DelayMs>
	while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4619      	mov	r1, r3
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff ff92 	bl	80007c4 <EPD_DigitalRead>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d0f2      	beq.n	800088c <EPD_WaitUntilIdle+0xa>
	}
}
 80008a6:	bf00      	nop
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2200      	movs	r2, #0
 80008be:	4619      	mov	r1, r3
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff71 	bl	80007a8 <EPD_DigitalWrite>
	EPD_DelayMs(epd, 1);
 80008c6:	2101      	movs	r1, #1
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff88 	bl	80007de <EPD_DelayMs>
	EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2201      	movs	r2, #1
 80008d4:	4619      	mov	r1, r3
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff66 	bl	80007a8 <EPD_DigitalWrite>
	EPD_DelayMs(epd, 2);
 80008dc:	2102      	movs	r1, #2
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f7ff ff7d 	bl	80007de <EPD_DelayMs>
}
 80008e4:	bf00      	nop
 80008e6:	3708      	adds	r7, #8
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <EPD_SetFrameMemory>:
		const unsigned char* image_buffer,
		int x,
		int y,
		int image_width,
		int image_height
) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b086      	sub	sp, #24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
 80008f8:	603b      	str	r3, [r7, #0]
	//EPD_SetMemoryArea(epd, x, y, x_end, y_end);
	//EPD_SetMemoryPointer(epd, x, y);

	int i;

	EPD_SendCommand(epd, WRITE_RAM);
 80008fa:	2124      	movs	r1, #36	; 0x24
 80008fc:	68f8      	ldr	r0, [r7, #12]
 80008fe:	f7ff ff7a 	bl	80007f6 <EPD_SendCommand>
	for(i=0;i<4736;i++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e00a      	b.n	800091e <EPD_SetFrameMemory+0x32>
	{
		EPD_SendData(epd,image_buffer[i]);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	68ba      	ldr	r2, [r7, #8]
 800090c:	4413      	add	r3, r2
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f7ff ff92 	bl	800083c <EPD_SendData>
	for(i=0;i<4736;i++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000924:	dbf0      	blt.n	8000908 <EPD_SetFrameMemory+0x1c>
	}

	EPD_SendCommand(epd, WRITE_RAM_BASE);
 8000926:	2126      	movs	r1, #38	; 0x26
 8000928:	68f8      	ldr	r0, [r7, #12]
 800092a:	f7ff ff64 	bl	80007f6 <EPD_SendCommand>
	for(i=0;i<4736;i++)
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
 8000932:	e00a      	b.n	800094a <EPD_SetFrameMemory+0x5e>
	{
		EPD_SendData(epd,image_buffer[i]);
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	68ba      	ldr	r2, [r7, #8]
 8000938:	4413      	add	r3, r2
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ff7c 	bl	800083c <EPD_SendData>
	for(i=0;i<4736;i++)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000950:	dbf0      	blt.n	8000934 <EPD_SetFrameMemory+0x48>
	}

	EPD_DisplayFrame(epd);
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f000 f884 	bl	8000a60 <EPD_DisplayFrame>
}
 8000958:	bf00      	nop
 800095a:	3718      	adds	r7, #24
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <EPD_Clear_Full>:

/**
 *  @brief: clear the screen for init
 */

void EPD_Clear_Full(EPD* epd){
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]

	// Reset
	EPD_Reset(epd);
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff ffa1 	bl	80008b0 <EPD_Reset>

	// On met les luts
	EPD_SetLut(epd,epd->lut);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	4619      	mov	r1, r3
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f000 f89d 	bl	8000ab4 <EPD_SetLut>

	//
	EPD_SendCommand(epd, OTP_SELECTION);
 800097a:	2137      	movs	r1, #55	; 0x37
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f7ff ff3a 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd,0x00);
 8000982:	2100      	movs	r1, #0
 8000984:	6878      	ldr	r0, [r7, #4]
 8000986:	f7ff ff59 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 800098a:	2100      	movs	r1, #0
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff ff55 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 8000992:	2100      	movs	r1, #0
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff51 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 800099a:	2100      	movs	r1, #0
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff ff4d 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80009a2:	2100      	movs	r1, #0
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f7ff ff49 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x40);
 80009aa:	2140      	movs	r1, #64	; 0x40
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff45 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80009b2:	2100      	movs	r1, #0
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff41 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80009ba:	2100      	movs	r1, #0
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff3d 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80009c2:	2100      	movs	r1, #0
 80009c4:	6878      	ldr	r0, [r7, #4]
 80009c6:	f7ff ff39 	bl	800083c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80009ca:	2100      	movs	r1, #0
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f7ff ff35 	bl	800083c <EPD_SendData>

	// Border waveform
	EPD_SendCommand(epd, BORDER_WAVEFORM_CONTROL);
 80009d2:	213c      	movs	r1, #60	; 0x3c
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff0e 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd,0x80);
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f7ff ff2d 	bl	800083c <EPD_SendData>

	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 80009e2:	2122      	movs	r1, #34	; 0x22
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff06 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd,0xC0);
 80009ea:	21c0      	movs	r1, #192	; 0xc0
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff25 	bl	800083c <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 80009f2:	2120      	movs	r1, #32
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff fefe 	bl	80007f6 <EPD_SendCommand>

	// Mémoire
	EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 80009fa:	f240 1327 	movw	r3, #295	; 0x127
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	237f      	movs	r3, #127	; 0x7f
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 f879 	bl	8000afe <EPD_SetMemoryArea>
	EPD_SetMemoryPointer(epd,0,0);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2100      	movs	r1, #0
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 f8af 	bl	8000b74 <EPD_SetMemoryPointer>

	EPD_SendCommand(epd, WRITE_RAM);   //Write Black and White image to RAM
 8000a16:	2124      	movs	r1, #36	; 0x24
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff feec 	bl	80007f6 <EPD_SendCommand>
	for(int i=0;i<4736;++i)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	e006      	b.n	8000a32 <EPD_Clear_Full+0xd2>
	{
		EPD_SendData(epd,0xFF);
 8000a24:	21ff      	movs	r1, #255	; 0xff
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f7ff ff08 	bl	800083c <EPD_SendData>
	for(int i=0;i<4736;++i)
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8000a38:	dbf4      	blt.n	8000a24 <EPD_Clear_Full+0xc4>
	}

	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8000a3a:	2122      	movs	r1, #34	; 0x22
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff feda 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd,0xF7);
 8000a42:	21f7      	movs	r1, #247	; 0xf7
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff fef9 	bl	800083c <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff fed2 	bl	80007f6 <EPD_SendCommand>

	EPD_WaitUntilIdle(epd);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ff15 	bl	8000882 <EPD_WaitUntilIdle>

}
 8000a58:	bf00      	nop
 8000a5a:	3710      	adds	r7, #16
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <EPD_DisplayFrame>:
 *          there are 2 memory areas embedded in the e-paper display
 *          but once this function is called,
 *          the the next action of SetFrameMemory or ClearFrame will
 *          set the other memory area.
 */
void EPD_DisplayFrame(EPD* epd) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8000a68:	2122      	movs	r1, #34	; 0x22
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f7ff fec3 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, 0xC7);
 8000a70:	21c7      	movs	r1, #199	; 0xc7
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f7ff fee2 	bl	800083c <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8000a78:	2120      	movs	r1, #32
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff febb 	bl	80007f6 <EPD_SendCommand>
	EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
 8000a80:	21ff      	movs	r1, #255	; 0xff
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff feb7 	bl	80007f6 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f7ff fefa 	bl	8000882 <EPD_WaitUntilIdle>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <EPD_Sleep>:
 *  @brief: After this command is transmitted, the chip would enter the 
 *          deep-sleep mode to save power. 
 *          The deep sleep mode would return to standby by hardware reset. 
 *          You can use EPD_Init() to awaken
 */
void EPD_Sleep(EPD* epd) {
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
	EPD_SendCommand(epd, DEEP_SLEEP_MODE);
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff fea8 	bl	80007f6 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff feeb 	bl	8000882 <EPD_WaitUntilIdle>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <EPD_SetLut>:

/**
 *  @brief: set the look-up tables
 */
static void EPD_SetLut(EPD* epd, const unsigned char* lut) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	epd->lut = lut;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	683a      	ldr	r2, [r7, #0]
 8000ac2:	619a      	str	r2, [r3, #24]
	EPD_SendCommand(epd, WRITE_LUT_REGISTER);
 8000ac4:	2132      	movs	r1, #50	; 0x32
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f7ff fe95 	bl	80007f6 <EPD_SendCommand>
	/* the length of look-up table is 30 bytes */
	for (int i = 0; i < 153; i++) {
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	e00b      	b.n	8000aea <EPD_SetLut+0x36>
		EPD_SendData(epd, epd->lut[i]);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	4619      	mov	r1, r3
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f7ff feac 	bl	800083c <EPD_SendData>
	for (int i = 0; i < 153; i++) {
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	2b98      	cmp	r3, #152	; 0x98
 8000aee:	ddf0      	ble.n	8000ad2 <EPD_SetLut+0x1e>
	}
	EPD_WaitUntilIdle(epd);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff fec6 	bl	8000882 <EPD_WaitUntilIdle>
}
 8000af6:	bf00      	nop
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <EPD_SetMemoryArea>:

/**
 *  @brief: private function to specify the memory area for data R/W
 */
static void EPD_SetMemoryArea(EPD* epd, int x_start, int y_start, int x_end, int y_end) {
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b084      	sub	sp, #16
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	603b      	str	r3, [r7, #0]
	EPD_SendCommand(epd, SET_RAM_X_ADDRESS_START_END_POSITION);
 8000b0c:	2144      	movs	r1, #68	; 0x44
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff fe71 	bl	80007f6 <EPD_SendCommand>
	/* x point must be the multiple of 8 or the last 3 bits will be ignored */
	EPD_SendData(epd, (x_start >> 3) & 0xFF);
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	10db      	asrs	r3, r3, #3
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	68f8      	ldr	r0, [r7, #12]
 8000b1e:	f7ff fe8d 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, (x_end >> 3) & 0xFF);
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	10db      	asrs	r3, r3, #3
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4619      	mov	r1, r3
 8000b2a:	68f8      	ldr	r0, [r7, #12]
 8000b2c:	f7ff fe86 	bl	800083c <EPD_SendData>
	EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_START_END_POSITION);
 8000b30:	2145      	movs	r1, #69	; 0x45
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f7ff fe5f 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, y_start & 0xFF);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	68f8      	ldr	r0, [r7, #12]
 8000b40:	f7ff fe7c 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, (y_start >> 8) & 0xFF);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	121b      	asrs	r3, r3, #8
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff fe75 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, y_end & 0xFF);
 8000b52:	69bb      	ldr	r3, [r7, #24]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	4619      	mov	r1, r3
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff fe6f 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, (y_end >> 8) & 0xFF);
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	121b      	asrs	r3, r3, #8
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	4619      	mov	r1, r3
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff fe68 	bl	800083c <EPD_SendData>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <EPD_SetMemoryPointer>:

/**
 *  @brief: private function to specify the start point for data R/W
 */
static void EPD_SetMemoryPointer(EPD* epd, int x, int y) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	EPD_SendCommand(epd, SET_RAM_X_ADDRESS_COUNTER);
 8000b80:	214e      	movs	r1, #78	; 0x4e
 8000b82:	68f8      	ldr	r0, [r7, #12]
 8000b84:	f7ff fe37 	bl	80007f6 <EPD_SendCommand>
	/* x point must be the multiple of 8 or the last 3 bits will be ignored */
	EPD_SendData(epd, (x >> 3) & 0xFF);
 8000b88:	68bb      	ldr	r3, [r7, #8]
 8000b8a:	10db      	asrs	r3, r3, #3
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	4619      	mov	r1, r3
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fe53 	bl	800083c <EPD_SendData>
	EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_COUNTER);
 8000b96:	214f      	movs	r1, #79	; 0x4f
 8000b98:	68f8      	ldr	r0, [r7, #12]
 8000b9a:	f7ff fe2c 	bl	80007f6 <EPD_SendCommand>
	EPD_SendData(epd, y & 0xFF);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fe49 	bl	800083c <EPD_SendData>
	EPD_SendData(epd, (y >> 8) & 0xFF);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	121b      	asrs	r3, r3, #8
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff fe42 	bl	800083c <EPD_SendData>
	EPD_WaitUntilIdle(epd);
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff fe62 	bl	8000882 <EPD_WaitUntilIdle>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b085      	sub	sp, #20
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4013      	ands	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b090      	sub	sp, #64	; 0x40
 8000bfc:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */


	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 8000bfe:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8000c02:	f003 fed9 	bl	80049b8 <malloc>
 8000c06:	4603      	mov	r3, r0
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
	char time_string[] = {'0', '0', ':', '0', '0', '\0'};
 8000c0a:	4a3b      	ldr	r2, [pc, #236]	; (8000cf8 <main+0x100>)
 8000c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000c10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c14:	6018      	str	r0, [r3, #0]
 8000c16:	3304      	adds	r3, #4
 8000c18:	8019      	strh	r1, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c1a:	f000 fc57 	bl	80014cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c1e:	f000 f885 	bl	8000d2c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000c22:	f000 f8e7 	bl	8000df4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c26:	f000 f98f 	bl	8000f48 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000c2a:	f000 f93f 	bl	8000eac <MX_USART1_UART_Init>
	MX_SPI2_Init();
 8000c2e:	f000 f8ff 	bl	8000e30 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */

	// DEBUG Attente téléversage
	HAL_Delay(3000);
 8000c32:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c36:	f000 fccf 	bl	80015d8 <HAL_Delay>
	// Fin Attente téléversage

	printf("\n\r ** LuniOne v1.0.3 ** \n\r");
 8000c3a:	4830      	ldr	r0, [pc, #192]	; (8000cfc <main+0x104>)
 8000c3c:	f003 ffac 	bl	8004b98 <iprintf>


	printf("DEBUT de l'initialisation \n\r");
 8000c40:	482f      	ldr	r0, [pc, #188]	; (8000d00 <main+0x108>)
 8000c42:	f003 ffa9 	bl	8004b98 <iprintf>
	EPD epd;
	if (EPD_Init(&epd, lut_full_update) != 0) {
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	492e      	ldr	r1, [pc, #184]	; (8000d04 <main+0x10c>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff fd13 	bl	8000678 <EPD_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d005      	beq.n	8000c64 <main+0x6c>
		printf("e-Paper init failed \n\r");
 8000c58:	482b      	ldr	r0, [pc, #172]	; (8000d08 <main+0x110>)
 8000c5a:	f003 ff9d 	bl	8004b98 <iprintf>
		return -1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c62:	e044      	b.n	8000cee <main+0xf6>
	}
	else{
		printf("e-Paper init done \n\r");
 8000c64:	4829      	ldr	r0, [pc, #164]	; (8000d0c <main+0x114>)
 8000c66:	f003 ff97 	bl	8004b98 <iprintf>
	}

	printf("Debut du clear...\r\n");
 8000c6a:	4829      	ldr	r0, [pc, #164]	; (8000d10 <main+0x118>)
 8000c6c:	f004 f81a 	bl	8004ca4 <puts>
	EPD_Clear_Full(&epd);
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff fe73 	bl	8000960 <EPD_Clear_Full>
	printf("Fin du clear...\r\n");
 8000c7a:	4826      	ldr	r0, [pc, #152]	; (8000d14 <main+0x11c>)
 8000c7c:	f004 f812 	bl	8004ca4 <puts>


	// Nouvel init après
	if (EPD_Init(&epd, lut_full_update) != 0) {
 8000c80:	f107 0310 	add.w	r3, r7, #16
 8000c84:	491f      	ldr	r1, [pc, #124]	; (8000d04 <main+0x10c>)
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fcf6 	bl	8000678 <EPD_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <main+0xa6>
		printf("e-Paper init failed \n\r");
 8000c92:	481d      	ldr	r0, [pc, #116]	; (8000d08 <main+0x110>)
 8000c94:	f003 ff80 	bl	8004b98 <iprintf>
		return -1;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9c:	e027      	b.n	8000cee <main+0xf6>
	}
	else{
		printf("e-Paper init done \n\r");
 8000c9e:	481b      	ldr	r0, [pc, #108]	; (8000d0c <main+0x114>)
 8000ca0:	f003 ff7a 	bl	8004b98 <iprintf>
	}

	// Pause
	EPD_DelayMs(&epd,1000);
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fd96 	bl	80007de <EPD_DelayMs>

	printf("Debut affichage photo...\r\n");
 8000cb2:	4819      	ldr	r0, [pc, #100]	; (8000d18 <main+0x120>)
 8000cb4:	f003 fff6 	bl	8004ca4 <puts>
	EPD_SetFrameMemory(&epd, IMAGE_DATA, 0, 0, epd.width, epd.height);
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cbc:	f107 0010 	add.w	r0, r7, #16
 8000cc0:	9201      	str	r2, [sp, #4]
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	4914      	ldr	r1, [pc, #80]	; (8000d1c <main+0x124>)
 8000cca:	f7ff fe0f 	bl	80008ec <EPD_SetFrameMemory>

	printf("Fin affichage photo...\r\n");
 8000cce:	4814      	ldr	r0, [pc, #80]	; (8000d20 <main+0x128>)
 8000cd0:	f003 ffe8 	bl	8004ca4 <puts>

	printf("Debut mise en veille ...\r\n");
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <main+0x12c>)
 8000cd6:	f003 ffe5 	bl	8004ca4 <puts>
	EPD_Sleep(&epd);
 8000cda:	f107 0310 	add.w	r3, r7, #16
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fed9 	bl	8000a96 <EPD_Sleep>
	printf("Fin de mise en veille ...\r\n");
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <main+0x130>)
 8000ce6:	f003 ffdd 	bl	8004ca4 <puts>

	return -1;
 8000cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		EPD_DisplayFrame(&epd);

		EPD_DelayMs(&epd, 500);
	}
	/* USER CODE END 3 */
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3738      	adds	r7, #56	; 0x38
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	08005af8 	.word	0x08005af8
 8000cfc:	080059f8 	.word	0x080059f8
 8000d00:	08005a14 	.word	0x08005a14
 8000d04:	08005b2c 	.word	0x08005b2c
 8000d08:	08005a34 	.word	0x08005a34
 8000d0c:	08005a4c 	.word	0x08005a4c
 8000d10:	08005a64 	.word	0x08005a64
 8000d14:	08005a78 	.word	0x08005a78
 8000d18:	08005a8c 	.word	0x08005a8c
 8000d1c:	08005bcc 	.word	0x08005bcc
 8000d20:	08005aa8 	.word	0x08005aa8
 8000d24:	08005ac0 	.word	0x08005ac0
 8000d28:	08005adc 	.word	0x08005adc

08000d2c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b09a      	sub	sp, #104	; 0x68
 8000d30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0320 	add.w	r3, r7, #32
 8000d36:	2248      	movs	r2, #72	; 0x48
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f003 fe44 	bl	80049c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]
 8000d4e:	615a      	str	r2, [r3, #20]
 8000d50:	619a      	str	r2, [r3, #24]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d52:	4b27      	ldr	r3, [pc, #156]	; (8000df0 <SystemClock_Config+0xc4>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d5a:	4a25      	ldr	r2, [pc, #148]	; (8000df0 <SystemClock_Config+0xc4>)
 8000d5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	4b23      	ldr	r3, [pc, #140]	; (8000df0 <SystemClock_Config+0xc4>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d7e:	2340      	movs	r3, #64	; 0x40
 8000d80:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d82:	2302      	movs	r3, #2
 8000d84:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d86:	2303      	movs	r3, #3
 8000d88:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLN = 12;
 8000d8e:	230c      	movs	r3, #12
 8000d90:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d96:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000d98:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000d9c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000da2:	663b      	str	r3, [r7, #96]	; 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4618      	mov	r0, r3
 8000daa:	f001 fa51 	bl	8002250 <HAL_RCC_OscConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0x8c>
	{
		Error_Handler();
 8000db4:	f000 f96a 	bl	800108c <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000db8:	236f      	movs	r3, #111	; 0x6f
 8000dba:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dbc:	2303      	movs	r3, #3
 8000dbe:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000dc0:	2380      	movs	r3, #128	; 0x80
 8000dc2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV4;
 8000dcc:	2390      	movs	r3, #144	; 0x90
 8000dce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV4;
 8000dd0:	2390      	movs	r3, #144	; 0x90
 8000dd2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fdad 	bl	8002938 <HAL_RCC_ClockConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0xbc>
	{
		Error_Handler();
 8000de4:	f000 f952 	bl	800108c <Error_Handler>
	}
}
 8000de8:	bf00      	nop
 8000dea:	3768      	adds	r7, #104	; 0x68
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58000400 	.word	0x58000400

08000df4 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b094      	sub	sp, #80	; 0x50
 8000df8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2250      	movs	r2, #80	; 0x50
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f003 fde1 	bl	80049c8 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000e06:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e0a:	603b      	str	r3, [r7, #0]
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e14:	463b      	mov	r3, r7
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f9cd 	bl	80031b6 <HAL_RCCEx_PeriphCLKConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <PeriphCommonClock_Config+0x32>
	{
		Error_Handler();
 8000e22:	f000 f933 	bl	800108c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 8000e26:	bf00      	nop
 8000e28:	3750      	adds	r7, #80	; 0x50
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
	...

08000e30 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e36:	4a1c      	ldr	r2, [pc, #112]	; (8000ea8 <MX_SPI2_Init+0x78>)
 8000e38:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e3c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e40:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e44:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000e48:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e4c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e50:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e64:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e68:	2208      	movs	r2, #8
 8000e6a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e84:	4b07      	ldr	r3, [pc, #28]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e8c:	2208      	movs	r2, #8
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <MX_SPI2_Init+0x74>)
 8000e92:	f002 fc17 	bl	80036c4 <HAL_SPI_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_SPI2_Init+0x70>
	{
		Error_Handler();
 8000e9c:	f000 f8f6 	bl	800108c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000d4 	.word	0x200000d4
 8000ea8:	40003800 	.word	0x40003800

08000eac <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000eb0:	4b23      	ldr	r3, [pc, #140]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000eb2:	4a24      	ldr	r2, [pc, #144]	; (8000f44 <MX_USART1_UART_Init+0x98>)
 8000eb4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000eb6:	4b22      	ldr	r3, [pc, #136]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b20      	ldr	r3, [pc, #128]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_ODD;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ecc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000ed0:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ed4:	220c      	movs	r2, #12
 8000ed6:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed8:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef0:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef6:	4812      	ldr	r0, [pc, #72]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000ef8:	f002 ff7a 	bl	8003df0 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_USART1_UART_Init+0x5a>
	{
		Error_Handler();
 8000f02:	f000 f8c3 	bl	800108c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f06:	2100      	movs	r1, #0
 8000f08:	480d      	ldr	r0, [pc, #52]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000f0a:	f003 fc60 	bl	80047ce <HAL_UARTEx_SetTxFifoThreshold>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART1_UART_Init+0x6c>
	{
		Error_Handler();
 8000f14:	f000 f8ba 	bl	800108c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4809      	ldr	r0, [pc, #36]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000f1c:	f003 fc95 	bl	800484a <HAL_UARTEx_SetRxFifoThreshold>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART1_UART_Init+0x7e>
	{
		Error_Handler();
 8000f26:	f000 f8b1 	bl	800108c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f2a:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000f2c:	f003 fc16 	bl	800475c <HAL_UARTEx_DisableFifoMode>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_USART1_UART_Init+0x8e>
	{
		Error_Handler();
 8000f36:	f000 f8a9 	bl	800108c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000138 	.word	0x20000138
 8000f44:	40013800 	.word	0x40013800

08000f48 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5c:	2004      	movs	r0, #4
 8000f5e:	f7ff fe32 	bl	8000bc6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2001      	movs	r0, #1
 8000f64:	f7ff fe2f 	bl	8000bc6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	2002      	movs	r0, #2
 8000f6a:	f7ff fe2c 	bl	8000bc6 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff fe29 	bl	8000bc6 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2123      	movs	r1, #35	; 0x23
 8000f78:	4838      	ldr	r0, [pc, #224]	; (800105c <MX_GPIO_Init+0x114>)
 8000f7a:	f000 fdbd 	bl	8001af8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000f84:	4836      	ldr	r0, [pc, #216]	; (8001060 <MX_GPIO_Init+0x118>)
 8000f86:	f000 fdb7 	bl	8001af8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f000 fdb0 	bl	8001af8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	482d      	ldr	r0, [pc, #180]	; (8001060 <MX_GPIO_Init+0x118>)
 8000faa:	f000 fc1d 	bl	80017e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
	GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000fae:	2323      	movs	r3, #35	; 0x23
 8000fb0:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4826      	ldr	r0, [pc, #152]	; (800105c <MX_GPIO_Init+0x114>)
 8000fc4:	f000 fc10 	bl	80017e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : EPD_BUSY_Pin */
	GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8000fc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fcc:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4820      	ldr	r0, [pc, #128]	; (800105c <MX_GPIO_Init+0x114>)
 8000fdc:	f000 fc04 	bl	80017e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : EPD_DC_Pin EPD_CS_Pin */
	GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin;
 8000fe0:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000fe4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481a      	ldr	r0, [pc, #104]	; (8001060 <MX_GPIO_Init+0x118>)
 8000ff8:	f000 fbf6 	bl	80017e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001000:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800100e:	230a      	movs	r3, #10
 8001010:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001012:	1d3b      	adds	r3, r7, #4
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800101a:	f000 fbe5 	bl	80017e8 <HAL_GPIO_Init>

	/*Configure GPIO pin : EPD_RST_Pin */
	GPIO_InitStruct.Pin = EPD_RST_Pin;
 800101e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001022:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f000 fbd6 	bl	80017e8 <HAL_GPIO_Init>

	/*Configure GPIO pins : B2_Pin B3_Pin */
	GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 800103c:	2303      	movs	r3, #3
 800103e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	4619      	mov	r1, r3
 800104c:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_GPIO_Init+0x11c>)
 800104e:	f000 fbcb 	bl	80017e8 <HAL_GPIO_Init>

}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00

08001068 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001070:	1d39      	adds	r1, r7, #4
 8001072:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001076:	2201      	movs	r2, #1
 8001078:	4803      	ldr	r0, [pc, #12]	; (8001088 <__io_putchar+0x20>)
 800107a:	f002 ff09 	bl	8003e90 <HAL_UART_Transmit>

	return ch;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000138 	.word	0x20000138

0800108c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001094:	e7fe      	b.n	8001094 <Error_Handler+0x8>

08001096 <LL_AHB2_GRP1_EnableClock>:
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800109e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4313      	orrs	r3, r2
 80010de:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80010e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4013      	ands	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ec:	68fb      	ldr	r3, [r7, #12]
}
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001108:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4313      	orrs	r3, r2
 8001110:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001116:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4013      	ands	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001130:	2007      	movs	r0, #7
 8001132:	f000 fb27 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a19      	ldr	r2, [pc, #100]	; (80011c0 <HAL_SPI_MspInit+0x84>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d12b      	bne.n	80011b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800115e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001162:	f7ff ffb1 	bl	80010c8 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2004      	movs	r0, #4
 8001168:	f7ff ff95 	bl	8001096 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff92 	bl	8001096 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001172:	2302      	movs	r3, #2
 8001174:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117e:	2302      	movs	r3, #2
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001182:	2303      	movs	r3, #3
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	4619      	mov	r1, r3
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <HAL_SPI_MspInit+0x88>)
 800118e:	f000 fb2b 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001196:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a0:	2302      	movs	r3, #2
 80011a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a4:	2305      	movs	r3, #5
 80011a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fb19 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3720      	adds	r7, #32
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40003800 	.word	0x40003800
 80011c4:	48000800 	.word	0x48000800

080011c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b09c      	sub	sp, #112	; 0x70
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2250      	movs	r2, #80	; 0x50
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f003 fbed 	bl	80049c8 <memset>
  if(huart->Instance==USART1)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <HAL_UART_MspInit+0x84>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d124      	bne.n	8001242 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 80011fc:	2302      	movs	r3, #2
 80011fe:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4618      	mov	r0, r3
 8001206:	f001 ffd6 	bl	80031b6 <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001210:	f7ff ff3c 	bl	800108c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001214:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001218:	f7ff ff6f 	bl	80010fa <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	2002      	movs	r0, #2
 800121e:	f7ff ff3a 	bl	8001096 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001222:	23c0      	movs	r3, #192	; 0xc0
 8001224:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122e:	2300      	movs	r3, #0
 8001230:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001232:	2307      	movs	r3, #7
 8001234:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001236:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800123a:	4619      	mov	r1, r3
 800123c:	4804      	ldr	r0, [pc, #16]	; (8001250 <HAL_UART_MspInit+0x88>)
 800123e:	f000 fad3 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001242:	bf00      	nop
 8001244:	3770      	adds	r7, #112	; 0x70
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40013800 	.word	0x40013800
 8001250:	48000400 	.word	0x48000400

08001254 <PendSV_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001266:	f000 f98b 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b086      	sub	sp, #24
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	e00a      	b.n	8001296 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001280:	f3af 8000 	nop.w
 8001284:	4601      	mov	r1, r0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	1c5a      	adds	r2, r3, #1
 800128a:	60ba      	str	r2, [r7, #8]
 800128c:	b2ca      	uxtb	r2, r1
 800128e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	dbf0      	blt.n	8001280 <_read+0x12>
  }

  return len;
 800129e:	687b      	ldr	r3, [r7, #4]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	e009      	b.n	80012ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1c5a      	adds	r2, r3, #1
 80012be:	60ba      	str	r2, [r7, #8]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fed0 	bl	8001068 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	3301      	adds	r3, #1
 80012cc:	617b      	str	r3, [r7, #20]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	dbf1      	blt.n	80012ba <_write+0x12>
  }
  return len;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_close>:

int _close(int file)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001308:	605a      	str	r2, [r3, #4]
  return 0;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_isatty>:

int _isatty(int file)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800132e:	b480      	push	{r7}
 8001330:	b085      	sub	sp, #20
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800133a:	2300      	movs	r3, #0
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001350:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <_sbrk+0x5c>)
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <_sbrk+0x60>)
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d102      	bne.n	800136a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <_sbrk+0x64>)
 8001366:	4a12      	ldr	r2, [pc, #72]	; (80013b0 <_sbrk+0x68>)
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	429a      	cmp	r2, r3
 8001376:	d207      	bcs.n	8001388 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001378:	f003 faf4 	bl	8004964 <__errno>
 800137c:	4603      	mov	r3, r0
 800137e:	220c      	movs	r2, #12
 8001380:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001386:	e009      	b.n	800139c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <_sbrk+0x64>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <_sbrk+0x64>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4413      	add	r3, r2
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <_sbrk+0x64>)
 8001398:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800139a:	68fb      	ldr	r3, [r7, #12]
}
 800139c:	4618      	mov	r0, r3
 800139e:	3718      	adds	r7, #24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20030000 	.word	0x20030000
 80013a8:	00000400 	.word	0x00000400
 80013ac:	200001cc 	.word	0x200001cc
 80013b0:	200001e8 	.word	0x200001e8

080013b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <SystemInit+0x98>)
 80013ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013be:	4a23      	ldr	r2, [pc, #140]	; (800144c <SystemInit+0x98>)
 80013c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80013d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013dc:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80013e0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80013e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <SystemInit+0x9c>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013fe:	f023 0305 	bic.w	r3, r3, #5
 8001402:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800140e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001412:	f023 0301 	bic.w	r3, r3, #1
 8001416:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <SystemInit+0xa0>)
 8001420:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001422:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001426:	4a0b      	ldr	r2, [pc, #44]	; (8001454 <SystemInit+0xa0>)
 8001428:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800142a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001434:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001438:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800143a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	faf6fefb 	.word	0xfaf6fefb
 8001454:	22041000 	.word	0x22041000

08001458 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001458:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145c:	3304      	adds	r3, #4

0800145e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001460:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001462:	d3f9      	bcc.n	8001458 <CopyDataInit>
  bx lr
 8001464:	4770      	bx	lr

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001466:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001468:	3004      	adds	r0, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800146a:	4288      	cmp	r0, r1
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>
  bx lr
 800146e:	4770      	bx	lr

08001470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001474:	f7ff ff9e 	bl	80013b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <LoopForever+0x6>)
 800147a:	490c      	ldr	r1, [pc, #48]	; (80014ac <LoopForever+0xa>)
 800147c:	4a0c      	ldr	r2, [pc, #48]	; (80014b0 <LoopForever+0xe>)
 800147e:	2300      	movs	r3, #0
 8001480:	f7ff ffed 	bl	800145e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001484:	480b      	ldr	r0, [pc, #44]	; (80014b4 <LoopForever+0x12>)
 8001486:	490c      	ldr	r1, [pc, #48]	; (80014b8 <LoopForever+0x16>)
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <LoopForever+0x1a>)
 800148a:	2300      	movs	r3, #0
 800148c:	f7ff ffe7 	bl	800145e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <LoopForever+0x1e>)
 8001492:	490c      	ldr	r1, [pc, #48]	; (80014c4 <LoopForever+0x22>)
 8001494:	2300      	movs	r3, #0
 8001496:	f7ff ffe8 	bl	800146a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800149a:	f003 fa69 	bl	8004970 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800149e:	f7ff fbab 	bl	8000bf8 <main>

080014a2 <LoopForever>:

LoopForever:
  b LoopForever
 80014a2:	e7fe      	b.n	80014a2 <LoopForever>
  ldr   r0, =_estack
 80014a4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80014a8:	20000008 	.word	0x20000008
 80014ac:	20000098 	.word	0x20000098
 80014b0:	08006fbc 	.word	0x08006fbc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80014b4:	20030000 	.word	0x20030000
 80014b8:	20030000 	.word	0x20030000
 80014bc:	0800704c 	.word	0x0800704c
  INIT_BSS _sbss, _ebss
 80014c0:	20000098 	.word	0x20000098
 80014c4:	200001e4 	.word	0x200001e4

080014c8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d2:	2300      	movs	r3, #0
 80014d4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_Init+0x3c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_Init+0x3c>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 f94e 	bl	8001784 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014e8:	2000      	movs	r0, #0
 80014ea:	f000 f80f 	bl	800150c <HAL_InitTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d002      	beq.n	80014fa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	e001      	b.n	80014fe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014fa:	f7ff fe17 	bl	800112c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014fe:	79fb      	ldrb	r3, [r7, #7]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	58004000 	.word	0x58004000

0800150c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <HAL_InitTick+0x6c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d024      	beq.n	800156a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001520:	f001 fbb8 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8001524:	4602      	mov	r2, r0
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x6c>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001530:	fbb3 f3f1 	udiv	r3, r3, r1
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f000 f948 	bl	80017ce <HAL_SYSTICK_Config>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10f      	bne.n	8001564 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2b0f      	cmp	r3, #15
 8001548:	d809      	bhi.n	800155e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800154a:	2200      	movs	r2, #0
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001552:	f000 f922 	bl	800179a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_InitTick+0x70>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e007      	b.n	800156e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e004      	b.n	800156e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	73fb      	strb	r3, [r7, #15]
 8001568:	e001      	b.n	800156e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000030 	.word	0x20000030
 800157c:	2000002c 	.word	0x2000002c

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x20>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	461a      	mov	r2, r3
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_IncTick+0x24>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4413      	add	r3, r2
 8001590:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_IncTick+0x24>)
 8001592:	6013      	str	r3, [r2, #0]
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	20000030 	.word	0x20000030
 80015a4:	200001d0 	.word	0x200001d0

080015a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  return uwTick;
 80015ac:	4b03      	ldr	r3, [pc, #12]	; (80015bc <HAL_GetTick+0x14>)
 80015ae:	681b      	ldr	r3, [r3, #0]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	200001d0 	.word	0x200001d0

080015c0 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80015c4:	4b03      	ldr	r3, [pc, #12]	; (80015d4 <HAL_GetTickPrio+0x14>)
 80015c6:	681b      	ldr	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	2000002c 	.word	0x2000002c

080015d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015e0:	f7ff ffe2 	bl	80015a8 <HAL_GetTick>
 80015e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015f0:	d005      	beq.n	80015fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015f2:	4b0a      	ldr	r3, [pc, #40]	; (800161c <HAL_Delay+0x44>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015fe:	bf00      	nop
 8001600:	f7ff ffd2 	bl	80015a8 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	429a      	cmp	r2, r3
 800160e:	d8f7      	bhi.n	8001600 <HAL_Delay+0x28>
  {
  }
}
 8001610:	bf00      	nop
 8001612:	bf00      	nop
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000030 	.word	0x20000030

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
	...

08001740 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001750:	d301      	bcc.n	8001756 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001752:	2301      	movs	r3, #1
 8001754:	e00f      	b.n	8001776 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001756:	4a0a      	ldr	r2, [pc, #40]	; (8001780 <SysTick_Config+0x40>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175e:	210f      	movs	r1, #15
 8001760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001764:	f7ff ff8e 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <SysTick_Config+0x40>)
 800176a:	2200      	movs	r2, #0
 800176c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <SysTick_Config+0x40>)
 8001770:	2207      	movs	r2, #7
 8001772:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	e000e010 	.word	0xe000e010

08001784 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ff47 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
 80017a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff5e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff90 	bl	80016d8 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5f 	bl	8001684 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffb2 	bl	8001740 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e14c      	b.n	8001a92 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2101      	movs	r1, #1
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	fa01 f303 	lsl.w	r3, r1, r3
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b00      	cmp	r3, #0
 800180c:	f000 813e 	beq.w	8001a8c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b01      	cmp	r3, #1
 800181a:	d005      	beq.n	8001828 <HAL_GPIO_Init+0x40>
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d130      	bne.n	800188a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68da      	ldr	r2, [r3, #12]
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800185e:	2201      	movs	r2, #1
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	091b      	lsrs	r3, r3, #4
 8001874:	f003 0201 	and.w	r2, r3, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	2b03      	cmp	r3, #3
 8001894:	d017      	beq.n	80018c6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	005b      	lsls	r3, r3, #1
 80018a0:	2203      	movs	r2, #3
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689a      	ldr	r2, [r3, #8]
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d123      	bne.n	800191a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	08da      	lsrs	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	3208      	adds	r2, #8
 80018da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4013      	ands	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691a      	ldr	r2, [r3, #16]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	08da      	lsrs	r2, r3, #3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	3208      	adds	r2, #8
 8001914:	6939      	ldr	r1, [r7, #16]
 8001916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0203 	and.w	r2, r3, #3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8098 	beq.w	8001a8c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800195c:	4a54      	ldr	r2, [pc, #336]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	089b      	lsrs	r3, r3, #2
 8001962:	3302      	adds	r3, #2
 8001964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001968:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	220f      	movs	r2, #15
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001986:	d019      	beq.n	80019bc <HAL_GPIO_Init+0x1d4>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <HAL_GPIO_Init+0x2cc>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d013      	beq.n	80019b8 <HAL_GPIO_Init+0x1d0>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d00d      	beq.n	80019b4 <HAL_GPIO_Init+0x1cc>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_GPIO_Init+0x2d4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d007      	beq.n	80019b0 <HAL_GPIO_Init+0x1c8>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a47      	ldr	r2, [pc, #284]	; (8001ac0 <HAL_GPIO_Init+0x2d8>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d101      	bne.n	80019ac <HAL_GPIO_Init+0x1c4>
 80019a8:	2304      	movs	r3, #4
 80019aa:	e008      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019ac:	2307      	movs	r3, #7
 80019ae:	e006      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b0:	2303      	movs	r3, #3
 80019b2:	e004      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e002      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <HAL_GPIO_Init+0x1d6>
 80019bc:	2300      	movs	r3, #0
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	f002 0203 	and.w	r2, r2, #3
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	4093      	lsls	r3, r2
 80019c8:	693a      	ldr	r2, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019ce:	4938      	ldr	r1, [pc, #224]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	089b      	lsrs	r3, r3, #2
 80019d4:	3302      	adds	r3, #2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019dc:	4b39      	ldr	r3, [pc, #228]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a00:	4a30      	ldr	r2, [pc, #192]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a06:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	693a      	ldr	r2, [r7, #16]
 8001a12:	4013      	ands	r3, r2
 8001a14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a2a:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a30:	4b24      	ldr	r3, [pc, #144]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a56:	4a1b      	ldr	r2, [pc, #108]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001a5e:	4b19      	ldr	r3, [pc, #100]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a84:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <HAL_GPIO_Init+0x2dc>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f47f aeab 	bne.w	80017f8 <HAL_GPIO_Init+0x10>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	371c      	adds	r7, #28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40010000 	.word	0x40010000
 8001ab4:	48000400 	.word	0x48000400
 8001ab8:	48000800 	.word	0x48000800
 8001abc:	48000c00 	.word	0x48000c00
 8001ac0:	48001000 	.word	0x48001000
 8001ac4:	58000800 	.word	0x58000800

08001ac8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d002      	beq.n	8001ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e001      	b.n	8001aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	460b      	mov	r3, r1
 8001b02:	807b      	strh	r3, [r7, #2]
 8001b04:	4613      	mov	r3, r2
 8001b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b08:	787b      	ldrb	r3, [r7, #1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b0e:	887a      	ldrh	r2, [r7, #2]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	58000400 	.word	0x58000400

08001b48 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	58000400 	.word	0x58000400

08001b64 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b76:	d101      	bne.n	8001b7c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bd6:	d101      	bne.n	8001bdc <LL_RCC_HSE_IsReady+0x18>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <LL_RCC_HSE_IsReady+0x1a>
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bfa:	6013      	str	r3, [r2, #0]
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001c06:	b480      	push	{r7}
 8001c08:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c18:	6013      	str	r3, [r2, #0]
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c36:	d101      	bne.n	8001c3c <LL_RCC_HSI_IsReady+0x18>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <LL_RCC_HSI_IsReady+0x1a>
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c7e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8001c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d101      	bne.n	8001cce <LL_RCC_HSI48_IsReady+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_RCC_HSI48_IsReady+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001cf2:	bf00      	nop
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d2e:	f043 0304 	orr.w	r3, r3, #4
 8001d32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d36:	bf00      	nop
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d101      	bne.n	8001d7a <LL_RCC_LSE_IsReady+0x18>
 8001d76:	2301      	movs	r3, #1
 8001d78:	e000      	b.n	8001d7c <LL_RCC_LSE_IsReady+0x1a>
 8001d7a:	2300      	movs	r3, #0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001dc0:	bf00      	nop
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr

08001dca <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d101      	bne.n	8001de2 <LL_RCC_LSI1_IsReady+0x18>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_RCC_LSI1_IsReady+0x1a>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e20:	f023 0304 	bic.w	r3, r3, #4
 8001e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b08      	cmp	r3, #8
 8001e44:	d101      	bne.n	8001e4a <LL_RCC_LSI2_IsReady+0x18>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_RCC_LSI2_IsReady+0x1a>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b083      	sub	sp, #12
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	021b      	lsls	r3, r3, #8
 8001e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e72:	4313      	orrs	r3, r2
 8001e74:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	6013      	str	r3, [r2, #0]
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d101      	bne.n	8001ed6 <LL_RCC_MSI_IsReady+0x16>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <LL_RCC_MSI_IsReady+0x18>
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	600b      	str	r3, [r1, #0]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2bb0      	cmp	r3, #176	; 0xb0
 8001f20:	d901      	bls.n	8001f26 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001f22:	23b0      	movs	r3, #176	; 0xb0
 8001f24:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001f26:	687b      	ldr	r3, [r7, #4]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b083      	sub	sp, #12
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 0203 	bic.w	r2, r3, #3
 8001f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 030c 	and.w	r3, r3, #12
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	608b      	str	r3, [r1, #8]
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001fd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fda:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ffe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002002:	f023 020f 	bic.w	r2, r3, #15
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800200e:	4313      	orrs	r3, r2
 8002010:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002028:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002032:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4313      	orrs	r3, r2
 8002062:	608b      	str	r3, [r1, #8]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800207e:	4618      	mov	r0, r3
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800208c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002090:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e6:	6013      	str	r3, [r2, #0]
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80020f2:	b480      	push	{r7}
 80020f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002104:	6013      	str	r3, [r2, #0]
}
 8002106:	bf00      	nop
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002122:	d101      	bne.n	8002128 <LL_RCC_PLL_IsReady+0x18>
 8002124:	2301      	movs	r3, #1
 8002126:	e000      	b.n	800212a <LL_RCC_PLL_IsReady+0x1a>
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	0a1b      	lsrs	r3, r3, #8
 8002140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800214e:	b480      	push	{r7}
 8002150:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002152:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800216a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800217e:	b480      	push	{r7}
 8002180:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0303 	and.w	r3, r3, #3
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800219a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021a8:	d101      	bne.n	80021ae <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ce:	d101      	bne.n	80021d4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f4:	d101      	bne.n	80021fa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002206:	b480      	push	{r7}
 8002208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800220a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002218:	d101      	bne.n	800221e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800221a:	2301      	movs	r3, #1
 800221c:	e000      	b.n	8002220 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800222e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002238:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800223c:	d101      	bne.n	8002242 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b08d      	sub	sp, #52	; 0x34
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e363      	b.n	800292a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 808d 	beq.w	800238a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002270:	f7ff fe89 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002274:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002276:	f7ff ff82 	bl	800217e <LL_RCC_PLL_GetMainSource>
 800227a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800227c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_RCC_OscConfig+0x3e>
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	2b0c      	cmp	r3, #12
 8002286:	d147      	bne.n	8002318 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800228a:	2b01      	cmp	r3, #1
 800228c:	d144      	bne.n	8002318 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e347      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800229e:	f7ff fe34 	bl	8001f0a <LL_RCC_MSI_GetRange>
 80022a2:	4603      	mov	r3, r0
 80022a4:	429c      	cmp	r4, r3
 80022a6:	d914      	bls.n	80022d2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 fd31 	bl	8002d14 <RCC_SetFlashLatencyFromMSIRange>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e336      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff fe0e 	bl	8001ee2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe32 	bl	8001f34 <LL_RCC_MSI_SetCalibTrimming>
 80022d0:	e013      	b.n	80022fa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fe03 	bl	8001ee2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff fe27 	bl	8001f34 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fd12 	bl	8002d14 <RCC_SetFlashLatencyFromMSIRange>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e317      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80022fa:	f000 fccb 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 80022fe:	4603      	mov	r3, r0
 8002300:	4aa4      	ldr	r2, [pc, #656]	; (8002594 <HAL_RCC_OscConfig+0x344>)
 8002302:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002304:	4ba4      	ldr	r3, [pc, #656]	; (8002598 <HAL_RCC_OscConfig+0x348>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f8ff 	bl	800150c <HAL_InitTick>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d039      	beq.n	8002388 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e308      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01e      	beq.n	800235e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002320:	f7ff fdb0 	bl	8001e84 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002324:	f7ff f940 	bl	80015a8 <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800232c:	f7ff f93c 	bl	80015a8 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e2f5      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800233e:	f7ff fdbf 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0f1      	beq.n	800232c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fdc8 	bl	8001ee2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fdec 	bl	8001f34 <LL_RCC_MSI_SetCalibTrimming>
 800235c:	e015      	b.n	800238a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800235e:	f7ff fda0 	bl	8001ea2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002362:	f7ff f921 	bl	80015a8 <HAL_GetTick>
 8002366:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002368:	e008      	b.n	800237c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800236a:	f7ff f91d 	bl	80015a8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e2d6      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800237c:	f7ff fda0 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f1      	bne.n	800236a <HAL_RCC_OscConfig+0x11a>
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002388:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d047      	beq.n	8002426 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002396:	f7ff fdf6 	bl	8001f86 <LL_RCC_GetSysClkSource>
 800239a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800239c:	f7ff feef 	bl	800217e <LL_RCC_PLL_GetMainSource>
 80023a0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b08      	cmp	r3, #8
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_OscConfig+0x164>
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2b0c      	cmp	r3, #12
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b03      	cmp	r3, #3
 80023b2:	d105      	bne.n	80023c0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d134      	bne.n	8002426 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e2b4      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_OscConfig+0x180>
 80023ca:	f7ff fbdd 	bl	8001b88 <LL_RCC_HSE_Enable>
 80023ce:	e001      	b.n	80023d4 <HAL_RCC_OscConfig+0x184>
 80023d0:	f7ff fbe9 	bl	8001ba6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d012      	beq.n	8002402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7ff f8e4 	bl	80015a8 <HAL_GetTick>
 80023e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023e4:	f7ff f8e0 	bl	80015a8 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e299      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80023f6:	f7ff fbe5 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f1      	beq.n	80023e4 <HAL_RCC_OscConfig+0x194>
 8002400:	e011      	b.n	8002426 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002402:	f7ff f8d1 	bl	80015a8 <HAL_GetTick>
 8002406:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800240a:	f7ff f8cd 	bl	80015a8 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	; 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e286      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800241c:	f7ff fbd2 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f1      	bne.n	800240a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04c      	beq.n	80024cc <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002432:	f7ff fda8 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002436:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002438:	f7ff fea1 	bl	800217e <LL_RCC_PLL_GetMainSource>
 800243c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800243e:	69bb      	ldr	r3, [r7, #24]
 8002440:	2b04      	cmp	r3, #4
 8002442:	d005      	beq.n	8002450 <HAL_RCC_OscConfig+0x200>
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	2b0c      	cmp	r3, #12
 8002448:	d10e      	bne.n	8002468 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d10b      	bne.n	8002468 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e266      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fbf1 	bl	8001c48 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002466:	e031      	b.n	80024cc <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d019      	beq.n	80024a4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	f7ff fbba 	bl	8001be8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002474:	f7ff f898 	bl	80015a8 <HAL_GetTick>
 8002478:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff f894 	bl	80015a8 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e24d      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800248e:	f7ff fbc9 	bl	8001c24 <LL_RCC_HSI_IsReady>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f1      	beq.n	800247c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fbd3 	bl	8001c48 <LL_RCC_HSI_SetCalibTrimming>
 80024a2:	e013      	b.n	80024cc <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a4:	f7ff fbaf 	bl	8001c06 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a8:	f7ff f87e 	bl	80015a8 <HAL_GetTick>
 80024ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024b0:	f7ff f87a 	bl	80015a8 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e233      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80024c2:	f7ff fbaf 	bl	8001c24 <LL_RCC_HSI_IsReady>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1f1      	bne.n	80024b0 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d106      	bne.n	80024e6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a3 	beq.w	800262c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d076      	beq.n	80025dc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0310 	and.w	r3, r3, #16
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d046      	beq.n	8002588 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80024fa:	f7ff fc66 	bl	8001dca <LL_RCC_LSI1_IsReady>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002504:	f7ff fc3f 	bl	8001d86 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002508:	f7ff f84e 	bl	80015a8 <HAL_GetTick>
 800250c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002510:	f7ff f84a 	bl	80015a8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e203      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002522:	f7ff fc52 	bl	8001dca <LL_RCC_LSI1_IsReady>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0f1      	beq.n	8002510 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800252c:	f7ff fc5f 	bl	8001dee <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002530:	f7ff f83a 	bl	80015a8 <HAL_GetTick>
 8002534:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002536:	e008      	b.n	800254a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002538:	f7ff f836 	bl	80015a8 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d901      	bls.n	800254a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e1ef      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800254a:	f7ff fc72 	bl	8001e32 <LL_RCC_LSI2_IsReady>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f1      	beq.n	8002538 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fc7c 	bl	8001e56 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800255e:	f7ff fc23 	bl	8001da8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7ff f821 	bl	80015a8 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800256a:	f7ff f81d 	bl	80015a8 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1d6      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800257c:	f7ff fc25 	bl	8001dca <LL_RCC_LSI1_IsReady>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f1      	bne.n	800256a <HAL_RCC_OscConfig+0x31a>
 8002586:	e051      	b.n	800262c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8002588:	f7ff fbfd 	bl	8001d86 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f80c 	bl	80015a8 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8002592:	e00c      	b.n	80025ae <HAL_RCC_OscConfig+0x35e>
 8002594:	20000028 	.word	0x20000028
 8002598:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800259c:	f7ff f804 	bl	80015a8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e1bd      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80025ae:	f7ff fc0c 	bl	8001dca <LL_RCC_LSI1_IsReady>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d0f1      	beq.n	800259c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80025b8:	f7ff fc2a 	bl	8001e10 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025be:	f7fe fff3 	bl	80015a8 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e1ac      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80025d0:	f7ff fc2f 	bl	8001e32 <LL_RCC_LSI2_IsReady>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f1      	bne.n	80025be <HAL_RCC_OscConfig+0x36e>
 80025da:	e027      	b.n	800262c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80025dc:	f7ff fc18 	bl	8001e10 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7fe ffe2 	bl	80015a8 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80025e8:	f7fe ffde 	bl	80015a8 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e197      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80025fa:	f7ff fc1a 	bl	8001e32 <LL_RCC_LSI2_IsReady>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f1      	bne.n	80025e8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002604:	f7ff fbd0 	bl	8001da8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe ffce 	bl	80015a8 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002610:	f7fe ffca 	bl	80015a8 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e183      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002622:	f7ff fbd2 	bl	8001dca <LL_RCC_LSI1_IsReady>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1f1      	bne.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	2b00      	cmp	r3, #0
 8002636:	d05b      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002638:	4ba7      	ldr	r3, [pc, #668]	; (80028d8 <HAL_RCC_OscConfig+0x688>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002640:	2b00      	cmp	r3, #0
 8002642:	d114      	bne.n	800266e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002644:	f7ff fa70 	bl	8001b28 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002648:	f7fe ffae 	bl	80015a8 <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002650:	f7fe ffaa 	bl	80015a8 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e163      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002662:	4b9d      	ldr	r3, [pc, #628]	; (80028d8 <HAL_RCC_OscConfig+0x688>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0x42c>
 8002676:	f7ff fb30 	bl	8001cda <LL_RCC_LSE_Enable>
 800267a:	e00c      	b.n	8002696 <HAL_RCC_OscConfig+0x446>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b05      	cmp	r3, #5
 8002682:	d104      	bne.n	800268e <HAL_RCC_OscConfig+0x43e>
 8002684:	f7ff fb4b 	bl	8001d1e <LL_RCC_LSE_EnableBypass>
 8002688:	f7ff fb27 	bl	8001cda <LL_RCC_LSE_Enable>
 800268c:	e003      	b.n	8002696 <HAL_RCC_OscConfig+0x446>
 800268e:	f7ff fb35 	bl	8001cfc <LL_RCC_LSE_Disable>
 8002692:	f7ff fb55 	bl	8001d40 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7fe ff83 	bl	80015a8 <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7fe ff7f 	bl	80015a8 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e136      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026bc:	f7ff fb51 	bl	8001d62 <LL_RCC_LSE_IsReady>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0ef      	beq.n	80026a6 <HAL_RCC_OscConfig+0x456>
 80026c6:	e013      	b.n	80026f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe ff6e 	bl	80015a8 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7fe ff6a 	bl	80015a8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	f241 3288 	movw	r2, #5000	; 0x1388
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e121      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80026e6:	f7ff fb3c 	bl	8001d62 <LL_RCC_LSE_IsReady>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1ef      	bne.n	80026d0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02c      	beq.n	8002756 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d014      	beq.n	800272e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002704:	f7ff fab5 	bl	8001c72 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002708:	f7fe ff4e 	bl	80015a8 <HAL_GetTick>
 800270c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002710:	f7fe ff4a 	bl	80015a8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e103      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002722:	f7ff fac8 	bl	8001cb6 <LL_RCC_HSI48_IsReady>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f1      	beq.n	8002710 <HAL_RCC_OscConfig+0x4c0>
 800272c:	e013      	b.n	8002756 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800272e:	f7ff fab1 	bl	8001c94 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7fe ff39 	bl	80015a8 <HAL_GetTick>
 8002736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800273a:	f7fe ff35 	bl	80015a8 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0ee      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800274c:	f7ff fab3 	bl	8001cb6 <LL_RCC_HSI48_IsReady>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f1      	bne.n	800273a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	2b00      	cmp	r3, #0
 800275c:	f000 80e4 	beq.w	8002928 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002760:	f7ff fc11 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002764:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8002766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	2b02      	cmp	r3, #2
 8002774:	f040 80b4 	bne.w	80028e0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0203 	and.w	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	429a      	cmp	r2, r3
 8002784:	d123      	bne.n	80027ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d11c      	bne.n	80027ce <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	0a1b      	lsrs	r3, r3, #8
 8002798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d114      	bne.n	80027ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d10d      	bne.n	80027ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d106      	bne.n	80027ce <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d05d      	beq.n	800288a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	2b0c      	cmp	r3, #12
 80027d2:	d058      	beq.n	8002886 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0a1      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027e6:	f7ff fc84 	bl	80020f2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027ea:	f7fe fedd 	bl	80015a8 <HAL_GetTick>
 80027ee:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f2:	f7fe fed9 	bl	80015a8 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e092      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002804:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1ef      	bne.n	80027f2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	4b30      	ldr	r3, [pc, #192]	; (80028dc <HAL_RCC_OscConfig+0x68c>)
 800281a:	4013      	ands	r3, r2
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800282a:	0212      	lsls	r2, r2, #8
 800282c:	4311      	orrs	r1, r2
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800283e:	430a      	orrs	r2, r1
 8002840:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002844:	4313      	orrs	r3, r2
 8002846:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002848:	f7ff fc44 	bl	80020d4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800284c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800285a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800285c:	f7fe fea4 	bl	80015a8 <HAL_GetTick>
 8002860:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002864:	f7fe fea0 	bl	80015a8 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e059      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0ef      	beq.n	8002864 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002884:	e050      	b.n	8002928 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e04f      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d147      	bne.n	8002928 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002898:	f7ff fc1c 	bl	80020d4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800289c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ac:	f7fe fe7c 	bl	80015a8 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fe78 	bl	80015a8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e031      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ef      	beq.n	80028b4 <HAL_RCC_OscConfig+0x664>
 80028d4:	e028      	b.n	8002928 <HAL_RCC_OscConfig+0x6d8>
 80028d6:	bf00      	nop
 80028d8:	58000400 	.word	0x58000400
 80028dc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b0c      	cmp	r3, #12
 80028e4:	d01e      	beq.n	8002924 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	f7ff fc04 	bl	80020f2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ea:	f7fe fe5d 	bl	80015a8 <HAL_GetTick>
 80028ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe fe59 	bl	80015a8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e012      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ef      	bne.n	80028f2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800291c:	4b05      	ldr	r3, [pc, #20]	; (8002934 <HAL_RCC_OscConfig+0x6e4>)
 800291e:	4013      	ands	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]
 8002922:	e001      	b.n	8002928 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3734      	adds	r7, #52	; 0x34
 800292e:	46bd      	mov	sp, r7
 8002930:	bd90      	pop	{r4, r7, pc}
 8002932:	bf00      	nop
 8002934:	eefefffc 	.word	0xeefefffc

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e12d      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b98      	ldr	r3, [pc, #608]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d91b      	bls.n	8002992 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b95      	ldr	r3, [pc, #596]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4993      	ldr	r1, [pc, #588]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800296a:	f7fe fe1d 	bl	80015a8 <HAL_GetTick>
 800296e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002970:	e008      	b.n	8002984 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002972:	f7fe fe19 	bl	80015a8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e111      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002984:	4b8a      	ldr	r3, [pc, #552]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d1ef      	bne.n	8002972 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d016      	beq.n	80029cc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fafb 	bl	8001f9e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029a8:	f7fe fdfe 	bl	80015a8 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029b0:	f7fe fdfa 	bl	80015a8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e0f2      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029c2:	f7ff fbe8 	bl	8002196 <LL_RCC_IsActiveFlag_HPRE>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f1      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0320 	and.w	r3, r3, #32
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d016      	beq.n	8002a06 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	695b      	ldr	r3, [r3, #20]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff faf2 	bl	8001fc6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029e2:	f7fe fde1 	bl	80015a8 <HAL_GetTick>
 80029e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029ea:	f7fe fddd 	bl	80015a8 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e0d5      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80029fc:	f7ff fbdd 	bl	80021ba <LL_RCC_IsActiveFlag_C2HPRE>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f1      	beq.n	80029ea <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff faeb 	bl	8001ff2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a1c:	f7fe fdc4 	bl	80015a8 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a24:	f7fe fdc0 	bl	80015a8 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e0b8      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002a36:	f7ff fbd3 	bl	80021e0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f1      	beq.n	8002a24 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d016      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fae5 	bl	8002020 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a56:	f7fe fda7 	bl	80015a8 <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a5e:	f7fe fda3 	bl	80015a8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e09b      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a70:	f7ff fbc9 	bl	8002206 <LL_RCC_IsActiveFlag_PPRE1>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f1      	beq.n	8002a5e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d017      	beq.n	8002ab6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fadb 	bl	8002048 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a92:	f7fe fd89 	bl	80015a8 <HAL_GetTick>
 8002a96:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a9a:	f7fe fd85 	bl	80015a8 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e07d      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002aac:	f7ff fbbd 	bl	800222a <LL_RCC_IsActiveFlag_PPRE2>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0f1      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d043      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d106      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002aca:	f7ff f87b 	bl	8001bc4 <LL_RCC_HSE_IsReady>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d11e      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e067      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002ae0:	f7ff fb16 	bl	8002110 <LL_RCC_PLL_IsReady>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d113      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e05c      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002af6:	f7ff f9e3 	bl	8001ec0 <LL_RCC_MSI_IsReady>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d108      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e051      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002b04:	f7ff f88e 	bl	8001c24 <LL_RCC_HSI_IsReady>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e04a      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fa21 	bl	8001f5e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b1c:	f7fe fd44 	bl	80015a8 <HAL_GetTick>
 8002b20:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b24:	f7fe fd40 	bl	80015a8 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e036      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	f7ff fa24 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d1ec      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4a:	4b19      	ldr	r3, [pc, #100]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d21b      	bcs.n	8002b90 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f023 0207 	bic.w	r2, r3, #7
 8002b60:	4913      	ldr	r1, [pc, #76]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b68:	f7fe fd1e 	bl	80015a8 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b70:	f7fe fd1a 	bl	80015a8 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e012      	b.n	8002ba8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_RCC_ClockConfig+0x278>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d1ef      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b90:	f000 f880 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002b94:	4603      	mov	r3, r0
 8002b96:	4a07      	ldr	r2, [pc, #28]	; (8002bb4 <HAL_RCC_ClockConfig+0x27c>)
 8002b98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8002b9a:	f7fe fd11 	bl	80015c0 <HAL_GetTickPrio>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7fe fcb3 	bl	800150c <HAL_InitTick>
 8002ba6:	4603      	mov	r3, r0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3710      	adds	r7, #16
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	58004000 	.word	0x58004000
 8002bb4:	20000028 	.word	0x20000028

08002bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	f7ff f9e2 	bl	8001f86 <LL_RCC_GetSysClkSource>
 8002bc2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002bca:	f7ff f99e 	bl	8001f0a <LL_RCC_MSI_GetRange>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	e04b      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d102      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002be6:	4b28      	ldr	r3, [pc, #160]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e045      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d10a      	bne.n	8002c08 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002bf2:	f7fe ffb7 	bl	8001b64 <LL_RCC_HSE_IsEnabledDiv2>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d102      	bne.n	8002c02 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002bfe:	60fb      	str	r3, [r7, #12]
 8002c00:	e03a      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c02:	4b23      	ldr	r3, [pc, #140]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e037      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c08:	f7ff fab9 	bl	800217e <LL_RCC_PLL_GetMainSource>
 8002c0c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d003      	beq.n	8002c1c <HAL_RCC_GetSysClockFreq+0x64>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d003      	beq.n	8002c22 <HAL_RCC_GetSysClockFreq+0x6a>
 8002c1a:	e00d      	b.n	8002c38 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c1c:	4b1a      	ldr	r3, [pc, #104]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c1e:	60bb      	str	r3, [r7, #8]
        break;
 8002c20:	e015      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c22:	f7fe ff9f 	bl	8001b64 <LL_RCC_HSE_IsEnabledDiv2>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d102      	bne.n	8002c32 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c2c:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd4>)
 8002c2e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c30:	e00d      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002c32:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_RCC_GetSysClockFreq+0xd8>)
 8002c34:	60bb      	str	r3, [r7, #8]
        break;
 8002c36:	e00a      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002c38:	f7ff f967 	bl	8001f0a <LL_RCC_MSI_GetRange>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	091b      	lsrs	r3, r3, #4
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c4a:	60bb      	str	r3, [r7, #8]
        break;
 8002c4c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002c4e:	f7ff fa71 	bl	8002134 <LL_RCC_PLL_GetN>
 8002c52:	4602      	mov	r2, r0
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	fb03 f402 	mul.w	r4, r3, r2
 8002c5a:	f7ff fa84 	bl	8002166 <LL_RCC_PLL_GetDivider>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	3301      	adds	r3, #1
 8002c64:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c68:	f7ff fa71 	bl	800214e <LL_RCC_PLL_GetR>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	0f5b      	lsrs	r3, r3, #29
 8002c70:	3301      	adds	r3, #1
 8002c72:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c76:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c78:	68fb      	ldr	r3, [r7, #12]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd90      	pop	{r4, r7, pc}
 8002c82:	bf00      	nop
 8002c84:	08006eac 	.word	0x08006eac
 8002c88:	00f42400 	.word	0x00f42400
 8002c8c:	005b8d80 	.word	0x005b8d80
 8002c90:	00b71b00 	.word	0x00b71b00

08002c94 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c94:	b598      	push	{r3, r4, r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002c98:	f7ff ff8e 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8002c9c:	4604      	mov	r4, r0
 8002c9e:	f7ff f9e7 	bl	8002070 <LL_RCC_GetAHBPrescaler>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	091b      	lsrs	r3, r3, #4
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	4a03      	ldr	r2, [pc, #12]	; (8002cb8 <HAL_RCC_GetHCLKFreq+0x24>)
 8002cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	bd98      	pop	{r3, r4, r7, pc}
 8002cb8:	08006e4c 	.word	0x08006e4c

08002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cbc:	b598      	push	{r3, r4, r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cc0:	f7ff ffe8 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4604      	mov	r4, r0
 8002cc6:	f7ff f9ed 	bl	80020a4 <LL_RCC_GetAPB1Prescaler>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	4a04      	ldr	r2, [pc, #16]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd98      	pop	{r3, r4, r7, pc}
 8002ce4:	08006e8c 	.word	0x08006e8c

08002ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce8:	b598      	push	{r3, r4, r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002cec:	f7ff ffd2 	bl	8002c94 <HAL_RCC_GetHCLKFreq>
 8002cf0:	4604      	mov	r4, r0
 8002cf2:	f7ff f9e3 	bl	80020bc <LL_RCC_GetAPB2Prescaler>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	0adb      	lsrs	r3, r3, #11
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd98      	pop	{r3, r4, r7, pc}
 8002d10:	08006e8c 	.word	0x08006e8c

08002d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2bb0      	cmp	r3, #176	; 0xb0
 8002d20:	d903      	bls.n	8002d2a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e007      	b.n	8002d3a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	4a11      	ldr	r2, [pc, #68]	; (8002d78 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002d3a:	f7ff f9a5 	bl	8002088 <LL_RCC_GetAHB4Prescaler>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	4a0d      	ldr	r2, [pc, #52]	; (8002d7c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d52:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4a0a      	ldr	r2, [pc, #40]	; (8002d80 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	0c9c      	lsrs	r4, r3, #18
 8002d5e:	f7fe fef3 	bl	8001b48 <HAL_PWREx_GetVoltageRange>
 8002d62:	4603      	mov	r3, r0
 8002d64:	4619      	mov	r1, r3
 8002d66:	4620      	mov	r0, r4
 8002d68:	f000 f80c 	bl	8002d84 <RCC_SetFlashLatency>
 8002d6c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd90      	pop	{r4, r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08006eac 	.word	0x08006eac
 8002d7c:	08006e4c 	.word	0x08006e4c
 8002d80:	431bde83 	.word	0x431bde83

08002d84 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002d84:	b590      	push	{r4, r7, lr}
 8002d86:	b093      	sub	sp, #76	; 0x4c
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002d8e:	4b37      	ldr	r3, [pc, #220]	; (8002e6c <RCC_SetFlashLatency+0xe8>)
 8002d90:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002d9a:	4a35      	ldr	r2, [pc, #212]	; (8002e70 <RCC_SetFlashLatency+0xec>)
 8002d9c:	f107 031c 	add.w	r3, r7, #28
 8002da0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002da2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002da6:	4b33      	ldr	r3, [pc, #204]	; (8002e74 <RCC_SetFlashLatency+0xf0>)
 8002da8:	f107 040c 	add.w	r4, r7, #12
 8002dac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002db2:	2300      	movs	r3, #0
 8002db4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dbc:	d11a      	bne.n	8002df4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	643b      	str	r3, [r7, #64]	; 0x40
 8002dc2:	e013      	b.n	8002dec <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	3348      	adds	r3, #72	; 0x48
 8002dca:	443b      	add	r3, r7
 8002dcc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d807      	bhi.n	8002de6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002dd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	3348      	adds	r3, #72	; 0x48
 8002ddc:	443b      	add	r3, r7
 8002dde:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002de2:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002de4:	e020      	b.n	8002e28 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de8:	3301      	adds	r3, #1
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
 8002dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dee:	2b03      	cmp	r3, #3
 8002df0:	d9e8      	bls.n	8002dc4 <RCC_SetFlashLatency+0x40>
 8002df2:	e019      	b.n	8002e28 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df8:	e013      	b.n	8002e22 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	3348      	adds	r3, #72	; 0x48
 8002e00:	443b      	add	r3, r7
 8002e02:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d807      	bhi.n	8002e1c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3348      	adds	r3, #72	; 0x48
 8002e12:	443b      	add	r3, r7
 8002e14:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002e1a:	e005      	b.n	8002e28 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e1e:	3301      	adds	r3, #1
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d9e8      	bls.n	8002dfa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <RCC_SetFlashLatency+0xf4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 0207 	bic.w	r2, r3, #7
 8002e30:	4911      	ldr	r1, [pc, #68]	; (8002e78 <RCC_SetFlashLatency+0xf4>)
 8002e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002e38:	f7fe fbb6 	bl	80015a8 <HAL_GetTick>
 8002e3c:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e3e:	e008      	b.n	8002e52 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002e40:	f7fe fbb2 	bl	80015a8 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e007      	b.n	8002e62 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <RCC_SetFlashLatency+0xf4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d1ef      	bne.n	8002e40 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	374c      	adds	r7, #76	; 0x4c
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd90      	pop	{r4, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08005b00 	.word	0x08005b00
 8002e70:	08005b10 	.word	0x08005b10
 8002e74:	08005b1c 	.word	0x08005b1c
 8002e78:	58004000 	.word	0x58004000

08002e7c <LL_RCC_LSE_IsEnabled>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <LL_RCC_LSE_IsEnabled+0x18>
 8002e90:	2301      	movs	r3, #1
 8002e92:	e000      	b.n	8002e96 <LL_RCC_LSE_IsEnabled+0x1a>
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <LL_RCC_LSE_IsReady>:
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d101      	bne.n	8002eb8 <LL_RCC_LSE_IsReady+0x18>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e000      	b.n	8002eba <LL_RCC_LSE_IsReady+0x1a>
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <LL_RCC_SetRFWKPClockSource>:
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ed4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ed8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002ee4:	bf00      	nop
 8002ee6:	370c      	adds	r7, #12
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <LL_RCC_SetSMPSClockSource>:
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <LL_RCC_SetSMPSPrescaler>:
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_RCC_SetUSARTClockSource>:
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f50:	f023 0203 	bic.w	r2, r3, #3
 8002f54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_RCC_SetLPUARTClockSource>:
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_RCC_SetI2CClockSource>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fa4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	091b      	lsrs	r3, r3, #4
 8002fac:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <LL_RCC_SetLPTIMClockSource>:
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0c1b      	lsrs	r3, r3, #16
 8002fe6:	041b      	lsls	r3, r3, #16
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <LL_RCC_SetSAIClockSource>:
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800300e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003016:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800301a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4313      	orrs	r3, r2
 8003022:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <LL_RCC_SetRNGClockSource>:
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003046:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <LL_RCC_SetCLK48ClockSource>:
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <LL_RCC_SetUSBClockSource>:
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b082      	sub	sp, #8
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f7ff ffe3 	bl	800305e <LL_RCC_SetCLK48ClockSource>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <LL_RCC_SetADCClockSource>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <LL_RCC_SetRTCClockSource>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80030d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <LL_RCC_GetRTCClockSource>:
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80030fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003104:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003108:	4618      	mov	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <LL_RCC_ForceBackupDomainReset>:
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800311a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800312a:	bf00      	nop
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <LL_RCC_PLLSAI1_Enable>:
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003168:	6013      	str	r3, [r2, #0]
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <LL_RCC_PLLSAI1_Disable>:
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <LL_RCC_PLLSAI1_IsReady>:
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031a4:	d101      	bne.n	80031aa <LL_RCC_PLLSAI1_IsReady+0x18>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_RCC_PLLSAI1_IsReady+0x1a>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b088      	sub	sp, #32
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80031be:	2300      	movs	r3, #0
 80031c0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80031c2:	2300      	movs	r3, #0
 80031c4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d034      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031da:	d021      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80031dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80031e0:	d81b      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031e6:	d01d      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80031e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031ec:	d815      	bhi.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x54>
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d110      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003206:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003208:	e00d      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f947 	bl	80034a2 <RCCEx_PLLSAI1_ConfigNP>
 8003214:	4603      	mov	r3, r0
 8003216:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003218:	e005      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	77fb      	strb	r3, [r7, #31]
        break;
 800321e:	e002      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003220:	bf00      	nop
 8003222:	e000      	b.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff fee8 	bl	8003006 <LL_RCC_SetSAIClockSource>
 8003236:	e001      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003238:	7ffb      	ldrb	r3, [r7, #31]
 800323a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003244:	2b00      	cmp	r3, #0
 8003246:	d046      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003248:	f7ff ff56 	bl	80030f8 <LL_RCC_GetRTCClockSource>
 800324c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	429a      	cmp	r2, r3
 8003256:	d03c      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003258:	f7fe fc66 	bl	8001b28 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	4618      	mov	r0, r3
 8003268:	f7ff ff30 	bl	80030cc <LL_RCC_SetRTCClockSource>
 800326c:	e02e      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800326e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003276:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003278:	f7ff ff4b 	bl	8003112 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800327c:	f7ff ff5a 	bl	8003134 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800328e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003298:	f7ff fdf0 	bl	8002e7c <LL_RCC_LSE_IsEnabled>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d114      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032a2:	f7fe f981 	bl	80015a8 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80032a8:	e00b      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032aa:	f7fe f97d 	bl	80015a8 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d902      	bls.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	77fb      	strb	r3, [r7, #31]
              break;
 80032c0:	e004      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80032c2:	f7ff fded 	bl	8002ea0 <LL_RCC_LSE_IsReady>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
 80032ce:	77bb      	strb	r3, [r7, #30]
 80032d0:	e001      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d004      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7ff fe2a 	bl	8002f40 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff fe35 	bl	8002f6c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d004      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff fe5d 	bl	8002fd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fe52 	bl	8002fd2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d004      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fe2a 	bl	8002f98 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b00      	cmp	r3, #0
 800334e:	d004      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	4618      	mov	r0, r3
 8003356:	f7ff fe1f 	bl	8002f98 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d022      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff fe8d 	bl	800308a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003374:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003378:	d107      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003384:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003388:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800338e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003392:	d10b      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	3304      	adds	r3, #4
 8003398:	4618      	mov	r0, r3
 800339a:	f000 f8dd 	bl	8003558 <RCCEx_PLLSAI1_ConfigNQ>
 800339e:	4603      	mov	r3, r0
 80033a0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80033a2:	7ffb      	ldrb	r3, [r7, #31]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
 80033aa:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d02b      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d008      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033ca:	d003      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff fe2a 	bl	8003032 <LL_RCC_SetRNGClockSource>
 80033de:	e00a      	b.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7ff fe21 	bl	8003032 <LL_RCC_SetRNGClockSource>
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f7ff fe34 	bl	800305e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80033fe:	d107      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003418:	2b00      	cmp	r3, #0
 800341a:	d022      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fe3d 	bl	80030a0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800342e:	d107      	bne.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003430:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800343a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003448:	d10b      	bne.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f8dd 	bl	800360e <RCCEx_PLLSAI1_ConfigNR>
 8003454:	4603      	mov	r3, r0
 8003456:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800345e:	7ffb      	ldrb	r3, [r7, #31]
 8003460:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d004      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff fd26 	bl	8002ec4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003488:	4618      	mov	r0, r3
 800348a:	f7ff fd45 	bl	8002f18 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fd2c 	bl	8002ef0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003498:	7fbb      	ldrb	r3, [r7, #30]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3720      	adds	r7, #32
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034aa:	2300      	movs	r3, #0
 80034ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80034ae:	f7ff fe61 	bl	8003174 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80034b2:	f7fe f879 	bl	80015a8 <HAL_GetTick>
 80034b6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034b8:	e009      	b.n	80034ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034ba:	f7fe f875 	bl	80015a8 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d902      	bls.n	80034ce <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	73fb      	strb	r3, [r7, #15]
      break;
 80034cc:	e004      	b.n	80034d8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80034ce:	f7ff fe60 	bl	8003192 <LL_RCC_PLLSAI1_IsReady>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f0      	bne.n	80034ba <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d137      	bne.n	800354e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f2:	4313      	orrs	r3, r2
 80034f4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80034f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003508:	4313      	orrs	r3, r2
 800350a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800350c:	f7ff fe23 	bl	8003156 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fe f84a 	bl	80015a8 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003516:	e009      	b.n	800352c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003518:	f7fe f846 	bl	80015a8 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	73fb      	strb	r3, [r7, #15]
        break;
 800352a:	e004      	b.n	8003536 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800352c:	f7ff fe31 	bl	8003192 <LL_RCC_PLLSAI1_IsReady>
 8003530:	4603      	mov	r3, r0
 8003532:	2b01      	cmp	r3, #1
 8003534:	d1f0      	bne.n	8003518 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003536:	7bfb      	ldrb	r3, [r7, #15]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d108      	bne.n	800354e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800353c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800354a:	4313      	orrs	r3, r2
 800354c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3710      	adds	r7, #16
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003564:	f7ff fe06 	bl	8003174 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003568:	f7fe f81e 	bl	80015a8 <HAL_GetTick>
 800356c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800356e:	e009      	b.n	8003584 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003570:	f7fe f81a 	bl	80015a8 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d902      	bls.n	8003584 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	73fb      	strb	r3, [r7, #15]
      break;
 8003582:	e004      	b.n	800358e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003584:	f7ff fe05 	bl	8003192 <LL_RCC_PLLSAI1_IsReady>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d137      	bne.n	8003604 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a8:	4313      	orrs	r3, r2
 80035aa:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035be:	4313      	orrs	r3, r2
 80035c0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80035c2:	f7ff fdc8 	bl	8003156 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c6:	f7fd ffef 	bl	80015a8 <HAL_GetTick>
 80035ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035cc:	e009      	b.n	80035e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ce:	f7fd ffeb 	bl	80015a8 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d902      	bls.n	80035e2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	73fb      	strb	r3, [r7, #15]
        break;
 80035e0:	e004      	b.n	80035ec <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80035e2:	f7ff fdd6 	bl	8003192 <LL_RCC_PLLSAI1_IsReady>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d1f0      	bne.n	80035ce <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80035ec:	7bfb      	ldrb	r3, [r7, #15]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d108      	bne.n	8003604 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80035f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003600:	4313      	orrs	r3, r2
 8003602:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003604:	7bfb      	ldrb	r3, [r7, #15]
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800361a:	f7ff fdab 	bl	8003174 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800361e:	f7fd ffc3 	bl	80015a8 <HAL_GetTick>
 8003622:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003624:	e009      	b.n	800363a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003626:	f7fd ffbf 	bl	80015a8 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d902      	bls.n	800363a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	73fb      	strb	r3, [r7, #15]
      break;
 8003638:	e004      	b.n	8003644 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800363a:	f7ff fdaa 	bl	8003192 <LL_RCC_PLLSAI1_IsReady>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003644:	7bfb      	ldrb	r3, [r7, #15]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d137      	bne.n	80036ba <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800364a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800365e:	4313      	orrs	r3, r2
 8003660:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003674:	4313      	orrs	r3, r2
 8003676:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003678:	f7ff fd6d 	bl	8003156 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800367c:	f7fd ff94 	bl	80015a8 <HAL_GetTick>
 8003680:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003682:	e009      	b.n	8003698 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003684:	f7fd ff90 	bl	80015a8 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b02      	cmp	r3, #2
 8003690:	d902      	bls.n	8003698 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	73fb      	strb	r3, [r7, #15]
        break;
 8003696:	e004      	b.n	80036a2 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003698:	f7ff fd7b 	bl	8003192 <LL_RCC_PLLSAI1_IsReady>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d1f0      	bne.n	8003684 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d108      	bne.n	80036ba <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80036a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ac:	691a      	ldr	r2, [r3, #16]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036b6:	4313      	orrs	r3, r2
 80036b8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80036ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}

080036c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e095      	b.n	8003802 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d108      	bne.n	80036f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d009      	beq.n	80036fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	61da      	str	r2, [r3, #28]
 80036ee:	e005      	b.n	80036fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fd10 	bl	800113c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003732:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800373c:	d902      	bls.n	8003744 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]
 8003742:	e002      	b.n	800374a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003748:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003752:	d007      	beq.n	8003764 <HAL_SPI_Init+0xa0>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037a6:	ea42 0103 	orr.w	r1, r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 0204 	and.w	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	f003 0310 	and.w	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80037e0:	ea42 0103 	orr.w	r1, r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b088      	sub	sp, #32
 800380e:	af00      	add	r7, sp, #0
 8003810:	60f8      	str	r0, [r7, #12]
 8003812:	60b9      	str	r1, [r7, #8]
 8003814:	603b      	str	r3, [r7, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800381a:	2300      	movs	r3, #0
 800381c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_SPI_Transmit+0x22>
 8003828:	2302      	movs	r3, #2
 800382a:	e158      	b.n	8003ade <HAL_SPI_Transmit+0x2d4>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003834:	f7fd feb8 	bl	80015a8 <HAL_GetTick>
 8003838:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d002      	beq.n	8003850 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800384a:	2302      	movs	r3, #2
 800384c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800384e:	e13d      	b.n	8003acc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d002      	beq.n	800385c <HAL_SPI_Transmit+0x52>
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d102      	bne.n	8003862 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003860:	e134      	b.n	8003acc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2203      	movs	r2, #3
 8003866:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	68ba      	ldr	r2, [r7, #8]
 8003874:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	88fa      	ldrh	r2, [r7, #6]
 800387a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	88fa      	ldrh	r2, [r7, #6]
 8003880:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038ac:	d10f      	bne.n	80038ce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038bc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038cc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d8:	2b40      	cmp	r3, #64	; 0x40
 80038da:	d007      	beq.n	80038ec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038f4:	d94b      	bls.n	800398e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d002      	beq.n	8003904 <HAL_SPI_Transmit+0xfa>
 80038fe:	8afb      	ldrh	r3, [r7, #22]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d13e      	bne.n	8003982 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	881a      	ldrh	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003914:	1c9a      	adds	r2, r3, #2
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003928:	e02b      	b.n	8003982 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b02      	cmp	r3, #2
 8003936:	d112      	bne.n	800395e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	881a      	ldrh	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	1c9a      	adds	r2, r3, #2
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003952:	b29b      	uxth	r3, r3
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800395c:	e011      	b.n	8003982 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395e:	f7fd fe23 	bl	80015a8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d803      	bhi.n	8003976 <HAL_SPI_Transmit+0x16c>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003974:	d102      	bne.n	800397c <HAL_SPI_Transmit+0x172>
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d102      	bne.n	8003982 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003980:	e0a4      	b.n	8003acc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003986:	b29b      	uxth	r3, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1ce      	bne.n	800392a <HAL_SPI_Transmit+0x120>
 800398c:	e07c      	b.n	8003a88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d002      	beq.n	800399c <HAL_SPI_Transmit+0x192>
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d170      	bne.n	8003a7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d912      	bls.n	80039cc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	1c9a      	adds	r2, r3, #2
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b02      	subs	r3, #2
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ca:	e058      	b.n	8003a7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	7812      	ldrb	r2, [r2, #0]
 80039d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	1c5a      	adds	r2, r3, #1
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039f2:	e044      	b.n	8003a7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d12b      	bne.n	8003a5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d912      	bls.n	8003a32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a10:	881a      	ldrh	r2, [r3, #0]
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	1c9a      	adds	r2, r3, #2
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	3b02      	subs	r3, #2
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a30:	e025      	b.n	8003a7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	330c      	adds	r3, #12
 8003a3c:	7812      	ldrb	r2, [r2, #0]
 8003a3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a58:	e011      	b.n	8003a7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a5a:	f7fd fda5 	bl	80015a8 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d803      	bhi.n	8003a72 <HAL_SPI_Transmit+0x268>
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a70:	d102      	bne.n	8003a78 <HAL_SPI_Transmit+0x26e>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d102      	bne.n	8003a7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003a7c:	e026      	b.n	8003acc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1b5      	bne.n	80039f4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	6839      	ldr	r1, [r7, #0]
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 f949 	bl	8003d24 <SPI_EndRxTxTransaction>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10a      	bne.n	8003abc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	613b      	str	r3, [r7, #16]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	613b      	str	r3, [r7, #16]
 8003aba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e000      	b.n	8003acc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003aca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3720      	adds	r7, #32
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003af8:	f7fd fd56 	bl	80015a8 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	4413      	add	r3, r2
 8003b06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b08:	f7fd fd4e 	bl	80015a8 <HAL_GetTick>
 8003b0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b0e:	4b39      	ldr	r3, [pc, #228]	; (8003bf4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	015b      	lsls	r3, r3, #5
 8003b14:	0d1b      	lsrs	r3, r3, #20
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	fb02 f303 	mul.w	r3, r2, r3
 8003b1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b1e:	e054      	b.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b26:	d050      	beq.n	8003bca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b28:	f7fd fd3e 	bl	80015a8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d902      	bls.n	8003b3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d13d      	bne.n	8003bba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b56:	d111      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b60:	d004      	beq.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d107      	bne.n	8003b7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b84:	d10f      	bne.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e017      	b.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	bf0c      	ite	eq
 8003bda:	2301      	moveq	r3, #1
 8003bdc:	2300      	movne	r3, #0
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	461a      	mov	r2, r3
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d19b      	bne.n	8003b20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000028 	.word	0x20000028

08003bf8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b08a      	sub	sp, #40	; 0x28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c06:	2300      	movs	r3, #0
 8003c08:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c0a:	f7fd fccd 	bl	80015a8 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c12:	1a9b      	subs	r3, r3, r2
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	4413      	add	r3, r2
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003c1a:	f7fd fcc5 	bl	80015a8 <HAL_GetTick>
 8003c1e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	330c      	adds	r3, #12
 8003c26:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c28:	4b3d      	ldr	r3, [pc, #244]	; (8003d20 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00da      	lsls	r2, r3, #3
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	0d1b      	lsrs	r3, r3, #20
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c40:	e060      	b.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003c48:	d107      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d104      	bne.n	8003c5a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c58:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c60:	d050      	beq.n	8003d04 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c62:	f7fd fca1 	bl	80015a8 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d902      	bls.n	8003c78 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d13d      	bne.n	8003cf4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c86:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c90:	d111      	bne.n	8003cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d004      	beq.n	8003ca6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca4:	d107      	bne.n	8003cb6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cbe:	d10f      	bne.n	8003ce0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e010      	b.n	8003d16 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	3b01      	subs	r3, #1
 8003d02:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d196      	bne.n	8003c42 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	; 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000028 	.word	0x20000028

08003d24 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff ff5b 	bl	8003bf8 <SPI_WaitFifoStateUntilTimeout>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d007      	beq.n	8003d58 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d4c:	f043 0220 	orr.w	r2, r3, #32
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e027      	b.n	8003da8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff fec0 	bl	8003ae8 <SPI_WaitFlagStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d007      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e014      	b.n	8003da8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f7ff ff34 	bl	8003bf8 <SPI_WaitFifoStateUntilTimeout>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d007      	beq.n	8003da6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d9a:	f043 0220 	orr.w	r2, r3, #32
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e000      	b.n	8003da8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <LL_RCC_GetUSARTClockSource>:
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003db8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dbc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4013      	ands	r3, r2
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr

08003dd0 <LL_RCC_GetLPUARTClockSource>:
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ddc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4013      	ands	r3, r2
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd f9d7 	bl	80011c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2224      	movs	r2, #36	; 0x24
 8003e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8b2 	bl	8003f9c <UART_SetConfig>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e022      	b.n	8003e88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 face 	bl	80043ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689a      	ldr	r2, [r3, #8]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f042 0201 	orr.w	r2, r2, #1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fb55 	bl	8004530 <UART_CheckIdleState>
 8003e86:	4603      	mov	r3, r0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	; 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea6:	2b20      	cmp	r3, #32
 8003ea8:	d173      	bne.n	8003f92 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <HAL_UART_Transmit+0x26>
 8003eb0:	88fb      	ldrh	r3, [r7, #6]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e06c      	b.n	8003f94 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2221      	movs	r2, #33	; 0x21
 8003ec6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eca:	f7fd fb6d 	bl	80015a8 <HAL_GetTick>
 8003ece:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	88fa      	ldrh	r2, [r7, #6]
 8003edc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x6c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f04:	e02c      	b.n	8003f60 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	; 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fb5b 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e039      	b.n	8003f94 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	3302      	adds	r3, #2
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	e007      	b.n	8003f4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	781a      	ldrb	r2, [r3, #0]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1cc      	bne.n	8003f06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	2200      	movs	r2, #0
 8003f74:	2140      	movs	r1, #64	; 0x40
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fb28 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e006      	b.n	8003f94 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa0:	b08c      	sub	sp, #48	; 0x30
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	689a      	ldr	r2, [r3, #8]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	69db      	ldr	r3, [r3, #28]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4baf      	ldr	r3, [pc, #700]	; (8004288 <UART_SetConfig+0x2ec>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	6812      	ldr	r2, [r2, #0]
 8003fd2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fd4:	430b      	orrs	r3, r1
 8003fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	68da      	ldr	r2, [r3, #12]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4aa4      	ldr	r2, [pc, #656]	; (800428c <UART_SetConfig+0x2f0>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d004      	beq.n	8004008 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	6a1b      	ldr	r3, [r3, #32]
 8004002:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004004:	4313      	orrs	r3, r2
 8004006:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004012:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800401c:	430b      	orrs	r3, r1
 800401e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	f023 010f 	bic.w	r1, r3, #15
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a95      	ldr	r2, [pc, #596]	; (8004290 <UART_SetConfig+0x2f4>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d125      	bne.n	800408c <UART_SetConfig+0xf0>
 8004040:	2003      	movs	r0, #3
 8004042:	f7ff feb5 	bl	8003db0 <LL_RCC_GetUSARTClockSource>
 8004046:	4603      	mov	r3, r0
 8004048:	2b03      	cmp	r3, #3
 800404a:	d81b      	bhi.n	8004084 <UART_SetConfig+0xe8>
 800404c:	a201      	add	r2, pc, #4	; (adr r2, 8004054 <UART_SetConfig+0xb8>)
 800404e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004052:	bf00      	nop
 8004054:	08004065 	.word	0x08004065
 8004058:	08004075 	.word	0x08004075
 800405c:	0800406d 	.word	0x0800406d
 8004060:	0800407d 	.word	0x0800407d
 8004064:	2301      	movs	r3, #1
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406a:	e042      	b.n	80040f2 <UART_SetConfig+0x156>
 800406c:	2302      	movs	r3, #2
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e03e      	b.n	80040f2 <UART_SetConfig+0x156>
 8004074:	2304      	movs	r3, #4
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407a:	e03a      	b.n	80040f2 <UART_SetConfig+0x156>
 800407c:	2308      	movs	r3, #8
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004082:	e036      	b.n	80040f2 <UART_SetConfig+0x156>
 8004084:	2310      	movs	r3, #16
 8004086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800408a:	e032      	b.n	80040f2 <UART_SetConfig+0x156>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a7e      	ldr	r2, [pc, #504]	; (800428c <UART_SetConfig+0x2f0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d12a      	bne.n	80040ec <UART_SetConfig+0x150>
 8004096:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800409a:	f7ff fe99 	bl	8003dd0 <LL_RCC_GetLPUARTClockSource>
 800409e:	4603      	mov	r3, r0
 80040a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040a4:	d01a      	beq.n	80040dc <UART_SetConfig+0x140>
 80040a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040aa:	d81b      	bhi.n	80040e4 <UART_SetConfig+0x148>
 80040ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b0:	d00c      	beq.n	80040cc <UART_SetConfig+0x130>
 80040b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040b6:	d815      	bhi.n	80040e4 <UART_SetConfig+0x148>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <UART_SetConfig+0x128>
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c0:	d008      	beq.n	80040d4 <UART_SetConfig+0x138>
 80040c2:	e00f      	b.n	80040e4 <UART_SetConfig+0x148>
 80040c4:	2300      	movs	r3, #0
 80040c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ca:	e012      	b.n	80040f2 <UART_SetConfig+0x156>
 80040cc:	2302      	movs	r3, #2
 80040ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d2:	e00e      	b.n	80040f2 <UART_SetConfig+0x156>
 80040d4:	2304      	movs	r3, #4
 80040d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040da:	e00a      	b.n	80040f2 <UART_SetConfig+0x156>
 80040dc:	2308      	movs	r3, #8
 80040de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040e2:	e006      	b.n	80040f2 <UART_SetConfig+0x156>
 80040e4:	2310      	movs	r3, #16
 80040e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040ea:	e002      	b.n	80040f2 <UART_SetConfig+0x156>
 80040ec:	2310      	movs	r3, #16
 80040ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a65      	ldr	r2, [pc, #404]	; (800428c <UART_SetConfig+0x2f0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	f040 8097 	bne.w	800422c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004102:	2b08      	cmp	r3, #8
 8004104:	d823      	bhi.n	800414e <UART_SetConfig+0x1b2>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x170>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004131 	.word	0x08004131
 8004110:	0800414f 	.word	0x0800414f
 8004114:	08004139 	.word	0x08004139
 8004118:	0800414f 	.word	0x0800414f
 800411c:	0800413f 	.word	0x0800413f
 8004120:	0800414f 	.word	0x0800414f
 8004124:	0800414f 	.word	0x0800414f
 8004128:	0800414f 	.word	0x0800414f
 800412c:	08004147 	.word	0x08004147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004130:	f7fe fdc4 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 8004134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004136:	e010      	b.n	800415a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004138:	4b56      	ldr	r3, [pc, #344]	; (8004294 <UART_SetConfig+0x2f8>)
 800413a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800413c:	e00d      	b.n	800415a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413e:	f7fe fd3b 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8004142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004144:	e009      	b.n	800415a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800414c:	e005      	b.n	800415a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004158:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 812b 	beq.w	80043b8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	4a4c      	ldr	r2, [pc, #304]	; (8004298 <UART_SetConfig+0x2fc>)
 8004168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800416c:	461a      	mov	r2, r3
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	fbb3 f3f2 	udiv	r3, r3, r2
 8004174:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	685a      	ldr	r2, [r3, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	429a      	cmp	r2, r3
 8004184:	d305      	bcc.n	8004192 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	429a      	cmp	r2, r3
 8004190:	d903      	bls.n	800419a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004198:	e10e      	b.n	80043b8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	2200      	movs	r2, #0
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	60fa      	str	r2, [r7, #12]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	4a3c      	ldr	r2, [pc, #240]	; (8004298 <UART_SetConfig+0x2fc>)
 80041a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2200      	movs	r2, #0
 80041b0:	603b      	str	r3, [r7, #0]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80041b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80041bc:	f7fc f830 	bl	8000220 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	020b      	lsls	r3, r1, #8
 80041d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80041d6:	0202      	lsls	r2, r0, #8
 80041d8:	6979      	ldr	r1, [r7, #20]
 80041da:	6849      	ldr	r1, [r1, #4]
 80041dc:	0849      	lsrs	r1, r1, #1
 80041de:	2000      	movs	r0, #0
 80041e0:	460c      	mov	r4, r1
 80041e2:	4605      	mov	r5, r0
 80041e4:	eb12 0804 	adds.w	r8, r2, r4
 80041e8:	eb43 0905 	adc.w	r9, r3, r5
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	469a      	mov	sl, r3
 80041f4:	4693      	mov	fp, r2
 80041f6:	4652      	mov	r2, sl
 80041f8:	465b      	mov	r3, fp
 80041fa:	4640      	mov	r0, r8
 80041fc:	4649      	mov	r1, r9
 80041fe:	f7fc f80f 	bl	8000220 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4613      	mov	r3, r2
 8004208:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004210:	d308      	bcc.n	8004224 <UART_SetConfig+0x288>
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004218:	d204      	bcs.n	8004224 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6a3a      	ldr	r2, [r7, #32]
 8004220:	60da      	str	r2, [r3, #12]
 8004222:	e0c9      	b.n	80043b8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800422a:	e0c5      	b.n	80043b8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	69db      	ldr	r3, [r3, #28]
 8004230:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004234:	d16d      	bne.n	8004312 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004236:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800423a:	3b01      	subs	r3, #1
 800423c:	2b07      	cmp	r3, #7
 800423e:	d82d      	bhi.n	800429c <UART_SetConfig+0x300>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <UART_SetConfig+0x2ac>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	08004269 	.word	0x08004269
 800424c:	08004271 	.word	0x08004271
 8004250:	0800429d 	.word	0x0800429d
 8004254:	08004277 	.word	0x08004277
 8004258:	0800429d 	.word	0x0800429d
 800425c:	0800429d 	.word	0x0800429d
 8004260:	0800429d 	.word	0x0800429d
 8004264:	0800427f 	.word	0x0800427f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004268:	f7fe fd3e 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 800426c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800426e:	e01b      	b.n	80042a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004270:	4b08      	ldr	r3, [pc, #32]	; (8004294 <UART_SetConfig+0x2f8>)
 8004272:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004274:	e018      	b.n	80042a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004276:	f7fe fc9f 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 800427a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800427c:	e014      	b.n	80042a8 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800427e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004282:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004284:	e010      	b.n	80042a8 <UART_SetConfig+0x30c>
 8004286:	bf00      	nop
 8004288:	cfff69f3 	.word	0xcfff69f3
 800428c:	40008000 	.word	0x40008000
 8004290:	40013800 	.word	0x40013800
 8004294:	00f42400 	.word	0x00f42400
 8004298:	08006eec 	.word	0x08006eec
      default:
        pclk = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80042a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8084 	beq.w	80043b8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	4a4b      	ldr	r2, [pc, #300]	; (80043e4 <UART_SetConfig+0x448>)
 80042b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042ba:	461a      	mov	r2, r3
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	fbb3 f3f2 	udiv	r3, r3, r2
 80042c2:	005a      	lsls	r2, r3, #1
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	085b      	lsrs	r3, r3, #1
 80042ca:	441a      	add	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042d4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80042d6:	6a3b      	ldr	r3, [r7, #32]
 80042d8:	2b0f      	cmp	r3, #15
 80042da:	d916      	bls.n	800430a <UART_SetConfig+0x36e>
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e2:	d212      	bcs.n	800430a <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80042e4:	6a3b      	ldr	r3, [r7, #32]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f023 030f 	bic.w	r3, r3, #15
 80042ec:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	8bfb      	ldrh	r3, [r7, #30]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	8bfa      	ldrh	r2, [r7, #30]
 8004306:	60da      	str	r2, [r3, #12]
 8004308:	e056      	b.n	80043b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004310:	e052      	b.n	80043b8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004316:	3b01      	subs	r3, #1
 8004318:	2b07      	cmp	r3, #7
 800431a:	d822      	bhi.n	8004362 <UART_SetConfig+0x3c6>
 800431c:	a201      	add	r2, pc, #4	; (adr r2, 8004324 <UART_SetConfig+0x388>)
 800431e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004322:	bf00      	nop
 8004324:	08004345 	.word	0x08004345
 8004328:	0800434d 	.word	0x0800434d
 800432c:	08004363 	.word	0x08004363
 8004330:	08004353 	.word	0x08004353
 8004334:	08004363 	.word	0x08004363
 8004338:	08004363 	.word	0x08004363
 800433c:	08004363 	.word	0x08004363
 8004340:	0800435b 	.word	0x0800435b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004344:	f7fe fcd0 	bl	8002ce8 <HAL_RCC_GetPCLK2Freq>
 8004348:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800434a:	e010      	b.n	800436e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800434c:	4b26      	ldr	r3, [pc, #152]	; (80043e8 <UART_SetConfig+0x44c>)
 800434e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004350:	e00d      	b.n	800436e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004352:	f7fe fc31 	bl	8002bb8 <HAL_RCC_GetSysClockFreq>
 8004356:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004358:	e009      	b.n	800436e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800435a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004360:	e005      	b.n	800436e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800436c:	bf00      	nop
    }

    if (pclk != 0U)
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d021      	beq.n	80043b8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <UART_SetConfig+0x448>)
 800437a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800437e:	461a      	mov	r2, r3
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	fbb3 f2f2 	udiv	r2, r3, r2
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	441a      	add	r2, r3
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	fbb2 f3f3 	udiv	r3, r2, r3
 8004396:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	2b0f      	cmp	r3, #15
 800439c:	d909      	bls.n	80043b2 <UART_SetConfig+0x416>
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d205      	bcs.n	80043b2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043a6:	6a3b      	ldr	r3, [r7, #32]
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e002      	b.n	80043b8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	2200      	movs	r2, #0
 80043cc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	2200      	movs	r2, #0
 80043d2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80043d4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3730      	adds	r7, #48	; 0x30
 80043dc:	46bd      	mov	sp, r7
 80043de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e2:	bf00      	nop
 80043e4:	08006eec 	.word	0x08006eec
 80043e8:	00f42400 	.word	0x00f42400

080043ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00a      	beq.n	8004416 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00a      	beq.n	8004438 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443c:	f003 0304 	and.w	r3, r3, #4
 8004440:	2b00      	cmp	r3, #0
 8004442:	d00a      	beq.n	800445a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00a      	beq.n	800447c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00a      	beq.n	800449e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0320 	and.w	r3, r3, #32
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00a      	beq.n	80044c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d01a      	beq.n	8004502 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	430a      	orrs	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ea:	d10a      	bne.n	8004502 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	430a      	orrs	r2, r1
 8004522:	605a      	str	r2, [r3, #4]
  }
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b086      	sub	sp, #24
 8004534:	af02      	add	r7, sp, #8
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004540:	f7fd f832 	bl	80015a8 <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0308 	and.w	r3, r3, #8
 8004550:	2b08      	cmp	r3, #8
 8004552:	d10e      	bne.n	8004572 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004554:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f832 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e028      	b.n	80045c4 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b04      	cmp	r3, #4
 800457e:	d10e      	bne.n	800459e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004580:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f81c 	bl	80045cc <UART_WaitOnFlagUntilTimeout>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e012      	b.n	80045c4 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2220      	movs	r2, #32
 80045aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b09c      	sub	sp, #112	; 0x70
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045dc:	e0a9      	b.n	8004732 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e4:	f000 80a5 	beq.w	8004732 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fc ffde 	bl	80015a8 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <UART_WaitOnFlagUntilTimeout+0x32>
 80045f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d140      	bne.n	8004680 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800460c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800460e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004612:	667b      	str	r3, [r7, #100]	; 0x64
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800461e:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004622:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800462a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	663b      	str	r3, [r7, #96]	; 0x60
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004650:	64ba      	str	r2, [r7, #72]	; 0x48
 8004652:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004656:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e069      	b.n	8004754 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d051      	beq.n	8004732 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800469c:	d149      	bne.n	8004732 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046a6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b0:	e853 3f00 	ldrex	r3, [r3]
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	461a      	mov	r2, r3
 80046c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c6:	637b      	str	r3, [r7, #52]	; 0x34
 80046c8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80046d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e6      	bne.n	80046a8 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3308      	adds	r3, #8
 80046e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	613b      	str	r3, [r7, #16]
   return(result);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80046fa:	623a      	str	r2, [r7, #32]
 80046fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046fe:	69f9      	ldr	r1, [r7, #28]
 8004700:	6a3a      	ldr	r2, [r7, #32]
 8004702:	e841 2300 	strex	r3, r2, [r1]
 8004706:	61bb      	str	r3, [r7, #24]
   return(result);
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d1e5      	bne.n	80046da <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2220      	movs	r2, #32
 8004712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2220      	movs	r2, #32
 8004722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e010      	b.n	8004754 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	69da      	ldr	r2, [r3, #28]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	4013      	ands	r3, r2
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	429a      	cmp	r2, r3
 8004740:	bf0c      	ite	eq
 8004742:	2301      	moveq	r3, #1
 8004744:	2300      	movne	r3, #0
 8004746:	b2db      	uxtb	r3, r3
 8004748:	461a      	mov	r2, r3
 800474a:	79fb      	ldrb	r3, [r7, #7]
 800474c:	429a      	cmp	r2, r3
 800474e:	f43f af46 	beq.w	80045de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3770      	adds	r7, #112	; 0x70
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800476a:	2b01      	cmp	r3, #1
 800476c:	d101      	bne.n	8004772 <HAL_UARTEx_DisableFifoMode+0x16>
 800476e:	2302      	movs	r3, #2
 8004770:	e027      	b.n	80047c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2224      	movs	r2, #36	; 0x24
 800477e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80047a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e02d      	b.n	8004842 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2224      	movs	r2, #36	; 0x24
 80047f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f850 	bl	80048c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b084      	sub	sp, #16
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
 8004852:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800485e:	2302      	movs	r3, #2
 8004860:	e02d      	b.n	80048be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2224      	movs	r2, #36	; 0x24
 800486e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f022 0201 	bic.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f812 	bl	80048c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2220      	movs	r2, #32
 80048b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d108      	bne.n	80048ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048e8:	e031      	b.n	800494e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048ea:	2308      	movs	r3, #8
 80048ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048ee:	2308      	movs	r3, #8
 80048f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	0e5b      	lsrs	r3, r3, #25
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	0f5b      	lsrs	r3, r3, #29
 800490a:	b2db      	uxtb	r3, r3
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004912:	7bbb      	ldrb	r3, [r7, #14]
 8004914:	7b3a      	ldrb	r2, [r7, #12]
 8004916:	4911      	ldr	r1, [pc, #68]	; (800495c <UARTEx_SetNbDataToProcess+0x94>)
 8004918:	5c8a      	ldrb	r2, [r1, r2]
 800491a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800491e:	7b3a      	ldrb	r2, [r7, #12]
 8004920:	490f      	ldr	r1, [pc, #60]	; (8004960 <UARTEx_SetNbDataToProcess+0x98>)
 8004922:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004924:	fb93 f3f2 	sdiv	r3, r3, r2
 8004928:	b29a      	uxth	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004930:	7bfb      	ldrb	r3, [r7, #15]
 8004932:	7b7a      	ldrb	r2, [r7, #13]
 8004934:	4909      	ldr	r1, [pc, #36]	; (800495c <UARTEx_SetNbDataToProcess+0x94>)
 8004936:	5c8a      	ldrb	r2, [r1, r2]
 8004938:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800493c:	7b7a      	ldrb	r2, [r7, #13]
 800493e:	4908      	ldr	r1, [pc, #32]	; (8004960 <UARTEx_SetNbDataToProcess+0x98>)
 8004940:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004942:	fb93 f3f2 	sdiv	r3, r3, r2
 8004946:	b29a      	uxth	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800494e:	bf00      	nop
 8004950:	3714      	adds	r7, #20
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	08006f04 	.word	0x08006f04
 8004960:	08006f0c 	.word	0x08006f0c

08004964 <__errno>:
 8004964:	4b01      	ldr	r3, [pc, #4]	; (800496c <__errno+0x8>)
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	20000034 	.word	0x20000034

08004970 <__libc_init_array>:
 8004970:	b570      	push	{r4, r5, r6, lr}
 8004972:	4d0d      	ldr	r5, [pc, #52]	; (80049a8 <__libc_init_array+0x38>)
 8004974:	4c0d      	ldr	r4, [pc, #52]	; (80049ac <__libc_init_array+0x3c>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	2600      	movs	r6, #0
 800497c:	42a6      	cmp	r6, r4
 800497e:	d109      	bne.n	8004994 <__libc_init_array+0x24>
 8004980:	4d0b      	ldr	r5, [pc, #44]	; (80049b0 <__libc_init_array+0x40>)
 8004982:	4c0c      	ldr	r4, [pc, #48]	; (80049b4 <__libc_init_array+0x44>)
 8004984:	f001 f82c 	bl	80059e0 <_init>
 8004988:	1b64      	subs	r4, r4, r5
 800498a:	10a4      	asrs	r4, r4, #2
 800498c:	2600      	movs	r6, #0
 800498e:	42a6      	cmp	r6, r4
 8004990:	d105      	bne.n	800499e <__libc_init_array+0x2e>
 8004992:	bd70      	pop	{r4, r5, r6, pc}
 8004994:	f855 3b04 	ldr.w	r3, [r5], #4
 8004998:	4798      	blx	r3
 800499a:	3601      	adds	r6, #1
 800499c:	e7ee      	b.n	800497c <__libc_init_array+0xc>
 800499e:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a2:	4798      	blx	r3
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7f2      	b.n	800498e <__libc_init_array+0x1e>
 80049a8:	08006fb4 	.word	0x08006fb4
 80049ac:	08006fb4 	.word	0x08006fb4
 80049b0:	08006fb4 	.word	0x08006fb4
 80049b4:	08006fb8 	.word	0x08006fb8

080049b8 <malloc>:
 80049b8:	4b02      	ldr	r3, [pc, #8]	; (80049c4 <malloc+0xc>)
 80049ba:	4601      	mov	r1, r0
 80049bc:	6818      	ldr	r0, [r3, #0]
 80049be:	f000 b877 	b.w	8004ab0 <_malloc_r>
 80049c2:	bf00      	nop
 80049c4:	20000034 	.word	0x20000034

080049c8 <memset>:
 80049c8:	4402      	add	r2, r0
 80049ca:	4603      	mov	r3, r0
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d100      	bne.n	80049d2 <memset+0xa>
 80049d0:	4770      	bx	lr
 80049d2:	f803 1b01 	strb.w	r1, [r3], #1
 80049d6:	e7f9      	b.n	80049cc <memset+0x4>

080049d8 <_free_r>:
 80049d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80049da:	2900      	cmp	r1, #0
 80049dc:	d044      	beq.n	8004a68 <_free_r+0x90>
 80049de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049e2:	9001      	str	r0, [sp, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f1a1 0404 	sub.w	r4, r1, #4
 80049ea:	bfb8      	it	lt
 80049ec:	18e4      	addlt	r4, r4, r3
 80049ee:	f000 fc51 	bl	8005294 <__malloc_lock>
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <_free_r+0x94>)
 80049f4:	9801      	ldr	r0, [sp, #4]
 80049f6:	6813      	ldr	r3, [r2, #0]
 80049f8:	b933      	cbnz	r3, 8004a08 <_free_r+0x30>
 80049fa:	6063      	str	r3, [r4, #4]
 80049fc:	6014      	str	r4, [r2, #0]
 80049fe:	b003      	add	sp, #12
 8004a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a04:	f000 bc4c 	b.w	80052a0 <__malloc_unlock>
 8004a08:	42a3      	cmp	r3, r4
 8004a0a:	d908      	bls.n	8004a1e <_free_r+0x46>
 8004a0c:	6825      	ldr	r5, [r4, #0]
 8004a0e:	1961      	adds	r1, r4, r5
 8004a10:	428b      	cmp	r3, r1
 8004a12:	bf01      	itttt	eq
 8004a14:	6819      	ldreq	r1, [r3, #0]
 8004a16:	685b      	ldreq	r3, [r3, #4]
 8004a18:	1949      	addeq	r1, r1, r5
 8004a1a:	6021      	streq	r1, [r4, #0]
 8004a1c:	e7ed      	b.n	80049fa <_free_r+0x22>
 8004a1e:	461a      	mov	r2, r3
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	b10b      	cbz	r3, 8004a28 <_free_r+0x50>
 8004a24:	42a3      	cmp	r3, r4
 8004a26:	d9fa      	bls.n	8004a1e <_free_r+0x46>
 8004a28:	6811      	ldr	r1, [r2, #0]
 8004a2a:	1855      	adds	r5, r2, r1
 8004a2c:	42a5      	cmp	r5, r4
 8004a2e:	d10b      	bne.n	8004a48 <_free_r+0x70>
 8004a30:	6824      	ldr	r4, [r4, #0]
 8004a32:	4421      	add	r1, r4
 8004a34:	1854      	adds	r4, r2, r1
 8004a36:	42a3      	cmp	r3, r4
 8004a38:	6011      	str	r1, [r2, #0]
 8004a3a:	d1e0      	bne.n	80049fe <_free_r+0x26>
 8004a3c:	681c      	ldr	r4, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	6053      	str	r3, [r2, #4]
 8004a42:	4421      	add	r1, r4
 8004a44:	6011      	str	r1, [r2, #0]
 8004a46:	e7da      	b.n	80049fe <_free_r+0x26>
 8004a48:	d902      	bls.n	8004a50 <_free_r+0x78>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	6003      	str	r3, [r0, #0]
 8004a4e:	e7d6      	b.n	80049fe <_free_r+0x26>
 8004a50:	6825      	ldr	r5, [r4, #0]
 8004a52:	1961      	adds	r1, r4, r5
 8004a54:	428b      	cmp	r3, r1
 8004a56:	bf04      	itt	eq
 8004a58:	6819      	ldreq	r1, [r3, #0]
 8004a5a:	685b      	ldreq	r3, [r3, #4]
 8004a5c:	6063      	str	r3, [r4, #4]
 8004a5e:	bf04      	itt	eq
 8004a60:	1949      	addeq	r1, r1, r5
 8004a62:	6021      	streq	r1, [r4, #0]
 8004a64:	6054      	str	r4, [r2, #4]
 8004a66:	e7ca      	b.n	80049fe <_free_r+0x26>
 8004a68:	b003      	add	sp, #12
 8004a6a:	bd30      	pop	{r4, r5, pc}
 8004a6c:	200001d4 	.word	0x200001d4

08004a70 <sbrk_aligned>:
 8004a70:	b570      	push	{r4, r5, r6, lr}
 8004a72:	4e0e      	ldr	r6, [pc, #56]	; (8004aac <sbrk_aligned+0x3c>)
 8004a74:	460c      	mov	r4, r1
 8004a76:	6831      	ldr	r1, [r6, #0]
 8004a78:	4605      	mov	r5, r0
 8004a7a:	b911      	cbnz	r1, 8004a82 <sbrk_aligned+0x12>
 8004a7c:	f000 f91a 	bl	8004cb4 <_sbrk_r>
 8004a80:	6030      	str	r0, [r6, #0]
 8004a82:	4621      	mov	r1, r4
 8004a84:	4628      	mov	r0, r5
 8004a86:	f000 f915 	bl	8004cb4 <_sbrk_r>
 8004a8a:	1c43      	adds	r3, r0, #1
 8004a8c:	d00a      	beq.n	8004aa4 <sbrk_aligned+0x34>
 8004a8e:	1cc4      	adds	r4, r0, #3
 8004a90:	f024 0403 	bic.w	r4, r4, #3
 8004a94:	42a0      	cmp	r0, r4
 8004a96:	d007      	beq.n	8004aa8 <sbrk_aligned+0x38>
 8004a98:	1a21      	subs	r1, r4, r0
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	f000 f90a 	bl	8004cb4 <_sbrk_r>
 8004aa0:	3001      	adds	r0, #1
 8004aa2:	d101      	bne.n	8004aa8 <sbrk_aligned+0x38>
 8004aa4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	bd70      	pop	{r4, r5, r6, pc}
 8004aac:	200001d8 	.word	0x200001d8

08004ab0 <_malloc_r>:
 8004ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ab4:	1ccd      	adds	r5, r1, #3
 8004ab6:	f025 0503 	bic.w	r5, r5, #3
 8004aba:	3508      	adds	r5, #8
 8004abc:	2d0c      	cmp	r5, #12
 8004abe:	bf38      	it	cc
 8004ac0:	250c      	movcc	r5, #12
 8004ac2:	2d00      	cmp	r5, #0
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	db01      	blt.n	8004acc <_malloc_r+0x1c>
 8004ac8:	42a9      	cmp	r1, r5
 8004aca:	d905      	bls.n	8004ad8 <_malloc_r+0x28>
 8004acc:	230c      	movs	r3, #12
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ad8:	4e2e      	ldr	r6, [pc, #184]	; (8004b94 <_malloc_r+0xe4>)
 8004ada:	f000 fbdb 	bl	8005294 <__malloc_lock>
 8004ade:	6833      	ldr	r3, [r6, #0]
 8004ae0:	461c      	mov	r4, r3
 8004ae2:	bb34      	cbnz	r4, 8004b32 <_malloc_r+0x82>
 8004ae4:	4629      	mov	r1, r5
 8004ae6:	4638      	mov	r0, r7
 8004ae8:	f7ff ffc2 	bl	8004a70 <sbrk_aligned>
 8004aec:	1c43      	adds	r3, r0, #1
 8004aee:	4604      	mov	r4, r0
 8004af0:	d14d      	bne.n	8004b8e <_malloc_r+0xde>
 8004af2:	6834      	ldr	r4, [r6, #0]
 8004af4:	4626      	mov	r6, r4
 8004af6:	2e00      	cmp	r6, #0
 8004af8:	d140      	bne.n	8004b7c <_malloc_r+0xcc>
 8004afa:	6823      	ldr	r3, [r4, #0]
 8004afc:	4631      	mov	r1, r6
 8004afe:	4638      	mov	r0, r7
 8004b00:	eb04 0803 	add.w	r8, r4, r3
 8004b04:	f000 f8d6 	bl	8004cb4 <_sbrk_r>
 8004b08:	4580      	cmp	r8, r0
 8004b0a:	d13a      	bne.n	8004b82 <_malloc_r+0xd2>
 8004b0c:	6821      	ldr	r1, [r4, #0]
 8004b0e:	3503      	adds	r5, #3
 8004b10:	1a6d      	subs	r5, r5, r1
 8004b12:	f025 0503 	bic.w	r5, r5, #3
 8004b16:	3508      	adds	r5, #8
 8004b18:	2d0c      	cmp	r5, #12
 8004b1a:	bf38      	it	cc
 8004b1c:	250c      	movcc	r5, #12
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4638      	mov	r0, r7
 8004b22:	f7ff ffa5 	bl	8004a70 <sbrk_aligned>
 8004b26:	3001      	adds	r0, #1
 8004b28:	d02b      	beq.n	8004b82 <_malloc_r+0xd2>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	442b      	add	r3, r5
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	e00e      	b.n	8004b50 <_malloc_r+0xa0>
 8004b32:	6822      	ldr	r2, [r4, #0]
 8004b34:	1b52      	subs	r2, r2, r5
 8004b36:	d41e      	bmi.n	8004b76 <_malloc_r+0xc6>
 8004b38:	2a0b      	cmp	r2, #11
 8004b3a:	d916      	bls.n	8004b6a <_malloc_r+0xba>
 8004b3c:	1961      	adds	r1, r4, r5
 8004b3e:	42a3      	cmp	r3, r4
 8004b40:	6025      	str	r5, [r4, #0]
 8004b42:	bf18      	it	ne
 8004b44:	6059      	strne	r1, [r3, #4]
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	bf08      	it	eq
 8004b4a:	6031      	streq	r1, [r6, #0]
 8004b4c:	5162      	str	r2, [r4, r5]
 8004b4e:	604b      	str	r3, [r1, #4]
 8004b50:	4638      	mov	r0, r7
 8004b52:	f104 060b 	add.w	r6, r4, #11
 8004b56:	f000 fba3 	bl	80052a0 <__malloc_unlock>
 8004b5a:	f026 0607 	bic.w	r6, r6, #7
 8004b5e:	1d23      	adds	r3, r4, #4
 8004b60:	1af2      	subs	r2, r6, r3
 8004b62:	d0b6      	beq.n	8004ad2 <_malloc_r+0x22>
 8004b64:	1b9b      	subs	r3, r3, r6
 8004b66:	50a3      	str	r3, [r4, r2]
 8004b68:	e7b3      	b.n	8004ad2 <_malloc_r+0x22>
 8004b6a:	6862      	ldr	r2, [r4, #4]
 8004b6c:	42a3      	cmp	r3, r4
 8004b6e:	bf0c      	ite	eq
 8004b70:	6032      	streq	r2, [r6, #0]
 8004b72:	605a      	strne	r2, [r3, #4]
 8004b74:	e7ec      	b.n	8004b50 <_malloc_r+0xa0>
 8004b76:	4623      	mov	r3, r4
 8004b78:	6864      	ldr	r4, [r4, #4]
 8004b7a:	e7b2      	b.n	8004ae2 <_malloc_r+0x32>
 8004b7c:	4634      	mov	r4, r6
 8004b7e:	6876      	ldr	r6, [r6, #4]
 8004b80:	e7b9      	b.n	8004af6 <_malloc_r+0x46>
 8004b82:	230c      	movs	r3, #12
 8004b84:	603b      	str	r3, [r7, #0]
 8004b86:	4638      	mov	r0, r7
 8004b88:	f000 fb8a 	bl	80052a0 <__malloc_unlock>
 8004b8c:	e7a1      	b.n	8004ad2 <_malloc_r+0x22>
 8004b8e:	6025      	str	r5, [r4, #0]
 8004b90:	e7de      	b.n	8004b50 <_malloc_r+0xa0>
 8004b92:	bf00      	nop
 8004b94:	200001d4 	.word	0x200001d4

08004b98 <iprintf>:
 8004b98:	b40f      	push	{r0, r1, r2, r3}
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	; (8004bc4 <iprintf+0x2c>)
 8004b9c:	b513      	push	{r0, r1, r4, lr}
 8004b9e:	681c      	ldr	r4, [r3, #0]
 8004ba0:	b124      	cbz	r4, 8004bac <iprintf+0x14>
 8004ba2:	69a3      	ldr	r3, [r4, #24]
 8004ba4:	b913      	cbnz	r3, 8004bac <iprintf+0x14>
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	f000 fa6e 	bl	8005088 <__sinit>
 8004bac:	ab05      	add	r3, sp, #20
 8004bae:	9a04      	ldr	r2, [sp, #16]
 8004bb0:	68a1      	ldr	r1, [r4, #8]
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f000 fba3 	bl	8005300 <_vfiprintf_r>
 8004bba:	b002      	add	sp, #8
 8004bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc0:	b004      	add	sp, #16
 8004bc2:	4770      	bx	lr
 8004bc4:	20000034 	.word	0x20000034

08004bc8 <_puts_r>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	460e      	mov	r6, r1
 8004bcc:	4605      	mov	r5, r0
 8004bce:	b118      	cbz	r0, 8004bd8 <_puts_r+0x10>
 8004bd0:	6983      	ldr	r3, [r0, #24]
 8004bd2:	b90b      	cbnz	r3, 8004bd8 <_puts_r+0x10>
 8004bd4:	f000 fa58 	bl	8005088 <__sinit>
 8004bd8:	69ab      	ldr	r3, [r5, #24]
 8004bda:	68ac      	ldr	r4, [r5, #8]
 8004bdc:	b913      	cbnz	r3, 8004be4 <_puts_r+0x1c>
 8004bde:	4628      	mov	r0, r5
 8004be0:	f000 fa52 	bl	8005088 <__sinit>
 8004be4:	4b2c      	ldr	r3, [pc, #176]	; (8004c98 <_puts_r+0xd0>)
 8004be6:	429c      	cmp	r4, r3
 8004be8:	d120      	bne.n	8004c2c <_puts_r+0x64>
 8004bea:	686c      	ldr	r4, [r5, #4]
 8004bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004bee:	07db      	lsls	r3, r3, #31
 8004bf0:	d405      	bmi.n	8004bfe <_puts_r+0x36>
 8004bf2:	89a3      	ldrh	r3, [r4, #12]
 8004bf4:	0598      	lsls	r0, r3, #22
 8004bf6:	d402      	bmi.n	8004bfe <_puts_r+0x36>
 8004bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004bfa:	f000 fae3 	bl	80051c4 <__retarget_lock_acquire_recursive>
 8004bfe:	89a3      	ldrh	r3, [r4, #12]
 8004c00:	0719      	lsls	r1, r3, #28
 8004c02:	d51d      	bpl.n	8004c40 <_puts_r+0x78>
 8004c04:	6923      	ldr	r3, [r4, #16]
 8004c06:	b1db      	cbz	r3, 8004c40 <_puts_r+0x78>
 8004c08:	3e01      	subs	r6, #1
 8004c0a:	68a3      	ldr	r3, [r4, #8]
 8004c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c10:	3b01      	subs	r3, #1
 8004c12:	60a3      	str	r3, [r4, #8]
 8004c14:	bb39      	cbnz	r1, 8004c66 <_puts_r+0x9e>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da38      	bge.n	8004c8c <_puts_r+0xc4>
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	210a      	movs	r1, #10
 8004c1e:	4628      	mov	r0, r5
 8004c20:	f000 f858 	bl	8004cd4 <__swbuf_r>
 8004c24:	3001      	adds	r0, #1
 8004c26:	d011      	beq.n	8004c4c <_puts_r+0x84>
 8004c28:	250a      	movs	r5, #10
 8004c2a:	e011      	b.n	8004c50 <_puts_r+0x88>
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <_puts_r+0xd4>)
 8004c2e:	429c      	cmp	r4, r3
 8004c30:	d101      	bne.n	8004c36 <_puts_r+0x6e>
 8004c32:	68ac      	ldr	r4, [r5, #8]
 8004c34:	e7da      	b.n	8004bec <_puts_r+0x24>
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <_puts_r+0xd8>)
 8004c38:	429c      	cmp	r4, r3
 8004c3a:	bf08      	it	eq
 8004c3c:	68ec      	ldreq	r4, [r5, #12]
 8004c3e:	e7d5      	b.n	8004bec <_puts_r+0x24>
 8004c40:	4621      	mov	r1, r4
 8004c42:	4628      	mov	r0, r5
 8004c44:	f000 f898 	bl	8004d78 <__swsetup_r>
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	d0dd      	beq.n	8004c08 <_puts_r+0x40>
 8004c4c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004c50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c52:	07da      	lsls	r2, r3, #31
 8004c54:	d405      	bmi.n	8004c62 <_puts_r+0x9a>
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	059b      	lsls	r3, r3, #22
 8004c5a:	d402      	bmi.n	8004c62 <_puts_r+0x9a>
 8004c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c5e:	f000 fab2 	bl	80051c6 <__retarget_lock_release_recursive>
 8004c62:	4628      	mov	r0, r5
 8004c64:	bd70      	pop	{r4, r5, r6, pc}
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da04      	bge.n	8004c74 <_puts_r+0xac>
 8004c6a:	69a2      	ldr	r2, [r4, #24]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	dc06      	bgt.n	8004c7e <_puts_r+0xb6>
 8004c70:	290a      	cmp	r1, #10
 8004c72:	d004      	beq.n	8004c7e <_puts_r+0xb6>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	6022      	str	r2, [r4, #0]
 8004c7a:	7019      	strb	r1, [r3, #0]
 8004c7c:	e7c5      	b.n	8004c0a <_puts_r+0x42>
 8004c7e:	4622      	mov	r2, r4
 8004c80:	4628      	mov	r0, r5
 8004c82:	f000 f827 	bl	8004cd4 <__swbuf_r>
 8004c86:	3001      	adds	r0, #1
 8004c88:	d1bf      	bne.n	8004c0a <_puts_r+0x42>
 8004c8a:	e7df      	b.n	8004c4c <_puts_r+0x84>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	250a      	movs	r5, #10
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	6022      	str	r2, [r4, #0]
 8004c94:	701d      	strb	r5, [r3, #0]
 8004c96:	e7db      	b.n	8004c50 <_puts_r+0x88>
 8004c98:	08006f38 	.word	0x08006f38
 8004c9c:	08006f58 	.word	0x08006f58
 8004ca0:	08006f18 	.word	0x08006f18

08004ca4 <puts>:
 8004ca4:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <puts+0xc>)
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f7ff bf8d 	b.w	8004bc8 <_puts_r>
 8004cae:	bf00      	nop
 8004cb0:	20000034 	.word	0x20000034

08004cb4 <_sbrk_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d06      	ldr	r5, [pc, #24]	; (8004cd0 <_sbrk_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	f7fc fb42 	bl	8001348 <_sbrk>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_sbrk_r+0x1a>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_sbrk_r+0x1a>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	200001e0 	.word	0x200001e0

08004cd4 <__swbuf_r>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	460e      	mov	r6, r1
 8004cd8:	4614      	mov	r4, r2
 8004cda:	4605      	mov	r5, r0
 8004cdc:	b118      	cbz	r0, 8004ce6 <__swbuf_r+0x12>
 8004cde:	6983      	ldr	r3, [r0, #24]
 8004ce0:	b90b      	cbnz	r3, 8004ce6 <__swbuf_r+0x12>
 8004ce2:	f000 f9d1 	bl	8005088 <__sinit>
 8004ce6:	4b21      	ldr	r3, [pc, #132]	; (8004d6c <__swbuf_r+0x98>)
 8004ce8:	429c      	cmp	r4, r3
 8004cea:	d12b      	bne.n	8004d44 <__swbuf_r+0x70>
 8004cec:	686c      	ldr	r4, [r5, #4]
 8004cee:	69a3      	ldr	r3, [r4, #24]
 8004cf0:	60a3      	str	r3, [r4, #8]
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	071a      	lsls	r2, r3, #28
 8004cf6:	d52f      	bpl.n	8004d58 <__swbuf_r+0x84>
 8004cf8:	6923      	ldr	r3, [r4, #16]
 8004cfa:	b36b      	cbz	r3, 8004d58 <__swbuf_r+0x84>
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	1ac0      	subs	r0, r0, r3
 8004d02:	6963      	ldr	r3, [r4, #20]
 8004d04:	b2f6      	uxtb	r6, r6
 8004d06:	4283      	cmp	r3, r0
 8004d08:	4637      	mov	r7, r6
 8004d0a:	dc04      	bgt.n	8004d16 <__swbuf_r+0x42>
 8004d0c:	4621      	mov	r1, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 f926 	bl	8004f60 <_fflush_r>
 8004d14:	bb30      	cbnz	r0, 8004d64 <__swbuf_r+0x90>
 8004d16:	68a3      	ldr	r3, [r4, #8]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60a3      	str	r3, [r4, #8]
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	6022      	str	r2, [r4, #0]
 8004d22:	701e      	strb	r6, [r3, #0]
 8004d24:	6963      	ldr	r3, [r4, #20]
 8004d26:	3001      	adds	r0, #1
 8004d28:	4283      	cmp	r3, r0
 8004d2a:	d004      	beq.n	8004d36 <__swbuf_r+0x62>
 8004d2c:	89a3      	ldrh	r3, [r4, #12]
 8004d2e:	07db      	lsls	r3, r3, #31
 8004d30:	d506      	bpl.n	8004d40 <__swbuf_r+0x6c>
 8004d32:	2e0a      	cmp	r6, #10
 8004d34:	d104      	bne.n	8004d40 <__swbuf_r+0x6c>
 8004d36:	4621      	mov	r1, r4
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 f911 	bl	8004f60 <_fflush_r>
 8004d3e:	b988      	cbnz	r0, 8004d64 <__swbuf_r+0x90>
 8004d40:	4638      	mov	r0, r7
 8004d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d44:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <__swbuf_r+0x9c>)
 8004d46:	429c      	cmp	r4, r3
 8004d48:	d101      	bne.n	8004d4e <__swbuf_r+0x7a>
 8004d4a:	68ac      	ldr	r4, [r5, #8]
 8004d4c:	e7cf      	b.n	8004cee <__swbuf_r+0x1a>
 8004d4e:	4b09      	ldr	r3, [pc, #36]	; (8004d74 <__swbuf_r+0xa0>)
 8004d50:	429c      	cmp	r4, r3
 8004d52:	bf08      	it	eq
 8004d54:	68ec      	ldreq	r4, [r5, #12]
 8004d56:	e7ca      	b.n	8004cee <__swbuf_r+0x1a>
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	f000 f80c 	bl	8004d78 <__swsetup_r>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d0cb      	beq.n	8004cfc <__swbuf_r+0x28>
 8004d64:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004d68:	e7ea      	b.n	8004d40 <__swbuf_r+0x6c>
 8004d6a:	bf00      	nop
 8004d6c:	08006f38 	.word	0x08006f38
 8004d70:	08006f58 	.word	0x08006f58
 8004d74:	08006f18 	.word	0x08006f18

08004d78 <__swsetup_r>:
 8004d78:	4b32      	ldr	r3, [pc, #200]	; (8004e44 <__swsetup_r+0xcc>)
 8004d7a:	b570      	push	{r4, r5, r6, lr}
 8004d7c:	681d      	ldr	r5, [r3, #0]
 8004d7e:	4606      	mov	r6, r0
 8004d80:	460c      	mov	r4, r1
 8004d82:	b125      	cbz	r5, 8004d8e <__swsetup_r+0x16>
 8004d84:	69ab      	ldr	r3, [r5, #24]
 8004d86:	b913      	cbnz	r3, 8004d8e <__swsetup_r+0x16>
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f97d 	bl	8005088 <__sinit>
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	; (8004e48 <__swsetup_r+0xd0>)
 8004d90:	429c      	cmp	r4, r3
 8004d92:	d10f      	bne.n	8004db4 <__swsetup_r+0x3c>
 8004d94:	686c      	ldr	r4, [r5, #4]
 8004d96:	89a3      	ldrh	r3, [r4, #12]
 8004d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d9c:	0719      	lsls	r1, r3, #28
 8004d9e:	d42c      	bmi.n	8004dfa <__swsetup_r+0x82>
 8004da0:	06dd      	lsls	r5, r3, #27
 8004da2:	d411      	bmi.n	8004dc8 <__swsetup_r+0x50>
 8004da4:	2309      	movs	r3, #9
 8004da6:	6033      	str	r3, [r6, #0]
 8004da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004db2:	e03e      	b.n	8004e32 <__swsetup_r+0xba>
 8004db4:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <__swsetup_r+0xd4>)
 8004db6:	429c      	cmp	r4, r3
 8004db8:	d101      	bne.n	8004dbe <__swsetup_r+0x46>
 8004dba:	68ac      	ldr	r4, [r5, #8]
 8004dbc:	e7eb      	b.n	8004d96 <__swsetup_r+0x1e>
 8004dbe:	4b24      	ldr	r3, [pc, #144]	; (8004e50 <__swsetup_r+0xd8>)
 8004dc0:	429c      	cmp	r4, r3
 8004dc2:	bf08      	it	eq
 8004dc4:	68ec      	ldreq	r4, [r5, #12]
 8004dc6:	e7e6      	b.n	8004d96 <__swsetup_r+0x1e>
 8004dc8:	0758      	lsls	r0, r3, #29
 8004dca:	d512      	bpl.n	8004df2 <__swsetup_r+0x7a>
 8004dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dce:	b141      	cbz	r1, 8004de2 <__swsetup_r+0x6a>
 8004dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d002      	beq.n	8004dde <__swsetup_r+0x66>
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f7ff fdfd 	bl	80049d8 <_free_r>
 8004dde:	2300      	movs	r3, #0
 8004de0:	6363      	str	r3, [r4, #52]	; 0x34
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004de8:	81a3      	strh	r3, [r4, #12]
 8004dea:	2300      	movs	r3, #0
 8004dec:	6063      	str	r3, [r4, #4]
 8004dee:	6923      	ldr	r3, [r4, #16]
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	6923      	ldr	r3, [r4, #16]
 8004dfc:	b94b      	cbnz	r3, 8004e12 <__swsetup_r+0x9a>
 8004dfe:	89a3      	ldrh	r3, [r4, #12]
 8004e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e08:	d003      	beq.n	8004e12 <__swsetup_r+0x9a>
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f000 fa01 	bl	8005214 <__smakebuf_r>
 8004e12:	89a0      	ldrh	r0, [r4, #12]
 8004e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e18:	f010 0301 	ands.w	r3, r0, #1
 8004e1c:	d00a      	beq.n	8004e34 <__swsetup_r+0xbc>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60a3      	str	r3, [r4, #8]
 8004e22:	6963      	ldr	r3, [r4, #20]
 8004e24:	425b      	negs	r3, r3
 8004e26:	61a3      	str	r3, [r4, #24]
 8004e28:	6923      	ldr	r3, [r4, #16]
 8004e2a:	b943      	cbnz	r3, 8004e3e <__swsetup_r+0xc6>
 8004e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004e30:	d1ba      	bne.n	8004da8 <__swsetup_r+0x30>
 8004e32:	bd70      	pop	{r4, r5, r6, pc}
 8004e34:	0781      	lsls	r1, r0, #30
 8004e36:	bf58      	it	pl
 8004e38:	6963      	ldrpl	r3, [r4, #20]
 8004e3a:	60a3      	str	r3, [r4, #8]
 8004e3c:	e7f4      	b.n	8004e28 <__swsetup_r+0xb0>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	e7f7      	b.n	8004e32 <__swsetup_r+0xba>
 8004e42:	bf00      	nop
 8004e44:	20000034 	.word	0x20000034
 8004e48:	08006f38 	.word	0x08006f38
 8004e4c:	08006f58 	.word	0x08006f58
 8004e50:	08006f18 	.word	0x08006f18

08004e54 <__sflush_r>:
 8004e54:	898a      	ldrh	r2, [r1, #12]
 8004e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e5a:	4605      	mov	r5, r0
 8004e5c:	0710      	lsls	r0, r2, #28
 8004e5e:	460c      	mov	r4, r1
 8004e60:	d458      	bmi.n	8004f14 <__sflush_r+0xc0>
 8004e62:	684b      	ldr	r3, [r1, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc05      	bgt.n	8004e74 <__sflush_r+0x20>
 8004e68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	dc02      	bgt.n	8004e74 <__sflush_r+0x20>
 8004e6e:	2000      	movs	r0, #0
 8004e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e76:	2e00      	cmp	r6, #0
 8004e78:	d0f9      	beq.n	8004e6e <__sflush_r+0x1a>
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e80:	682f      	ldr	r7, [r5, #0]
 8004e82:	602b      	str	r3, [r5, #0]
 8004e84:	d032      	beq.n	8004eec <__sflush_r+0x98>
 8004e86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	075a      	lsls	r2, r3, #29
 8004e8c:	d505      	bpl.n	8004e9a <__sflush_r+0x46>
 8004e8e:	6863      	ldr	r3, [r4, #4]
 8004e90:	1ac0      	subs	r0, r0, r3
 8004e92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e94:	b10b      	cbz	r3, 8004e9a <__sflush_r+0x46>
 8004e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e98:	1ac0      	subs	r0, r0, r3
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ea0:	6a21      	ldr	r1, [r4, #32]
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	47b0      	blx	r6
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	d106      	bne.n	8004eba <__sflush_r+0x66>
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	291d      	cmp	r1, #29
 8004eb0:	d82c      	bhi.n	8004f0c <__sflush_r+0xb8>
 8004eb2:	4a2a      	ldr	r2, [pc, #168]	; (8004f5c <__sflush_r+0x108>)
 8004eb4:	40ca      	lsrs	r2, r1
 8004eb6:	07d6      	lsls	r6, r2, #31
 8004eb8:	d528      	bpl.n	8004f0c <__sflush_r+0xb8>
 8004eba:	2200      	movs	r2, #0
 8004ebc:	6062      	str	r2, [r4, #4]
 8004ebe:	04d9      	lsls	r1, r3, #19
 8004ec0:	6922      	ldr	r2, [r4, #16]
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	d504      	bpl.n	8004ed0 <__sflush_r+0x7c>
 8004ec6:	1c42      	adds	r2, r0, #1
 8004ec8:	d101      	bne.n	8004ece <__sflush_r+0x7a>
 8004eca:	682b      	ldr	r3, [r5, #0]
 8004ecc:	b903      	cbnz	r3, 8004ed0 <__sflush_r+0x7c>
 8004ece:	6560      	str	r0, [r4, #84]	; 0x54
 8004ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ed2:	602f      	str	r7, [r5, #0]
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	d0ca      	beq.n	8004e6e <__sflush_r+0x1a>
 8004ed8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004edc:	4299      	cmp	r1, r3
 8004ede:	d002      	beq.n	8004ee6 <__sflush_r+0x92>
 8004ee0:	4628      	mov	r0, r5
 8004ee2:	f7ff fd79 	bl	80049d8 <_free_r>
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	6360      	str	r0, [r4, #52]	; 0x34
 8004eea:	e7c1      	b.n	8004e70 <__sflush_r+0x1c>
 8004eec:	6a21      	ldr	r1, [r4, #32]
 8004eee:	2301      	movs	r3, #1
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	47b0      	blx	r6
 8004ef4:	1c41      	adds	r1, r0, #1
 8004ef6:	d1c7      	bne.n	8004e88 <__sflush_r+0x34>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0c4      	beq.n	8004e88 <__sflush_r+0x34>
 8004efe:	2b1d      	cmp	r3, #29
 8004f00:	d001      	beq.n	8004f06 <__sflush_r+0xb2>
 8004f02:	2b16      	cmp	r3, #22
 8004f04:	d101      	bne.n	8004f0a <__sflush_r+0xb6>
 8004f06:	602f      	str	r7, [r5, #0]
 8004f08:	e7b1      	b.n	8004e6e <__sflush_r+0x1a>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f10:	81a3      	strh	r3, [r4, #12]
 8004f12:	e7ad      	b.n	8004e70 <__sflush_r+0x1c>
 8004f14:	690f      	ldr	r7, [r1, #16]
 8004f16:	2f00      	cmp	r7, #0
 8004f18:	d0a9      	beq.n	8004e6e <__sflush_r+0x1a>
 8004f1a:	0793      	lsls	r3, r2, #30
 8004f1c:	680e      	ldr	r6, [r1, #0]
 8004f1e:	bf08      	it	eq
 8004f20:	694b      	ldreq	r3, [r1, #20]
 8004f22:	600f      	str	r7, [r1, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2300      	movne	r3, #0
 8004f28:	eba6 0807 	sub.w	r8, r6, r7
 8004f2c:	608b      	str	r3, [r1, #8]
 8004f2e:	f1b8 0f00 	cmp.w	r8, #0
 8004f32:	dd9c      	ble.n	8004e6e <__sflush_r+0x1a>
 8004f34:	6a21      	ldr	r1, [r4, #32]
 8004f36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f38:	4643      	mov	r3, r8
 8004f3a:	463a      	mov	r2, r7
 8004f3c:	4628      	mov	r0, r5
 8004f3e:	47b0      	blx	r6
 8004f40:	2800      	cmp	r0, #0
 8004f42:	dc06      	bgt.n	8004f52 <__sflush_r+0xfe>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f50:	e78e      	b.n	8004e70 <__sflush_r+0x1c>
 8004f52:	4407      	add	r7, r0
 8004f54:	eba8 0800 	sub.w	r8, r8, r0
 8004f58:	e7e9      	b.n	8004f2e <__sflush_r+0xda>
 8004f5a:	bf00      	nop
 8004f5c:	20400001 	.word	0x20400001

08004f60 <_fflush_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	690b      	ldr	r3, [r1, #16]
 8004f64:	4605      	mov	r5, r0
 8004f66:	460c      	mov	r4, r1
 8004f68:	b913      	cbnz	r3, 8004f70 <_fflush_r+0x10>
 8004f6a:	2500      	movs	r5, #0
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	bd38      	pop	{r3, r4, r5, pc}
 8004f70:	b118      	cbz	r0, 8004f7a <_fflush_r+0x1a>
 8004f72:	6983      	ldr	r3, [r0, #24]
 8004f74:	b90b      	cbnz	r3, 8004f7a <_fflush_r+0x1a>
 8004f76:	f000 f887 	bl	8005088 <__sinit>
 8004f7a:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <_fflush_r+0x6c>)
 8004f7c:	429c      	cmp	r4, r3
 8004f7e:	d11b      	bne.n	8004fb8 <_fflush_r+0x58>
 8004f80:	686c      	ldr	r4, [r5, #4]
 8004f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <_fflush_r+0xa>
 8004f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f8c:	07d0      	lsls	r0, r2, #31
 8004f8e:	d404      	bmi.n	8004f9a <_fflush_r+0x3a>
 8004f90:	0599      	lsls	r1, r3, #22
 8004f92:	d402      	bmi.n	8004f9a <_fflush_r+0x3a>
 8004f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f96:	f000 f915 	bl	80051c4 <__retarget_lock_acquire_recursive>
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	f7ff ff59 	bl	8004e54 <__sflush_r>
 8004fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fa4:	07da      	lsls	r2, r3, #31
 8004fa6:	4605      	mov	r5, r0
 8004fa8:	d4e0      	bmi.n	8004f6c <_fflush_r+0xc>
 8004faa:	89a3      	ldrh	r3, [r4, #12]
 8004fac:	059b      	lsls	r3, r3, #22
 8004fae:	d4dd      	bmi.n	8004f6c <_fflush_r+0xc>
 8004fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fb2:	f000 f908 	bl	80051c6 <__retarget_lock_release_recursive>
 8004fb6:	e7d9      	b.n	8004f6c <_fflush_r+0xc>
 8004fb8:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <_fflush_r+0x70>)
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	d101      	bne.n	8004fc2 <_fflush_r+0x62>
 8004fbe:	68ac      	ldr	r4, [r5, #8]
 8004fc0:	e7df      	b.n	8004f82 <_fflush_r+0x22>
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <_fflush_r+0x74>)
 8004fc4:	429c      	cmp	r4, r3
 8004fc6:	bf08      	it	eq
 8004fc8:	68ec      	ldreq	r4, [r5, #12]
 8004fca:	e7da      	b.n	8004f82 <_fflush_r+0x22>
 8004fcc:	08006f38 	.word	0x08006f38
 8004fd0:	08006f58 	.word	0x08006f58
 8004fd4:	08006f18 	.word	0x08006f18

08004fd8 <std>:
 8004fd8:	2300      	movs	r3, #0
 8004fda:	b510      	push	{r4, lr}
 8004fdc:	4604      	mov	r4, r0
 8004fde:	e9c0 3300 	strd	r3, r3, [r0]
 8004fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fe6:	6083      	str	r3, [r0, #8]
 8004fe8:	8181      	strh	r1, [r0, #12]
 8004fea:	6643      	str	r3, [r0, #100]	; 0x64
 8004fec:	81c2      	strh	r2, [r0, #14]
 8004fee:	6183      	str	r3, [r0, #24]
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	2208      	movs	r2, #8
 8004ff4:	305c      	adds	r0, #92	; 0x5c
 8004ff6:	f7ff fce7 	bl	80049c8 <memset>
 8004ffa:	4b05      	ldr	r3, [pc, #20]	; (8005010 <std+0x38>)
 8004ffc:	6263      	str	r3, [r4, #36]	; 0x24
 8004ffe:	4b05      	ldr	r3, [pc, #20]	; (8005014 <std+0x3c>)
 8005000:	62a3      	str	r3, [r4, #40]	; 0x28
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <std+0x40>)
 8005004:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <std+0x44>)
 8005008:	6224      	str	r4, [r4, #32]
 800500a:	6323      	str	r3, [r4, #48]	; 0x30
 800500c:	bd10      	pop	{r4, pc}
 800500e:	bf00      	nop
 8005010:	08005889 	.word	0x08005889
 8005014:	080058ab 	.word	0x080058ab
 8005018:	080058e3 	.word	0x080058e3
 800501c:	08005907 	.word	0x08005907

08005020 <_cleanup_r>:
 8005020:	4901      	ldr	r1, [pc, #4]	; (8005028 <_cleanup_r+0x8>)
 8005022:	f000 b8af 	b.w	8005184 <_fwalk_reent>
 8005026:	bf00      	nop
 8005028:	08004f61 	.word	0x08004f61

0800502c <__sfmoreglue>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	2268      	movs	r2, #104	; 0x68
 8005030:	1e4d      	subs	r5, r1, #1
 8005032:	4355      	muls	r5, r2
 8005034:	460e      	mov	r6, r1
 8005036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800503a:	f7ff fd39 	bl	8004ab0 <_malloc_r>
 800503e:	4604      	mov	r4, r0
 8005040:	b140      	cbz	r0, 8005054 <__sfmoreglue+0x28>
 8005042:	2100      	movs	r1, #0
 8005044:	e9c0 1600 	strd	r1, r6, [r0]
 8005048:	300c      	adds	r0, #12
 800504a:	60a0      	str	r0, [r4, #8]
 800504c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005050:	f7ff fcba 	bl	80049c8 <memset>
 8005054:	4620      	mov	r0, r4
 8005056:	bd70      	pop	{r4, r5, r6, pc}

08005058 <__sfp_lock_acquire>:
 8005058:	4801      	ldr	r0, [pc, #4]	; (8005060 <__sfp_lock_acquire+0x8>)
 800505a:	f000 b8b3 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 800505e:	bf00      	nop
 8005060:	200001dd 	.word	0x200001dd

08005064 <__sfp_lock_release>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__sfp_lock_release+0x8>)
 8005066:	f000 b8ae 	b.w	80051c6 <__retarget_lock_release_recursive>
 800506a:	bf00      	nop
 800506c:	200001dd 	.word	0x200001dd

08005070 <__sinit_lock_acquire>:
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <__sinit_lock_acquire+0x8>)
 8005072:	f000 b8a7 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 8005076:	bf00      	nop
 8005078:	200001de 	.word	0x200001de

0800507c <__sinit_lock_release>:
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <__sinit_lock_release+0x8>)
 800507e:	f000 b8a2 	b.w	80051c6 <__retarget_lock_release_recursive>
 8005082:	bf00      	nop
 8005084:	200001de 	.word	0x200001de

08005088 <__sinit>:
 8005088:	b510      	push	{r4, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	f7ff fff0 	bl	8005070 <__sinit_lock_acquire>
 8005090:	69a3      	ldr	r3, [r4, #24]
 8005092:	b11b      	cbz	r3, 800509c <__sinit+0x14>
 8005094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005098:	f7ff bff0 	b.w	800507c <__sinit_lock_release>
 800509c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80050a0:	6523      	str	r3, [r4, #80]	; 0x50
 80050a2:	4b13      	ldr	r3, [pc, #76]	; (80050f0 <__sinit+0x68>)
 80050a4:	4a13      	ldr	r2, [pc, #76]	; (80050f4 <__sinit+0x6c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80050aa:	42a3      	cmp	r3, r4
 80050ac:	bf04      	itt	eq
 80050ae:	2301      	moveq	r3, #1
 80050b0:	61a3      	streq	r3, [r4, #24]
 80050b2:	4620      	mov	r0, r4
 80050b4:	f000 f820 	bl	80050f8 <__sfp>
 80050b8:	6060      	str	r0, [r4, #4]
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 f81c 	bl	80050f8 <__sfp>
 80050c0:	60a0      	str	r0, [r4, #8]
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f818 	bl	80050f8 <__sfp>
 80050c8:	2200      	movs	r2, #0
 80050ca:	60e0      	str	r0, [r4, #12]
 80050cc:	2104      	movs	r1, #4
 80050ce:	6860      	ldr	r0, [r4, #4]
 80050d0:	f7ff ff82 	bl	8004fd8 <std>
 80050d4:	68a0      	ldr	r0, [r4, #8]
 80050d6:	2201      	movs	r2, #1
 80050d8:	2109      	movs	r1, #9
 80050da:	f7ff ff7d 	bl	8004fd8 <std>
 80050de:	68e0      	ldr	r0, [r4, #12]
 80050e0:	2202      	movs	r2, #2
 80050e2:	2112      	movs	r1, #18
 80050e4:	f7ff ff78 	bl	8004fd8 <std>
 80050e8:	2301      	movs	r3, #1
 80050ea:	61a3      	str	r3, [r4, #24]
 80050ec:	e7d2      	b.n	8005094 <__sinit+0xc>
 80050ee:	bf00      	nop
 80050f0:	08006f14 	.word	0x08006f14
 80050f4:	08005021 	.word	0x08005021

080050f8 <__sfp>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	4607      	mov	r7, r0
 80050fc:	f7ff ffac 	bl	8005058 <__sfp_lock_acquire>
 8005100:	4b1e      	ldr	r3, [pc, #120]	; (800517c <__sfp+0x84>)
 8005102:	681e      	ldr	r6, [r3, #0]
 8005104:	69b3      	ldr	r3, [r6, #24]
 8005106:	b913      	cbnz	r3, 800510e <__sfp+0x16>
 8005108:	4630      	mov	r0, r6
 800510a:	f7ff ffbd 	bl	8005088 <__sinit>
 800510e:	3648      	adds	r6, #72	; 0x48
 8005110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005114:	3b01      	subs	r3, #1
 8005116:	d503      	bpl.n	8005120 <__sfp+0x28>
 8005118:	6833      	ldr	r3, [r6, #0]
 800511a:	b30b      	cbz	r3, 8005160 <__sfp+0x68>
 800511c:	6836      	ldr	r6, [r6, #0]
 800511e:	e7f7      	b.n	8005110 <__sfp+0x18>
 8005120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005124:	b9d5      	cbnz	r5, 800515c <__sfp+0x64>
 8005126:	4b16      	ldr	r3, [pc, #88]	; (8005180 <__sfp+0x88>)
 8005128:	60e3      	str	r3, [r4, #12]
 800512a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800512e:	6665      	str	r5, [r4, #100]	; 0x64
 8005130:	f000 f847 	bl	80051c2 <__retarget_lock_init_recursive>
 8005134:	f7ff ff96 	bl	8005064 <__sfp_lock_release>
 8005138:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800513c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005140:	6025      	str	r5, [r4, #0]
 8005142:	61a5      	str	r5, [r4, #24]
 8005144:	2208      	movs	r2, #8
 8005146:	4629      	mov	r1, r5
 8005148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800514c:	f7ff fc3c 	bl	80049c8 <memset>
 8005150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005158:	4620      	mov	r0, r4
 800515a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515c:	3468      	adds	r4, #104	; 0x68
 800515e:	e7d9      	b.n	8005114 <__sfp+0x1c>
 8005160:	2104      	movs	r1, #4
 8005162:	4638      	mov	r0, r7
 8005164:	f7ff ff62 	bl	800502c <__sfmoreglue>
 8005168:	4604      	mov	r4, r0
 800516a:	6030      	str	r0, [r6, #0]
 800516c:	2800      	cmp	r0, #0
 800516e:	d1d5      	bne.n	800511c <__sfp+0x24>
 8005170:	f7ff ff78 	bl	8005064 <__sfp_lock_release>
 8005174:	230c      	movs	r3, #12
 8005176:	603b      	str	r3, [r7, #0]
 8005178:	e7ee      	b.n	8005158 <__sfp+0x60>
 800517a:	bf00      	nop
 800517c:	08006f14 	.word	0x08006f14
 8005180:	ffff0001 	.word	0xffff0001

08005184 <_fwalk_reent>:
 8005184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005188:	4606      	mov	r6, r0
 800518a:	4688      	mov	r8, r1
 800518c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005190:	2700      	movs	r7, #0
 8005192:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005196:	f1b9 0901 	subs.w	r9, r9, #1
 800519a:	d505      	bpl.n	80051a8 <_fwalk_reent+0x24>
 800519c:	6824      	ldr	r4, [r4, #0]
 800519e:	2c00      	cmp	r4, #0
 80051a0:	d1f7      	bne.n	8005192 <_fwalk_reent+0xe>
 80051a2:	4638      	mov	r0, r7
 80051a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051a8:	89ab      	ldrh	r3, [r5, #12]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d907      	bls.n	80051be <_fwalk_reent+0x3a>
 80051ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80051b2:	3301      	adds	r3, #1
 80051b4:	d003      	beq.n	80051be <_fwalk_reent+0x3a>
 80051b6:	4629      	mov	r1, r5
 80051b8:	4630      	mov	r0, r6
 80051ba:	47c0      	blx	r8
 80051bc:	4307      	orrs	r7, r0
 80051be:	3568      	adds	r5, #104	; 0x68
 80051c0:	e7e9      	b.n	8005196 <_fwalk_reent+0x12>

080051c2 <__retarget_lock_init_recursive>:
 80051c2:	4770      	bx	lr

080051c4 <__retarget_lock_acquire_recursive>:
 80051c4:	4770      	bx	lr

080051c6 <__retarget_lock_release_recursive>:
 80051c6:	4770      	bx	lr

080051c8 <__swhatbuf_r>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	460e      	mov	r6, r1
 80051cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d0:	2900      	cmp	r1, #0
 80051d2:	b096      	sub	sp, #88	; 0x58
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	da08      	bge.n	80051ec <__swhatbuf_r+0x24>
 80051da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	602a      	str	r2, [r5, #0]
 80051e2:	061a      	lsls	r2, r3, #24
 80051e4:	d410      	bmi.n	8005208 <__swhatbuf_r+0x40>
 80051e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051ea:	e00e      	b.n	800520a <__swhatbuf_r+0x42>
 80051ec:	466a      	mov	r2, sp
 80051ee:	f000 fbb1 	bl	8005954 <_fstat_r>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	dbf1      	blt.n	80051da <__swhatbuf_r+0x12>
 80051f6:	9a01      	ldr	r2, [sp, #4]
 80051f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80051fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005200:	425a      	negs	r2, r3
 8005202:	415a      	adcs	r2, r3
 8005204:	602a      	str	r2, [r5, #0]
 8005206:	e7ee      	b.n	80051e6 <__swhatbuf_r+0x1e>
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	2000      	movs	r0, #0
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	b016      	add	sp, #88	; 0x58
 8005210:	bd70      	pop	{r4, r5, r6, pc}
	...

08005214 <__smakebuf_r>:
 8005214:	898b      	ldrh	r3, [r1, #12]
 8005216:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005218:	079d      	lsls	r5, r3, #30
 800521a:	4606      	mov	r6, r0
 800521c:	460c      	mov	r4, r1
 800521e:	d507      	bpl.n	8005230 <__smakebuf_r+0x1c>
 8005220:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005224:	6023      	str	r3, [r4, #0]
 8005226:	6123      	str	r3, [r4, #16]
 8005228:	2301      	movs	r3, #1
 800522a:	6163      	str	r3, [r4, #20]
 800522c:	b002      	add	sp, #8
 800522e:	bd70      	pop	{r4, r5, r6, pc}
 8005230:	ab01      	add	r3, sp, #4
 8005232:	466a      	mov	r2, sp
 8005234:	f7ff ffc8 	bl	80051c8 <__swhatbuf_r>
 8005238:	9900      	ldr	r1, [sp, #0]
 800523a:	4605      	mov	r5, r0
 800523c:	4630      	mov	r0, r6
 800523e:	f7ff fc37 	bl	8004ab0 <_malloc_r>
 8005242:	b948      	cbnz	r0, 8005258 <__smakebuf_r+0x44>
 8005244:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005248:	059a      	lsls	r2, r3, #22
 800524a:	d4ef      	bmi.n	800522c <__smakebuf_r+0x18>
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	81a3      	strh	r3, [r4, #12]
 8005256:	e7e3      	b.n	8005220 <__smakebuf_r+0xc>
 8005258:	4b0d      	ldr	r3, [pc, #52]	; (8005290 <__smakebuf_r+0x7c>)
 800525a:	62b3      	str	r3, [r6, #40]	; 0x28
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	6020      	str	r0, [r4, #0]
 8005260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005264:	81a3      	strh	r3, [r4, #12]
 8005266:	9b00      	ldr	r3, [sp, #0]
 8005268:	6163      	str	r3, [r4, #20]
 800526a:	9b01      	ldr	r3, [sp, #4]
 800526c:	6120      	str	r0, [r4, #16]
 800526e:	b15b      	cbz	r3, 8005288 <__smakebuf_r+0x74>
 8005270:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005274:	4630      	mov	r0, r6
 8005276:	f000 fb7f 	bl	8005978 <_isatty_r>
 800527a:	b128      	cbz	r0, 8005288 <__smakebuf_r+0x74>
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	f043 0301 	orr.w	r3, r3, #1
 8005286:	81a3      	strh	r3, [r4, #12]
 8005288:	89a0      	ldrh	r0, [r4, #12]
 800528a:	4305      	orrs	r5, r0
 800528c:	81a5      	strh	r5, [r4, #12]
 800528e:	e7cd      	b.n	800522c <__smakebuf_r+0x18>
 8005290:	08005021 	.word	0x08005021

08005294 <__malloc_lock>:
 8005294:	4801      	ldr	r0, [pc, #4]	; (800529c <__malloc_lock+0x8>)
 8005296:	f7ff bf95 	b.w	80051c4 <__retarget_lock_acquire_recursive>
 800529a:	bf00      	nop
 800529c:	200001dc 	.word	0x200001dc

080052a0 <__malloc_unlock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <__malloc_unlock+0x8>)
 80052a2:	f7ff bf90 	b.w	80051c6 <__retarget_lock_release_recursive>
 80052a6:	bf00      	nop
 80052a8:	200001dc 	.word	0x200001dc

080052ac <__sfputc_r>:
 80052ac:	6893      	ldr	r3, [r2, #8]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	b410      	push	{r4}
 80052b4:	6093      	str	r3, [r2, #8]
 80052b6:	da08      	bge.n	80052ca <__sfputc_r+0x1e>
 80052b8:	6994      	ldr	r4, [r2, #24]
 80052ba:	42a3      	cmp	r3, r4
 80052bc:	db01      	blt.n	80052c2 <__sfputc_r+0x16>
 80052be:	290a      	cmp	r1, #10
 80052c0:	d103      	bne.n	80052ca <__sfputc_r+0x1e>
 80052c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052c6:	f7ff bd05 	b.w	8004cd4 <__swbuf_r>
 80052ca:	6813      	ldr	r3, [r2, #0]
 80052cc:	1c58      	adds	r0, r3, #1
 80052ce:	6010      	str	r0, [r2, #0]
 80052d0:	7019      	strb	r1, [r3, #0]
 80052d2:	4608      	mov	r0, r1
 80052d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052d8:	4770      	bx	lr

080052da <__sfputs_r>:
 80052da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052dc:	4606      	mov	r6, r0
 80052de:	460f      	mov	r7, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	18d5      	adds	r5, r2, r3
 80052e4:	42ac      	cmp	r4, r5
 80052e6:	d101      	bne.n	80052ec <__sfputs_r+0x12>
 80052e8:	2000      	movs	r0, #0
 80052ea:	e007      	b.n	80052fc <__sfputs_r+0x22>
 80052ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052f0:	463a      	mov	r2, r7
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7ff ffda 	bl	80052ac <__sfputc_r>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d1f3      	bne.n	80052e4 <__sfputs_r+0xa>
 80052fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005300 <_vfiprintf_r>:
 8005300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005304:	460d      	mov	r5, r1
 8005306:	b09d      	sub	sp, #116	; 0x74
 8005308:	4614      	mov	r4, r2
 800530a:	4698      	mov	r8, r3
 800530c:	4606      	mov	r6, r0
 800530e:	b118      	cbz	r0, 8005318 <_vfiprintf_r+0x18>
 8005310:	6983      	ldr	r3, [r0, #24]
 8005312:	b90b      	cbnz	r3, 8005318 <_vfiprintf_r+0x18>
 8005314:	f7ff feb8 	bl	8005088 <__sinit>
 8005318:	4b89      	ldr	r3, [pc, #548]	; (8005540 <_vfiprintf_r+0x240>)
 800531a:	429d      	cmp	r5, r3
 800531c:	d11b      	bne.n	8005356 <_vfiprintf_r+0x56>
 800531e:	6875      	ldr	r5, [r6, #4]
 8005320:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005322:	07d9      	lsls	r1, r3, #31
 8005324:	d405      	bmi.n	8005332 <_vfiprintf_r+0x32>
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	059a      	lsls	r2, r3, #22
 800532a:	d402      	bmi.n	8005332 <_vfiprintf_r+0x32>
 800532c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800532e:	f7ff ff49 	bl	80051c4 <__retarget_lock_acquire_recursive>
 8005332:	89ab      	ldrh	r3, [r5, #12]
 8005334:	071b      	lsls	r3, r3, #28
 8005336:	d501      	bpl.n	800533c <_vfiprintf_r+0x3c>
 8005338:	692b      	ldr	r3, [r5, #16]
 800533a:	b9eb      	cbnz	r3, 8005378 <_vfiprintf_r+0x78>
 800533c:	4629      	mov	r1, r5
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff fd1a 	bl	8004d78 <__swsetup_r>
 8005344:	b1c0      	cbz	r0, 8005378 <_vfiprintf_r+0x78>
 8005346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005348:	07dc      	lsls	r4, r3, #31
 800534a:	d50e      	bpl.n	800536a <_vfiprintf_r+0x6a>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005350:	b01d      	add	sp, #116	; 0x74
 8005352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005356:	4b7b      	ldr	r3, [pc, #492]	; (8005544 <_vfiprintf_r+0x244>)
 8005358:	429d      	cmp	r5, r3
 800535a:	d101      	bne.n	8005360 <_vfiprintf_r+0x60>
 800535c:	68b5      	ldr	r5, [r6, #8]
 800535e:	e7df      	b.n	8005320 <_vfiprintf_r+0x20>
 8005360:	4b79      	ldr	r3, [pc, #484]	; (8005548 <_vfiprintf_r+0x248>)
 8005362:	429d      	cmp	r5, r3
 8005364:	bf08      	it	eq
 8005366:	68f5      	ldreq	r5, [r6, #12]
 8005368:	e7da      	b.n	8005320 <_vfiprintf_r+0x20>
 800536a:	89ab      	ldrh	r3, [r5, #12]
 800536c:	0598      	lsls	r0, r3, #22
 800536e:	d4ed      	bmi.n	800534c <_vfiprintf_r+0x4c>
 8005370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005372:	f7ff ff28 	bl	80051c6 <__retarget_lock_release_recursive>
 8005376:	e7e9      	b.n	800534c <_vfiprintf_r+0x4c>
 8005378:	2300      	movs	r3, #0
 800537a:	9309      	str	r3, [sp, #36]	; 0x24
 800537c:	2320      	movs	r3, #32
 800537e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005382:	f8cd 800c 	str.w	r8, [sp, #12]
 8005386:	2330      	movs	r3, #48	; 0x30
 8005388:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800554c <_vfiprintf_r+0x24c>
 800538c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005390:	f04f 0901 	mov.w	r9, #1
 8005394:	4623      	mov	r3, r4
 8005396:	469a      	mov	sl, r3
 8005398:	f813 2b01 	ldrb.w	r2, [r3], #1
 800539c:	b10a      	cbz	r2, 80053a2 <_vfiprintf_r+0xa2>
 800539e:	2a25      	cmp	r2, #37	; 0x25
 80053a0:	d1f9      	bne.n	8005396 <_vfiprintf_r+0x96>
 80053a2:	ebba 0b04 	subs.w	fp, sl, r4
 80053a6:	d00b      	beq.n	80053c0 <_vfiprintf_r+0xc0>
 80053a8:	465b      	mov	r3, fp
 80053aa:	4622      	mov	r2, r4
 80053ac:	4629      	mov	r1, r5
 80053ae:	4630      	mov	r0, r6
 80053b0:	f7ff ff93 	bl	80052da <__sfputs_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	f000 80aa 	beq.w	800550e <_vfiprintf_r+0x20e>
 80053ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053bc:	445a      	add	r2, fp
 80053be:	9209      	str	r2, [sp, #36]	; 0x24
 80053c0:	f89a 3000 	ldrb.w	r3, [sl]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80a2 	beq.w	800550e <_vfiprintf_r+0x20e>
 80053ca:	2300      	movs	r3, #0
 80053cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053d4:	f10a 0a01 	add.w	sl, sl, #1
 80053d8:	9304      	str	r3, [sp, #16]
 80053da:	9307      	str	r3, [sp, #28]
 80053dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053e0:	931a      	str	r3, [sp, #104]	; 0x68
 80053e2:	4654      	mov	r4, sl
 80053e4:	2205      	movs	r2, #5
 80053e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053ea:	4858      	ldr	r0, [pc, #352]	; (800554c <_vfiprintf_r+0x24c>)
 80053ec:	f7fa fec8 	bl	8000180 <memchr>
 80053f0:	9a04      	ldr	r2, [sp, #16]
 80053f2:	b9d8      	cbnz	r0, 800542c <_vfiprintf_r+0x12c>
 80053f4:	06d1      	lsls	r1, r2, #27
 80053f6:	bf44      	itt	mi
 80053f8:	2320      	movmi	r3, #32
 80053fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80053fe:	0713      	lsls	r3, r2, #28
 8005400:	bf44      	itt	mi
 8005402:	232b      	movmi	r3, #43	; 0x2b
 8005404:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005408:	f89a 3000 	ldrb.w	r3, [sl]
 800540c:	2b2a      	cmp	r3, #42	; 0x2a
 800540e:	d015      	beq.n	800543c <_vfiprintf_r+0x13c>
 8005410:	9a07      	ldr	r2, [sp, #28]
 8005412:	4654      	mov	r4, sl
 8005414:	2000      	movs	r0, #0
 8005416:	f04f 0c0a 	mov.w	ip, #10
 800541a:	4621      	mov	r1, r4
 800541c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005420:	3b30      	subs	r3, #48	; 0x30
 8005422:	2b09      	cmp	r3, #9
 8005424:	d94e      	bls.n	80054c4 <_vfiprintf_r+0x1c4>
 8005426:	b1b0      	cbz	r0, 8005456 <_vfiprintf_r+0x156>
 8005428:	9207      	str	r2, [sp, #28]
 800542a:	e014      	b.n	8005456 <_vfiprintf_r+0x156>
 800542c:	eba0 0308 	sub.w	r3, r0, r8
 8005430:	fa09 f303 	lsl.w	r3, r9, r3
 8005434:	4313      	orrs	r3, r2
 8005436:	9304      	str	r3, [sp, #16]
 8005438:	46a2      	mov	sl, r4
 800543a:	e7d2      	b.n	80053e2 <_vfiprintf_r+0xe2>
 800543c:	9b03      	ldr	r3, [sp, #12]
 800543e:	1d19      	adds	r1, r3, #4
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	9103      	str	r1, [sp, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	bfbb      	ittet	lt
 8005448:	425b      	neglt	r3, r3
 800544a:	f042 0202 	orrlt.w	r2, r2, #2
 800544e:	9307      	strge	r3, [sp, #28]
 8005450:	9307      	strlt	r3, [sp, #28]
 8005452:	bfb8      	it	lt
 8005454:	9204      	strlt	r2, [sp, #16]
 8005456:	7823      	ldrb	r3, [r4, #0]
 8005458:	2b2e      	cmp	r3, #46	; 0x2e
 800545a:	d10c      	bne.n	8005476 <_vfiprintf_r+0x176>
 800545c:	7863      	ldrb	r3, [r4, #1]
 800545e:	2b2a      	cmp	r3, #42	; 0x2a
 8005460:	d135      	bne.n	80054ce <_vfiprintf_r+0x1ce>
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	1d1a      	adds	r2, r3, #4
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	9203      	str	r2, [sp, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	bfb8      	it	lt
 800546e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005472:	3402      	adds	r4, #2
 8005474:	9305      	str	r3, [sp, #20]
 8005476:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800555c <_vfiprintf_r+0x25c>
 800547a:	7821      	ldrb	r1, [r4, #0]
 800547c:	2203      	movs	r2, #3
 800547e:	4650      	mov	r0, sl
 8005480:	f7fa fe7e 	bl	8000180 <memchr>
 8005484:	b140      	cbz	r0, 8005498 <_vfiprintf_r+0x198>
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	eba0 000a 	sub.w	r0, r0, sl
 800548c:	fa03 f000 	lsl.w	r0, r3, r0
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	4303      	orrs	r3, r0
 8005494:	3401      	adds	r4, #1
 8005496:	9304      	str	r3, [sp, #16]
 8005498:	f814 1b01 	ldrb.w	r1, [r4], #1
 800549c:	482c      	ldr	r0, [pc, #176]	; (8005550 <_vfiprintf_r+0x250>)
 800549e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054a2:	2206      	movs	r2, #6
 80054a4:	f7fa fe6c 	bl	8000180 <memchr>
 80054a8:	2800      	cmp	r0, #0
 80054aa:	d03f      	beq.n	800552c <_vfiprintf_r+0x22c>
 80054ac:	4b29      	ldr	r3, [pc, #164]	; (8005554 <_vfiprintf_r+0x254>)
 80054ae:	bb1b      	cbnz	r3, 80054f8 <_vfiprintf_r+0x1f8>
 80054b0:	9b03      	ldr	r3, [sp, #12]
 80054b2:	3307      	adds	r3, #7
 80054b4:	f023 0307 	bic.w	r3, r3, #7
 80054b8:	3308      	adds	r3, #8
 80054ba:	9303      	str	r3, [sp, #12]
 80054bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054be:	443b      	add	r3, r7
 80054c0:	9309      	str	r3, [sp, #36]	; 0x24
 80054c2:	e767      	b.n	8005394 <_vfiprintf_r+0x94>
 80054c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80054c8:	460c      	mov	r4, r1
 80054ca:	2001      	movs	r0, #1
 80054cc:	e7a5      	b.n	800541a <_vfiprintf_r+0x11a>
 80054ce:	2300      	movs	r3, #0
 80054d0:	3401      	adds	r4, #1
 80054d2:	9305      	str	r3, [sp, #20]
 80054d4:	4619      	mov	r1, r3
 80054d6:	f04f 0c0a 	mov.w	ip, #10
 80054da:	4620      	mov	r0, r4
 80054dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054e0:	3a30      	subs	r2, #48	; 0x30
 80054e2:	2a09      	cmp	r2, #9
 80054e4:	d903      	bls.n	80054ee <_vfiprintf_r+0x1ee>
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d0c5      	beq.n	8005476 <_vfiprintf_r+0x176>
 80054ea:	9105      	str	r1, [sp, #20]
 80054ec:	e7c3      	b.n	8005476 <_vfiprintf_r+0x176>
 80054ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80054f2:	4604      	mov	r4, r0
 80054f4:	2301      	movs	r3, #1
 80054f6:	e7f0      	b.n	80054da <_vfiprintf_r+0x1da>
 80054f8:	ab03      	add	r3, sp, #12
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	462a      	mov	r2, r5
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <_vfiprintf_r+0x258>)
 8005500:	a904      	add	r1, sp, #16
 8005502:	4630      	mov	r0, r6
 8005504:	f3af 8000 	nop.w
 8005508:	4607      	mov	r7, r0
 800550a:	1c78      	adds	r0, r7, #1
 800550c:	d1d6      	bne.n	80054bc <_vfiprintf_r+0x1bc>
 800550e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005510:	07d9      	lsls	r1, r3, #31
 8005512:	d405      	bmi.n	8005520 <_vfiprintf_r+0x220>
 8005514:	89ab      	ldrh	r3, [r5, #12]
 8005516:	059a      	lsls	r2, r3, #22
 8005518:	d402      	bmi.n	8005520 <_vfiprintf_r+0x220>
 800551a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800551c:	f7ff fe53 	bl	80051c6 <__retarget_lock_release_recursive>
 8005520:	89ab      	ldrh	r3, [r5, #12]
 8005522:	065b      	lsls	r3, r3, #25
 8005524:	f53f af12 	bmi.w	800534c <_vfiprintf_r+0x4c>
 8005528:	9809      	ldr	r0, [sp, #36]	; 0x24
 800552a:	e711      	b.n	8005350 <_vfiprintf_r+0x50>
 800552c:	ab03      	add	r3, sp, #12
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	462a      	mov	r2, r5
 8005532:	4b09      	ldr	r3, [pc, #36]	; (8005558 <_vfiprintf_r+0x258>)
 8005534:	a904      	add	r1, sp, #16
 8005536:	4630      	mov	r0, r6
 8005538:	f000 f880 	bl	800563c <_printf_i>
 800553c:	e7e4      	b.n	8005508 <_vfiprintf_r+0x208>
 800553e:	bf00      	nop
 8005540:	08006f38 	.word	0x08006f38
 8005544:	08006f58 	.word	0x08006f58
 8005548:	08006f18 	.word	0x08006f18
 800554c:	08006f78 	.word	0x08006f78
 8005550:	08006f82 	.word	0x08006f82
 8005554:	00000000 	.word	0x00000000
 8005558:	080052db 	.word	0x080052db
 800555c:	08006f7e 	.word	0x08006f7e

08005560 <_printf_common>:
 8005560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	4616      	mov	r6, r2
 8005566:	4699      	mov	r9, r3
 8005568:	688a      	ldr	r2, [r1, #8]
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005570:	4293      	cmp	r3, r2
 8005572:	bfb8      	it	lt
 8005574:	4613      	movlt	r3, r2
 8005576:	6033      	str	r3, [r6, #0]
 8005578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800557c:	4607      	mov	r7, r0
 800557e:	460c      	mov	r4, r1
 8005580:	b10a      	cbz	r2, 8005586 <_printf_common+0x26>
 8005582:	3301      	adds	r3, #1
 8005584:	6033      	str	r3, [r6, #0]
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	0699      	lsls	r1, r3, #26
 800558a:	bf42      	ittt	mi
 800558c:	6833      	ldrmi	r3, [r6, #0]
 800558e:	3302      	addmi	r3, #2
 8005590:	6033      	strmi	r3, [r6, #0]
 8005592:	6825      	ldr	r5, [r4, #0]
 8005594:	f015 0506 	ands.w	r5, r5, #6
 8005598:	d106      	bne.n	80055a8 <_printf_common+0x48>
 800559a:	f104 0a19 	add.w	sl, r4, #25
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	6832      	ldr	r2, [r6, #0]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dc26      	bgt.n	80055f6 <_printf_common+0x96>
 80055a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ac:	1e13      	subs	r3, r2, #0
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	bf18      	it	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	0692      	lsls	r2, r2, #26
 80055b6:	d42b      	bmi.n	8005610 <_printf_common+0xb0>
 80055b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055bc:	4649      	mov	r1, r9
 80055be:	4638      	mov	r0, r7
 80055c0:	47c0      	blx	r8
 80055c2:	3001      	adds	r0, #1
 80055c4:	d01e      	beq.n	8005604 <_printf_common+0xa4>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	68e5      	ldr	r5, [r4, #12]
 80055ca:	6832      	ldr	r2, [r6, #0]
 80055cc:	f003 0306 	and.w	r3, r3, #6
 80055d0:	2b04      	cmp	r3, #4
 80055d2:	bf08      	it	eq
 80055d4:	1aad      	subeq	r5, r5, r2
 80055d6:	68a3      	ldr	r3, [r4, #8]
 80055d8:	6922      	ldr	r2, [r4, #16]
 80055da:	bf0c      	ite	eq
 80055dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055e0:	2500      	movne	r5, #0
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bfc4      	itt	gt
 80055e6:	1a9b      	subgt	r3, r3, r2
 80055e8:	18ed      	addgt	r5, r5, r3
 80055ea:	2600      	movs	r6, #0
 80055ec:	341a      	adds	r4, #26
 80055ee:	42b5      	cmp	r5, r6
 80055f0:	d11a      	bne.n	8005628 <_printf_common+0xc8>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e008      	b.n	8005608 <_printf_common+0xa8>
 80055f6:	2301      	movs	r3, #1
 80055f8:	4652      	mov	r2, sl
 80055fa:	4649      	mov	r1, r9
 80055fc:	4638      	mov	r0, r7
 80055fe:	47c0      	blx	r8
 8005600:	3001      	adds	r0, #1
 8005602:	d103      	bne.n	800560c <_printf_common+0xac>
 8005604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800560c:	3501      	adds	r5, #1
 800560e:	e7c6      	b.n	800559e <_printf_common+0x3e>
 8005610:	18e1      	adds	r1, r4, r3
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	2030      	movs	r0, #48	; 0x30
 8005616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800561a:	4422      	add	r2, r4
 800561c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005624:	3302      	adds	r3, #2
 8005626:	e7c7      	b.n	80055b8 <_printf_common+0x58>
 8005628:	2301      	movs	r3, #1
 800562a:	4622      	mov	r2, r4
 800562c:	4649      	mov	r1, r9
 800562e:	4638      	mov	r0, r7
 8005630:	47c0      	blx	r8
 8005632:	3001      	adds	r0, #1
 8005634:	d0e6      	beq.n	8005604 <_printf_common+0xa4>
 8005636:	3601      	adds	r6, #1
 8005638:	e7d9      	b.n	80055ee <_printf_common+0x8e>
	...

0800563c <_printf_i>:
 800563c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005640:	7e0f      	ldrb	r7, [r1, #24]
 8005642:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005644:	2f78      	cmp	r7, #120	; 0x78
 8005646:	4691      	mov	r9, r2
 8005648:	4680      	mov	r8, r0
 800564a:	460c      	mov	r4, r1
 800564c:	469a      	mov	sl, r3
 800564e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005652:	d807      	bhi.n	8005664 <_printf_i+0x28>
 8005654:	2f62      	cmp	r7, #98	; 0x62
 8005656:	d80a      	bhi.n	800566e <_printf_i+0x32>
 8005658:	2f00      	cmp	r7, #0
 800565a:	f000 80d8 	beq.w	800580e <_printf_i+0x1d2>
 800565e:	2f58      	cmp	r7, #88	; 0x58
 8005660:	f000 80a3 	beq.w	80057aa <_printf_i+0x16e>
 8005664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800566c:	e03a      	b.n	80056e4 <_printf_i+0xa8>
 800566e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005672:	2b15      	cmp	r3, #21
 8005674:	d8f6      	bhi.n	8005664 <_printf_i+0x28>
 8005676:	a101      	add	r1, pc, #4	; (adr r1, 800567c <_printf_i+0x40>)
 8005678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800567c:	080056d5 	.word	0x080056d5
 8005680:	080056e9 	.word	0x080056e9
 8005684:	08005665 	.word	0x08005665
 8005688:	08005665 	.word	0x08005665
 800568c:	08005665 	.word	0x08005665
 8005690:	08005665 	.word	0x08005665
 8005694:	080056e9 	.word	0x080056e9
 8005698:	08005665 	.word	0x08005665
 800569c:	08005665 	.word	0x08005665
 80056a0:	08005665 	.word	0x08005665
 80056a4:	08005665 	.word	0x08005665
 80056a8:	080057f5 	.word	0x080057f5
 80056ac:	08005719 	.word	0x08005719
 80056b0:	080057d7 	.word	0x080057d7
 80056b4:	08005665 	.word	0x08005665
 80056b8:	08005665 	.word	0x08005665
 80056bc:	08005817 	.word	0x08005817
 80056c0:	08005665 	.word	0x08005665
 80056c4:	08005719 	.word	0x08005719
 80056c8:	08005665 	.word	0x08005665
 80056cc:	08005665 	.word	0x08005665
 80056d0:	080057df 	.word	0x080057df
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	602a      	str	r2, [r5, #0]
 80056dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0a3      	b.n	8005830 <_printf_i+0x1f4>
 80056e8:	6820      	ldr	r0, [r4, #0]
 80056ea:	6829      	ldr	r1, [r5, #0]
 80056ec:	0606      	lsls	r6, r0, #24
 80056ee:	f101 0304 	add.w	r3, r1, #4
 80056f2:	d50a      	bpl.n	800570a <_printf_i+0xce>
 80056f4:	680e      	ldr	r6, [r1, #0]
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	da03      	bge.n	8005704 <_printf_i+0xc8>
 80056fc:	232d      	movs	r3, #45	; 0x2d
 80056fe:	4276      	negs	r6, r6
 8005700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005704:	485e      	ldr	r0, [pc, #376]	; (8005880 <_printf_i+0x244>)
 8005706:	230a      	movs	r3, #10
 8005708:	e019      	b.n	800573e <_printf_i+0x102>
 800570a:	680e      	ldr	r6, [r1, #0]
 800570c:	602b      	str	r3, [r5, #0]
 800570e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005712:	bf18      	it	ne
 8005714:	b236      	sxthne	r6, r6
 8005716:	e7ef      	b.n	80056f8 <_printf_i+0xbc>
 8005718:	682b      	ldr	r3, [r5, #0]
 800571a:	6820      	ldr	r0, [r4, #0]
 800571c:	1d19      	adds	r1, r3, #4
 800571e:	6029      	str	r1, [r5, #0]
 8005720:	0601      	lsls	r1, r0, #24
 8005722:	d501      	bpl.n	8005728 <_printf_i+0xec>
 8005724:	681e      	ldr	r6, [r3, #0]
 8005726:	e002      	b.n	800572e <_printf_i+0xf2>
 8005728:	0646      	lsls	r6, r0, #25
 800572a:	d5fb      	bpl.n	8005724 <_printf_i+0xe8>
 800572c:	881e      	ldrh	r6, [r3, #0]
 800572e:	4854      	ldr	r0, [pc, #336]	; (8005880 <_printf_i+0x244>)
 8005730:	2f6f      	cmp	r7, #111	; 0x6f
 8005732:	bf0c      	ite	eq
 8005734:	2308      	moveq	r3, #8
 8005736:	230a      	movne	r3, #10
 8005738:	2100      	movs	r1, #0
 800573a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800573e:	6865      	ldr	r5, [r4, #4]
 8005740:	60a5      	str	r5, [r4, #8]
 8005742:	2d00      	cmp	r5, #0
 8005744:	bfa2      	ittt	ge
 8005746:	6821      	ldrge	r1, [r4, #0]
 8005748:	f021 0104 	bicge.w	r1, r1, #4
 800574c:	6021      	strge	r1, [r4, #0]
 800574e:	b90e      	cbnz	r6, 8005754 <_printf_i+0x118>
 8005750:	2d00      	cmp	r5, #0
 8005752:	d04d      	beq.n	80057f0 <_printf_i+0x1b4>
 8005754:	4615      	mov	r5, r2
 8005756:	fbb6 f1f3 	udiv	r1, r6, r3
 800575a:	fb03 6711 	mls	r7, r3, r1, r6
 800575e:	5dc7      	ldrb	r7, [r0, r7]
 8005760:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005764:	4637      	mov	r7, r6
 8005766:	42bb      	cmp	r3, r7
 8005768:	460e      	mov	r6, r1
 800576a:	d9f4      	bls.n	8005756 <_printf_i+0x11a>
 800576c:	2b08      	cmp	r3, #8
 800576e:	d10b      	bne.n	8005788 <_printf_i+0x14c>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	07de      	lsls	r6, r3, #31
 8005774:	d508      	bpl.n	8005788 <_printf_i+0x14c>
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	6861      	ldr	r1, [r4, #4]
 800577a:	4299      	cmp	r1, r3
 800577c:	bfde      	ittt	le
 800577e:	2330      	movle	r3, #48	; 0x30
 8005780:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005784:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005788:	1b52      	subs	r2, r2, r5
 800578a:	6122      	str	r2, [r4, #16]
 800578c:	f8cd a000 	str.w	sl, [sp]
 8005790:	464b      	mov	r3, r9
 8005792:	aa03      	add	r2, sp, #12
 8005794:	4621      	mov	r1, r4
 8005796:	4640      	mov	r0, r8
 8005798:	f7ff fee2 	bl	8005560 <_printf_common>
 800579c:	3001      	adds	r0, #1
 800579e:	d14c      	bne.n	800583a <_printf_i+0x1fe>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a4:	b004      	add	sp, #16
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	4835      	ldr	r0, [pc, #212]	; (8005880 <_printf_i+0x244>)
 80057ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80057b0:	6829      	ldr	r1, [r5, #0]
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80057b8:	6029      	str	r1, [r5, #0]
 80057ba:	061d      	lsls	r5, r3, #24
 80057bc:	d514      	bpl.n	80057e8 <_printf_i+0x1ac>
 80057be:	07df      	lsls	r7, r3, #31
 80057c0:	bf44      	itt	mi
 80057c2:	f043 0320 	orrmi.w	r3, r3, #32
 80057c6:	6023      	strmi	r3, [r4, #0]
 80057c8:	b91e      	cbnz	r6, 80057d2 <_printf_i+0x196>
 80057ca:	6823      	ldr	r3, [r4, #0]
 80057cc:	f023 0320 	bic.w	r3, r3, #32
 80057d0:	6023      	str	r3, [r4, #0]
 80057d2:	2310      	movs	r3, #16
 80057d4:	e7b0      	b.n	8005738 <_printf_i+0xfc>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	f043 0320 	orr.w	r3, r3, #32
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	2378      	movs	r3, #120	; 0x78
 80057e0:	4828      	ldr	r0, [pc, #160]	; (8005884 <_printf_i+0x248>)
 80057e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057e6:	e7e3      	b.n	80057b0 <_printf_i+0x174>
 80057e8:	0659      	lsls	r1, r3, #25
 80057ea:	bf48      	it	mi
 80057ec:	b2b6      	uxthmi	r6, r6
 80057ee:	e7e6      	b.n	80057be <_printf_i+0x182>
 80057f0:	4615      	mov	r5, r2
 80057f2:	e7bb      	b.n	800576c <_printf_i+0x130>
 80057f4:	682b      	ldr	r3, [r5, #0]
 80057f6:	6826      	ldr	r6, [r4, #0]
 80057f8:	6961      	ldr	r1, [r4, #20]
 80057fa:	1d18      	adds	r0, r3, #4
 80057fc:	6028      	str	r0, [r5, #0]
 80057fe:	0635      	lsls	r5, r6, #24
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	d501      	bpl.n	8005808 <_printf_i+0x1cc>
 8005804:	6019      	str	r1, [r3, #0]
 8005806:	e002      	b.n	800580e <_printf_i+0x1d2>
 8005808:	0670      	lsls	r0, r6, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0x1c8>
 800580c:	8019      	strh	r1, [r3, #0]
 800580e:	2300      	movs	r3, #0
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	4615      	mov	r5, r2
 8005814:	e7ba      	b.n	800578c <_printf_i+0x150>
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	602a      	str	r2, [r5, #0]
 800581c:	681d      	ldr	r5, [r3, #0]
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	2100      	movs	r1, #0
 8005822:	4628      	mov	r0, r5
 8005824:	f7fa fcac 	bl	8000180 <memchr>
 8005828:	b108      	cbz	r0, 800582e <_printf_i+0x1f2>
 800582a:	1b40      	subs	r0, r0, r5
 800582c:	6060      	str	r0, [r4, #4]
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	6123      	str	r3, [r4, #16]
 8005832:	2300      	movs	r3, #0
 8005834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005838:	e7a8      	b.n	800578c <_printf_i+0x150>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	462a      	mov	r2, r5
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d0ab      	beq.n	80057a0 <_printf_i+0x164>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	079b      	lsls	r3, r3, #30
 800584c:	d413      	bmi.n	8005876 <_printf_i+0x23a>
 800584e:	68e0      	ldr	r0, [r4, #12]
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	4298      	cmp	r0, r3
 8005854:	bfb8      	it	lt
 8005856:	4618      	movlt	r0, r3
 8005858:	e7a4      	b.n	80057a4 <_printf_i+0x168>
 800585a:	2301      	movs	r3, #1
 800585c:	4632      	mov	r2, r6
 800585e:	4649      	mov	r1, r9
 8005860:	4640      	mov	r0, r8
 8005862:	47d0      	blx	sl
 8005864:	3001      	adds	r0, #1
 8005866:	d09b      	beq.n	80057a0 <_printf_i+0x164>
 8005868:	3501      	adds	r5, #1
 800586a:	68e3      	ldr	r3, [r4, #12]
 800586c:	9903      	ldr	r1, [sp, #12]
 800586e:	1a5b      	subs	r3, r3, r1
 8005870:	42ab      	cmp	r3, r5
 8005872:	dcf2      	bgt.n	800585a <_printf_i+0x21e>
 8005874:	e7eb      	b.n	800584e <_printf_i+0x212>
 8005876:	2500      	movs	r5, #0
 8005878:	f104 0619 	add.w	r6, r4, #25
 800587c:	e7f5      	b.n	800586a <_printf_i+0x22e>
 800587e:	bf00      	nop
 8005880:	08006f89 	.word	0x08006f89
 8005884:	08006f9a 	.word	0x08006f9a

08005888 <__sread>:
 8005888:	b510      	push	{r4, lr}
 800588a:	460c      	mov	r4, r1
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	f000 f894 	bl	80059bc <_read_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	bfab      	itete	ge
 8005898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800589a:	89a3      	ldrhlt	r3, [r4, #12]
 800589c:	181b      	addge	r3, r3, r0
 800589e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058a2:	bfac      	ite	ge
 80058a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058a6:	81a3      	strhlt	r3, [r4, #12]
 80058a8:	bd10      	pop	{r4, pc}

080058aa <__swrite>:
 80058aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	461f      	mov	r7, r3
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	05db      	lsls	r3, r3, #23
 80058b4:	4605      	mov	r5, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4616      	mov	r6, r2
 80058ba:	d505      	bpl.n	80058c8 <__swrite+0x1e>
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	2302      	movs	r3, #2
 80058c2:	2200      	movs	r2, #0
 80058c4:	f000 f868 	bl	8005998 <_lseek_r>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	4632      	mov	r2, r6
 80058d6:	463b      	mov	r3, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	f000 b817 	b.w	8005910 <_write_r>

080058e2 <__sseek>:
 80058e2:	b510      	push	{r4, lr}
 80058e4:	460c      	mov	r4, r1
 80058e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ea:	f000 f855 	bl	8005998 <_lseek_r>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	bf15      	itete	ne
 80058f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058fe:	81a3      	strheq	r3, [r4, #12]
 8005900:	bf18      	it	ne
 8005902:	81a3      	strhne	r3, [r4, #12]
 8005904:	bd10      	pop	{r4, pc}

08005906 <__sclose>:
 8005906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590a:	f000 b813 	b.w	8005934 <_close_r>
	...

08005910 <_write_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4d07      	ldr	r5, [pc, #28]	; (8005930 <_write_r+0x20>)
 8005914:	4604      	mov	r4, r0
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	2200      	movs	r2, #0
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fb fcc2 	bl	80012a8 <_write>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_write_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_write_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	200001e0 	.word	0x200001e0

08005934 <_close_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4d06      	ldr	r5, [pc, #24]	; (8005950 <_close_r+0x1c>)
 8005938:	2300      	movs	r3, #0
 800593a:	4604      	mov	r4, r0
 800593c:	4608      	mov	r0, r1
 800593e:	602b      	str	r3, [r5, #0]
 8005940:	f7fb fcce 	bl	80012e0 <_close>
 8005944:	1c43      	adds	r3, r0, #1
 8005946:	d102      	bne.n	800594e <_close_r+0x1a>
 8005948:	682b      	ldr	r3, [r5, #0]
 800594a:	b103      	cbz	r3, 800594e <_close_r+0x1a>
 800594c:	6023      	str	r3, [r4, #0]
 800594e:	bd38      	pop	{r3, r4, r5, pc}
 8005950:	200001e0 	.word	0x200001e0

08005954 <_fstat_r>:
 8005954:	b538      	push	{r3, r4, r5, lr}
 8005956:	4d07      	ldr	r5, [pc, #28]	; (8005974 <_fstat_r+0x20>)
 8005958:	2300      	movs	r3, #0
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	602b      	str	r3, [r5, #0]
 8005962:	f7fb fcc9 	bl	80012f8 <_fstat>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	d102      	bne.n	8005970 <_fstat_r+0x1c>
 800596a:	682b      	ldr	r3, [r5, #0]
 800596c:	b103      	cbz	r3, 8005970 <_fstat_r+0x1c>
 800596e:	6023      	str	r3, [r4, #0]
 8005970:	bd38      	pop	{r3, r4, r5, pc}
 8005972:	bf00      	nop
 8005974:	200001e0 	.word	0x200001e0

08005978 <_isatty_r>:
 8005978:	b538      	push	{r3, r4, r5, lr}
 800597a:	4d06      	ldr	r5, [pc, #24]	; (8005994 <_isatty_r+0x1c>)
 800597c:	2300      	movs	r3, #0
 800597e:	4604      	mov	r4, r0
 8005980:	4608      	mov	r0, r1
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	f7fb fcc8 	bl	8001318 <_isatty>
 8005988:	1c43      	adds	r3, r0, #1
 800598a:	d102      	bne.n	8005992 <_isatty_r+0x1a>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	b103      	cbz	r3, 8005992 <_isatty_r+0x1a>
 8005990:	6023      	str	r3, [r4, #0]
 8005992:	bd38      	pop	{r3, r4, r5, pc}
 8005994:	200001e0 	.word	0x200001e0

08005998 <_lseek_r>:
 8005998:	b538      	push	{r3, r4, r5, lr}
 800599a:	4d07      	ldr	r5, [pc, #28]	; (80059b8 <_lseek_r+0x20>)
 800599c:	4604      	mov	r4, r0
 800599e:	4608      	mov	r0, r1
 80059a0:	4611      	mov	r1, r2
 80059a2:	2200      	movs	r2, #0
 80059a4:	602a      	str	r2, [r5, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	f7fb fcc1 	bl	800132e <_lseek>
 80059ac:	1c43      	adds	r3, r0, #1
 80059ae:	d102      	bne.n	80059b6 <_lseek_r+0x1e>
 80059b0:	682b      	ldr	r3, [r5, #0]
 80059b2:	b103      	cbz	r3, 80059b6 <_lseek_r+0x1e>
 80059b4:	6023      	str	r3, [r4, #0]
 80059b6:	bd38      	pop	{r3, r4, r5, pc}
 80059b8:	200001e0 	.word	0x200001e0

080059bc <_read_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4d07      	ldr	r5, [pc, #28]	; (80059dc <_read_r+0x20>)
 80059c0:	4604      	mov	r4, r0
 80059c2:	4608      	mov	r0, r1
 80059c4:	4611      	mov	r1, r2
 80059c6:	2200      	movs	r2, #0
 80059c8:	602a      	str	r2, [r5, #0]
 80059ca:	461a      	mov	r2, r3
 80059cc:	f7fb fc4f 	bl	800126e <_read>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_read_r+0x1e>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_read_r+0x1e>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	200001e0 	.word	0x200001e0

080059e0 <_init>:
 80059e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e2:	bf00      	nop
 80059e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059e6:	bc08      	pop	{r3}
 80059e8:	469e      	mov	lr, r3
 80059ea:	4770      	bx	lr

080059ec <_fini>:
 80059ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ee:	bf00      	nop
 80059f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059f2:	bc08      	pop	{r3}
 80059f4:	469e      	mov	lr, r3
 80059f6:	4770      	bx	lr
