
luni_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006368  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003b84  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  20000008  0800a03c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000014c  200000a8  0800a0dc  000200a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001f4  0800a0dc  000201f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001450d  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c74  00000000  00000000  000345e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f8  00000000  00000000  00037260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000224b4  00000000  00000000  00038858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000143ba  00000000  00000000  0005ad0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000d9a11  00000000  00000000  0006f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00148ad7  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 000014a8  00000000  00000000  00148b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  000062b8  00000000  00000000  00149fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200000a8 	.word	0x200000a8
 800015c:	00000000 	.word	0x00000000
 8000160:	08006490 	.word	0x08006490

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200000ac 	.word	0x200000ac
 800017c:	08006490 	.word	0x08006490

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <EpdDigitalWriteCallback>:
		EPD_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10e      	bne.n	8000552 <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	4413      	add	r3, r2
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	b29b      	uxth	r3, r3
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f002 f812 	bl	8002574 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8000550:	e00d      	b.n	800056e <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	4413      	add	r3, r2
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	f002 f803 	bl	8002574 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000c4 	.word	0x200000c4

0800057c <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <EpdDigitalReadCallback+0x38>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800058c:	4909      	ldr	r1, [pc, #36]	; (80005b4 <EpdDigitalReadCallback+0x38>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	b29b      	uxth	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	4610      	mov	r0, r2
 800059c:	f001 ffd2 	bl	8002544 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d101      	bne.n	80005aa <EpdDigitalReadCallback+0x2e>
    return HIGH;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 80005aa:	2300      	movs	r3, #0
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000c4 	.word	0x200000c4

080005b8 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f001 fd47 	bl	8002054 <HAL_Delay>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005e0:	6852      	ldr	r2, [r2, #4]
 80005e2:	b291      	uxth	r1, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 ffc4 	bl	8002574 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80005ec:	1df9      	adds	r1, r7, #7
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	2201      	movs	r2, #1
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <EpdSpiTransferCallback+0x48>)
 80005f6:	f003 fe60 	bl	80042ba <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <EpdSpiTransferCallback+0x44>)
 8000600:	6852      	ldr	r2, [r2, #4]
 8000602:	b291      	uxth	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ffb4 	bl	8002574 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000c4 	.word	0x200000c4
 8000618:	200000e4 	.word	0x200000e4

0800061c <EpdInitCallback>:

int EpdInitCallback(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <EpdInitCallback+0x48>)
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <EpdInitCallback+0x4c>)
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <EpdInitCallback+0x48>)
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <EpdInitCallback+0x50>)
 8000630:	3308      	adds	r3, #8
 8000632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000636:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <EpdInitCallback+0x48>)
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <EpdInitCallback+0x54>)
 800063e:	3310      	adds	r3, #16
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <EpdInitCallback+0x48>)
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <EpdInitCallback+0x58>)
 800064c:	3318      	adds	r3, #24
 800064e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000652:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200000c4 	.word	0x200000c4
 8000668:	20000018 	.word	0x20000018
 800066c:	20000020 	.word	0x20000020
 8000670:	20000028 	.word	0x20000028
 8000674:	20000030 	.word	0x20000030

08000678 <EPD_Init>:
#include <stdlib.h>
#include "epd2in9.h"
#include "main.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	epd->reset_pin = RST_PIN;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
	epd->dc_pin = DC_PIN;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
	epd->cs_pin = CS_PIN;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
	epd->busy_pin = BUSY_PIN;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2203      	movs	r2, #3
 8000698:	60da      	str	r2, [r3, #12]
	epd->width = EPD_WIDTH;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	611a      	str	r2, [r3, #16]
	epd->height = EPD_HEIGHT;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80006a6:	615a      	str	r2, [r3, #20]
	/* this calls the peripheral hardware interface, see epdif */
	if (EpdInitCallback() != 0) {
 80006a8:	f7ff ffb8 	bl	800061c <EpdInitCallback>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <EPD_Init+0x40>
		return -1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b6:	e04c      	b.n	8000752 <EPD_Init+0xda>
	}



  epd->lut = lut;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	619a      	str	r2, [r3, #24]

  EPD_Reset(epd);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f8b3 	bl	800082a <EPD_Reset>

  EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 80006c4:	2101      	movs	r1, #1
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f86e 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, (EPD_HEIGHT - 1) & 0xFF);
 80006cc:	2127      	movs	r1, #39	; 0x27
 80006ce:	6878      	ldr	r0, [r7, #4]
 80006d0:	f000 f87f 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, ((EPD_HEIGHT - 1) >> 8) & 0xFF);
 80006d4:	2101      	movs	r1, #1
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f87b 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, 0x00);                     // GD = 0; SM = 0; TB = 0;
 80006dc:	2100      	movs	r1, #0
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 f877 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, BOOSTER_SOFT_START_CONTROL);
 80006e4:	210c      	movs	r1, #12
 80006e6:	6878      	ldr	r0, [r7, #4]
 80006e8:	f000 f85e 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, 0xD7);
 80006ec:	21d7      	movs	r1, #215	; 0xd7
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f000 f86f 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, 0xD6);
 80006f4:	21d6      	movs	r1, #214	; 0xd6
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f86b 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, 0x9D);
 80006fc:	219d      	movs	r1, #157	; 0x9d
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f867 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, WRITE_VCOM_REGISTER);
 8000704:	212c      	movs	r1, #44	; 0x2c
 8000706:	6878      	ldr	r0, [r7, #4]
 8000708:	f000 f84e 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, 0xA8);                     // VCOM 7C
 800070c:	21a8      	movs	r1, #168	; 0xa8
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f000 f85f 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, SET_DUMMY_LINE_PERIOD);
 8000714:	213a      	movs	r1, #58	; 0x3a
 8000716:	6878      	ldr	r0, [r7, #4]
 8000718:	f000 f846 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, 0x1A);                     // 4 dummy lines per gate
 800071c:	211a      	movs	r1, #26
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f857 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, SET_GATE_TIME);
 8000724:	213b      	movs	r1, #59	; 0x3b
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f83e 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, 0x08);                     // 2us per line
 800072c:	2108      	movs	r1, #8
 800072e:	6878      	ldr	r0, [r7, #4]
 8000730:	f000 f84f 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 8000734:	2111      	movs	r1, #17
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f836 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, 0x03);                     // X increment; Y increment
 800073c:	2103      	movs	r1, #3
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f847 	bl	80007d2 <EPD_SendData>
  EPD_SetLut(epd, epd->lut);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4619      	mov	r1, r3
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f967 	bl	8000a1e <EPD_SetLut>
  /* EPD hardware init end */
  return 0;
 8000750:	2300      	movs	r3, #0



}
 8000752:	4618      	mov	r0, r3
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 800075a:	b580      	push	{r7, lr}
 800075c:	b084      	sub	sp, #16
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
 8000762:	60b9      	str	r1, [r7, #8]
 8000764:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	68b8      	ldr	r0, [r7, #8]
 800076a:	f7ff fedb 	bl	8000524 <EpdDigitalWriteCallback>
}
 800076e:	bf00      	nop
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 8000776:	b580      	push	{r7, lr}
 8000778:	b082      	sub	sp, #8
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
 800077e:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 8000780:	6838      	ldr	r0, [r7, #0]
 8000782:	f7ff fefb 	bl	800057c <EpdDigitalReadCallback>
 8000786:	4603      	mov	r3, r0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 800079a:	6838      	ldr	r0, [r7, #0]
 800079c:	f7ff ff0c 	bl	80005b8 <EpdDelayMsCallback>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	460b      	mov	r3, r1
 80007b2:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ffcc 	bl	800075a <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 80007c2:	78fb      	ldrb	r3, [r7, #3]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff ff03 	bl	80005d0 <EpdSpiTransferCallback>
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f7ff ffb7 	bl	800075a <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 80007ec:	78fb      	ldrb	r3, [r7, #3]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff feee 	bl	80005d0 <EpdSpiTransferCallback>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes LOW
 */
void EPD_WaitUntilIdle(EPD* epd) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 8000804:	e003      	b.n	800080e <EPD_WaitUntilIdle+0x12>
    EPD_DelayMs(epd, 100);
 8000806:	2164      	movs	r1, #100	; 0x64
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff ffc1 	bl	8000790 <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	4619      	mov	r1, r3
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff ffae 	bl	8000776 <EPD_DigitalRead>
 800081a:	4603      	mov	r3, r0
 800081c:	2b01      	cmp	r3, #1
 800081e:	d0f2      	beq.n	8000806 <EPD_WaitUntilIdle+0xa>
  }      
}
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2200      	movs	r2, #0
 8000838:	4619      	mov	r1, r3
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff8d 	bl	800075a <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 8000840:	21c8      	movs	r1, #200	; 0xc8
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa4 	bl	8000790 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2201      	movs	r2, #1
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ff82 	bl	800075a <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 8000856:	21c8      	movs	r1, #200	; 0xc8
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff99 	bl	8000790 <EPD_DelayMs>
}
 800085e:	bf00      	nop
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <EPD_SetFrameMemory>:
  const unsigned char* image_buffer,
  int x,
  int y,
  int image_width,
  int image_height
) {
 8000866:	b580      	push	{r7, lr}
 8000868:	b08a      	sub	sp, #40	; 0x28
 800086a:	af02      	add	r7, sp, #8
 800086c:	60f8      	str	r0, [r7, #12]
 800086e:	60b9      	str	r1, [r7, #8]
 8000870:	607a      	str	r2, [r7, #4]
 8000872:	603b      	str	r3, [r7, #0]
  int x_end;
  int y_end;

  if (
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d078      	beq.n	800096c <EPD_SetFrameMemory+0x106>
    image_buffer == NULL ||
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	db75      	blt.n	800096c <EPD_SetFrameMemory+0x106>
    x < 0 || image_width < 0 ||
 8000880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000882:	2b00      	cmp	r3, #0
 8000884:	db72      	blt.n	800096c <EPD_SetFrameMemory+0x106>
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	db6f      	blt.n	800096c <EPD_SetFrameMemory+0x106>
    y < 0 || image_height < 0
 800088c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800088e:	2b00      	cmp	r3, #0
 8000890:	db6c      	blt.n	800096c <EPD_SetFrameMemory+0x106>
  ) {
    return;
  }
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  x &= 0xF8;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 8000898:	607b      	str	r3, [r7, #4]
  image_width &= 0xF8;
 800089a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (x + image_width >= epd->width) {
 80008a2:	687a      	ldr	r2, [r7, #4]
 80008a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a6:	441a      	add	r2, r3
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	691b      	ldr	r3, [r3, #16]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	db04      	blt.n	80008ba <EPD_SetFrameMemory+0x54>
    x_end = epd->width - 1;
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	691b      	ldr	r3, [r3, #16]
 80008b4:	3b01      	subs	r3, #1
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	e004      	b.n	80008c4 <EPD_SetFrameMemory+0x5e>
  } else {
    x_end = x + image_width - 1;
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008be:	4413      	add	r3, r2
 80008c0:	3b01      	subs	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
  }
  if (y + image_height >= epd->height) {
 80008c4:	683a      	ldr	r2, [r7, #0]
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	441a      	add	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	695b      	ldr	r3, [r3, #20]
 80008ce:	429a      	cmp	r2, r3
 80008d0:	db04      	blt.n	80008dc <EPD_SetFrameMemory+0x76>
    y_end = epd->height - 1;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	695b      	ldr	r3, [r3, #20]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	e004      	b.n	80008e6 <EPD_SetFrameMemory+0x80>
  } else {
    y_end = y + image_height - 1;
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008e0:	4413      	add	r3, r2
 80008e2:	3b01      	subs	r3, #1
 80008e4:	61bb      	str	r3, [r7, #24]
  }
  EPD_SetMemoryArea(epd, x, y, x_end, y_end);
 80008e6:	69bb      	ldr	r3, [r7, #24]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	683a      	ldr	r2, [r7, #0]
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f000 f8b7 	bl	8000a64 <EPD_SetMemoryArea>
  EPD_SetMemoryPointer(epd, x, y);
 80008f6:	683a      	ldr	r2, [r7, #0]
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f000 f8ed 	bl	8000ada <EPD_SetMemoryPointer>
  EPD_SendCommand(epd, WRITE_RAM);
 8000900:	2124      	movs	r1, #36	; 0x24
 8000902:	68f8      	ldr	r0, [r7, #12]
 8000904:	f7ff ff50 	bl	80007a8 <EPD_SendCommand>
  /* send the image data */
  for (int j = 0; j < y_end - y + 1; j++) {
 8000908:	2300      	movs	r3, #0
 800090a:	617b      	str	r3, [r7, #20]
 800090c:	e027      	b.n	800095e <EPD_SetFrameMemory+0xf8>
    for (int i = 0; i < (x_end - x + 1) / 8; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	e015      	b.n	8000940 <EPD_SetFrameMemory+0xda>
      EPD_SendData(epd, image_buffer[i + j * (image_width / 8)]);
 8000914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000916:	2b00      	cmp	r3, #0
 8000918:	da00      	bge.n	800091c <EPD_SetFrameMemory+0xb6>
 800091a:	3307      	adds	r3, #7
 800091c:	10db      	asrs	r3, r3, #3
 800091e:	461a      	mov	r2, r3
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fb03 f202 	mul.w	r2, r3, r2
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	4413      	add	r3, r2
 800092a:	461a      	mov	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	4619      	mov	r1, r3
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f7ff ff4c 	bl	80007d2 <EPD_SendData>
    for (int i = 0; i < (x_end - x + 1) / 8; i++) {
 800093a:	693b      	ldr	r3, [r7, #16]
 800093c:	3301      	adds	r3, #1
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	3301      	adds	r3, #1
 8000948:	2b00      	cmp	r3, #0
 800094a:	da00      	bge.n	800094e <EPD_SetFrameMemory+0xe8>
 800094c:	3307      	adds	r3, #7
 800094e:	10db      	asrs	r3, r3, #3
 8000950:	461a      	mov	r2, r3
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	4293      	cmp	r3, r2
 8000956:	dbdd      	blt.n	8000914 <EPD_SetFrameMemory+0xae>
  for (int j = 0; j < y_end - y + 1; j++) {
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	3301      	adds	r3, #1
 800095c:	617b      	str	r3, [r7, #20]
 800095e:	69ba      	ldr	r2, [r7, #24]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	1ad3      	subs	r3, r2, r3
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	429a      	cmp	r2, r3
 8000968:	ddd1      	ble.n	800090e <EPD_SetFrameMemory+0xa8>
 800096a:	e000      	b.n	800096e <EPD_SetFrameMemory+0x108>
    return;
 800096c:	bf00      	nop
    }
  }
}
 800096e:	3720      	adds	r7, #32
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <EPD_ClearFrameMemory>:

/**
*  @brief: clear the frame memory with the specified color.
*          this won't update the display.
*/
void EPD_ClearFrameMemory(EPD* epd, unsigned char color) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af02      	add	r7, sp, #8
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
  EPD_SetMemoryArea(epd, 0, 0, epd->width - 1, epd->height - 1);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	695b      	ldr	r3, [r3, #20]
 800098a:	3b01      	subs	r3, #1
 800098c:	9300      	str	r3, [sp, #0]
 800098e:	4613      	mov	r3, r2
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f000 f865 	bl	8000a64 <EPD_SetMemoryArea>
  EPD_SetMemoryPointer(epd, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f000 f89b 	bl	8000ada <EPD_SetMemoryPointer>
  EPD_SendCommand(epd, WRITE_RAM);
 80009a4:	2124      	movs	r1, #36	; 0x24
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff fefe 	bl	80007a8 <EPD_SendCommand>
  /* send the color data */
  for (int i = 0; i < epd->width / 8 * epd->height; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e007      	b.n	80009c2 <EPD_ClearFrameMemory+0x4e>
    EPD_SendData(epd, color);
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	4619      	mov	r1, r3
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ff0b 	bl	80007d2 <EPD_SendData>
  for (int i = 0; i < epd->width / 8 * epd->height; i++) {
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3301      	adds	r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	da00      	bge.n	80009cc <EPD_ClearFrameMemory+0x58>
 80009ca:	3307      	adds	r3, #7
 80009cc:	10db      	asrs	r3, r3, #3
 80009ce:	461a      	mov	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	429a      	cmp	r2, r3
 80009dc:	dbe9      	blt.n	80009b2 <EPD_ClearFrameMemory+0x3e>
  }
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <EPD_DisplayFrame>:
*          there are 2 memory areas embedded in the e-paper display
*          but once this function is called,
*          the the next action of SetFrameMemory or ClearFrame will 
*          set the other memory area.
*/
void EPD_DisplayFrame(EPD* epd) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 80009f0:	2122      	movs	r1, #34	; 0x22
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f7ff fed8 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, 0xC4);
 80009f8:	21c4      	movs	r1, #196	; 0xc4
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff fee9 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, MASTER_ACTIVATION);
 8000a00:	2120      	movs	r1, #32
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f7ff fed0 	bl	80007a8 <EPD_SendCommand>
  EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
 8000a08:	21ff      	movs	r1, #255	; 0xff
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fecc 	bl	80007a8 <EPD_SendCommand>
  EPD_WaitUntilIdle(epd);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f7ff fef3 	bl	80007fc <EPD_WaitUntilIdle>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <EPD_SetLut>:
}

/**
 *  @brief: set the look-up tables
 */
static void EPD_SetLut(EPD* epd, const unsigned char* lut) {
 8000a1e:	b580      	push	{r7, lr}
 8000a20:	b084      	sub	sp, #16
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]
 8000a26:	6039      	str	r1, [r7, #0]
  epd->lut = lut;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	683a      	ldr	r2, [r7, #0]
 8000a2c:	619a      	str	r2, [r3, #24]
  EPD_SendCommand(epd, WRITE_LUT_REGISTER);
 8000a2e:	2132      	movs	r1, #50	; 0x32
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f7ff feb9 	bl	80007a8 <EPD_SendCommand>
  /* the length of look-up table is 30 bytes */
  for (int i = 0; i < 30; i++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e00b      	b.n	8000a54 <EPD_SetLut+0x36>
    EPD_SendData(epd, epd->lut[i]);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	699a      	ldr	r2, [r3, #24]
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	4413      	add	r3, r2
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	4619      	mov	r1, r3
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f7ff fec2 	bl	80007d2 <EPD_SendData>
  for (int i = 0; i < 30; i++) {
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b1d      	cmp	r3, #29
 8000a58:	ddf0      	ble.n	8000a3c <EPD_SetLut+0x1e>
  } 
}
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <EPD_SetMemoryArea>:

/**
 *  @brief: private function to specify the memory area for data R/W
 */
static void EPD_SetMemoryArea(EPD* epd, int x_start, int y_start, int x_end, int y_end) {
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
 8000a70:	603b      	str	r3, [r7, #0]
  EPD_SendCommand(epd, SET_RAM_X_ADDRESS_START_END_POSITION);
 8000a72:	2144      	movs	r1, #68	; 0x44
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff fe97 	bl	80007a8 <EPD_SendCommand>
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  EPD_SendData(epd, (x_start >> 3) & 0xFF);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	10db      	asrs	r3, r3, #3
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	4619      	mov	r1, r3
 8000a82:	68f8      	ldr	r0, [r7, #12]
 8000a84:	f7ff fea5 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, (x_end >> 3) & 0xFF);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	10db      	asrs	r3, r3, #3
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f7ff fe9e 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_START_END_POSITION);
 8000a96:	2145      	movs	r1, #69	; 0x45
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fe85 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, y_start & 0xFF);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f7ff fe94 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, (y_start >> 8) & 0xFF);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	121b      	asrs	r3, r3, #8
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fe8d 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, y_end & 0xFF);
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	4619      	mov	r1, r3
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fe87 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, (y_end >> 8) & 0xFF);
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	121b      	asrs	r3, r3, #8
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	4619      	mov	r1, r3
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fe80 	bl	80007d2 <EPD_SendData>
}
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <EPD_SetMemoryPointer>:

/**
 *  @brief: private function to specify the start point for data R/W
 */
static void EPD_SetMemoryPointer(EPD* epd, int x, int y) {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b084      	sub	sp, #16
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	60f8      	str	r0, [r7, #12]
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
  EPD_SendCommand(epd, SET_RAM_X_ADDRESS_COUNTER);
 8000ae6:	214e      	movs	r1, #78	; 0x4e
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff fe5d 	bl	80007a8 <EPD_SendCommand>
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  EPD_SendData(epd, (x >> 3) & 0xFF);
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	10db      	asrs	r3, r3, #3
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	68f8      	ldr	r0, [r7, #12]
 8000af8:	f7ff fe6b 	bl	80007d2 <EPD_SendData>
  EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_COUNTER);
 8000afc:	214f      	movs	r1, #79	; 0x4f
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f7ff fe52 	bl	80007a8 <EPD_SendCommand>
  EPD_SendData(epd, y & 0xFF);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	4619      	mov	r1, r3
 8000b0a:	68f8      	ldr	r0, [r7, #12]
 8000b0c:	f7ff fe61 	bl	80007d2 <EPD_SendData>
  EPD_SendData(epd, (y >> 8) & 0xFF);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	121b      	asrs	r3, r3, #8
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	4619      	mov	r1, r3
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff fe5a 	bl	80007d2 <EPD_SendData>
  EPD_WaitUntilIdle(epd);
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	f7ff fe6c 	bl	80007fc <EPD_WaitUntilIdle>
}
 8000b24:	bf00      	nop
 8000b26:	3710      	adds	r7, #16
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <Paint_Init>:
 */

#include "epdpaint.h"


void Paint_Init(Paint* paint, unsigned char* image, int width, int height) {
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
    paint->rotate = ROTATE_0;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
    paint->image = image;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	601a      	str	r2, [r3, #0]
    /* 1 byte = 8 pixels, so the width should be the multiple of 8 */
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00c      	beq.n	8000b6a <Paint_Init+0x3e>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f103 0208 	add.w	r2, r3, #8
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4259      	negs	r1, r3
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	f001 0107 	and.w	r1, r1, #7
 8000b62:	bf58      	it	pl
 8000b64:	424b      	negpl	r3, r1
 8000b66:	1ad3      	subs	r3, r2, r3
 8000b68:	e000      	b.n	8000b6c <Paint_Init+0x40>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	68fa      	ldr	r2, [r7, #12]
 8000b6e:	6053      	str	r3, [r2, #4]
    paint->height = height;
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	609a      	str	r2, [r3, #8]
}
 8000b76:	bf00      	nop
 8000b78:	3714      	adds	r7, #20
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <Paint_Clear>:

/**
 *  @brief: clear the image
 */
void Paint_Clear(Paint* paint, int colored) {
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b084      	sub	sp, #16
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
    for (int x = 0; x < paint->width; x++) {
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	e013      	b.n	8000bba <Paint_Clear+0x38>
        for (int y = 0; y < paint->height; y++) {
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	e008      	b.n	8000baa <Paint_Clear+0x28>
            Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 f815 	bl	8000bce <Paint_DrawAbsolutePixel>
        for (int y = 0; y < paint->height; y++) {
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	689b      	ldr	r3, [r3, #8]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dbf1      	blt.n	8000b98 <Paint_Clear+0x16>
    for (int x = 0; x < paint->width; x++) {
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbe6      	blt.n	8000b92 <Paint_Clear+0x10>
        }
    }
}
 8000bc4:	bf00      	nop
 8000bc6:	bf00      	nop
 8000bc8:	3710      	adds	r7, #16
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <Paint_DrawAbsolutePixel>:

/**
 *  @brief: this draws a pixel by absolute coordinates.
 *          this function won't be affected by the rotate parameter.
 */
void Paint_DrawAbsolutePixel(Paint* paint, int x, int y, int colored) {
 8000bce:	b480      	push	{r7}
 8000bd0:	b085      	sub	sp, #20
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	60f8      	str	r0, [r7, #12]
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	603b      	str	r3, [r7, #0]
    if (x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db5f      	blt.n	8000ca2 <Paint_DrawAbsolutePixel+0xd4>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	da5a      	bge.n	8000ca2 <Paint_DrawAbsolutePixel+0xd4>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db57      	blt.n	8000ca2 <Paint_DrawAbsolutePixel+0xd4>
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	da52      	bge.n	8000ca2 <Paint_DrawAbsolutePixel+0xd4>
        return;
    }
    if (IF_INVERT_COLOR) {
        if (colored) {
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d026      	beq.n	8000c50 <Paint_DrawAbsolutePixel+0x82>
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	fb03 f101 	mul.w	r1, r3, r1
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	440b      	add	r3, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	da00      	bge.n	8000c1a <Paint_DrawAbsolutePixel+0x4c>
 8000c18:	3307      	adds	r3, #7
 8000c1a:	10db      	asrs	r3, r3, #3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	4603      	mov	r3, r0
 8000c20:	4413      	add	r3, r2
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	b25a      	sxtb	r2, r3
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	4259      	negs	r1, r3
 8000c2a:	f003 0307 	and.w	r3, r3, #7
 8000c2e:	f001 0107 	and.w	r1, r1, #7
 8000c32:	bf58      	it	pl
 8000c34:	424b      	negpl	r3, r1
 8000c36:	2180      	movs	r1, #128	; 0x80
 8000c38:	fa41 f303 	asr.w	r3, r1, r3
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25a      	sxtb	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4601      	mov	r1, r0
 8000c48:	440b      	add	r3, r1
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e029      	b.n	8000ca4 <Paint_DrawAbsolutePixel+0xd6>
        } else {
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	6879      	ldr	r1, [r7, #4]
 8000c5a:	fb03 f101 	mul.w	r1, r3, r1
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	440b      	add	r3, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	da00      	bge.n	8000c68 <Paint_DrawAbsolutePixel+0x9a>
 8000c66:	3307      	adds	r3, #7
 8000c68:	10db      	asrs	r3, r3, #3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4413      	add	r3, r2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b25a      	sxtb	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	4259      	negs	r1, r3
 8000c78:	f003 0307 	and.w	r3, r3, #7
 8000c7c:	f001 0107 	and.w	r1, r1, #7
 8000c80:	bf58      	it	pl
 8000c82:	424b      	negpl	r3, r1
 8000c84:	2180      	movs	r1, #128	; 0x80
 8000c86:	fa41 f303 	asr.w	r3, r1, r3
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	b25b      	sxtb	r3, r3
 8000c90:	4013      	ands	r3, r2
 8000c92:	b25a      	sxtb	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4601      	mov	r1, r0
 8000c9a:	440b      	add	r3, r1
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e000      	b.n	8000ca4 <Paint_DrawAbsolutePixel+0xd6>
        return;
 8000ca2:	bf00      	nop
            paint->image[(x + y * paint->width) / 8] &= ~(0x80 >> (x % 8));
        } else {
            paint->image[(x + y * paint->width) / 8] |= 0x80 >> (x % 8);
        }
    }
}
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <Paint_GetWidth>:
 */
unsigned char* Paint_GetImage(Paint* paint) {
    return paint->image;
}

int Paint_GetWidth(Paint* paint) {
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
    return paint->width;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	685b      	ldr	r3, [r3, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <Paint_SetWidth>:

void Paint_SetWidth(Paint* paint, int width) {
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
    paint->width = width % 8 ? width + 8 - (width % 8) : width;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00c      	beq.n	8000cf4 <Paint_SetWidth+0x2e>
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f103 0208 	add.w	r2, r3, #8
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	4259      	negs	r1, r3
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	f001 0107 	and.w	r1, r1, #7
 8000cec:	bf58      	it	pl
 8000cee:	424b      	negpl	r3, r1
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	e000      	b.n	8000cf6 <Paint_SetWidth+0x30>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6053      	str	r3, [r2, #4]
}
 8000cfa:	bf00      	nop
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <Paint_GetHeight>:

int Paint_GetHeight(Paint* paint) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
    return paint->height;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <Paint_SetHeight>:

void Paint_SetHeight(Paint* paint, int height) {
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
    paint->height = height;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	609a      	str	r2, [r3, #8]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <Paint_SetRotate>:

int Paint_GetRotate(Paint* paint) {
    return paint->rotate;
}

void Paint_SetRotate(Paint* paint, int rotate){
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	6039      	str	r1, [r7, #0]
    paint->rotate = rotate;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	683a      	ldr	r2, [r7, #0]
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <Paint_DrawPixel>:

/**
 *  @brief: this draws a pixel by the coordinates
 */
void Paint_DrawPixel(Paint* paint, int x, int y, int colored) {
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b086      	sub	sp, #24
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	603b      	str	r3, [r7, #0]
    int point_temp;
    if (paint->rotate == ROTATE_0) {
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d117      	bne.n	8000d9c <Paint_DrawPixel+0x46>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f2c0 8081 	blt.w	8000e76 <Paint_DrawPixel+0x120>
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	68ba      	ldr	r2, [r7, #8]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	da7b      	bge.n	8000e76 <Paint_DrawPixel+0x120>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	db78      	blt.n	8000e76 <Paint_DrawPixel+0x120>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	da73      	bge.n	8000e76 <Paint_DrawPixel+0x120>
            return;
        }
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff ff1a 	bl	8000bce <Paint_DrawAbsolutePixel>
 8000d9a:	e073      	b.n	8000e84 <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_90) {
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d11f      	bne.n	8000de4 <Paint_DrawPixel+0x8e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db67      	blt.n	8000e7a <Paint_DrawPixel+0x124>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	689b      	ldr	r3, [r3, #8]
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	da62      	bge.n	8000e7a <Paint_DrawPixel+0x124>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db5f      	blt.n	8000e7a <Paint_DrawPixel+0x124>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	da5a      	bge.n	8000e7a <Paint_DrawPixel+0x124>
          return;
        }
        point_temp = x;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	617b      	str	r3, [r7, #20]
        x = paint->width - y;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	685a      	ldr	r2, [r3, #4]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	60bb      	str	r3, [r7, #8]
        y = point_temp;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	68b9      	ldr	r1, [r7, #8]
 8000ddc:	68f8      	ldr	r0, [r7, #12]
 8000dde:	f7ff fef6 	bl	8000bce <Paint_DrawAbsolutePixel>
 8000de2:	e04f      	b.n	8000e84 <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_180) {
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d120      	bne.n	8000e2e <Paint_DrawPixel+0xd8>
        if(x < 0 || x >= paint->width || y < 0 || y >= paint->height) {
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	db45      	blt.n	8000e7e <Paint_DrawPixel+0x128>
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	da40      	bge.n	8000e7e <Paint_DrawPixel+0x128>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db3d      	blt.n	8000e7e <Paint_DrawPixel+0x128>
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	da38      	bge.n	8000e7e <Paint_DrawPixel+0x128>
          return;
        }
        x = paint->width - x;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	685a      	ldr	r2, [r3, #4]
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	60bb      	str	r3, [r7, #8]
        y = paint->height - y;
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	689a      	ldr	r2, [r3, #8]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f7ff fed1 	bl	8000bce <Paint_DrawAbsolutePixel>
 8000e2c:	e02a      	b.n	8000e84 <Paint_DrawPixel+0x12e>
    } else if (paint->rotate == ROTATE_270) {
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	2b03      	cmp	r3, #3
 8000e34:	d126      	bne.n	8000e84 <Paint_DrawPixel+0x12e>
        if(x < 0 || x >= paint->height || y < 0 || y >= paint->width) {
 8000e36:	68bb      	ldr	r3, [r7, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db22      	blt.n	8000e82 <Paint_DrawPixel+0x12c>
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	da1d      	bge.n	8000e82 <Paint_DrawPixel+0x12c>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db1a      	blt.n	8000e82 <Paint_DrawPixel+0x12c>
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	da15      	bge.n	8000e82 <Paint_DrawPixel+0x12c>
          return;
        }
        point_temp = x;
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	617b      	str	r3, [r7, #20]
        x = y;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	60bb      	str	r3, [r7, #8]
        y = paint->height - point_temp;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	607b      	str	r3, [r7, #4]
        Paint_DrawAbsolutePixel(paint, x, y, colored);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	68f8      	ldr	r0, [r7, #12]
 8000e70:	f7ff fead 	bl	8000bce <Paint_DrawAbsolutePixel>
 8000e74:	e006      	b.n	8000e84 <Paint_DrawPixel+0x12e>
            return;
 8000e76:	bf00      	nop
 8000e78:	e004      	b.n	8000e84 <Paint_DrawPixel+0x12e>
          return;
 8000e7a:	bf00      	nop
 8000e7c:	e002      	b.n	8000e84 <Paint_DrawPixel+0x12e>
          return;
 8000e7e:	bf00      	nop
 8000e80:	e000      	b.n	8000e84 <Paint_DrawPixel+0x12e>
          return;
 8000e82:	bf00      	nop
    }
}
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <Paint_DrawCharAt>:

/**
 *  @brief: this draws a charactor on the frame buffer but not refresh
 */
void Paint_DrawCharAt(Paint* paint, int x, int y, char ascii_char, sFONT* font, int colored) {
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b088      	sub	sp, #32
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	60f8      	str	r0, [r7, #12]
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	70fb      	strb	r3, [r7, #3]
    int i, j;
    unsigned int char_offset = (ascii_char - ' ') * font->Height * (font->Width / 8 + (font->Width % 8 ? 1 : 0));
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	3b20      	subs	r3, #32
 8000e9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e9e:	88d2      	ldrh	r2, [r2, #6]
 8000ea0:	fb02 f303 	mul.w	r3, r2, r3
 8000ea4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ea6:	8892      	ldrh	r2, [r2, #4]
 8000ea8:	08d2      	lsrs	r2, r2, #3
 8000eaa:	b292      	uxth	r2, r2
 8000eac:	4611      	mov	r1, r2
 8000eae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000eb0:	8892      	ldrh	r2, [r2, #4]
 8000eb2:	f002 0207 	and.w	r2, r2, #7
 8000eb6:	b292      	uxth	r2, r2
 8000eb8:	2a00      	cmp	r2, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2201      	movne	r2, #1
 8000ebe:	2200      	moveq	r2, #0
 8000ec0:	b2d2      	uxtb	r2, r2
 8000ec2:	440a      	add	r2, r1
 8000ec4:	fb02 f303 	mul.w	r3, r2, r3
 8000ec8:	613b      	str	r3, [r7, #16]
    const unsigned char* ptr = &font->table[char_offset];
 8000eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]

    for (j = 0; j < font->Height; j++) {
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	e040      	b.n	8000f5c <Paint_DrawCharAt+0xd2>
        for (i = 0; i < font->Width; i++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
 8000ede:	e02a      	b.n	8000f36 <Paint_DrawCharAt+0xac>
            if (*ptr & (0x80 >> (i % 8))) {
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	425a      	negs	r2, r3
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	f002 0207 	and.w	r2, r2, #7
 8000ef2:	bf58      	it	pl
 8000ef4:	4253      	negpl	r3, r2
 8000ef6:	2280      	movs	r2, #128	; 0x80
 8000ef8:	fa42 f303 	asr.w	r3, r2, r3
 8000efc:	400b      	ands	r3, r1
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d009      	beq.n	8000f16 <Paint_DrawCharAt+0x8c>
                Paint_DrawPixel(paint, x + i, y + j, colored);
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	18d1      	adds	r1, r2, r3
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	441a      	add	r2, r3
 8000f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f10:	68f8      	ldr	r0, [r7, #12]
 8000f12:	f7ff ff20 	bl	8000d56 <Paint_DrawPixel>
            }
            if (i % 8 == 7) {
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	425a      	negs	r2, r3
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	f002 0207 	and.w	r2, r2, #7
 8000f22:	bf58      	it	pl
 8000f24:	4253      	negpl	r3, r2
 8000f26:	2b07      	cmp	r3, #7
 8000f28:	d102      	bne.n	8000f30 <Paint_DrawCharAt+0xa6>
                ptr++;
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
        for (i = 0; i < font->Width; i++) {
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f38:	889b      	ldrh	r3, [r3, #4]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	dbce      	blt.n	8000ee0 <Paint_DrawCharAt+0x56>
            }
        }
        if (font->Width % 8 != 0) {
 8000f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f44:	889b      	ldrh	r3, [r3, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <Paint_DrawCharAt+0xcc>
            ptr++;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	3301      	adds	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->Height; j++) {
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5e:	88db      	ldrh	r3, [r3, #6]
 8000f60:	461a      	mov	r2, r3
 8000f62:	69bb      	ldr	r3, [r7, #24]
 8000f64:	4293      	cmp	r3, r2
 8000f66:	dbb8      	blt.n	8000eda <Paint_DrawCharAt+0x50>
        }
    }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <Paint_DrawStringAt>:

/**
*  @brief: this displays a string on the frame buffer but not refresh
*/
void Paint_DrawStringAt(Paint* paint, int x, int y, const char* text, sFONT* font, int colored) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b08a      	sub	sp, #40	; 0x28
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	603b      	str	r3, [r7, #0]
    const char* p_text = text;
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	61fb      	str	r3, [r7, #28]
    unsigned int counter = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
    int refcolumn = x;
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	617b      	str	r3, [r7, #20]
    
    /* Send the string character by character on EPD */
    while (*p_text != 0) {
 8000f8c:	e017      	b.n	8000fbe <Paint_DrawStringAt+0x4c>
        /* Display one character on EPD */
        Paint_DrawCharAt(paint, refcolumn, y, *p_text, font, colored);
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6979      	ldr	r1, [r7, #20]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f7ff ff72 	bl	8000e8a <Paint_DrawCharAt>
        /* Decrement the column position by 16 */
        refcolumn += font->Width;
 8000fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa8:	889b      	ldrh	r3, [r3, #4]
 8000faa:	461a      	mov	r2, r3
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	4413      	add	r3, r2
 8000fb0:	617b      	str	r3, [r7, #20]
        /* Point on the next character */
        p_text++;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	61fb      	str	r3, [r7, #28]
        counter++;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
    while (*p_text != 0) {
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1e3      	bne.n	8000f8e <Paint_DrawStringAt+0x1c>
    }
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <Paint_DrawLine>:

/**
*  @brief: this draws a line on the frame buffer
*/
void Paint_DrawLine(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int dx = x1 - x0 >= 0 ? x1 - x0 : x0 - x1;
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	1ad3      	subs	r3, r2, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	bfb8      	it	lt
 8000fe8:	425b      	neglt	r3, r3
 8000fea:	623b      	str	r3, [r7, #32]
    int sx = x0 < x1 ? 1 : -1;
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	da01      	bge.n	8000ff8 <Paint_DrawLine+0x28>
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	e001      	b.n	8000ffc <Paint_DrawLine+0x2c>
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ffc:	61fb      	str	r3, [r7, #28]
    int dy = y1 - y0 <= 0 ? y1 - y0 : y0 - y1;
 8000ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b00      	cmp	r3, #0
 8001006:	bfb8      	it	lt
 8001008:	425b      	neglt	r3, r3
 800100a:	425b      	negs	r3, r3
 800100c:	61bb      	str	r3, [r7, #24]
    int sy = y0 < y1 ? 1 : -1;
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001012:	429a      	cmp	r2, r3
 8001014:	da01      	bge.n	800101a <Paint_DrawLine+0x4a>
 8001016:	2301      	movs	r3, #1
 8001018:	e001      	b.n	800101e <Paint_DrawLine+0x4e>
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101e:	617b      	str	r3, [r7, #20]
    int err = dx + dy;
 8001020:	6a3a      	ldr	r2, [r7, #32]
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	4413      	add	r3, r2
 8001026:	627b      	str	r3, [r7, #36]	; 0x24

    while((x0 != x1) && (y0 != y1)) {
 8001028:	e01f      	b.n	800106a <Paint_DrawLine+0x9a>
        Paint_DrawPixel(paint, x0, y0 , colored);
 800102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	68b9      	ldr	r1, [r7, #8]
 8001030:	68f8      	ldr	r0, [r7, #12]
 8001032:	f7ff fe90 	bl	8000d56 <Paint_DrawPixel>
        if (2 * err >= dy) {     
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	429a      	cmp	r2, r3
 800103e:	dc07      	bgt.n	8001050 <Paint_DrawLine+0x80>
            err += dy;
 8001040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	4413      	add	r3, r2
 8001046:	627b      	str	r3, [r7, #36]	; 0x24
            x0 += sx;
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	4413      	add	r3, r2
 800104e:	60bb      	str	r3, [r7, #8]
        }
        if (2 * err <= dx) {
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	6a3a      	ldr	r2, [r7, #32]
 8001056:	429a      	cmp	r2, r3
 8001058:	db07      	blt.n	800106a <Paint_DrawLine+0x9a>
            err += dx; 
 800105a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	4413      	add	r3, r2
 8001060:	627b      	str	r3, [r7, #36]	; 0x24
            y0 += sy;
 8001062:	687a      	ldr	r2, [r7, #4]
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4413      	add	r3, r2
 8001068:	607b      	str	r3, [r7, #4]
    while((x0 != x1) && (y0 != y1)) {
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d003      	beq.n	800107a <Paint_DrawLine+0xaa>
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001076:	429a      	cmp	r2, r3
 8001078:	d1d7      	bne.n	800102a <Paint_DrawLine+0x5a>
        }
    }
}
 800107a:	bf00      	nop
 800107c:	3728      	adds	r7, #40	; 0x28
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <Paint_DrawHorizontalLine>:

/**
*  @brief: this draws a horizontal line on the frame buffer
*/
void Paint_DrawHorizontalLine(Paint* paint, int x, int y, int line_width, int colored) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
 800108e:	603b      	str	r3, [r7, #0]
    int i;
    for (i = x; i < x + line_width; i++) {
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e008      	b.n	80010a8 <Paint_DrawHorizontalLine+0x26>
        Paint_DrawPixel(paint, i, y, colored);
 8001096:	6a3b      	ldr	r3, [r7, #32]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6979      	ldr	r1, [r7, #20]
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f7ff fe5a 	bl	8000d56 <Paint_DrawPixel>
    for (i = x; i < x + line_width; i++) {
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	4413      	add	r3, r2
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	dbf0      	blt.n	8001096 <Paint_DrawHorizontalLine+0x14>
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <Paint_DrawVerticalLine>:

/**
*  @brief: this draws a vertical line on the frame buffer
*/
void Paint_DrawVerticalLine(Paint* paint, int x, int y, int line_height, int colored) {
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	603b      	str	r3, [r7, #0]
    int i;
    for (i = y; i < y + line_height; i++) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e008      	b.n	80010e4 <Paint_DrawVerticalLine+0x26>
        Paint_DrawPixel(paint, x, i, colored);
 80010d2:	6a3b      	ldr	r3, [r7, #32]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	68b9      	ldr	r1, [r7, #8]
 80010d8:	68f8      	ldr	r0, [r7, #12]
 80010da:	f7ff fe3c 	bl	8000d56 <Paint_DrawPixel>
    for (i = y; i < y + line_height; i++) {
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	3301      	adds	r3, #1
 80010e2:	617b      	str	r3, [r7, #20]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	4413      	add	r3, r2
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf0      	blt.n	80010d2 <Paint_DrawVerticalLine+0x14>
    }
}
 80010f0:	bf00      	nop
 80010f2:	bf00      	nop
 80010f4:	3718      	adds	r7, #24
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <Paint_DrawRectangle>:

/**
*  @brief: this draws a rectangle
*/
void Paint_DrawRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b08a      	sub	sp, #40	; 0x28
 80010fe:	af02      	add	r7, sp, #8
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    min_x = x1 > x0 ? x0 : x1;
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4293      	cmp	r3, r2
 800110e:	bfa8      	it	ge
 8001110:	4613      	movge	r3, r2
 8001112:	61fb      	str	r3, [r7, #28]
    max_x = x1 > x0 ? x1 : x0;
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	4293      	cmp	r3, r2
 800111a:	bfb8      	it	lt
 800111c:	4613      	movlt	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
    min_y = y1 > y0 ? y0 : y1;
 8001120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4293      	cmp	r3, r2
 8001126:	bfa8      	it	ge
 8001128:	4613      	movge	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
    max_y = y1 > y0 ? y1 : y0;
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001130:	4293      	cmp	r3, r2
 8001132:	bfb8      	it	lt
 8001134:	4613      	movlt	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
    
    Paint_DrawHorizontalLine(paint, min_x, min_y, max_x - min_x + 1, colored);
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	1c5a      	adds	r2, r3, #1
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	9300      	str	r3, [sp, #0]
 8001144:	4613      	mov	r3, r2
 8001146:	697a      	ldr	r2, [r7, #20]
 8001148:	69f9      	ldr	r1, [r7, #28]
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f7ff ff99 	bl	8001082 <Paint_DrawHorizontalLine>
    Paint_DrawHorizontalLine(paint, min_x, max_y, max_x - min_x + 1, colored);
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	1c5a      	adds	r2, r3, #1
 8001158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	4613      	mov	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	69f9      	ldr	r1, [r7, #28]
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f7ff ff8d 	bl	8001082 <Paint_DrawHorizontalLine>
    Paint_DrawVerticalLine(paint, min_x, min_y, max_y - min_y + 1, colored);
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	1c5a      	adds	r2, r3, #1
 8001170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	69f9      	ldr	r1, [r7, #28]
 800117a:	68f8      	ldr	r0, [r7, #12]
 800117c:	f7ff ff9f 	bl	80010be <Paint_DrawVerticalLine>
    Paint_DrawVerticalLine(paint, max_x, min_y, max_y - min_y + 1, colored);
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118a:	9300      	str	r3, [sp, #0]
 800118c:	4613      	mov	r3, r2
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	69b9      	ldr	r1, [r7, #24]
 8001192:	68f8      	ldr	r0, [r7, #12]
 8001194:	f7ff ff93 	bl	80010be <Paint_DrawVerticalLine>
}
 8001198:	bf00      	nop
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <Paint_DrawFilledRectangle>:

/**
*  @brief: this draws a filled rectangle
*/
void Paint_DrawFilledRectangle(Paint* paint, int x0, int y0, int x1, int y1, int colored) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af02      	add	r7, sp, #8
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]
    int min_x, min_y, max_x, max_y;
    int i;
    min_x = x1 > x0 ? x0 : x1;
 80011ae:	683a      	ldr	r2, [r7, #0]
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	4293      	cmp	r3, r2
 80011b4:	bfa8      	it	ge
 80011b6:	4613      	movge	r3, r2
 80011b8:	623b      	str	r3, [r7, #32]
    max_x = x1 > x0 ? x1 : x0;
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	4293      	cmp	r3, r2
 80011c0:	bfb8      	it	lt
 80011c2:	4613      	movlt	r3, r2
 80011c4:	61fb      	str	r3, [r7, #28]
    min_y = y1 > y0 ? y0 : y1;
 80011c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4293      	cmp	r3, r2
 80011cc:	bfa8      	it	ge
 80011ce:	4613      	movge	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
    max_y = y1 > y0 ? y1 : y0;
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d6:	4293      	cmp	r3, r2
 80011d8:	bfb8      	it	lt
 80011da:	4613      	movlt	r3, r2
 80011dc:	617b      	str	r3, [r7, #20]
    
    for (i = min_x; i <= max_x; i++) {
 80011de:	6a3b      	ldr	r3, [r7, #32]
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
 80011e2:	e00e      	b.n	8001202 <Paint_DrawFilledRectangle+0x62>
      Paint_DrawVerticalLine(paint, i, min_y, max_y - min_y + 1, colored);
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4613      	mov	r3, r2
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f7ff ff61 	bl	80010be <Paint_DrawVerticalLine>
    for (i = min_x; i <= max_x; i++) {
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	3301      	adds	r3, #1
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
 8001202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	429a      	cmp	r2, r3
 8001208:	ddec      	ble.n	80011e4 <Paint_DrawFilledRectangle+0x44>
    }
}
 800120a:	bf00      	nop
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	; 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <Paint_DrawCircle>:

/**
*  @brief: this draws a circle
*/
void Paint_DrawCircle(Paint* paint, int x, int y, int radius, int colored) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b088      	sub	sp, #32
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	607a      	str	r2, [r7, #4]
 8001220:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	425b      	negs	r3, r3
 8001226:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	f1c3 0301 	rsb	r3, r3, #1
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	1ad1      	subs	r1, r2, r3
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	441a      	add	r2, r3
 8001242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f7ff fd86 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	18d1      	adds	r1, r2, r3
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	441a      	add	r2, r3
 8001256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff fd7c 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 800125e:	68ba      	ldr	r2, [r7, #8]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	18d1      	adds	r1, r2, r3
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	1ad2      	subs	r2, r2, r3
 800126a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800126c:	68f8      	ldr	r0, [r7, #12]
 800126e:	f7ff fd72 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	1ad1      	subs	r1, r2, r3
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	1ad2      	subs	r2, r2, r3
 800127e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	f7ff fd68 	bl	8000d56 <Paint_DrawPixel>
        e2 = err;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	429a      	cmp	r2, r3
 8001290:	dc13      	bgt.n	80012ba <Paint_DrawCircle+0xa6>
            err += ++y_pos * 2 + 1;
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	3301      	adds	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	3301      	adds	r3, #1
 800129e:	697a      	ldr	r2, [r7, #20]
 80012a0:	4413      	add	r3, r2
 80012a2:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	425b      	negs	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d105      	bne.n	80012ba <Paint_DrawCircle+0xa6>
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	dc01      	bgt.n	80012ba <Paint_DrawCircle+0xa6>
              e2 = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
            }
        }
        if (e2 > x_pos) {
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	429a      	cmp	r2, r3
 80012c0:	dd08      	ble.n	80012d4 <Paint_DrawCircle+0xc0>
            err += ++x_pos * 2 + 1;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3301      	adds	r3, #1
 80012c6:	61fb      	str	r3, [r7, #28]
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	3301      	adds	r3, #1
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4413      	add	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
        }
    } while (x_pos <= 0);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	ddad      	ble.n	8001236 <Paint_DrawCircle+0x22>
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <Paint_DrawFilledCircle>:

/**
*  @brief: this draws a filled circle
*/
void Paint_DrawFilledCircle(Paint* paint, int x, int y, int radius, int colored) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af02      	add	r7, sp, #8
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	607a      	str	r2, [r7, #4]
 80012f0:	603b      	str	r3, [r7, #0]
    /* Bresenham algorithm */
    int x_pos = -radius;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	425b      	negs	r3, r3
 80012f6:	61fb      	str	r3, [r7, #28]
    int y_pos = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
    int err = 2 - 2 * radius;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	f1c3 0301 	rsb	r3, r3, #1
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	617b      	str	r3, [r7, #20]
    int e2;

    do {
        Paint_DrawPixel(paint, x - x_pos, y + y_pos, colored);
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	1ad1      	subs	r1, r2, r3
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	441a      	add	r2, r3
 8001312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001314:	68f8      	ldr	r0, [r7, #12]
 8001316:	f7ff fd1e 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y + y_pos, colored);
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	18d1      	adds	r1, r2, r3
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	441a      	add	r2, r3
 8001326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f7ff fd14 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x + x_pos, y - y_pos, colored);
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	18d1      	adds	r1, r2, r3
 8001334:	687a      	ldr	r2, [r7, #4]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	1ad2      	subs	r2, r2, r3
 800133a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff fd0a 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawPixel(paint, x - x_pos, y - y_pos, colored);
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	1ad1      	subs	r1, r2, r3
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad2      	subs	r2, r2, r3
 800134e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f7ff fd00 	bl	8000d56 <Paint_DrawPixel>
        Paint_DrawHorizontalLine(paint, x + x_pos, y + y_pos, 2 * (-x_pos) + 1, colored);
 8001356:	68ba      	ldr	r2, [r7, #8]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	18d1      	adds	r1, r2, r3
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	18d0      	adds	r0, r2, r3
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	4613      	mov	r3, r2
 8001366:	07db      	lsls	r3, r3, #31
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	1c5a      	adds	r2, r3, #1
 800136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001370:	9300      	str	r3, [sp, #0]
 8001372:	4613      	mov	r3, r2
 8001374:	4602      	mov	r2, r0
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f7ff fe83 	bl	8001082 <Paint_DrawHorizontalLine>
        Paint_DrawHorizontalLine(paint, x + x_pos, y - y_pos, 2 * (-x_pos) + 1, colored);
 800137c:	68ba      	ldr	r2, [r7, #8]
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	18d1      	adds	r1, r2, r3
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	1ad0      	subs	r0, r2, r3
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	4613      	mov	r3, r2
 800138c:	07db      	lsls	r3, r3, #31
 800138e:	1a9b      	subs	r3, r3, r2
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	4613      	mov	r3, r2
 800139a:	4602      	mov	r2, r0
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff fe70 	bl	8001082 <Paint_DrawHorizontalLine>
        e2 = err;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	613b      	str	r3, [r7, #16]
        if (e2 <= y_pos) {
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dc13      	bgt.n	80013d6 <Paint_DrawFilledCircle+0xf2>
            err += ++y_pos * 2 + 1;
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	3301      	adds	r3, #1
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	3301      	adds	r3, #1
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4413      	add	r3, r2
 80013be:	617b      	str	r3, [r7, #20]
            if(-x_pos == y_pos && e2 <= x_pos) {
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	425b      	negs	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d105      	bne.n	80013d6 <Paint_DrawFilledCircle+0xf2>
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dc01      	bgt.n	80013d6 <Paint_DrawFilledCircle+0xf2>
                e2 = 0;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
            }
        }
        if(e2 > x_pos) {
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	429a      	cmp	r2, r3
 80013dc:	dd08      	ble.n	80013f0 <Paint_DrawFilledCircle+0x10c>
            err += ++x_pos * 2 + 1;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	3301      	adds	r3, #1
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
        }
    } while(x_pos <= 0);
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	dd87      	ble.n	8001306 <Paint_DrawFilledCircle+0x22>
}
 80013f6:	bf00      	nop
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001408:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800140e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4313      	orrs	r3, r2
 8001416:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4013      	ands	r3, r2
 8001422:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001424:	68fb      	ldr	r3, [r7, #12]
}
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b093      	sub	sp, #76	; 0x4c
 8001438:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 800143a:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 800143e:	f004 f813 	bl	8005468 <malloc>
 8001442:	4603      	mov	r3, r0
 8001444:	63fb      	str	r3, [r7, #60]	; 0x3c
	char time_string[] = {'0', '0', ':', '0', '0', '\0'};
 8001446:	4ac6      	ldr	r2, [pc, #792]	; (8001760 <main+0x32c>)
 8001448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001450:	6018      	str	r0, [r3, #0]
 8001452:	3304      	adds	r3, #4
 8001454:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001456:	f000 fd77 	bl	8001f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800145a:	f000 f9a5 	bl	80017a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800145e:	f000 fa07 	bl	8001870 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001462:	f000 faaf 	bl	80019c4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001466:	f000 fa5f 	bl	8001928 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800146a:	f000 fa1f 	bl	80018ac <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\r ** LuniOne. v1.0.0 ** \n\r");
 800146e:	48bd      	ldr	r0, [pc, #756]	; (8001764 <main+0x330>)
 8001470:	f004 f8ea 	bl	8005648 <iprintf>

  //HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 // HAL_GPIO_WritePin(EPD_RST_GPIO_Port,EPD_RST_Pin,GPIO_PIN_RESET);

  EPD epd;
  if (EPD_Init(&epd, lut_full_update) != 0) {
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	49bb      	ldr	r1, [pc, #748]	; (8001768 <main+0x334>)
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f8fc 	bl	8000678 <EPD_Init>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d005      	beq.n	8001492 <main+0x5e>
      printf("e-Paper init failed \n\r");
 8001486:	48b9      	ldr	r0, [pc, #740]	; (800176c <main+0x338>)
 8001488:	f004 f8de 	bl	8005648 <iprintf>
      return -1;
 800148c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001490:	e162      	b.n	8001758 <main+0x324>
  }
  else{
	  printf("e-Paper init done \n\r");
 8001492:	48b7      	ldr	r0, [pc, #732]	; (8001770 <main+0x33c>)
 8001494:	f004 f8d8 	bl	8005648 <iprintf>
  }

  Paint paint;
    Paint_Init(&paint, frame_buffer, epd.width, epd.height);
 8001498:	6a3a      	ldr	r2, [r7, #32]
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	4638      	mov	r0, r7
 800149e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80014a0:	f7ff fb44 	bl	8000b2c <Paint_Init>
    Paint_Clear(&paint, UNCOLORED);
 80014a4:	463b      	mov	r3, r7
 80014a6:	2101      	movs	r1, #1
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fb6a 	bl	8000b82 <Paint_Clear>

    /* For simplicity, the arguments are explicit numerical coordinates */
    /* Write strings to the buffer */
    Paint_DrawFilledRectangle(&paint, 0, 10, 128, 34, COLORED);
 80014ae:	4638      	mov	r0, r7
 80014b0:	2300      	movs	r3, #0
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	2322      	movs	r3, #34	; 0x22
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	220a      	movs	r2, #10
 80014bc:	2100      	movs	r1, #0
 80014be:	f7ff fe6f 	bl	80011a0 <Paint_DrawFilledRectangle>
    Paint_DrawStringAt(&paint, 0, 14, "Hello world!", &Font16, UNCOLORED);
 80014c2:	4638      	mov	r0, r7
 80014c4:	2301      	movs	r3, #1
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	4baa      	ldr	r3, [pc, #680]	; (8001774 <main+0x340>)
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4baa      	ldr	r3, [pc, #680]	; (8001778 <main+0x344>)
 80014ce:	220e      	movs	r2, #14
 80014d0:	2100      	movs	r1, #0
 80014d2:	f7ff fd4e 	bl	8000f72 <Paint_DrawStringAt>
    Paint_DrawStringAt(&paint, 0, 34, "e-Paper Demo", &Font16, COLORED);
 80014d6:	4638      	mov	r0, r7
 80014d8:	2300      	movs	r3, #0
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	4ba5      	ldr	r3, [pc, #660]	; (8001774 <main+0x340>)
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	4ba6      	ldr	r3, [pc, #664]	; (800177c <main+0x348>)
 80014e2:	2222      	movs	r2, #34	; 0x22
 80014e4:	2100      	movs	r1, #0
 80014e6:	f7ff fd44 	bl	8000f72 <Paint_DrawStringAt>

    /* Draw something to the frame buffer */
    Paint_DrawRectangle(&paint, 16, 60, 56, 110, COLORED);
 80014ea:	4638      	mov	r0, r7
 80014ec:	2300      	movs	r3, #0
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	236e      	movs	r3, #110	; 0x6e
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2338      	movs	r3, #56	; 0x38
 80014f6:	223c      	movs	r2, #60	; 0x3c
 80014f8:	2110      	movs	r1, #16
 80014fa:	f7ff fdfe 	bl	80010fa <Paint_DrawRectangle>
    Paint_DrawLine(&paint, 16, 60, 56, 110, COLORED);
 80014fe:	4638      	mov	r0, r7
 8001500:	2300      	movs	r3, #0
 8001502:	9301      	str	r3, [sp, #4]
 8001504:	236e      	movs	r3, #110	; 0x6e
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	2338      	movs	r3, #56	; 0x38
 800150a:	223c      	movs	r2, #60	; 0x3c
 800150c:	2110      	movs	r1, #16
 800150e:	f7ff fd5f 	bl	8000fd0 <Paint_DrawLine>
    Paint_DrawLine(&paint, 56, 60, 16, 110, COLORED);
 8001512:	4638      	mov	r0, r7
 8001514:	2300      	movs	r3, #0
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	236e      	movs	r3, #110	; 0x6e
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2310      	movs	r3, #16
 800151e:	223c      	movs	r2, #60	; 0x3c
 8001520:	2138      	movs	r1, #56	; 0x38
 8001522:	f7ff fd55 	bl	8000fd0 <Paint_DrawLine>
    Paint_DrawCircle(&paint, 120, 90, 30, COLORED);
 8001526:	4638      	mov	r0, r7
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	231e      	movs	r3, #30
 800152e:	225a      	movs	r2, #90	; 0x5a
 8001530:	2178      	movs	r1, #120	; 0x78
 8001532:	f7ff fe6f 	bl	8001214 <Paint_DrawCircle>
    Paint_DrawFilledRectangle(&paint, 16, 130, 56, 180, COLORED);
 8001536:	4638      	mov	r0, r7
 8001538:	2300      	movs	r3, #0
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	23b4      	movs	r3, #180	; 0xb4
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2338      	movs	r3, #56	; 0x38
 8001542:	2282      	movs	r2, #130	; 0x82
 8001544:	2110      	movs	r1, #16
 8001546:	f7ff fe2b 	bl	80011a0 <Paint_DrawFilledRectangle>
    Paint_DrawFilledCircle(&paint, 120, 160, 30, COLORED);
 800154a:	4638      	mov	r0, r7
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	231e      	movs	r3, #30
 8001552:	22a0      	movs	r2, #160	; 0xa0
 8001554:	2178      	movs	r1, #120	; 0x78
 8001556:	f7ff fec5 	bl	80012e4 <Paint_DrawFilledCircle>

    /* Display the frame_buffer */
    EPD_SetFrameMemory(&epd, frame_buffer, 0, 0, Paint_GetWidth(&paint), Paint_GetHeight(&paint));
 800155a:	463b      	mov	r3, r7
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fba6 	bl	8000cae <Paint_GetWidth>
 8001562:	4604      	mov	r4, r0
 8001564:	463b      	mov	r3, r7
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff fbcd 	bl	8000d06 <Paint_GetHeight>
 800156c:	4603      	mov	r3, r0
 800156e:	f107 0010 	add.w	r0, r7, #16
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	9400      	str	r4, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2200      	movs	r2, #0
 800157a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800157c:	f7ff f973 	bl	8000866 <EPD_SetFrameMemory>
    EPD_DisplayFrame(&epd);
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fa2f 	bl	80009e8 <EPD_DisplayFrame>
    EPD_DelayMs(&epd, 2000);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff f8fc 	bl	8000790 <EPD_DelayMs>
       *  there are 2 memory areas embedded in the e-paper display
       *  and once the display is refreshed, the memory area will be auto-toggled,
       *  i.e. the next action of SetFrameMemory will set the other memory area
       *  therefore you have to set the frame memory and refresh the display twice.
       */
      EPD_ClearFrameMemory(&epd, 0xFF);
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	21ff      	movs	r1, #255	; 0xff
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff f9e8 	bl	8000974 <EPD_ClearFrameMemory>
      EPD_DisplayFrame(&epd);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fa1d 	bl	80009e8 <EPD_DisplayFrame>
      EPD_ClearFrameMemory(&epd, 0xFF);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	21ff      	movs	r1, #255	; 0xff
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff f9dd 	bl	8000974 <EPD_ClearFrameMemory>
      EPD_DisplayFrame(&epd);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fa12 	bl	80009e8 <EPD_DisplayFrame>

      /* EPD_or partial update */
      if (EPD_Init(&epd, lut_partial_update) != 0) {
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	496d      	ldr	r1, [pc, #436]	; (8001780 <main+0x34c>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff f854 	bl	8000678 <EPD_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <main+0x1ae>
        printf("e-Paper init failed\n");
 80015d6:	486b      	ldr	r0, [pc, #428]	; (8001784 <main+0x350>)
 80015d8:	f004 f8bc 	bl	8005754 <puts>
        return -1;
 80015dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015e0:	e0ba      	b.n	8001758 <main+0x324>
       *  there are 2 memory areas embedded in the e-paper display
       *  and once the display is refreshed, the memory area will be auto-toggled,
       *  i.e. the next action of SetFrameMemory will set the other memory area
       *  therefore you have to set the frame memory and refresh the display twice.
       */
      EPD_SetFrameMemory(&epd, IMAGE_DATA, 0, 0, epd.width, epd.height);
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	f107 0010 	add.w	r0, r7, #16
 80015ea:	9201      	str	r2, [sp, #4]
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	2200      	movs	r2, #0
 80015f2:	4965      	ldr	r1, [pc, #404]	; (8001788 <main+0x354>)
 80015f4:	f7ff f937 	bl	8000866 <EPD_SetFrameMemory>
      EPD_DisplayFrame(&epd);
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff f9f3 	bl	80009e8 <EPD_DisplayFrame>
      EPD_SetFrameMemory(&epd, IMAGE_DATA, 0, 0, epd.width, epd.height);
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001606:	f107 0010 	add.w	r0, r7, #16
 800160a:	9201      	str	r2, [sp, #4]
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	2300      	movs	r3, #0
 8001610:	2200      	movs	r2, #0
 8001612:	495d      	ldr	r1, [pc, #372]	; (8001788 <main+0x354>)
 8001614:	f7ff f927 	bl	8000866 <EPD_SetFrameMemory>
      EPD_DisplayFrame(&epd);
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff f9e3 	bl	80009e8 <EPD_DisplayFrame>

      time_start_ms = HAL_GetTick();
 8001622:	f000 fcff 	bl	8002024 <HAL_GetTick>
 8001626:	63b8      	str	r0, [r7, #56]	; 0x38
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 /* LUNI CODE  */
	  HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8001628:	2102      	movs	r1, #2
 800162a:	4858      	ldr	r0, [pc, #352]	; (800178c <main+0x358>)
 800162c:	f000 ffba 	bl	80025a4 <HAL_GPIO_TogglePin>
	  printf("** Routine v2. ** \n\r");
 8001630:	4857      	ldr	r0, [pc, #348]	; (8001790 <main+0x35c>)
 8001632:	f004 f809 	bl	8005648 <iprintf>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  time_now_s = (HAL_GetTick() - time_start_ms) / 1000;
 8001636:	f000 fcf5 	bl	8002024 <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	4a54      	ldr	r2, [pc, #336]	; (8001794 <main+0x360>)
 8001642:	fba2 2303 	umull	r2, r3, r2, r3
 8001646:	099b      	lsrs	r3, r3, #6
 8001648:	637b      	str	r3, [r7, #52]	; 0x34
	  time_string[0] = time_now_s / 60 / 10 + '0';
 800164a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800164c:	4a52      	ldr	r2, [pc, #328]	; (8001798 <main+0x364>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	099b      	lsrs	r3, r3, #6
 8001654:	b2db      	uxtb	r3, r3
 8001656:	3330      	adds	r3, #48	; 0x30
 8001658:	b2db      	uxtb	r3, r3
 800165a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	  time_string[1] = time_now_s / 60 % 10 + '0';
 800165e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001660:	4a4e      	ldr	r2, [pc, #312]	; (800179c <main+0x368>)
 8001662:	fba2 2303 	umull	r2, r3, r2, r3
 8001666:	0959      	lsrs	r1, r3, #5
 8001668:	4b4d      	ldr	r3, [pc, #308]	; (80017a0 <main+0x36c>)
 800166a:	fba3 2301 	umull	r2, r3, r3, r1
 800166e:	08da      	lsrs	r2, r3, #3
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	1aca      	subs	r2, r1, r3
 800167a:	b2d3      	uxtb	r3, r2
 800167c:	3330      	adds	r3, #48	; 0x30
 800167e:	b2db      	uxtb	r3, r3
 8001680:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	  time_string[3] = time_now_s % 60 / 10 + '0';
 8001684:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001686:	4b45      	ldr	r3, [pc, #276]	; (800179c <main+0x368>)
 8001688:	fba3 2301 	umull	r2, r3, r3, r1
 800168c:	095a      	lsrs	r2, r3, #5
 800168e:	4613      	mov	r3, r2
 8001690:	011b      	lsls	r3, r3, #4
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	1aca      	subs	r2, r1, r3
 8001698:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <main+0x36c>)
 800169a:	fba3 2302 	umull	r2, r3, r3, r2
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	3330      	adds	r3, #48	; 0x30
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  time_string[4] = time_now_s % 60 % 10 + '0';
 80016aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80016ac:	4b3b      	ldr	r3, [pc, #236]	; (800179c <main+0x368>)
 80016ae:	fba3 2301 	umull	r2, r3, r3, r1
 80016b2:	095a      	lsrs	r2, r3, #5
 80016b4:	4613      	mov	r3, r2
 80016b6:	011b      	lsls	r3, r3, #4
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	1aca      	subs	r2, r1, r3
 80016be:	4b38      	ldr	r3, [pc, #224]	; (80017a0 <main+0x36c>)
 80016c0:	fba3 1302 	umull	r1, r3, r3, r2
 80016c4:	08d9      	lsrs	r1, r3, #3
 80016c6:	460b      	mov	r3, r1
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	440b      	add	r3, r1
 80016cc:	005b      	lsls	r3, r3, #1
 80016ce:	1ad1      	subs	r1, r2, r3
 80016d0:	b2cb      	uxtb	r3, r1
 80016d2:	3330      	adds	r3, #48	; 0x30
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	  Paint_SetWidth(&paint, 32);
 80016da:	463b      	mov	r3, r7
 80016dc:	2120      	movs	r1, #32
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff faf1 	bl	8000cc6 <Paint_SetWidth>
	  Paint_SetHeight(&paint, 96);
 80016e4:	463b      	mov	r3, r7
 80016e6:	2160      	movs	r1, #96	; 0x60
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fb18 	bl	8000d1e <Paint_SetHeight>
	  Paint_SetRotate(&paint, ROTATE_90);
 80016ee:	463b      	mov	r3, r7
 80016f0:	2101      	movs	r1, #1
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7ff fb21 	bl	8000d3a <Paint_SetRotate>

	  Paint_Clear(&paint, UNCOLORED);
 80016f8:	463b      	mov	r3, r7
 80016fa:	2101      	movs	r1, #1
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fa40 	bl	8000b82 <Paint_Clear>
	  Paint_DrawStringAt(&paint, 0, 4, time_string, &Font24, COLORED);
 8001702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001706:	4638      	mov	r0, r7
 8001708:	2200      	movs	r2, #0
 800170a:	9201      	str	r2, [sp, #4]
 800170c:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <main+0x370>)
 800170e:	9200      	str	r2, [sp, #0]
 8001710:	2204      	movs	r2, #4
 8001712:	2100      	movs	r1, #0
 8001714:	f7ff fc2d 	bl	8000f72 <Paint_DrawStringAt>
	  EPD_SetFrameMemory(&epd, frame_buffer, 80, 72, Paint_GetWidth(&paint), Paint_GetHeight(&paint));
 8001718:	463b      	mov	r3, r7
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fac7 	bl	8000cae <Paint_GetWidth>
 8001720:	4604      	mov	r4, r0
 8001722:	463b      	mov	r3, r7
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff faee 	bl	8000d06 <Paint_GetHeight>
 800172a:	4603      	mov	r3, r0
 800172c:	f107 0010 	add.w	r0, r7, #16
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	9400      	str	r4, [sp, #0]
 8001734:	2348      	movs	r3, #72	; 0x48
 8001736:	2250      	movs	r2, #80	; 0x50
 8001738:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800173a:	f7ff f894 	bl	8000866 <EPD_SetFrameMemory>
	  EPD_DisplayFrame(&epd);
 800173e:	f107 0310 	add.w	r3, r7, #16
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff f950 	bl	80009e8 <EPD_DisplayFrame>

	  EPD_DelayMs(&epd, 500);
 8001748:	f107 0310 	add.w	r3, r7, #16
 800174c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff f81d 	bl	8000790 <EPD_DelayMs>
	  HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 8001756:	e767      	b.n	8001628 <main+0x1f4>
  }
  /* USER CODE END 3 */
}
 8001758:	4618      	mov	r0, r3
 800175a:	3744      	adds	r7, #68	; 0x44
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}
 8001760:	08006540 	.word	0x08006540
 8001764:	080064a8 	.word	0x080064a8
 8001768:	08008c0c 	.word	0x08008c0c
 800176c:	080064c4 	.word	0x080064c4
 8001770:	080064dc 	.word	0x080064dc
 8001774:	20000008 	.word	0x20000008
 8001778:	080064f4 	.word	0x080064f4
 800177c:	08006504 	.word	0x08006504
 8001780:	08008c2c 	.word	0x08008c2c
 8001784:	08006514 	.word	0x08006514
 8001788:	08008c4c 	.word	0x08008c4c
 800178c:	48000400 	.word	0x48000400
 8001790:	08006528 	.word	0x08006528
 8001794:	10624dd3 	.word	0x10624dd3
 8001798:	1b4e81b5 	.word	0x1b4e81b5
 800179c:	88888889 	.word	0x88888889
 80017a0:	cccccccd 	.word	0xcccccccd
 80017a4:	20000010 	.word	0x20000010

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b09a      	sub	sp, #104	; 0x68
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0320 	add.w	r3, r7, #32
 80017b2:	2248      	movs	r2, #72	; 0x48
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f003 fe5e 	bl	8005478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	1d3b      	adds	r3, r7, #4
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
 80017ca:	615a      	str	r2, [r3, #20]
 80017cc:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ce:	4b27      	ldr	r3, [pc, #156]	; (800186c <SystemClock_Config+0xc4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017d6:	4a25      	ldr	r2, [pc, #148]	; (800186c <SystemClock_Config+0xc4>)
 80017d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <SystemClock_Config+0xc4>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017fa:	2340      	movs	r3, #64	; 0x40
 80017fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017fe:	2302      	movs	r3, #2
 8001800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001802:	2303      	movs	r3, #3
 8001804:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 12;
 800180a:	230c      	movs	r3, #12
 800180c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800180e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001812:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001814:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001818:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800181a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800181e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001820:	f107 0320 	add.w	r3, r7, #32
 8001824:	4618      	mov	r0, r3
 8001826:	f001 fa6b 	bl	8002d00 <HAL_RCC_OscConfig>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001830:	f000 f96a 	bl	8001b08 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001834:	236f      	movs	r3, #111	; 0x6f
 8001836:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001838:	2303      	movs	r3, #3
 800183a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800183c:	2380      	movs	r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV4;
 8001848:	2390      	movs	r3, #144	; 0x90
 800184a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV4;
 800184c:	2390      	movs	r3, #144	; 0x90
 800184e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fdc7 	bl	80033e8 <HAL_RCC_ClockConfig>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001860:	f000 f952 	bl	8001b08 <Error_Handler>
  }
}
 8001864:	bf00      	nop
 8001866:	3768      	adds	r7, #104	; 0x68
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	58000400 	.word	0x58000400

08001870 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001876:	463b      	mov	r3, r7
 8001878:	2250      	movs	r2, #80	; 0x50
 800187a:	2100      	movs	r1, #0
 800187c:	4618      	mov	r0, r3
 800187e:	f003 fdfb 	bl	8005478 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001886:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001888:	2300      	movs	r3, #0
 800188a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800188c:	2300      	movs	r3, #0
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001890:	463b      	mov	r3, r7
 8001892:	4618      	mov	r0, r3
 8001894:	f002 f9e7 	bl	8003c66 <HAL_RCCEx_PeriphCLKConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800189e:	f000 f933 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	; 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <MX_SPI2_Init+0x74>)
 80018b2:	4a1c      	ldr	r2, [pc, #112]	; (8001924 <MX_SPI2_Init+0x78>)
 80018b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <MX_SPI2_Init+0x74>)
 80018b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80018be:	4b18      	ldr	r3, [pc, #96]	; (8001920 <MX_SPI2_Init+0x74>)
 80018c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80018c4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MX_SPI2_Init+0x74>)
 80018c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018cc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <MX_SPI2_Init+0x74>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <MX_SPI2_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_SPI2_Init+0x74>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MX_SPI2_Init+0x74>)
 80018e4:	2208      	movs	r2, #8
 80018e6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <MX_SPI2_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_SPI2_Init+0x74>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b0a      	ldr	r3, [pc, #40]	; (8001920 <MX_SPI2_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_SPI2_Init+0x74>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_SPI2_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_SPI2_Init+0x74>)
 8001908:	2208      	movs	r2, #8
 800190a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_SPI2_Init+0x74>)
 800190e:	f002 fc31 	bl	8004174 <HAL_SPI_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001918:	f000 f8f6 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200000e4 	.word	0x200000e4
 8001924:	40003800 	.word	0x40003800

08001928 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <MX_USART1_UART_Init+0x94>)
 800192e:	4a24      	ldr	r2, [pc, #144]	; (80019c0 <MX_USART1_UART_Init+0x98>)
 8001930:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001932:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001934:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001938:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_USART1_UART_Init+0x94>)
 800193c:	2200      	movs	r2, #0
 800193e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001942:	2200      	movs	r2, #0
 8001944:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001948:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800194c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800194e:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001950:	220c      	movs	r2, #12
 8001952:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800195a:	4b18      	ldr	r3, [pc, #96]	; (80019bc <MX_USART1_UART_Init+0x94>)
 800195c:	2200      	movs	r2, #0
 800195e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001966:	4b15      	ldr	r3, [pc, #84]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001968:	2200      	movs	r2, #0
 800196a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196c:	4b13      	ldr	r3, [pc, #76]	; (80019bc <MX_USART1_UART_Init+0x94>)
 800196e:	2200      	movs	r2, #0
 8001970:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001972:	4812      	ldr	r0, [pc, #72]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001974:	f002 ff94 	bl	80048a0 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800197e:	f000 f8c3 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001982:	2100      	movs	r1, #0
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001986:	f003 fc7a 	bl	800527e <HAL_UARTEx_SetTxFifoThreshold>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001990:	f000 f8ba 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001994:	2100      	movs	r1, #0
 8001996:	4809      	ldr	r0, [pc, #36]	; (80019bc <MX_USART1_UART_Init+0x94>)
 8001998:	f003 fcaf 	bl	80052fa <HAL_UARTEx_SetRxFifoThreshold>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80019a2:	f000 f8b1 	bl	8001b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80019a6:	4805      	ldr	r0, [pc, #20]	; (80019bc <MX_USART1_UART_Init+0x94>)
 80019a8:	f003 fc30 	bl	800520c <HAL_UARTEx_DisableFifoMode>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80019b2:	f000 f8a9 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000148 	.word	0x20000148
 80019c0:	40013800 	.word	0x40013800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019d8:	2004      	movs	r0, #4
 80019da:	f7ff fd11 	bl	8001400 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019de:	2001      	movs	r0, #1
 80019e0:	f7ff fd0e 	bl	8001400 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e4:	2002      	movs	r0, #2
 80019e6:	f7ff fd0b 	bl	8001400 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2008      	movs	r0, #8
 80019ec:	f7ff fd08 	bl	8001400 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	2123      	movs	r1, #35	; 0x23
 80019f4:	4838      	ldr	r0, [pc, #224]	; (8001ad8 <MX_GPIO_Init+0x114>)
 80019f6:	f000 fdbd 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8001a00:	4836      	ldr	r0, [pc, #216]	; (8001adc <MX_GPIO_Init+0x118>)
 8001a02:	f000 fdb7 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8001a06:	2200      	movs	r2, #0
 8001a08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a10:	f000 fdb0 	bl	8002574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a14:	2310      	movs	r3, #16
 8001a16:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	4619      	mov	r1, r3
 8001a24:	482d      	ldr	r0, [pc, #180]	; (8001adc <MX_GPIO_Init+0x118>)
 8001a26:	f000 fc1d 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8001a2a:	2323      	movs	r3, #35	; 0x23
 8001a2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4826      	ldr	r0, [pc, #152]	; (8001ad8 <MX_GPIO_Init+0x114>)
 8001a40:	f000 fc10 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8001a44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4820      	ldr	r0, [pc, #128]	; (8001ad8 <MX_GPIO_Init+0x114>)
 8001a58:	f000 fc04 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DC_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin;
 8001a5c:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001a60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a62:	2301      	movs	r3, #1
 8001a64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	4619      	mov	r1, r3
 8001a72:	481a      	ldr	r0, [pc, #104]	; (8001adc <MX_GPIO_Init+0x118>)
 8001a74:	f000 fbf6 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001a8a:	230a      	movs	r3, #10
 8001a8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	4619      	mov	r1, r3
 8001a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a96:	f000 fbe5 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_RST_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8001a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab4:	f000 fbd6 	bl	8002264 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_GPIO_Init+0x11c>)
 8001aca:	f000 fbcb 	bl	8002264 <HAL_GPIO_Init>

}
 8001ace:	bf00      	nop
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	48000800 	.word	0x48000800
 8001ae0:	48000c00 	.word	0x48000c00

08001ae4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001aec:	1d39      	adds	r1, r7, #4
 8001aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af2:	2201      	movs	r2, #1
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <__io_putchar+0x20>)
 8001af6:	f002 ff23 	bl	8004940 <HAL_UART_Transmit>

  return ch;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000148 	.word	0x20000148

08001b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b0c:	b672      	cpsid	i
}
 8001b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <Error_Handler+0x8>

08001b12 <LL_AHB2_GRP1_EnableClock>:
{
 8001b12:	b480      	push	{r7}
 8001b14:	b085      	sub	sp, #20
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4013      	ands	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4013      	ands	r3, r2
 8001b66:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr

08001b76 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b085      	sub	sp, #20
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4013      	ands	r3, r2
 8001b98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bac:	2007      	movs	r0, #7
 8001bae:	f000 fb27 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b088      	sub	sp, #32
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc0:	f107 030c 	add.w	r3, r7, #12
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a19      	ldr	r2, [pc, #100]	; (8001c3c <HAL_SPI_MspInit+0x84>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d12b      	bne.n	8001c32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001bda:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bde:	f7ff ffb1 	bl	8001b44 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2004      	movs	r0, #4
 8001be4:	f7ff ff95 	bl	8001b12 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	2001      	movs	r0, #1
 8001bea:	f7ff ff92 	bl	8001b12 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	480d      	ldr	r0, [pc, #52]	; (8001c40 <HAL_SPI_MspInit+0x88>)
 8001c0a:	f000 fb2b 	bl	8002264 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c12:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c20:	2305      	movs	r3, #5
 8001c22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c2e:	f000 fb19 	bl	8002264 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c32:	bf00      	nop
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40003800 	.word	0x40003800
 8001c40:	48000800 	.word	0x48000800

08001c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b09c      	sub	sp, #112	; 0x70
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2250      	movs	r2, #80	; 0x50
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fc07 	bl	8005478 <memset>
  if(huart->Instance==USART1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_UART_MspInit+0x84>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d124      	bne.n	8001cbe <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c74:	2301      	movs	r3, #1
 8001c76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4618      	mov	r0, r3
 8001c82:	f001 fff0 	bl	8003c66 <HAL_RCCEx_PeriphCLKConfig>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c8c:	f7ff ff3c 	bl	8001b08 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c94:	f7ff ff6f 	bl	8001b76 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f7ff ff3a 	bl	8001b12 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c9e:	23c0      	movs	r3, #192	; 0xc0
 8001ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4804      	ldr	r0, [pc, #16]	; (8001ccc <HAL_UART_MspInit+0x88>)
 8001cba:	f000 fad3 	bl	8002264 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cbe:	bf00      	nop
 8001cc0:	3770      	adds	r7, #112	; 0x70
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40013800 	.word	0x40013800
 8001ccc:	48000400 	.word	0x48000400

08001cd0 <PendSV_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f000 f98b 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e00a      	b.n	8001d12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cfc:	f3af 8000 	nop.w
 8001d00:	4601      	mov	r1, r0
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	1c5a      	adds	r2, r3, #1
 8001d06:	60ba      	str	r2, [r7, #8]
 8001d08:	b2ca      	uxtb	r2, r1
 8001d0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	dbf0      	blt.n	8001cfc <_read+0x12>
  }

  return len;
 8001d1a:	687b      	ldr	r3, [r7, #4]
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	60b9      	str	r1, [r7, #8]
 8001d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	e009      	b.n	8001d4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1c5a      	adds	r2, r3, #1
 8001d3a:	60ba      	str	r2, [r7, #8]
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff fed0 	bl	8001ae4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	3301      	adds	r3, #1
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	dbf1      	blt.n	8001d36 <_write+0x12>
  }
  return len;
 8001d52:	687b      	ldr	r3, [r7, #4]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <_close>:

int _close(int file)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d84:	605a      	str	r2, [r3, #4]
  return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_isatty>:

int _isatty(int file)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d9c:	2301      	movs	r3, #1
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dcc:	4a14      	ldr	r2, [pc, #80]	; (8001e20 <_sbrk+0x5c>)
 8001dce:	4b15      	ldr	r3, [pc, #84]	; (8001e24 <_sbrk+0x60>)
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dd8:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <_sbrk+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d102      	bne.n	8001de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <_sbrk+0x64>)
 8001de2:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <_sbrk+0x68>)
 8001de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <_sbrk+0x64>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d207      	bcs.n	8001e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df4:	f003 fb0e 	bl	8005414 <__errno>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	20030000 	.word	0x20030000
 8001e24:	00000400 	.word	0x00000400
 8001e28:	200001dc 	.word	0x200001dc
 8001e2c:	200001f8 	.word	0x200001f8

08001e30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <SystemInit+0x98>)
 8001e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <SystemInit+0x98>)
 8001e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e58:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001e5c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <SystemInit+0x9c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e7a:	f023 0305 	bic.w	r3, r3, #5
 8001e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001e96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9a:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <SystemInit+0xa0>)
 8001e9c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <SystemInit+0xa0>)
 8001ea4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ea6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001eb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eba:	2200      	movs	r2, #0
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000ed00 	.word	0xe000ed00
 8001ecc:	faf6fefb 	.word	0xfaf6fefb
 8001ed0:	22041000 	.word	0x22041000

08001ed4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001ed4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed8:	3304      	adds	r3, #4

08001eda <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eda:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001edc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001ede:	d3f9      	bcc.n	8001ed4 <CopyDataInit>
  bx lr
 8001ee0:	4770      	bx	lr

08001ee2 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001ee2:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001ee4:	3004      	adds	r0, #4

08001ee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001ee6:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001ee8:	d3fb      	bcc.n	8001ee2 <FillZerobss>
  bx lr
 8001eea:	4770      	bx	lr

08001eec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001eec:	480c      	ldr	r0, [pc, #48]	; (8001f20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ef0:	f7ff ff9e 	bl	8001e30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001ef4:	480b      	ldr	r0, [pc, #44]	; (8001f24 <LoopForever+0x6>)
 8001ef6:	490c      	ldr	r1, [pc, #48]	; (8001f28 <LoopForever+0xa>)
 8001ef8:	4a0c      	ldr	r2, [pc, #48]	; (8001f2c <LoopForever+0xe>)
 8001efa:	2300      	movs	r3, #0
 8001efc:	f7ff ffed 	bl	8001eda <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f00:	480b      	ldr	r0, [pc, #44]	; (8001f30 <LoopForever+0x12>)
 8001f02:	490c      	ldr	r1, [pc, #48]	; (8001f34 <LoopForever+0x16>)
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <LoopForever+0x1a>)
 8001f06:	2300      	movs	r3, #0
 8001f08:	f7ff ffe7 	bl	8001eda <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <LoopForever+0x1e>)
 8001f0e:	490c      	ldr	r1, [pc, #48]	; (8001f40 <LoopForever+0x22>)
 8001f10:	2300      	movs	r3, #0
 8001f12:	f7ff ffe8 	bl	8001ee6 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f16:	f003 fa83 	bl	8005420 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f1a:	f7ff fa8b 	bl	8001434 <main>

08001f1e <LoopForever>:

LoopForever:
  b LoopForever
 8001f1e:	e7fe      	b.n	8001f1e <LoopForever>
  ldr   r0, =_estack
 8001f20:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001f24:	20000008 	.word	0x20000008
 8001f28:	200000a8 	.word	0x200000a8
 8001f2c:	0800a03c 	.word	0x0800a03c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001f30:	20030000 	.word	0x20030000
 8001f34:	20030000 	.word	0x20030000
 8001f38:	0800a0dc 	.word	0x0800a0dc
  INIT_BSS _sbss, _ebss
 8001f3c:	200000a8 	.word	0x200000a8
 8001f40:	200001f4 	.word	0x200001f4

08001f44 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC1_IRQHandler>
	...

08001f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_Init+0x3c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a0b      	ldr	r2, [pc, #44]	; (8001f84 <HAL_Init+0x3c>)
 8001f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f5e:	2003      	movs	r0, #3
 8001f60:	f000 f94e 	bl	8002200 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f64:	2000      	movs	r0, #0
 8001f66:	f000 f80f 	bl	8001f88 <HAL_InitTick>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d002      	beq.n	8001f76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	71fb      	strb	r3, [r7, #7]
 8001f74:	e001      	b.n	8001f7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f76:	f7ff fe17 	bl	8001ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	58004000 	.word	0x58004000

08001f88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001f94:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <HAL_InitTick+0x6c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d024      	beq.n	8001fe6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f9c:	f001 fbd2 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_InitTick+0x6c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f948 	bl	800224a <HAL_SYSTICK_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10f      	bne.n	8001fe0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	d809      	bhi.n	8001fda <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fce:	f000 f922 	bl	8002216 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd2:	4a09      	ldr	r2, [pc, #36]	; (8001ff8 <HAL_InitTick+0x70>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	e007      	b.n	8001fea <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	73fb      	strb	r3, [r7, #15]
 8001fde:	e004      	b.n	8001fea <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
 8001fe4:	e001      	b.n	8001fea <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000040 	.word	0x20000040
 8001ff8:	2000003c 	.word	0x2000003c

08001ffc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20000040 	.word	0x20000040
 8002020:	200001e0 	.word	0x200001e0

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	200001e0 	.word	0x200001e0

0800203c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_GetTickPrio+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	2000003c 	.word	0x2000003c

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffe2 	bl	8002024 <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffd2 	bl	8002024 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000040 	.word	0x20000040

0800209c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800209c:	b480      	push	{r7}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ac:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ce:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <__NVIC_SetPriorityGrouping+0x44>)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	60d3      	str	r3, [r2, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <__NVIC_GetPriorityGrouping+0x18>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	f003 0307 	and.w	r3, r3, #7
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	e000ed00 	.word	0xe000ed00

08002100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	4603      	mov	r3, r0
 8002108:	6039      	str	r1, [r7, #0]
 800210a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db0a      	blt.n	800212a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	490c      	ldr	r1, [pc, #48]	; (800214c <__NVIC_SetPriority+0x4c>)
 800211a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211e:	0112      	lsls	r2, r2, #4
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	440b      	add	r3, r1
 8002124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002128:	e00a      	b.n	8002140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4908      	ldr	r1, [pc, #32]	; (8002150 <__NVIC_SetPriority+0x50>)
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	3b04      	subs	r3, #4
 8002138:	0112      	lsls	r2, r2, #4
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	440b      	add	r3, r1
 800213e:	761a      	strb	r2, [r3, #24]
}
 8002140:	bf00      	nop
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000e100 	.word	0xe000e100
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	; 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f1c3 0307 	rsb	r3, r3, #7
 800216e:	2b04      	cmp	r3, #4
 8002170:	bf28      	it	cs
 8002172:	2304      	movcs	r3, #4
 8002174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	3304      	adds	r3, #4
 800217a:	2b06      	cmp	r3, #6
 800217c:	d902      	bls.n	8002184 <NVIC_EncodePriority+0x30>
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	3b03      	subs	r3, #3
 8002182:	e000      	b.n	8002186 <NVIC_EncodePriority+0x32>
 8002184:	2300      	movs	r3, #0
 8002186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	401a      	ands	r2, r3
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800219c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	fa01 f303 	lsl.w	r3, r1, r3
 80021a6:	43d9      	mvns	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ac:	4313      	orrs	r3, r2
         );
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3724      	adds	r7, #36	; 0x24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021cc:	d301      	bcc.n	80021d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021ce:	2301      	movs	r3, #1
 80021d0:	e00f      	b.n	80021f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021d2:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <SysTick_Config+0x40>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3b01      	subs	r3, #1
 80021d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021da:	210f      	movs	r1, #15
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021e0:	f7ff ff8e 	bl	8002100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <SysTick_Config+0x40>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ea:	4b04      	ldr	r3, [pc, #16]	; (80021fc <SysTick_Config+0x40>)
 80021ec:	2207      	movs	r2, #7
 80021ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f7ff ff47 	bl	800209c <__NVIC_SetPriorityGrouping>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	4603      	mov	r3, r0
 800221e:	60b9      	str	r1, [r7, #8]
 8002220:	607a      	str	r2, [r7, #4]
 8002222:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002224:	f7ff ff5e 	bl	80020e4 <__NVIC_GetPriorityGrouping>
 8002228:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	68b9      	ldr	r1, [r7, #8]
 800222e:	6978      	ldr	r0, [r7, #20]
 8002230:	f7ff ff90 	bl	8002154 <NVIC_EncodePriority>
 8002234:	4602      	mov	r2, r0
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ff5f 	bl	8002100 <__NVIC_SetPriority>
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b082      	sub	sp, #8
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff ffb2 	bl	80021bc <SysTick_Config>
 8002258:	4603      	mov	r3, r0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
	...

08002264 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002272:	e14c      	b.n	800250e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	4013      	ands	r3, r2
 8002282:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 813e 	beq.w	8002508 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d005      	beq.n	80022a4 <HAL_GPIO_Init+0x40>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d130      	bne.n	8002306 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	4013      	ands	r3, r2
 80022ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	693a      	ldr	r2, [r7, #16]
 80022d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022da:	2201      	movs	r2, #1
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 0201 	and.w	r2, r3, #1
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d017      	beq.n	8002342 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d123      	bne.n	8002396 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4013      	ands	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	6939      	ldr	r1, [r7, #16]
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	4013      	ands	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8098 	beq.w	8002508 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80023d8:	4a54      	ldr	r2, [pc, #336]	; (800252c <HAL_GPIO_Init+0x2c8>)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002402:	d019      	beq.n	8002438 <HAL_GPIO_Init+0x1d4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a4a      	ldr	r2, [pc, #296]	; (8002530 <HAL_GPIO_Init+0x2cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d013      	beq.n	8002434 <HAL_GPIO_Init+0x1d0>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a49      	ldr	r2, [pc, #292]	; (8002534 <HAL_GPIO_Init+0x2d0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00d      	beq.n	8002430 <HAL_GPIO_Init+0x1cc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a48      	ldr	r2, [pc, #288]	; (8002538 <HAL_GPIO_Init+0x2d4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d007      	beq.n	800242c <HAL_GPIO_Init+0x1c8>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4a47      	ldr	r2, [pc, #284]	; (800253c <HAL_GPIO_Init+0x2d8>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_GPIO_Init+0x1c4>
 8002424:	2304      	movs	r3, #4
 8002426:	e008      	b.n	800243a <HAL_GPIO_Init+0x1d6>
 8002428:	2307      	movs	r3, #7
 800242a:	e006      	b.n	800243a <HAL_GPIO_Init+0x1d6>
 800242c:	2303      	movs	r3, #3
 800242e:	e004      	b.n	800243a <HAL_GPIO_Init+0x1d6>
 8002430:	2302      	movs	r3, #2
 8002432:	e002      	b.n	800243a <HAL_GPIO_Init+0x1d6>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_GPIO_Init+0x1d6>
 8002438:	2300      	movs	r3, #0
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	f002 0203 	and.w	r2, r2, #3
 8002440:	0092      	lsls	r2, r2, #2
 8002442:	4093      	lsls	r3, r2
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800244a:	4938      	ldr	r1, [pc, #224]	; (800252c <HAL_GPIO_Init+0x2c8>)
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	3302      	adds	r3, #2
 8002452:	693a      	ldr	r2, [r7, #16]
 8002454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002458:	4b39      	ldr	r3, [pc, #228]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800247c:	4a30      	ldr	r2, [pc, #192]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002482:	4b2f      	ldr	r3, [pc, #188]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024a6:	4a26      	ldr	r2, [pc, #152]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 80024ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024d2:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 80024dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002500:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_GPIO_Init+0x2dc>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	3301      	adds	r3, #1
 800250c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	f47f aeab 	bne.w	8002274 <HAL_GPIO_Init+0x10>
  }
}
 800251e:	bf00      	nop
 8002520:	bf00      	nop
 8002522:	371c      	adds	r7, #28
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40010000 	.word	0x40010000
 8002530:	48000400 	.word	0x48000400
 8002534:	48000800 	.word	0x48000800
 8002538:	48000c00 	.word	0x48000c00
 800253c:	48001000 	.word	0x48001000
 8002540:	58000800 	.word	0x58000800

08002544 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	460b      	mov	r3, r1
 800254e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	691a      	ldr	r2, [r3, #16]
 8002554:	887b      	ldrh	r3, [r7, #2]
 8002556:	4013      	ands	r3, r2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
 8002560:	e001      	b.n	8002566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002562:	2300      	movs	r3, #0
 8002564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002566:	7bfb      	ldrb	r3, [r7, #15]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	460b      	mov	r3, r1
 800257e:	807b      	strh	r3, [r7, #2]
 8002580:	4613      	mov	r3, r2
 8002582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002584:	787b      	ldrb	r3, [r7, #1]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800258a:	887a      	ldrh	r2, [r7, #2]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002590:	e002      	b.n	8002598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002592:	887a      	ldrh	r2, [r7, #2]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002598:	bf00      	nop
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	041a      	lsls	r2, r3, #16
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43d9      	mvns	r1, r3
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	400b      	ands	r3, r1
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	619a      	str	r2, [r3, #24]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	58000400 	.word	0x58000400

080025f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <HAL_PWREx_GetVoltageRange+0x18>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	58000400 	.word	0x58000400

08002614 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002622:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002626:	d101      	bne.n	800262c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002628:	2301      	movs	r3, #1
 800262a:	e000      	b.n	800262e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr

08002638 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800263c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002686:	d101      	bne.n	800268c <LL_RCC_HSE_IsReady+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_RCC_HSE_IsReady+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800269c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]
}
 80026ac:	bf00      	nop
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80026b6:	b480      	push	{r7}
 80026b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026e6:	d101      	bne.n	80026ec <LL_RCC_HSI_IsReady+0x18>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <LL_RCC_HSI_IsReady+0x1a>
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	061b      	lsls	r3, r3, #24
 800270e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
}
 8002716:	bf00      	nop
 8002718:	370c      	adds	r7, #12
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr

08002722 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002722:	b480      	push	{r7}
 8002724:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002726:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002750:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002754:	f023 0301 	bic.w	r3, r3, #1
 8002758:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800276a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800276e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b02      	cmp	r3, #2
 8002778:	d101      	bne.n	800277e <LL_RCC_HSI48_IsReady+0x18>
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <LL_RCC_HSI48_IsReady+0x1a>
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800278a:	b480      	push	{r7}
 800278c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800278e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80027ce:	b480      	push	{r7}
 80027d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027de:	f043 0304 	orr.w	r3, r3, #4
 80027e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80027e6:	bf00      	nop
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002800:	f023 0304 	bic.w	r3, r3, #4
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b02      	cmp	r3, #2
 8002824:	d101      	bne.n	800282a <LL_RCC_LSE_IsReady+0x18>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <LL_RCC_LSE_IsReady+0x1a>
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002836:	b480      	push	{r7}
 8002838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800283a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002846:	f043 0301 	orr.w	r3, r3, #1
 800284a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800284e:	bf00      	nop
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800285c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800287e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d101      	bne.n	8002892 <LL_RCC_LSI1_IsReady+0x18>
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <LL_RCC_LSI1_IsReady+0x1a>
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800289e:	b480      	push	{r7}
 80028a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028ae:	f043 0304 	orr.w	r3, r3, #4
 80028b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80028c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80028d0:	f023 0304 	bic.w	r3, r3, #4
 80028d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80028e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b08      	cmp	r3, #8
 80028f4:	d101      	bne.n	80028fa <LL_RCC_LSI2_IsReady+0x18>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <LL_RCC_LSI2_IsReady+0x1a>
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800290e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002916:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	021b      	lsls	r3, r3, #8
 800291e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002942:	f043 0301 	orr.w	r3, r3, #1
 8002946:	6013      	str	r3, [r2, #0]
}
 8002948:	bf00      	nop
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	6013      	str	r3, [r2, #0]
}
 8002966:	bf00      	nop
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b02      	cmp	r3, #2
 8002980:	d101      	bne.n	8002986 <LL_RCC_MSI_IsReady+0x16>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <LL_RCC_MSI_IsReady+0x18>
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	600b      	str	r3, [r1, #0]
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80029c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ca:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2bb0      	cmp	r3, #176	; 0xb0
 80029d0:	d901      	bls.n	80029d6 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 80029d2:	23b0      	movs	r3, #176	; 0xb0
 80029d4:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 80029d6:	687b      	ldr	r3, [r7, #4]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80029ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	021b      	lsls	r3, r3, #8
 80029fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029fe:	4313      	orrs	r3, r2
 8002a00:	604b      	str	r3, [r1, #4]
}
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr

08002a0e <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	b083      	sub	sp, #12
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f023 0203 	bic.w	r2, r3, #3
 8002a20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 030c 	and.w	r3, r3, #12
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b083      	sub	sp, #12
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a60:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr

08002a76 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b083      	sub	sp, #12
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8002a7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a82:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aae:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002ab2:	f023 020f 	bic.w	r2, r3, #15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	608b      	str	r3, [r1, #8]
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002b70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bb4:	6013      	str	r3, [r2, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002bd2:	d101      	bne.n	8002bd8 <LL_RCC_PLL_IsReady+0x18>
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <LL_RCC_PLL_IsReady+0x1a>
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002c1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0303 	and.w	r3, r3, #3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr

08002c46 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002c46:	b480      	push	{r7}
 8002c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d101      	bne.n	8002c5e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e000      	b.n	8002c60 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8002c6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c72:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c7e:	d101      	bne.n	8002c84 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8002c80:	2301      	movs	r3, #1
 8002c82:	e000      	b.n	8002c86 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002c9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca4:	d101      	bne.n	8002caa <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc8:	d101      	bne.n	8002cce <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e000      	b.n	8002cd0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002cce:	2300      	movs	r3, #0
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ce8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cec:	d101      	bne.n	8002cf2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
	...

08002d00 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b08d      	sub	sp, #52	; 0x34
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e363      	b.n	80033da <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 808d 	beq.w	8002e3a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d20:	f7ff fe89 	bl	8002a36 <LL_RCC_GetSysClkSource>
 8002d24:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d26:	f7ff ff82 	bl	8002c2e <LL_RCC_PLL_GetMainSource>
 8002d2a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d005      	beq.n	8002d3e <HAL_RCC_OscConfig+0x3e>
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b0c      	cmp	r3, #12
 8002d36:	d147      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8002d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d144      	bne.n	8002dc8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e347      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8002d4e:	f7ff fe34 	bl	80029ba <LL_RCC_MSI_GetRange>
 8002d52:	4603      	mov	r3, r0
 8002d54:	429c      	cmp	r4, r3
 8002d56:	d914      	bls.n	8002d82 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fd31 	bl	80037c4 <RCC_SetFlashLatencyFromMSIRange>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e336      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fe0e 	bl	8002992 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fe32 	bl	80029e4 <LL_RCC_MSI_SetCalibTrimming>
 8002d80:	e013      	b.n	8002daa <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe03 	bl	8002992 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe27 	bl	80029e4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 fd12 	bl	80037c4 <RCC_SetFlashLatencyFromMSIRange>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e317      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002daa:	f000 fccb 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4aa4      	ldr	r2, [pc, #656]	; (8003044 <HAL_RCC_OscConfig+0x344>)
 8002db2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002db4:	4ba4      	ldr	r3, [pc, #656]	; (8003048 <HAL_RCC_OscConfig+0x348>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f8e5 	bl	8001f88 <HAL_InitTick>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d039      	beq.n	8002e38 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e308      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d01e      	beq.n	8002e0e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dd0:	f7ff fdb0 	bl	8002934 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f926 	bl	8002024 <HAL_GetTick>
 8002dd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ddc:	f7ff f922 	bl	8002024 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e2f5      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002dee:	f7ff fdbf 	bl	8002970 <LL_RCC_MSI_IsReady>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f1      	beq.n	8002ddc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fdc8 	bl	8002992 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff fdec 	bl	80029e4 <LL_RCC_MSI_SetCalibTrimming>
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e0e:	f7ff fda0 	bl	8002952 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e12:	f7ff f907 	bl	8002024 <HAL_GetTick>
 8002e16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e1a:	f7ff f903 	bl	8002024 <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e2d6      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002e2c:	f7ff fda0 	bl	8002970 <LL_RCC_MSI_IsReady>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f1      	bne.n	8002e1a <HAL_RCC_OscConfig+0x11a>
 8002e36:	e000      	b.n	8002e3a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002e38:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d047      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e46:	f7ff fdf6 	bl	8002a36 <LL_RCC_GetSysClkSource>
 8002e4a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e4c:	f7ff feef 	bl	8002c2e <LL_RCC_PLL_GetMainSource>
 8002e50:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002e52:	6a3b      	ldr	r3, [r7, #32]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_OscConfig+0x164>
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	2b0c      	cmp	r3, #12
 8002e5c:	d108      	bne.n	8002e70 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d105      	bne.n	8002e70 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d134      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e2b4      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e78:	d102      	bne.n	8002e80 <HAL_RCC_OscConfig+0x180>
 8002e7a:	f7ff fbdd 	bl	8002638 <LL_RCC_HSE_Enable>
 8002e7e:	e001      	b.n	8002e84 <HAL_RCC_OscConfig+0x184>
 8002e80:	f7ff fbe9 	bl	8002656 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d012      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7ff f8ca 	bl	8002024 <HAL_GetTick>
 8002e90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7ff f8c6 	bl	8002024 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e299      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002ea6:	f7ff fbe5 	bl	8002674 <LL_RCC_HSE_IsReady>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0f1      	beq.n	8002e94 <HAL_RCC_OscConfig+0x194>
 8002eb0:	e011      	b.n	8002ed6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb2:	f7ff f8b7 	bl	8002024 <HAL_GetTick>
 8002eb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002eb8:	e008      	b.n	8002ecc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eba:	f7ff f8b3 	bl	8002024 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b64      	cmp	r3, #100	; 0x64
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e286      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002ecc:	f7ff fbd2 	bl	8002674 <LL_RCC_HSE_IsReady>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f1      	bne.n	8002eba <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d04c      	beq.n	8002f7c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	f7ff fda8 	bl	8002a36 <LL_RCC_GetSysClkSource>
 8002ee6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee8:	f7ff fea1 	bl	8002c2e <LL_RCC_PLL_GetMainSource>
 8002eec:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d005      	beq.n	8002f00 <HAL_RCC_OscConfig+0x200>
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b0c      	cmp	r3, #12
 8002ef8:	d10e      	bne.n	8002f18 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d10b      	bne.n	8002f18 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e266      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff fbf1 	bl	80026f8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002f16:	e031      	b.n	8002f7c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d019      	beq.n	8002f54 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	f7ff fbba 	bl	8002698 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7ff f87e 	bl	8002024 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2c:	f7ff f87a 	bl	8002024 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e24d      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002f3e:	f7ff fbc9 	bl	80026d4 <LL_RCC_HSI_IsReady>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d0f1      	beq.n	8002f2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fbd3 	bl	80026f8 <LL_RCC_HSI_SetCalibTrimming>
 8002f52:	e013      	b.n	8002f7c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f54:	f7ff fbaf 	bl	80026b6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f58:	f7ff f864 	bl	8002024 <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f60:	f7ff f860 	bl	8002024 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e233      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002f72:	f7ff fbaf 	bl	80026d4 <LL_RCC_HSI_IsReady>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1f1      	bne.n	8002f60 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a3 	beq.w	80030dc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d076      	beq.n	800308c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d046      	beq.n	8003038 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002faa:	f7ff fc66 	bl	800287a <LL_RCC_LSI1_IsReady>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d113      	bne.n	8002fdc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002fb4:	f7ff fc3f 	bl	8002836 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fb8:	f7ff f834 	bl	8002024 <HAL_GetTick>
 8002fbc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002fc0:	f7ff f830 	bl	8002024 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e203      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002fd2:	f7ff fc52 	bl	800287a <LL_RCC_LSI1_IsReady>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d0f1      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002fdc:	f7ff fc5f 	bl	800289e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe0:	f7ff f820 	bl	8002024 <HAL_GetTick>
 8002fe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002fe8:	f7ff f81c 	bl	8002024 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e1ef      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002ffa:	f7ff fc72 	bl	80028e2 <LL_RCC_LSI2_IsReady>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d0f1      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fc7c 	bl	8002906 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800300e:	f7ff fc23 	bl	8002858 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003012:	f7ff f807 	bl	8002024 <HAL_GetTick>
 8003016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800301a:	f7ff f803 	bl	8002024 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1d6      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800302c:	f7ff fc25 	bl	800287a <LL_RCC_LSI1_IsReady>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1f1      	bne.n	800301a <HAL_RCC_OscConfig+0x31a>
 8003036:	e051      	b.n	80030dc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003038:	f7ff fbfd 	bl	8002836 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303c:	f7fe fff2 	bl	8002024 <HAL_GetTick>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003042:	e00c      	b.n	800305e <HAL_RCC_OscConfig+0x35e>
 8003044:	20000038 	.word	0x20000038
 8003048:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800304c:	f7fe ffea 	bl	8002024 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e1bd      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800305e:	f7ff fc0c 	bl	800287a <LL_RCC_LSI1_IsReady>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0f1      	beq.n	800304c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003068:	f7ff fc2a 	bl	80028c0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800306e:	f7fe ffd9 	bl	8002024 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b03      	cmp	r3, #3
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e1ac      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003080:	f7ff fc2f 	bl	80028e2 <LL_RCC_LSI2_IsReady>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f1      	bne.n	800306e <HAL_RCC_OscConfig+0x36e>
 800308a:	e027      	b.n	80030dc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800308c:	f7ff fc18 	bl	80028c0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003090:	f7fe ffc8 	bl	8002024 <HAL_GetTick>
 8003094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003098:	f7fe ffc4 	bl	8002024 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e197      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80030aa:	f7ff fc1a 	bl	80028e2 <LL_RCC_LSI2_IsReady>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1f1      	bne.n	8003098 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80030b4:	f7ff fbd0 	bl	8002858 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b8:	f7fe ffb4 	bl	8002024 <HAL_GetTick>
 80030bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80030c0:	f7fe ffb0 	bl	8002024 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e183      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 80030d2:	f7ff fbd2 	bl	800287a <LL_RCC_LSI1_IsReady>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f1      	bne.n	80030c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0304 	and.w	r3, r3, #4
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e8:	4ba7      	ldr	r3, [pc, #668]	; (8003388 <HAL_RCC_OscConfig+0x688>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d114      	bne.n	800311e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80030f4:	f7ff fa70 	bl	80025d8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f8:	f7fe ff94 	bl	8002024 <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003100:	f7fe ff90 	bl	8002024 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e163      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003112:	4b9d      	ldr	r3, [pc, #628]	; (8003388 <HAL_RCC_OscConfig+0x688>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d102      	bne.n	800312c <HAL_RCC_OscConfig+0x42c>
 8003126:	f7ff fb30 	bl	800278a <LL_RCC_LSE_Enable>
 800312a:	e00c      	b.n	8003146 <HAL_RCC_OscConfig+0x446>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b05      	cmp	r3, #5
 8003132:	d104      	bne.n	800313e <HAL_RCC_OscConfig+0x43e>
 8003134:	f7ff fb4b 	bl	80027ce <LL_RCC_LSE_EnableBypass>
 8003138:	f7ff fb27 	bl	800278a <LL_RCC_LSE_Enable>
 800313c:	e003      	b.n	8003146 <HAL_RCC_OscConfig+0x446>
 800313e:	f7ff fb35 	bl	80027ac <LL_RCC_LSE_Disable>
 8003142:	f7ff fb55 	bl	80027f0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d014      	beq.n	8003178 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314e:	f7fe ff69 	bl	8002024 <HAL_GetTick>
 8003152:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003154:	e00a      	b.n	800316c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003156:	f7fe ff65 	bl	8002024 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e136      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800316c:	f7ff fb51 	bl	8002812 <LL_RCC_LSE_IsReady>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ef      	beq.n	8003156 <HAL_RCC_OscConfig+0x456>
 8003176:	e013      	b.n	80031a0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003178:	f7fe ff54 	bl	8002024 <HAL_GetTick>
 800317c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7fe ff50 	bl	8002024 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	; 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e121      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003196:	f7ff fb3c 	bl	8002812 <LL_RCC_LSE_IsReady>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d1ef      	bne.n	8003180 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02c      	beq.n	8003206 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d014      	beq.n	80031de <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031b4:	f7ff fab5 	bl	8002722 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b8:	f7fe ff34 	bl	8002024 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80031be:	e008      	b.n	80031d2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031c0:	f7fe ff30 	bl	8002024 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e103      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80031d2:	f7ff fac8 	bl	8002766 <LL_RCC_HSI48_IsReady>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f1      	beq.n	80031c0 <HAL_RCC_OscConfig+0x4c0>
 80031dc:	e013      	b.n	8003206 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80031de:	f7ff fab1 	bl	8002744 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fe ff1f 	bl	8002024 <HAL_GetTick>
 80031e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80031e8:	e008      	b.n	80031fc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ea:	f7fe ff1b 	bl	8002024 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0ee      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80031fc:	f7ff fab3 	bl	8002766 <LL_RCC_HSI48_IsReady>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f1      	bne.n	80031ea <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80e4 	beq.w	80033d8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003210:	f7ff fc11 	bl	8002a36 <LL_RCC_GetSysClkSource>
 8003214:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003222:	2b02      	cmp	r3, #2
 8003224:	f040 80b4 	bne.w	8003390 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 0203 	and.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	429a      	cmp	r2, r3
 8003234:	d123      	bne.n	800327e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003240:	429a      	cmp	r2, r3
 8003242:	d11c      	bne.n	800327e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003250:	429a      	cmp	r2, r3
 8003252:	d114      	bne.n	800327e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800325e:	429a      	cmp	r2, r3
 8003260:	d10d      	bne.n	800327e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800326c:	429a      	cmp	r2, r3
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d05d      	beq.n	800333a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	2b0c      	cmp	r3, #12
 8003282:	d058      	beq.n	8003336 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d001      	beq.n	8003296 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e0a1      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003296:	f7ff fc84 	bl	8002ba2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800329a:	f7fe fec3 	bl	8002024 <HAL_GetTick>
 800329e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe febf 	bl	8002024 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e092      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ef      	bne.n	80032a2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	4b30      	ldr	r3, [pc, #192]	; (800338c <HAL_RCC_OscConfig+0x68c>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032da:	0212      	lsls	r2, r2, #8
 80032dc:	4311      	orrs	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032e2:	4311      	orrs	r1, r2
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032e8:	4311      	orrs	r1, r2
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80032ee:	430a      	orrs	r2, r1
 80032f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032f8:	f7ff fc44 	bl	8002b84 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800330c:	f7fe fe8a 	bl	8002024 <HAL_GetTick>
 8003310:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003314:	f7fe fe86 	bl	8002024 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e059      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0ef      	beq.n	8003314 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003334:	e050      	b.n	80033d8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e04f      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d147      	bne.n	80033d8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003348:	f7ff fc1c 	bl	8002b84 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800335a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800335c:	f7fe fe62 	bl	8002024 <HAL_GetTick>
 8003360:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003364:	f7fe fe5e 	bl	8002024 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e031      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003376:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCC_OscConfig+0x664>
 8003384:	e028      	b.n	80033d8 <HAL_RCC_OscConfig+0x6d8>
 8003386:	bf00      	nop
 8003388:	58000400 	.word	0x58000400
 800338c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	2b0c      	cmp	r3, #12
 8003394:	d01e      	beq.n	80033d4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	f7ff fc04 	bl	8002ba2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339a:	f7fe fe43 	bl	8002024 <HAL_GetTick>
 800339e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fe fe3f 	bl	8002024 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e012      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ef      	bne.n	80033a2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80033c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HAL_RCC_OscConfig+0x6e4>)
 80033ce:	4013      	ands	r3, r2
 80033d0:	60cb      	str	r3, [r1, #12]
 80033d2:	e001      	b.n	80033d8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3734      	adds	r7, #52	; 0x34
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	bf00      	nop
 80033e4:	eefefffc 	.word	0xeefefffc

080033e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e12d      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033fc:	4b98      	ldr	r3, [pc, #608]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	429a      	cmp	r2, r3
 8003408:	d91b      	bls.n	8003442 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800340a:	4b95      	ldr	r3, [pc, #596]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f023 0207 	bic.w	r2, r3, #7
 8003412:	4993      	ldr	r1, [pc, #588]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	4313      	orrs	r3, r2
 8003418:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341a:	f7fe fe03 	bl	8002024 <HAL_GetTick>
 800341e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003420:	e008      	b.n	8003434 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003422:	f7fe fdff 	bl	8002024 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e111      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003434:	4b8a      	ldr	r3, [pc, #552]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d1ef      	bne.n	8003422 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d016      	beq.n	800347c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff fafb 	bl	8002a4e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003458:	f7fe fde4 	bl	8002024 <HAL_GetTick>
 800345c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800345e:	e008      	b.n	8003472 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003460:	f7fe fde0 	bl	8002024 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b02      	cmp	r3, #2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e0f2      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003472:	f7ff fbe8 	bl	8002c46 <LL_RCC_IsActiveFlag_HPRE>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f1      	beq.n	8003460 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0320 	and.w	r3, r3, #32
 8003484:	2b00      	cmp	r3, #0
 8003486:	d016      	beq.n	80034b6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff faf2 	bl	8002a76 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003492:	f7fe fdc7 	bl	8002024 <HAL_GetTick>
 8003496:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003498:	e008      	b.n	80034ac <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800349a:	f7fe fdc3 	bl	8002024 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d901      	bls.n	80034ac <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80034a8:	2303      	movs	r3, #3
 80034aa:	e0d5      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80034ac:	f7ff fbdd 	bl	8002c6a <LL_RCC_IsActiveFlag_C2HPRE>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0f1      	beq.n	800349a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d016      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff faeb 	bl	8002aa2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80034cc:	f7fe fdaa 	bl	8002024 <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80034d4:	f7fe fda6 	bl	8002024 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e0b8      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80034e6:	f7ff fbd3 	bl	8002c90 <LL_RCC_IsActiveFlag_SHDHPRE>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f1      	beq.n	80034d4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d016      	beq.n	800352a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fae5 	bl	8002ad0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003506:	f7fe fd8d 	bl	8002024 <HAL_GetTick>
 800350a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800350c:	e008      	b.n	8003520 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800350e:	f7fe fd89 	bl	8002024 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e09b      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003520:	f7ff fbc9 	bl	8002cb6 <LL_RCC_IsActiveFlag_PPRE1>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f1      	beq.n	800350e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b00      	cmp	r3, #0
 8003534:	d017      	beq.n	8003566 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4618      	mov	r0, r3
 800353e:	f7ff fadb 	bl	8002af8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003542:	f7fe fd6f 	bl	8002024 <HAL_GetTick>
 8003546:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800354a:	f7fe fd6b 	bl	8002024 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e07d      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800355c:	f7ff fbbd 	bl	8002cda <LL_RCC_IsActiveFlag_PPRE2>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d0f1      	beq.n	800354a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d043      	beq.n	80035fa <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d106      	bne.n	8003588 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800357a:	f7ff f87b 	bl	8002674 <LL_RCC_HSE_IsReady>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d11e      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e067      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d106      	bne.n	800359e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003590:	f7ff fb16 	bl	8002bc0 <LL_RCC_PLL_IsReady>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d113      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e05c      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d106      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80035a6:	f7ff f9e3 	bl	8002970 <LL_RCC_MSI_IsReady>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e051      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80035b4:	f7ff f88e 	bl	80026d4 <LL_RCC_HSI_IsReady>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e04a      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7ff fa21 	bl	8002a0e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035cc:	f7fe fd2a 	bl	8002024 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fd26 	bl	8002024 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e036      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ea:	f7ff fa24 	bl	8002a36 <LL_RCC_GetSysClkSource>
 80035ee:	4602      	mov	r2, r0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d1ec      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035fa:	4b19      	ldr	r3, [pc, #100]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d21b      	bcs.n	8003640 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0207 	bic.w	r2, r3, #7
 8003610:	4913      	ldr	r1, [pc, #76]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003618:	f7fe fd04 	bl	8002024 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800361e:	e008      	b.n	8003632 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003620:	f7fe fd00 	bl	8002024 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e012      	b.n	8003658 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_ClockConfig+0x278>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d1ef      	bne.n	8003620 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003640:	f000 f880 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003644:	4603      	mov	r3, r0
 8003646:	4a07      	ldr	r2, [pc, #28]	; (8003664 <HAL_RCC_ClockConfig+0x27c>)
 8003648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800364a:	f7fe fcf7 	bl	800203c <HAL_GetTickPrio>
 800364e:	4603      	mov	r3, r0
 8003650:	4618      	mov	r0, r3
 8003652:	f7fe fc99 	bl	8001f88 <HAL_InitTick>
 8003656:	4603      	mov	r3, r0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	58004000 	.word	0x58004000
 8003664:	20000038 	.word	0x20000038

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b590      	push	{r4, r7, lr}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800366e:	f7ff f9e2 	bl	8002a36 <LL_RCC_GetSysClkSource>
 8003672:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10a      	bne.n	8003690 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800367a:	f7ff f99e 	bl	80029ba <LL_RCC_MSI_GetRange>
 800367e:	4603      	mov	r3, r0
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	4a2b      	ldr	r2, [pc, #172]	; (8003734 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	e04b      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b04      	cmp	r3, #4
 8003694:	d102      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003696:	4b28      	ldr	r3, [pc, #160]	; (8003738 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e045      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d10a      	bne.n	80036b8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036a2:	f7fe ffb7 	bl	8002614 <LL_RCC_HSE_IsEnabledDiv2>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_RCC_GetSysClockFreq+0xd4>)
 80036ae:	60fb      	str	r3, [r7, #12]
 80036b0:	e03a      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80036b2:	4b23      	ldr	r3, [pc, #140]	; (8003740 <HAL_RCC_GetSysClockFreq+0xd8>)
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e037      	b.n	8003728 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80036b8:	f7ff fab9 	bl	8002c2e <LL_RCC_PLL_GetMainSource>
 80036bc:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d003      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0x64>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	2b03      	cmp	r3, #3
 80036c8:	d003      	beq.n	80036d2 <HAL_RCC_GetSysClockFreq+0x6a>
 80036ca:	e00d      	b.n	80036e8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80036cc:	4b1a      	ldr	r3, [pc, #104]	; (8003738 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036ce:	60bb      	str	r3, [r7, #8]
        break;
 80036d0:	e015      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80036d2:	f7fe ff9f 	bl	8002614 <LL_RCC_HSE_IsEnabledDiv2>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d102      	bne.n	80036e2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <HAL_RCC_GetSysClockFreq+0xd4>)
 80036de:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80036e0:	e00d      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <HAL_RCC_GetSysClockFreq+0xd8>)
 80036e4:	60bb      	str	r3, [r7, #8]
        break;
 80036e6:	e00a      	b.n	80036fe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80036e8:	f7ff f967 	bl	80029ba <LL_RCC_MSI_GetRange>
 80036ec:	4603      	mov	r3, r0
 80036ee:	091b      	lsrs	r3, r3, #4
 80036f0:	f003 030f 	and.w	r3, r3, #15
 80036f4:	4a0f      	ldr	r2, [pc, #60]	; (8003734 <HAL_RCC_GetSysClockFreq+0xcc>)
 80036f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fa:	60bb      	str	r3, [r7, #8]
        break;
 80036fc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80036fe:	f7ff fa71 	bl	8002be4 <LL_RCC_PLL_GetN>
 8003702:	4602      	mov	r2, r0
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	fb03 f402 	mul.w	r4, r3, r2
 800370a:	f7ff fa84 	bl	8002c16 <LL_RCC_PLL_GetDivider>
 800370e:	4603      	mov	r3, r0
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	3301      	adds	r3, #1
 8003714:	fbb4 f4f3 	udiv	r4, r4, r3
 8003718:	f7ff fa71 	bl	8002bfe <LL_RCC_PLL_GetR>
 800371c:	4603      	mov	r3, r0
 800371e:	0f5b      	lsrs	r3, r3, #29
 8003720:	3301      	adds	r3, #1
 8003722:	fbb4 f3f3 	udiv	r3, r4, r3
 8003726:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003728:	68fb      	ldr	r3, [r7, #12]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bd90      	pop	{r4, r7, pc}
 8003732:	bf00      	nop
 8003734:	08009f2c 	.word	0x08009f2c
 8003738:	00f42400 	.word	0x00f42400
 800373c:	005b8d80 	.word	0x005b8d80
 8003740:	00b71b00 	.word	0x00b71b00

08003744 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003744:	b598      	push	{r3, r4, r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003748:	f7ff ff8e 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 800374c:	4604      	mov	r4, r0
 800374e:	f7ff f9e7 	bl	8002b20 <LL_RCC_GetAHBPrescaler>
 8003752:	4603      	mov	r3, r0
 8003754:	091b      	lsrs	r3, r3, #4
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	4a03      	ldr	r2, [pc, #12]	; (8003768 <HAL_RCC_GetHCLKFreq+0x24>)
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd98      	pop	{r3, r4, r7, pc}
 8003768:	08009ecc 	.word	0x08009ecc

0800376c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800376c:	b598      	push	{r3, r4, r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003770:	f7ff ffe8 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 8003774:	4604      	mov	r4, r0
 8003776:	f7ff f9ed 	bl	8002b54 <LL_RCC_GetAPB1Prescaler>
 800377a:	4603      	mov	r3, r0
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd98      	pop	{r3, r4, r7, pc}
 8003794:	08009f0c 	.word	0x08009f0c

08003798 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003798:	b598      	push	{r3, r4, r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800379c:	f7ff ffd2 	bl	8003744 <HAL_RCC_GetHCLKFreq>
 80037a0:	4604      	mov	r4, r0
 80037a2:	f7ff f9e3 	bl	8002b6c <LL_RCC_GetAPB2Prescaler>
 80037a6:	4603      	mov	r3, r0
 80037a8:	0adb      	lsrs	r3, r3, #11
 80037aa:	f003 0307 	and.w	r3, r3, #7
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	f003 031f 	and.w	r3, r3, #31
 80037b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	bd98      	pop	{r3, r4, r7, pc}
 80037c0:	08009f0c 	.word	0x08009f0c

080037c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2bb0      	cmp	r3, #176	; 0xb0
 80037d0:	d903      	bls.n	80037da <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80037d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e007      	b.n	80037ea <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	4a11      	ldr	r2, [pc, #68]	; (8003828 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80037e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80037ea:	f7ff f9a5 	bl	8002b38 <LL_RCC_GetAHB4Prescaler>
 80037ee:	4603      	mov	r3, r0
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003802:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	0c9c      	lsrs	r4, r3, #18
 800380e:	f7fe fef3 	bl	80025f8 <HAL_PWREx_GetVoltageRange>
 8003812:	4603      	mov	r3, r0
 8003814:	4619      	mov	r1, r3
 8003816:	4620      	mov	r0, r4
 8003818:	f000 f80c 	bl	8003834 <RCC_SetFlashLatency>
 800381c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}
 8003826:	bf00      	nop
 8003828:	08009f2c 	.word	0x08009f2c
 800382c:	08009ecc 	.word	0x08009ecc
 8003830:	431bde83 	.word	0x431bde83

08003834 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b093      	sub	sp, #76	; 0x4c
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800383e:	4b37      	ldr	r3, [pc, #220]	; (800391c <RCC_SetFlashLatency+0xe8>)
 8003840:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800384a:	4a35      	ldr	r2, [pc, #212]	; (8003920 <RCC_SetFlashLatency+0xec>)
 800384c:	f107 031c 	add.w	r3, r7, #28
 8003850:	ca07      	ldmia	r2, {r0, r1, r2}
 8003852:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003856:	4b33      	ldr	r3, [pc, #204]	; (8003924 <RCC_SetFlashLatency+0xf0>)
 8003858:	f107 040c 	add.w	r4, r7, #12
 800385c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800385e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003862:	2300      	movs	r3, #0
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800386c:	d11a      	bne.n	80038a4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800386e:	2300      	movs	r3, #0
 8003870:	643b      	str	r3, [r7, #64]	; 0x40
 8003872:	e013      	b.n	800389c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	3348      	adds	r3, #72	; 0x48
 800387a:	443b      	add	r3, r7
 800387c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	d807      	bhi.n	8003896 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	3348      	adds	r3, #72	; 0x48
 800388c:	443b      	add	r3, r7
 800388e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003892:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003894:	e020      	b.n	80038d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003898:	3301      	adds	r3, #1
 800389a:	643b      	str	r3, [r7, #64]	; 0x40
 800389c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d9e8      	bls.n	8003874 <RCC_SetFlashLatency+0x40>
 80038a2:	e019      	b.n	80038d8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038a4:	2300      	movs	r3, #0
 80038a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038a8:	e013      	b.n	80038d2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80038aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	3348      	adds	r3, #72	; 0x48
 80038b0:	443b      	add	r3, r7
 80038b2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d807      	bhi.n	80038cc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	3348      	adds	r3, #72	; 0x48
 80038c2:	443b      	add	r3, r7
 80038c4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80038c8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80038ca:	e005      	b.n	80038d8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80038cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038ce:	3301      	adds	r3, #1
 80038d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d9e8      	bls.n	80038aa <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80038d8:	4b13      	ldr	r3, [pc, #76]	; (8003928 <RCC_SetFlashLatency+0xf4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 0207 	bic.w	r2, r3, #7
 80038e0:	4911      	ldr	r1, [pc, #68]	; (8003928 <RCC_SetFlashLatency+0xf4>)
 80038e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e4:	4313      	orrs	r3, r2
 80038e6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80038e8:	f7fe fb9c 	bl	8002024 <HAL_GetTick>
 80038ec:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80038ee:	e008      	b.n	8003902 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038f0:	f7fe fb98 	bl	8002024 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e007      	b.n	8003912 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003902:	4b09      	ldr	r3, [pc, #36]	; (8003928 <RCC_SetFlashLatency+0xf4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800390c:	429a      	cmp	r2, r3
 800390e:	d1ef      	bne.n	80038f0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	374c      	adds	r7, #76	; 0x4c
 8003916:	46bd      	mov	sp, r7
 8003918:	bd90      	pop	{r4, r7, pc}
 800391a:	bf00      	nop
 800391c:	08006548 	.word	0x08006548
 8003920:	08006558 	.word	0x08006558
 8003924:	08006564 	.word	0x08006564
 8003928:	58004000 	.word	0x58004000

0800392c <LL_RCC_LSE_IsEnabled>:
{
 800392c:	b480      	push	{r7}
 800392e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <LL_RCC_LSE_IsEnabled+0x18>
 8003940:	2301      	movs	r3, #1
 8003942:	e000      	b.n	8003946 <LL_RCC_LSE_IsEnabled+0x1a>
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <LL_RCC_LSE_IsReady>:
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	d101      	bne.n	8003968 <LL_RCC_LSE_IsReady+0x18>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <LL_RCC_LSE_IsReady+0x1a>
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <LL_RCC_SetRFWKPClockSource>:
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003984:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003988:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4313      	orrs	r3, r2
 8003990:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <LL_RCC_SetSMPSClockSource>:
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80039a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f023 0203 	bic.w	r2, r3, #3
 80039b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <LL_RCC_SetSMPSPrescaler>:
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80039d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <LL_RCC_SetUSARTClockSource>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80039f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a00:	f023 0203 	bic.w	r2, r3, #3
 8003a04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_SetLPUARTClockSource>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a30:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <LL_RCC_SetI2CClockSource>:
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a54:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	091b      	lsrs	r3, r3, #4
 8003a5c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a60:	43db      	mvns	r3, r3
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003a6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr

08003a82 <LL_RCC_SetLPTIMClockSource>:
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	0c1b      	lsrs	r3, r3, #16
 8003a96:	041b      	lsls	r3, r3, #16
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	041b      	lsls	r3, r3, #16
 8003aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <LL_RCC_SetSAIClockSource>:
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	b083      	sub	sp, #12
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8003abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003aca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr

08003ae2 <LL_RCC_SetRNGClockSource>:
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	b083      	sub	sp, #12
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b02:	bf00      	nop
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <LL_RCC_SetCLK48ClockSource>:
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8003b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_RCC_SetUSBClockSource>:
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b082      	sub	sp, #8
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff ffe3 	bl	8003b0e <LL_RCC_SetCLK48ClockSource>
}
 8003b48:	bf00      	nop
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <LL_RCC_SetADCClockSource>:
{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <LL_RCC_SetRTCClockSource>:
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <LL_RCC_GetRTCClockSource>:
{
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_RCC_ForceBackupDomainReset>:
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003be8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003bfc:	bf00      	nop
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <LL_RCC_PLLSAI1_Enable>:
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003c18:	6013      	str	r3, [r2, #0]
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <LL_RCC_PLLSAI1_Disable>:
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8003c28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003c36:	6013      	str	r3, [r2, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <LL_RCC_PLLSAI1_IsReady>:
{
 8003c42:	b480      	push	{r7}
 8003c44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8003c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c54:	d101      	bne.n	8003c5a <LL_RCC_PLLSAI1_IsReady+0x18>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b088      	sub	sp, #32
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8003c6e:	2300      	movs	r3, #0
 8003c70:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003c72:	2300      	movs	r3, #0
 8003c74:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d034      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c8a:	d021      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8003c8c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c90:	d81b      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c96:	d01d      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003c98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c9c:	d815      	bhi.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00b      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x54>
 8003ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca6:	d110      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8003ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cb8:	e00d      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f000 f947 	bl	8003f52 <RCCEx_PLLSAI1_ConfigNP>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	77fb      	strb	r3, [r7, #31]
        break;
 8003cce:	e002      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003cd0:	bf00      	nop
 8003cd2:	e000      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8003cd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd6:	7ffb      	ldrb	r3, [r7, #31]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d105      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fee8 	bl	8003ab6 <LL_RCC_SetSAIClockSource>
 8003ce6:	e001      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7ffb      	ldrb	r3, [r7, #31]
 8003cea:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d046      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8003cf8:	f7ff ff56 	bl	8003ba8 <LL_RCC_GetRTCClockSource>
 8003cfc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	69ba      	ldr	r2, [r7, #24]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d03c      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d08:	f7fe fc66 	bl	80025d8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7ff ff30 	bl	8003b7c <LL_RCC_SetRTCClockSource>
 8003d1c:	e02e      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8003d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8003d28:	f7ff ff4b 	bl	8003bc2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8003d2c:	f7ff ff5a 	bl	8003be4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8003d3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8003d48:	f7ff fdf0 	bl	800392c <LL_RCC_LSE_IsEnabled>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d114      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d52:	f7fe f967 	bl	8002024 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8003d58:	e00b      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5a:	f7fe f963 	bl	8002024 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d902      	bls.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	77fb      	strb	r3, [r7, #31]
              break;
 8003d70:	e004      	b.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8003d72:	f7ff fded 	bl	8003950 <LL_RCC_LSE_IsReady>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d1ee      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003d7c:	7ffb      	ldrb	r3, [r7, #31]
 8003d7e:	77bb      	strb	r3, [r7, #30]
 8003d80:	e001      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d82:	7ffb      	ldrb	r3, [r7, #31]
 8003d84:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d004      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	699b      	ldr	r3, [r3, #24]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fe2a 	bl	80039f0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0302 	and.w	r3, r3, #2
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d004      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff fe35 	bl	8003a1c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff fe5d 	bl	8003a82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0320 	and.w	r3, r3, #32
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d004      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe52 	bl	8003a82 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d004      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fe2a 	bl	8003a48 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fe1f 	bl	8003a48 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d022      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fe8d 	bl	8003b3a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e28:	d107      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e38:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e42:	d10b      	bne.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 f8dd 	bl	8004008 <RCCEx_PLLSAI1_ConfigNQ>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003e52:	7ffb      	ldrb	r3, [r7, #31]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d02b      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e70:	d008      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e7a:	d003      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d105      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff fe2a 	bl	8003ae2 <LL_RCC_SetRNGClockSource>
 8003e8e:	e00a      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7ff fe21 	bl	8003ae2 <LL_RCC_SetRNGClockSource>
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff fe34 	bl	8003b0e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003eae:	d107      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d022      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff fe3d 	bl	8003b50 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ede:	d107      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ee0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eee:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef8:	d10b      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f8dd 	bl	80040be <RCCEx_PLLSAI1_ConfigNR>
 8003f04:	4603      	mov	r3, r0
 8003f06:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
 8003f10:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d004      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fd26 	bl	8003974 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fd45 	bl	80039c8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff fd2c 	bl	80039a0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8003f48:	7fbb      	ldrb	r3, [r7, #30]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003f5e:	f7ff fe61 	bl	8003c24 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f62:	f7fe f85f 	bl	8002024 <HAL_GetTick>
 8003f66:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f68:	e009      	b.n	8003f7e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f6a:	f7fe f85b 	bl	8002024 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d902      	bls.n	8003f7e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f7c:	e004      	b.n	8003f88 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003f7e:	f7ff fe60 	bl	8003c42 <LL_RCC_PLLSAI1_IsReady>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1f0      	bne.n	8003f6a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003f88:	7bfb      	ldrb	r3, [r7, #15]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d137      	bne.n	8003ffe <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	021b      	lsls	r3, r3, #8
 8003f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003fa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003fbc:	f7ff fe23 	bl	8003c06 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fe f830 	bl	8002024 <HAL_GetTick>
 8003fc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fc6:	e009      	b.n	8003fdc <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc8:	f7fe f82c 	bl	8002024 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d902      	bls.n	8003fdc <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	73fb      	strb	r3, [r7, #15]
        break;
 8003fda:	e004      	b.n	8003fe6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003fdc:	f7ff fe31 	bl	8003c42 <LL_RCC_PLLSAI1_IsReady>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d1f0      	bne.n	8003fc8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d108      	bne.n	8003ffe <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff0:	691a      	ldr	r2, [r3, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004010:	2300      	movs	r3, #0
 8004012:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004014:	f7ff fe06 	bl	8003c24 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004018:	f7fe f804 	bl	8002024 <HAL_GetTick>
 800401c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800401e:	e009      	b.n	8004034 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004020:	f7fe f800 	bl	8002024 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d902      	bls.n	8004034 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	73fb      	strb	r3, [r7, #15]
      break;
 8004032:	e004      	b.n	800403e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004034:	f7ff fe05 	bl	8003c42 <LL_RCC_PLLSAI1_IsReady>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f0      	bne.n	8004020 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800403e:	7bfb      	ldrb	r3, [r7, #15]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d137      	bne.n	80040b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004058:	4313      	orrs	r3, r2
 800405a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800405c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800406e:	4313      	orrs	r3, r2
 8004070:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004072:	f7ff fdc8 	bl	8003c06 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004076:	f7fd ffd5 	bl	8002024 <HAL_GetTick>
 800407a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800407c:	e009      	b.n	8004092 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800407e:	f7fd ffd1 	bl	8002024 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d902      	bls.n	8004092 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	73fb      	strb	r3, [r7, #15]
        break;
 8004090:	e004      	b.n	800409c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004092:	f7ff fdd6 	bl	8003c42 <LL_RCC_PLLSAI1_IsReady>
 8004096:	4603      	mov	r3, r0
 8004098:	2b01      	cmp	r3, #1
 800409a:	d1f0      	bne.n	800407e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d108      	bne.n	80040b4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80040a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040a6:	691a      	ldr	r2, [r3, #16]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040b0:	4313      	orrs	r3, r2
 80040b2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}

080040be <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b084      	sub	sp, #16
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80040ca:	f7ff fdab 	bl	8003c24 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80040ce:	f7fd ffa9 	bl	8002024 <HAL_GetTick>
 80040d2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040d4:	e009      	b.n	80040ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040d6:	f7fd ffa5 	bl	8002024 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d902      	bls.n	80040ea <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e004      	b.n	80040f4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80040ea:	f7ff fdaa 	bl	8003c42 <LL_RCC_PLLSAI1_IsReady>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80040f4:	7bfb      	ldrb	r3, [r7, #15]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d137      	bne.n	800416a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80040fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	021b      	lsls	r3, r3, #8
 800410a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800410e:	4313      	orrs	r3, r2
 8004110:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004112:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004124:	4313      	orrs	r3, r2
 8004126:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004128:	f7ff fd6d 	bl	8003c06 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800412c:	f7fd ff7a 	bl	8002024 <HAL_GetTick>
 8004130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004132:	e009      	b.n	8004148 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004134:	f7fd ff76 	bl	8002024 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d902      	bls.n	8004148 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	73fb      	strb	r3, [r7, #15]
        break;
 8004146:	e004      	b.n	8004152 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004148:	f7ff fd7b 	bl	8003c42 <LL_RCC_PLLSAI1_IsReady>
 800414c:	4603      	mov	r3, r0
 800414e:	2b01      	cmp	r3, #1
 8004150:	d1f0      	bne.n	8004134 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d108      	bne.n	800416a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004166:	4313      	orrs	r3, r2
 8004168:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800416a:	7bfb      	ldrb	r3, [r7, #15]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e095      	b.n	80042b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	d108      	bne.n	80041a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004196:	d009      	beq.n	80041ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	61da      	str	r2, [r3, #28]
 800419e:	e005      	b.n	80041ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d106      	bne.n	80041cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fd fcf6 	bl	8001bb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2202      	movs	r2, #2
 80041d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80041ec:	d902      	bls.n	80041f4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80041ee:	2300      	movs	r3, #0
 80041f0:	60fb      	str	r3, [r7, #12]
 80041f2:	e002      	b.n	80041fa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80041f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041f8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004202:	d007      	beq.n	8004214 <HAL_SPI_Init+0xa0>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	431a      	orrs	r2, r3
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004256:	ea42 0103 	orr.w	r1, r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	f003 0204 	and.w	r2, r3, #4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	f003 0310 	and.w	r3, r3, #16
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004290:	ea42 0103 	orr.w	r1, r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3710      	adds	r7, #16
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b088      	sub	sp, #32
 80042be:	af00      	add	r7, sp, #0
 80042c0:	60f8      	str	r0, [r7, #12]
 80042c2:	60b9      	str	r1, [r7, #8]
 80042c4:	603b      	str	r3, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_SPI_Transmit+0x22>
 80042d8:	2302      	movs	r3, #2
 80042da:	e158      	b.n	800458e <HAL_SPI_Transmit+0x2d4>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042e4:	f7fd fe9e 	bl	8002024 <HAL_GetTick>
 80042e8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80042ea:	88fb      	ldrh	r3, [r7, #6]
 80042ec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80042fe:	e13d      	b.n	800457c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <HAL_SPI_Transmit+0x52>
 8004306:	88fb      	ldrh	r3, [r7, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004310:	e134      	b.n	800457c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2203      	movs	r2, #3
 8004316:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	88fa      	ldrh	r2, [r7, #6]
 800432a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800435c:	d10f      	bne.n	800437e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800436c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800437c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004388:	2b40      	cmp	r3, #64	; 0x40
 800438a:	d007      	beq.n	800439c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800439a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80043a4:	d94b      	bls.n	800443e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_SPI_Transmit+0xfa>
 80043ae:	8afb      	ldrh	r3, [r7, #22]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d13e      	bne.n	8004432 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80043d8:	e02b      	b.n	8004432 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d112      	bne.n	800440e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ec:	881a      	ldrh	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f8:	1c9a      	adds	r2, r3, #2
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004402:	b29b      	uxth	r3, r3
 8004404:	3b01      	subs	r3, #1
 8004406:	b29a      	uxth	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800440c:	e011      	b.n	8004432 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800440e:	f7fd fe09 	bl	8002024 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d803      	bhi.n	8004426 <HAL_SPI_Transmit+0x16c>
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004424:	d102      	bne.n	800442c <HAL_SPI_Transmit+0x172>
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004430:	e0a4      	b.n	800457c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1ce      	bne.n	80043da <HAL_SPI_Transmit+0x120>
 800443c:	e07c      	b.n	8004538 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d002      	beq.n	800444c <HAL_SPI_Transmit+0x192>
 8004446:	8afb      	ldrh	r3, [r7, #22]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d170      	bne.n	800452e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b01      	cmp	r3, #1
 8004454:	d912      	bls.n	800447c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445a:	881a      	ldrh	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	1c9a      	adds	r2, r3, #2
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	3b02      	subs	r3, #2
 8004474:	b29a      	uxth	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	87da      	strh	r2, [r3, #62]	; 0x3e
 800447a:	e058      	b.n	800452e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	330c      	adds	r3, #12
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004498:	b29b      	uxth	r3, r3
 800449a:	3b01      	subs	r3, #1
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80044a2:	e044      	b.n	800452e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d12b      	bne.n	800450a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d912      	bls.n	80044e2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b02      	subs	r3, #2
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	; 0x3e
 80044e0:	e025      	b.n	800452e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	330c      	adds	r3, #12
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004508:	e011      	b.n	800452e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800450a:	f7fd fd8b 	bl	8002024 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d803      	bhi.n	8004522 <HAL_SPI_Transmit+0x268>
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004520:	d102      	bne.n	8004528 <HAL_SPI_Transmit+0x26e>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d102      	bne.n	800452e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800452c:	e026      	b.n	800457c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1b5      	bne.n	80044a4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	6839      	ldr	r1, [r7, #0]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f949 	bl	80047d4 <SPI_EndRxTxTransaction>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2220      	movs	r2, #32
 800454c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10a      	bne.n	800456c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004556:	2300      	movs	r3, #0
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	77fb      	strb	r3, [r7, #31]
 8004578:	e000      	b.n	800457c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800457a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800458c:	7ffb      	ldrb	r3, [r7, #31]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	603b      	str	r3, [r7, #0]
 80045a4:	4613      	mov	r3, r2
 80045a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a8:	f7fd fd3c 	bl	8002024 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	4413      	add	r3, r2
 80045b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b8:	f7fd fd34 	bl	8002024 <HAL_GetTick>
 80045bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045be:	4b39      	ldr	r3, [pc, #228]	; (80046a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	015b      	lsls	r3, r3, #5
 80045c4:	0d1b      	lsrs	r3, r3, #20
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045ce:	e054      	b.n	800467a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045d6:	d050      	beq.n	800467a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d8:	f7fd fd24 	bl	8002024 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d902      	bls.n	80045ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d13d      	bne.n	800466a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004606:	d111      	bne.n	800462c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004610:	d004      	beq.n	800461c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d107      	bne.n	800462c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800462a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004630:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004634:	d10f      	bne.n	8004656 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004654:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	e017      	b.n	800469a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	3b01      	subs	r3, #1
 8004678:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	429a      	cmp	r2, r3
 8004696:	d19b      	bne.n	80045d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3720      	adds	r7, #32
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	20000038 	.word	0x20000038

080046a8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80046ba:	f7fd fcb3 	bl	8002024 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c2:	1a9b      	subs	r3, r3, r2
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	4413      	add	r3, r2
 80046c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80046ca:	f7fd fcab 	bl	8002024 <HAL_GetTick>
 80046ce:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	330c      	adds	r3, #12
 80046d6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80046d8:	4b3d      	ldr	r3, [pc, #244]	; (80047d0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4613      	mov	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	4413      	add	r3, r2
 80046e2:	00da      	lsls	r2, r3, #3
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	0d1b      	lsrs	r3, r3, #20
 80046e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ea:	fb02 f303 	mul.w	r3, r2, r3
 80046ee:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80046f0:	e060      	b.n	80047b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80046f8:	d107      	bne.n	800470a <SPI_WaitFifoStateUntilTimeout+0x62>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d104      	bne.n	800470a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	b2db      	uxtb	r3, r3
 8004706:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004708:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004710:	d050      	beq.n	80047b4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004712:	f7fd fc87 	bl	8002024 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471e:	429a      	cmp	r2, r3
 8004720:	d902      	bls.n	8004728 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004724:	2b00      	cmp	r3, #0
 8004726:	d13d      	bne.n	80047a4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004740:	d111      	bne.n	8004766 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800474a:	d004      	beq.n	8004756 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004754:	d107      	bne.n	8004766 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476e:	d10f      	bne.n	8004790 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800478e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e010      	b.n	80047c6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	3b01      	subs	r3, #1
 80047b2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	4013      	ands	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d196      	bne.n	80046f2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3728      	adds	r7, #40	; 0x28
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	20000038 	.word	0x20000038

080047d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff ff5b 	bl	80046a8 <SPI_WaitFifoStateUntilTimeout>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d007      	beq.n	8004808 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e027      	b.n	8004858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2200      	movs	r2, #0
 8004810:	2180      	movs	r1, #128	; 0x80
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fec0 	bl	8004598 <SPI_WaitFlagStateUntilTimeout>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004822:	f043 0220 	orr.w	r2, r3, #32
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e014      	b.n	8004858 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2200      	movs	r2, #0
 8004836:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f7ff ff34 	bl	80046a8 <SPI_WaitFifoStateUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d007      	beq.n	8004856 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f043 0220 	orr.w	r2, r3, #32
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004852:	2303      	movs	r3, #3
 8004854:	e000      	b.n	8004858 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <LL_RCC_GetUSARTClockSource>:
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800486c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4013      	ands	r3, r2
}
 8004874:	4618      	mov	r0, r3
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_GetLPUARTClockSource>:
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4013      	ands	r3, r2
}
 8004894:	4618      	mov	r0, r3
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fd f9bd 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	; 0x24
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f8b2 	bl	8004a4c <UART_SetConfig>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e022      	b.n	8004938 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 face 	bl	8004e9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800490e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800491e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fb55 	bl	8004fe0 <UART_CheckIdleState>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	2b20      	cmp	r3, #32
 8004958:	d173      	bne.n	8004a42 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_Transmit+0x26>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e06c      	b.n	8004a44 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	; 0x21
 8004976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd fb53 	bl	8002024 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e02c      	b.n	8004a10 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	; 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fb5b 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d001      	beq.n	80049d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e039      	b.n	8004a44 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	3302      	adds	r3, #2
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e007      	b.n	80049fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	781a      	ldrb	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	3301      	adds	r3, #1
 80049fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1cc      	bne.n	80049b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	2200      	movs	r2, #0
 8004a24:	2140      	movs	r1, #64	; 0x40
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fb28 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e006      	b.n	8004a44 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2220      	movs	r2, #32
 8004a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a50:	b08c      	sub	sp, #48	; 0x30
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	689a      	ldr	r2, [r3, #8]
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	431a      	orrs	r2, r3
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	69db      	ldr	r3, [r3, #28]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4baf      	ldr	r3, [pc, #700]	; (8004d38 <UART_SetConfig+0x2ec>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	6812      	ldr	r2, [r2, #0]
 8004a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4aa4      	ldr	r2, [pc, #656]	; (8004d3c <UART_SetConfig+0x2f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004ac2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004acc:	430b      	orrs	r3, r1
 8004ace:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f023 010f 	bic.w	r1, r3, #15
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a95      	ldr	r2, [pc, #596]	; (8004d40 <UART_SetConfig+0x2f4>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d125      	bne.n	8004b3c <UART_SetConfig+0xf0>
 8004af0:	2003      	movs	r0, #3
 8004af2:	f7ff feb5 	bl	8004860 <LL_RCC_GetUSARTClockSource>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d81b      	bhi.n	8004b34 <UART_SetConfig+0xe8>
 8004afc:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0xb8>)
 8004afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b02:	bf00      	nop
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b25 	.word	0x08004b25
 8004b0c:	08004b1d 	.word	0x08004b1d
 8004b10:	08004b2d 	.word	0x08004b2d
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b1a:	e042      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b1c:	2302      	movs	r3, #2
 8004b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b22:	e03e      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b24:	2304      	movs	r3, #4
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b2a:	e03a      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b32:	e036      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b34:	2310      	movs	r3, #16
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	e032      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a7e      	ldr	r2, [pc, #504]	; (8004d3c <UART_SetConfig+0x2f0>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d12a      	bne.n	8004b9c <UART_SetConfig+0x150>
 8004b46:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b4a:	f7ff fe99 	bl	8004880 <LL_RCC_GetLPUARTClockSource>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b54:	d01a      	beq.n	8004b8c <UART_SetConfig+0x140>
 8004b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b5a:	d81b      	bhi.n	8004b94 <UART_SetConfig+0x148>
 8004b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b60:	d00c      	beq.n	8004b7c <UART_SetConfig+0x130>
 8004b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b66:	d815      	bhi.n	8004b94 <UART_SetConfig+0x148>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <UART_SetConfig+0x128>
 8004b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b70:	d008      	beq.n	8004b84 <UART_SetConfig+0x138>
 8004b72:	e00f      	b.n	8004b94 <UART_SetConfig+0x148>
 8004b74:	2300      	movs	r3, #0
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7a:	e012      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b7c:	2302      	movs	r3, #2
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b82:	e00e      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b84:	2304      	movs	r3, #4
 8004b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b8a:	e00a      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b8c:	2308      	movs	r3, #8
 8004b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b92:	e006      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b94:	2310      	movs	r3, #16
 8004b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b9a:	e002      	b.n	8004ba2 <UART_SetConfig+0x156>
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a65      	ldr	r2, [pc, #404]	; (8004d3c <UART_SetConfig+0x2f0>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	f040 8097 	bne.w	8004cdc <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d823      	bhi.n	8004bfe <UART_SetConfig+0x1b2>
 8004bb6:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x170>)
 8004bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bef 	.word	0x08004bef
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004bff 	.word	0x08004bff
 8004bdc:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fe fdc4 	bl	800376c <HAL_RCC_GetPCLK1Freq>
 8004be4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004be6:	e010      	b.n	8004c0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b56      	ldr	r3, [pc, #344]	; (8004d44 <UART_SetConfig+0x2f8>)
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bec:	e00d      	b.n	8004c0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fe fd3b 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8004bf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004bf4:	e009      	b.n	8004c0a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004bfc:	e005      	b.n	8004c0a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 812b 	beq.w	8004e68 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	4a4c      	ldr	r2, [pc, #304]	; (8004d48 <UART_SetConfig+0x2fc>)
 8004c18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	685a      	ldr	r2, [r3, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	4413      	add	r3, r2
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d305      	bcc.n	8004c42 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d903      	bls.n	8004c4a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c48:	e10e      	b.n	8004e68 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60bb      	str	r3, [r7, #8]
 8004c50:	60fa      	str	r2, [r7, #12]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c56:	4a3c      	ldr	r2, [pc, #240]	; (8004d48 <UART_SetConfig+0x2fc>)
 8004c58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2200      	movs	r2, #0
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c68:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c6c:	f7fb fad8 	bl	8000220 <__aeabi_uldivmod>
 8004c70:	4602      	mov	r2, r0
 8004c72:	460b      	mov	r3, r1
 8004c74:	4610      	mov	r0, r2
 8004c76:	4619      	mov	r1, r3
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	020b      	lsls	r3, r1, #8
 8004c82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c86:	0202      	lsls	r2, r0, #8
 8004c88:	6979      	ldr	r1, [r7, #20]
 8004c8a:	6849      	ldr	r1, [r1, #4]
 8004c8c:	0849      	lsrs	r1, r1, #1
 8004c8e:	2000      	movs	r0, #0
 8004c90:	460c      	mov	r4, r1
 8004c92:	4605      	mov	r5, r0
 8004c94:	eb12 0804 	adds.w	r8, r2, r4
 8004c98:	eb43 0905 	adc.w	r9, r3, r5
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	469a      	mov	sl, r3
 8004ca4:	4693      	mov	fp, r2
 8004ca6:	4652      	mov	r2, sl
 8004ca8:	465b      	mov	r3, fp
 8004caa:	4640      	mov	r0, r8
 8004cac:	4649      	mov	r1, r9
 8004cae:	f7fb fab7 	bl	8000220 <__aeabi_uldivmod>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cc0:	d308      	bcc.n	8004cd4 <UART_SetConfig+0x288>
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc8:	d204      	bcs.n	8004cd4 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	60da      	str	r2, [r3, #12]
 8004cd2:	e0c9      	b.n	8004e68 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004cda:	e0c5      	b.n	8004e68 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce4:	d16d      	bne.n	8004dc2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8004ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004cea:	3b01      	subs	r3, #1
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d82d      	bhi.n	8004d4c <UART_SetConfig+0x300>
 8004cf0:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0x2ac>)
 8004cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf6:	bf00      	nop
 8004cf8:	08004d19 	.word	0x08004d19
 8004cfc:	08004d21 	.word	0x08004d21
 8004d00:	08004d4d 	.word	0x08004d4d
 8004d04:	08004d27 	.word	0x08004d27
 8004d08:	08004d4d 	.word	0x08004d4d
 8004d0c:	08004d4d 	.word	0x08004d4d
 8004d10:	08004d4d 	.word	0x08004d4d
 8004d14:	08004d2f 	.word	0x08004d2f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d18:	f7fe fd3e 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8004d1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d1e:	e01b      	b.n	8004d58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d20:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <UART_SetConfig+0x2f8>)
 8004d22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d24:	e018      	b.n	8004d58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d26:	f7fe fc9f 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8004d2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d2c:	e014      	b.n	8004d58 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d34:	e010      	b.n	8004d58 <UART_SetConfig+0x30c>
 8004d36:	bf00      	nop
 8004d38:	cfff69f3 	.word	0xcfff69f3
 8004d3c:	40008000 	.word	0x40008000
 8004d40:	40013800 	.word	0x40013800
 8004d44:	00f42400 	.word	0x00f42400
 8004d48:	08009f6c 	.word	0x08009f6c
      default:
        pclk = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f000 8084 	beq.w	8004e68 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	4a4b      	ldr	r2, [pc, #300]	; (8004e94 <UART_SetConfig+0x448>)
 8004d66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d72:	005a      	lsls	r2, r3, #1
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	085b      	lsrs	r3, r3, #1
 8004d7a:	441a      	add	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	2b0f      	cmp	r3, #15
 8004d8a:	d916      	bls.n	8004dba <UART_SetConfig+0x36e>
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d212      	bcs.n	8004dba <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	f023 030f 	bic.w	r3, r3, #15
 8004d9c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d9e:	6a3b      	ldr	r3, [r7, #32]
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	b29a      	uxth	r2, r3
 8004daa:	8bfb      	ldrh	r3, [r7, #30]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	8bfa      	ldrh	r2, [r7, #30]
 8004db6:	60da      	str	r2, [r3, #12]
 8004db8:	e056      	b.n	8004e68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004dc0:	e052      	b.n	8004e68 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	2b07      	cmp	r3, #7
 8004dca:	d822      	bhi.n	8004e12 <UART_SetConfig+0x3c6>
 8004dcc:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <UART_SetConfig+0x388>)
 8004dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd2:	bf00      	nop
 8004dd4:	08004df5 	.word	0x08004df5
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004e13 	.word	0x08004e13
 8004de0:	08004e03 	.word	0x08004e03
 8004de4:	08004e13 	.word	0x08004e13
 8004de8:	08004e13 	.word	0x08004e13
 8004dec:	08004e13 	.word	0x08004e13
 8004df0:	08004e0b 	.word	0x08004e0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004df4:	f7fe fcd0 	bl	8003798 <HAL_RCC_GetPCLK2Freq>
 8004df8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dfa:	e010      	b.n	8004e1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dfc:	4b26      	ldr	r3, [pc, #152]	; (8004e98 <UART_SetConfig+0x44c>)
 8004dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e00:	e00d      	b.n	8004e1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f7fe fc31 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 8004e06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e08:	e009      	b.n	8004e1e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e10:	e005      	b.n	8004e1e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d021      	beq.n	8004e68 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e28:	4a1a      	ldr	r2, [pc, #104]	; (8004e94 <UART_SetConfig+0x448>)
 8004e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	441a      	add	r2, r3
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e46:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	2b0f      	cmp	r3, #15
 8004e4c:	d909      	bls.n	8004e62 <UART_SetConfig+0x416>
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e54:	d205      	bcs.n	8004e62 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60da      	str	r2, [r3, #12]
 8004e60:	e002      	b.n	8004e68 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2200      	movs	r2, #0
 8004e82:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004e84:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	08009f6c 	.word	0x08009f6c
 8004e98:	00f42400 	.word	0x00f42400

08004e9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	f003 0301 	and.w	r3, r3, #1
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	f003 0308 	and.w	r3, r3, #8
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00a      	beq.n	8004f4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d01a      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f9a:	d10a      	bne.n	8004fb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00a      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ff0:	f7fd f818 	bl	8002024 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 0308 	and.w	r3, r3, #8
 8005000:	2b08      	cmp	r3, #8
 8005002:	d10e      	bne.n	8005022 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f832 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e028      	b.n	8005074 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b04      	cmp	r3, #4
 800502e:	d10e      	bne.n	800504e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005030:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 f81c 	bl	800507c <UART_WaitOnFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d001      	beq.n	800504e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e012      	b.n	8005074 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2220      	movs	r2, #32
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b09c      	sub	sp, #112	; 0x70
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	603b      	str	r3, [r7, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800508c:	e0a9      	b.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800508e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005090:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005094:	f000 80a5 	beq.w	80051e2 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005098:	f7fc ffc4 	bl	8002024 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <UART_WaitOnFlagUntilTimeout+0x32>
 80050a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d140      	bne.n	8005130 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80050c2:	667b      	str	r3, [r7, #100]	; 0x64
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	461a      	mov	r2, r3
 80050ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ce:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80050d2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80050da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e6      	bne.n	80050ae <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3308      	adds	r3, #8
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	f023 0301 	bic.w	r3, r3, #1
 80050f6:	663b      	str	r3, [r7, #96]	; 0x60
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3308      	adds	r3, #8
 80050fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005100:	64ba      	str	r2, [r7, #72]	; 0x48
 8005102:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005104:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005106:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005108:	e841 2300 	strex	r3, r2, [r1]
 800510c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800510e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005110:	2b00      	cmp	r3, #0
 8005112:	d1e5      	bne.n	80050e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e069      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0304 	and.w	r3, r3, #4
 800513a:	2b00      	cmp	r3, #0
 800513c:	d051      	beq.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514c:	d149      	bne.n	80051e2 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005156:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800516c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005176:	637b      	str	r3, [r7, #52]	; 0x34
 8005178:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800517c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e6      	bne.n	8005158 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3308      	adds	r3, #8
 8005190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	613b      	str	r3, [r7, #16]
   return(result);
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80051aa:	623a      	str	r2, [r7, #32]
 80051ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	69f9      	ldr	r1, [r7, #28]
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2220      	movs	r2, #32
 80051d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	e010      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69da      	ldr	r2, [r3, #28]
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	4013      	ands	r3, r2
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	bf0c      	ite	eq
 80051f2:	2301      	moveq	r3, #1
 80051f4:	2300      	movne	r3, #0
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	461a      	mov	r2, r3
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	f43f af46 	beq.w	800508e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3770      	adds	r7, #112	; 0x70
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800521a:	2b01      	cmp	r3, #1
 800521c:	d101      	bne.n	8005222 <HAL_UARTEx_DisableFifoMode+0x16>
 800521e:	2302      	movs	r3, #2
 8005220:	e027      	b.n	8005272 <HAL_UARTEx_DisableFifoMode+0x66>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2224      	movs	r2, #36	; 0x24
 800522e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005250:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr

0800527e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800527e:	b580      	push	{r7, lr}
 8005280:	b084      	sub	sp, #16
 8005282:	af00      	add	r7, sp, #0
 8005284:	6078      	str	r0, [r7, #4]
 8005286:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005292:	2302      	movs	r3, #2
 8005294:	e02d      	b.n	80052f2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2224      	movs	r2, #36	; 0x24
 80052a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0201 	bic.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f850 	bl	8005378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b084      	sub	sp, #16
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
 8005302:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800530e:	2302      	movs	r3, #2
 8005310:	e02d      	b.n	800536e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2224      	movs	r2, #36	; 0x24
 800531e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f812 	bl	8005378 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005398:	e031      	b.n	80053fe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800539a:	2308      	movs	r3, #8
 800539c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800539e:	2308      	movs	r3, #8
 80053a0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	0e5b      	lsrs	r3, r3, #25
 80053aa:	b2db      	uxtb	r3, r3
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	0f5b      	lsrs	r3, r3, #29
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	f003 0307 	and.w	r3, r3, #7
 80053c0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053c2:	7bbb      	ldrb	r3, [r7, #14]
 80053c4:	7b3a      	ldrb	r2, [r7, #12]
 80053c6:	4911      	ldr	r1, [pc, #68]	; (800540c <UARTEx_SetNbDataToProcess+0x94>)
 80053c8:	5c8a      	ldrb	r2, [r1, r2]
 80053ca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80053ce:	7b3a      	ldrb	r2, [r7, #12]
 80053d0:	490f      	ldr	r1, [pc, #60]	; (8005410 <UARTEx_SetNbDataToProcess+0x98>)
 80053d2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80053d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	7b7a      	ldrb	r2, [r7, #13]
 80053e4:	4909      	ldr	r1, [pc, #36]	; (800540c <UARTEx_SetNbDataToProcess+0x94>)
 80053e6:	5c8a      	ldrb	r2, [r1, r2]
 80053e8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053ec:	7b7a      	ldrb	r2, [r7, #13]
 80053ee:	4908      	ldr	r1, [pc, #32]	; (8005410 <UARTEx_SetNbDataToProcess+0x98>)
 80053f0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053f2:	fb93 f3f2 	sdiv	r3, r3, r2
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80053fe:	bf00      	nop
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	08009f84 	.word	0x08009f84
 8005410:	08009f8c 	.word	0x08009f8c

08005414 <__errno>:
 8005414:	4b01      	ldr	r3, [pc, #4]	; (800541c <__errno+0x8>)
 8005416:	6818      	ldr	r0, [r3, #0]
 8005418:	4770      	bx	lr
 800541a:	bf00      	nop
 800541c:	20000044 	.word	0x20000044

08005420 <__libc_init_array>:
 8005420:	b570      	push	{r4, r5, r6, lr}
 8005422:	4d0d      	ldr	r5, [pc, #52]	; (8005458 <__libc_init_array+0x38>)
 8005424:	4c0d      	ldr	r4, [pc, #52]	; (800545c <__libc_init_array+0x3c>)
 8005426:	1b64      	subs	r4, r4, r5
 8005428:	10a4      	asrs	r4, r4, #2
 800542a:	2600      	movs	r6, #0
 800542c:	42a6      	cmp	r6, r4
 800542e:	d109      	bne.n	8005444 <__libc_init_array+0x24>
 8005430:	4d0b      	ldr	r5, [pc, #44]	; (8005460 <__libc_init_array+0x40>)
 8005432:	4c0c      	ldr	r4, [pc, #48]	; (8005464 <__libc_init_array+0x44>)
 8005434:	f001 f82c 	bl	8006490 <_init>
 8005438:	1b64      	subs	r4, r4, r5
 800543a:	10a4      	asrs	r4, r4, #2
 800543c:	2600      	movs	r6, #0
 800543e:	42a6      	cmp	r6, r4
 8005440:	d105      	bne.n	800544e <__libc_init_array+0x2e>
 8005442:	bd70      	pop	{r4, r5, r6, pc}
 8005444:	f855 3b04 	ldr.w	r3, [r5], #4
 8005448:	4798      	blx	r3
 800544a:	3601      	adds	r6, #1
 800544c:	e7ee      	b.n	800542c <__libc_init_array+0xc>
 800544e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005452:	4798      	blx	r3
 8005454:	3601      	adds	r6, #1
 8005456:	e7f2      	b.n	800543e <__libc_init_array+0x1e>
 8005458:	0800a034 	.word	0x0800a034
 800545c:	0800a034 	.word	0x0800a034
 8005460:	0800a034 	.word	0x0800a034
 8005464:	0800a038 	.word	0x0800a038

08005468 <malloc>:
 8005468:	4b02      	ldr	r3, [pc, #8]	; (8005474 <malloc+0xc>)
 800546a:	4601      	mov	r1, r0
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	f000 b877 	b.w	8005560 <_malloc_r>
 8005472:	bf00      	nop
 8005474:	20000044 	.word	0x20000044

08005478 <memset>:
 8005478:	4402      	add	r2, r0
 800547a:	4603      	mov	r3, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	d100      	bne.n	8005482 <memset+0xa>
 8005480:	4770      	bx	lr
 8005482:	f803 1b01 	strb.w	r1, [r3], #1
 8005486:	e7f9      	b.n	800547c <memset+0x4>

08005488 <_free_r>:
 8005488:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800548a:	2900      	cmp	r1, #0
 800548c:	d044      	beq.n	8005518 <_free_r+0x90>
 800548e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005492:	9001      	str	r0, [sp, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	f1a1 0404 	sub.w	r4, r1, #4
 800549a:	bfb8      	it	lt
 800549c:	18e4      	addlt	r4, r4, r3
 800549e:	f000 fc51 	bl	8005d44 <__malloc_lock>
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <_free_r+0x94>)
 80054a4:	9801      	ldr	r0, [sp, #4]
 80054a6:	6813      	ldr	r3, [r2, #0]
 80054a8:	b933      	cbnz	r3, 80054b8 <_free_r+0x30>
 80054aa:	6063      	str	r3, [r4, #4]
 80054ac:	6014      	str	r4, [r2, #0]
 80054ae:	b003      	add	sp, #12
 80054b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054b4:	f000 bc4c 	b.w	8005d50 <__malloc_unlock>
 80054b8:	42a3      	cmp	r3, r4
 80054ba:	d908      	bls.n	80054ce <_free_r+0x46>
 80054bc:	6825      	ldr	r5, [r4, #0]
 80054be:	1961      	adds	r1, r4, r5
 80054c0:	428b      	cmp	r3, r1
 80054c2:	bf01      	itttt	eq
 80054c4:	6819      	ldreq	r1, [r3, #0]
 80054c6:	685b      	ldreq	r3, [r3, #4]
 80054c8:	1949      	addeq	r1, r1, r5
 80054ca:	6021      	streq	r1, [r4, #0]
 80054cc:	e7ed      	b.n	80054aa <_free_r+0x22>
 80054ce:	461a      	mov	r2, r3
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	b10b      	cbz	r3, 80054d8 <_free_r+0x50>
 80054d4:	42a3      	cmp	r3, r4
 80054d6:	d9fa      	bls.n	80054ce <_free_r+0x46>
 80054d8:	6811      	ldr	r1, [r2, #0]
 80054da:	1855      	adds	r5, r2, r1
 80054dc:	42a5      	cmp	r5, r4
 80054de:	d10b      	bne.n	80054f8 <_free_r+0x70>
 80054e0:	6824      	ldr	r4, [r4, #0]
 80054e2:	4421      	add	r1, r4
 80054e4:	1854      	adds	r4, r2, r1
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	6011      	str	r1, [r2, #0]
 80054ea:	d1e0      	bne.n	80054ae <_free_r+0x26>
 80054ec:	681c      	ldr	r4, [r3, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	6053      	str	r3, [r2, #4]
 80054f2:	4421      	add	r1, r4
 80054f4:	6011      	str	r1, [r2, #0]
 80054f6:	e7da      	b.n	80054ae <_free_r+0x26>
 80054f8:	d902      	bls.n	8005500 <_free_r+0x78>
 80054fa:	230c      	movs	r3, #12
 80054fc:	6003      	str	r3, [r0, #0]
 80054fe:	e7d6      	b.n	80054ae <_free_r+0x26>
 8005500:	6825      	ldr	r5, [r4, #0]
 8005502:	1961      	adds	r1, r4, r5
 8005504:	428b      	cmp	r3, r1
 8005506:	bf04      	itt	eq
 8005508:	6819      	ldreq	r1, [r3, #0]
 800550a:	685b      	ldreq	r3, [r3, #4]
 800550c:	6063      	str	r3, [r4, #4]
 800550e:	bf04      	itt	eq
 8005510:	1949      	addeq	r1, r1, r5
 8005512:	6021      	streq	r1, [r4, #0]
 8005514:	6054      	str	r4, [r2, #4]
 8005516:	e7ca      	b.n	80054ae <_free_r+0x26>
 8005518:	b003      	add	sp, #12
 800551a:	bd30      	pop	{r4, r5, pc}
 800551c:	200001e4 	.word	0x200001e4

08005520 <sbrk_aligned>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	4e0e      	ldr	r6, [pc, #56]	; (800555c <sbrk_aligned+0x3c>)
 8005524:	460c      	mov	r4, r1
 8005526:	6831      	ldr	r1, [r6, #0]
 8005528:	4605      	mov	r5, r0
 800552a:	b911      	cbnz	r1, 8005532 <sbrk_aligned+0x12>
 800552c:	f000 f91a 	bl	8005764 <_sbrk_r>
 8005530:	6030      	str	r0, [r6, #0]
 8005532:	4621      	mov	r1, r4
 8005534:	4628      	mov	r0, r5
 8005536:	f000 f915 	bl	8005764 <_sbrk_r>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	d00a      	beq.n	8005554 <sbrk_aligned+0x34>
 800553e:	1cc4      	adds	r4, r0, #3
 8005540:	f024 0403 	bic.w	r4, r4, #3
 8005544:	42a0      	cmp	r0, r4
 8005546:	d007      	beq.n	8005558 <sbrk_aligned+0x38>
 8005548:	1a21      	subs	r1, r4, r0
 800554a:	4628      	mov	r0, r5
 800554c:	f000 f90a 	bl	8005764 <_sbrk_r>
 8005550:	3001      	adds	r0, #1
 8005552:	d101      	bne.n	8005558 <sbrk_aligned+0x38>
 8005554:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005558:	4620      	mov	r0, r4
 800555a:	bd70      	pop	{r4, r5, r6, pc}
 800555c:	200001e8 	.word	0x200001e8

08005560 <_malloc_r>:
 8005560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005564:	1ccd      	adds	r5, r1, #3
 8005566:	f025 0503 	bic.w	r5, r5, #3
 800556a:	3508      	adds	r5, #8
 800556c:	2d0c      	cmp	r5, #12
 800556e:	bf38      	it	cc
 8005570:	250c      	movcc	r5, #12
 8005572:	2d00      	cmp	r5, #0
 8005574:	4607      	mov	r7, r0
 8005576:	db01      	blt.n	800557c <_malloc_r+0x1c>
 8005578:	42a9      	cmp	r1, r5
 800557a:	d905      	bls.n	8005588 <_malloc_r+0x28>
 800557c:	230c      	movs	r3, #12
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	2600      	movs	r6, #0
 8005582:	4630      	mov	r0, r6
 8005584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005588:	4e2e      	ldr	r6, [pc, #184]	; (8005644 <_malloc_r+0xe4>)
 800558a:	f000 fbdb 	bl	8005d44 <__malloc_lock>
 800558e:	6833      	ldr	r3, [r6, #0]
 8005590:	461c      	mov	r4, r3
 8005592:	bb34      	cbnz	r4, 80055e2 <_malloc_r+0x82>
 8005594:	4629      	mov	r1, r5
 8005596:	4638      	mov	r0, r7
 8005598:	f7ff ffc2 	bl	8005520 <sbrk_aligned>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	4604      	mov	r4, r0
 80055a0:	d14d      	bne.n	800563e <_malloc_r+0xde>
 80055a2:	6834      	ldr	r4, [r6, #0]
 80055a4:	4626      	mov	r6, r4
 80055a6:	2e00      	cmp	r6, #0
 80055a8:	d140      	bne.n	800562c <_malloc_r+0xcc>
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	4631      	mov	r1, r6
 80055ae:	4638      	mov	r0, r7
 80055b0:	eb04 0803 	add.w	r8, r4, r3
 80055b4:	f000 f8d6 	bl	8005764 <_sbrk_r>
 80055b8:	4580      	cmp	r8, r0
 80055ba:	d13a      	bne.n	8005632 <_malloc_r+0xd2>
 80055bc:	6821      	ldr	r1, [r4, #0]
 80055be:	3503      	adds	r5, #3
 80055c0:	1a6d      	subs	r5, r5, r1
 80055c2:	f025 0503 	bic.w	r5, r5, #3
 80055c6:	3508      	adds	r5, #8
 80055c8:	2d0c      	cmp	r5, #12
 80055ca:	bf38      	it	cc
 80055cc:	250c      	movcc	r5, #12
 80055ce:	4629      	mov	r1, r5
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7ff ffa5 	bl	8005520 <sbrk_aligned>
 80055d6:	3001      	adds	r0, #1
 80055d8:	d02b      	beq.n	8005632 <_malloc_r+0xd2>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	442b      	add	r3, r5
 80055de:	6023      	str	r3, [r4, #0]
 80055e0:	e00e      	b.n	8005600 <_malloc_r+0xa0>
 80055e2:	6822      	ldr	r2, [r4, #0]
 80055e4:	1b52      	subs	r2, r2, r5
 80055e6:	d41e      	bmi.n	8005626 <_malloc_r+0xc6>
 80055e8:	2a0b      	cmp	r2, #11
 80055ea:	d916      	bls.n	800561a <_malloc_r+0xba>
 80055ec:	1961      	adds	r1, r4, r5
 80055ee:	42a3      	cmp	r3, r4
 80055f0:	6025      	str	r5, [r4, #0]
 80055f2:	bf18      	it	ne
 80055f4:	6059      	strne	r1, [r3, #4]
 80055f6:	6863      	ldr	r3, [r4, #4]
 80055f8:	bf08      	it	eq
 80055fa:	6031      	streq	r1, [r6, #0]
 80055fc:	5162      	str	r2, [r4, r5]
 80055fe:	604b      	str	r3, [r1, #4]
 8005600:	4638      	mov	r0, r7
 8005602:	f104 060b 	add.w	r6, r4, #11
 8005606:	f000 fba3 	bl	8005d50 <__malloc_unlock>
 800560a:	f026 0607 	bic.w	r6, r6, #7
 800560e:	1d23      	adds	r3, r4, #4
 8005610:	1af2      	subs	r2, r6, r3
 8005612:	d0b6      	beq.n	8005582 <_malloc_r+0x22>
 8005614:	1b9b      	subs	r3, r3, r6
 8005616:	50a3      	str	r3, [r4, r2]
 8005618:	e7b3      	b.n	8005582 <_malloc_r+0x22>
 800561a:	6862      	ldr	r2, [r4, #4]
 800561c:	42a3      	cmp	r3, r4
 800561e:	bf0c      	ite	eq
 8005620:	6032      	streq	r2, [r6, #0]
 8005622:	605a      	strne	r2, [r3, #4]
 8005624:	e7ec      	b.n	8005600 <_malloc_r+0xa0>
 8005626:	4623      	mov	r3, r4
 8005628:	6864      	ldr	r4, [r4, #4]
 800562a:	e7b2      	b.n	8005592 <_malloc_r+0x32>
 800562c:	4634      	mov	r4, r6
 800562e:	6876      	ldr	r6, [r6, #4]
 8005630:	e7b9      	b.n	80055a6 <_malloc_r+0x46>
 8005632:	230c      	movs	r3, #12
 8005634:	603b      	str	r3, [r7, #0]
 8005636:	4638      	mov	r0, r7
 8005638:	f000 fb8a 	bl	8005d50 <__malloc_unlock>
 800563c:	e7a1      	b.n	8005582 <_malloc_r+0x22>
 800563e:	6025      	str	r5, [r4, #0]
 8005640:	e7de      	b.n	8005600 <_malloc_r+0xa0>
 8005642:	bf00      	nop
 8005644:	200001e4 	.word	0x200001e4

08005648 <iprintf>:
 8005648:	b40f      	push	{r0, r1, r2, r3}
 800564a:	4b0a      	ldr	r3, [pc, #40]	; (8005674 <iprintf+0x2c>)
 800564c:	b513      	push	{r0, r1, r4, lr}
 800564e:	681c      	ldr	r4, [r3, #0]
 8005650:	b124      	cbz	r4, 800565c <iprintf+0x14>
 8005652:	69a3      	ldr	r3, [r4, #24]
 8005654:	b913      	cbnz	r3, 800565c <iprintf+0x14>
 8005656:	4620      	mov	r0, r4
 8005658:	f000 fa6e 	bl	8005b38 <__sinit>
 800565c:	ab05      	add	r3, sp, #20
 800565e:	9a04      	ldr	r2, [sp, #16]
 8005660:	68a1      	ldr	r1, [r4, #8]
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	4620      	mov	r0, r4
 8005666:	f000 fba3 	bl	8005db0 <_vfiprintf_r>
 800566a:	b002      	add	sp, #8
 800566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005670:	b004      	add	sp, #16
 8005672:	4770      	bx	lr
 8005674:	20000044 	.word	0x20000044

08005678 <_puts_r>:
 8005678:	b570      	push	{r4, r5, r6, lr}
 800567a:	460e      	mov	r6, r1
 800567c:	4605      	mov	r5, r0
 800567e:	b118      	cbz	r0, 8005688 <_puts_r+0x10>
 8005680:	6983      	ldr	r3, [r0, #24]
 8005682:	b90b      	cbnz	r3, 8005688 <_puts_r+0x10>
 8005684:	f000 fa58 	bl	8005b38 <__sinit>
 8005688:	69ab      	ldr	r3, [r5, #24]
 800568a:	68ac      	ldr	r4, [r5, #8]
 800568c:	b913      	cbnz	r3, 8005694 <_puts_r+0x1c>
 800568e:	4628      	mov	r0, r5
 8005690:	f000 fa52 	bl	8005b38 <__sinit>
 8005694:	4b2c      	ldr	r3, [pc, #176]	; (8005748 <_puts_r+0xd0>)
 8005696:	429c      	cmp	r4, r3
 8005698:	d120      	bne.n	80056dc <_puts_r+0x64>
 800569a:	686c      	ldr	r4, [r5, #4]
 800569c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800569e:	07db      	lsls	r3, r3, #31
 80056a0:	d405      	bmi.n	80056ae <_puts_r+0x36>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	0598      	lsls	r0, r3, #22
 80056a6:	d402      	bmi.n	80056ae <_puts_r+0x36>
 80056a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056aa:	f000 fae3 	bl	8005c74 <__retarget_lock_acquire_recursive>
 80056ae:	89a3      	ldrh	r3, [r4, #12]
 80056b0:	0719      	lsls	r1, r3, #28
 80056b2:	d51d      	bpl.n	80056f0 <_puts_r+0x78>
 80056b4:	6923      	ldr	r3, [r4, #16]
 80056b6:	b1db      	cbz	r3, 80056f0 <_puts_r+0x78>
 80056b8:	3e01      	subs	r6, #1
 80056ba:	68a3      	ldr	r3, [r4, #8]
 80056bc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056c0:	3b01      	subs	r3, #1
 80056c2:	60a3      	str	r3, [r4, #8]
 80056c4:	bb39      	cbnz	r1, 8005716 <_puts_r+0x9e>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	da38      	bge.n	800573c <_puts_r+0xc4>
 80056ca:	4622      	mov	r2, r4
 80056cc:	210a      	movs	r1, #10
 80056ce:	4628      	mov	r0, r5
 80056d0:	f000 f858 	bl	8005784 <__swbuf_r>
 80056d4:	3001      	adds	r0, #1
 80056d6:	d011      	beq.n	80056fc <_puts_r+0x84>
 80056d8:	250a      	movs	r5, #10
 80056da:	e011      	b.n	8005700 <_puts_r+0x88>
 80056dc:	4b1b      	ldr	r3, [pc, #108]	; (800574c <_puts_r+0xd4>)
 80056de:	429c      	cmp	r4, r3
 80056e0:	d101      	bne.n	80056e6 <_puts_r+0x6e>
 80056e2:	68ac      	ldr	r4, [r5, #8]
 80056e4:	e7da      	b.n	800569c <_puts_r+0x24>
 80056e6:	4b1a      	ldr	r3, [pc, #104]	; (8005750 <_puts_r+0xd8>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	bf08      	it	eq
 80056ec:	68ec      	ldreq	r4, [r5, #12]
 80056ee:	e7d5      	b.n	800569c <_puts_r+0x24>
 80056f0:	4621      	mov	r1, r4
 80056f2:	4628      	mov	r0, r5
 80056f4:	f000 f898 	bl	8005828 <__swsetup_r>
 80056f8:	2800      	cmp	r0, #0
 80056fa:	d0dd      	beq.n	80056b8 <_puts_r+0x40>
 80056fc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005700:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005702:	07da      	lsls	r2, r3, #31
 8005704:	d405      	bmi.n	8005712 <_puts_r+0x9a>
 8005706:	89a3      	ldrh	r3, [r4, #12]
 8005708:	059b      	lsls	r3, r3, #22
 800570a:	d402      	bmi.n	8005712 <_puts_r+0x9a>
 800570c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800570e:	f000 fab2 	bl	8005c76 <__retarget_lock_release_recursive>
 8005712:	4628      	mov	r0, r5
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	2b00      	cmp	r3, #0
 8005718:	da04      	bge.n	8005724 <_puts_r+0xac>
 800571a:	69a2      	ldr	r2, [r4, #24]
 800571c:	429a      	cmp	r2, r3
 800571e:	dc06      	bgt.n	800572e <_puts_r+0xb6>
 8005720:	290a      	cmp	r1, #10
 8005722:	d004      	beq.n	800572e <_puts_r+0xb6>
 8005724:	6823      	ldr	r3, [r4, #0]
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	6022      	str	r2, [r4, #0]
 800572a:	7019      	strb	r1, [r3, #0]
 800572c:	e7c5      	b.n	80056ba <_puts_r+0x42>
 800572e:	4622      	mov	r2, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 f827 	bl	8005784 <__swbuf_r>
 8005736:	3001      	adds	r0, #1
 8005738:	d1bf      	bne.n	80056ba <_puts_r+0x42>
 800573a:	e7df      	b.n	80056fc <_puts_r+0x84>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	250a      	movs	r5, #10
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	701d      	strb	r5, [r3, #0]
 8005746:	e7db      	b.n	8005700 <_puts_r+0x88>
 8005748:	08009fb8 	.word	0x08009fb8
 800574c:	08009fd8 	.word	0x08009fd8
 8005750:	08009f98 	.word	0x08009f98

08005754 <puts>:
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <puts+0xc>)
 8005756:	4601      	mov	r1, r0
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f7ff bf8d 	b.w	8005678 <_puts_r>
 800575e:	bf00      	nop
 8005760:	20000044 	.word	0x20000044

08005764 <_sbrk_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4d06      	ldr	r5, [pc, #24]	; (8005780 <_sbrk_r+0x1c>)
 8005768:	2300      	movs	r3, #0
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	f7fc fb28 	bl	8001dc4 <_sbrk>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_sbrk_r+0x1a>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_sbrk_r+0x1a>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	200001f0 	.word	0x200001f0

08005784 <__swbuf_r>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	460e      	mov	r6, r1
 8005788:	4614      	mov	r4, r2
 800578a:	4605      	mov	r5, r0
 800578c:	b118      	cbz	r0, 8005796 <__swbuf_r+0x12>
 800578e:	6983      	ldr	r3, [r0, #24]
 8005790:	b90b      	cbnz	r3, 8005796 <__swbuf_r+0x12>
 8005792:	f000 f9d1 	bl	8005b38 <__sinit>
 8005796:	4b21      	ldr	r3, [pc, #132]	; (800581c <__swbuf_r+0x98>)
 8005798:	429c      	cmp	r4, r3
 800579a:	d12b      	bne.n	80057f4 <__swbuf_r+0x70>
 800579c:	686c      	ldr	r4, [r5, #4]
 800579e:	69a3      	ldr	r3, [r4, #24]
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	071a      	lsls	r2, r3, #28
 80057a6:	d52f      	bpl.n	8005808 <__swbuf_r+0x84>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b36b      	cbz	r3, 8005808 <__swbuf_r+0x84>
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	1ac0      	subs	r0, r0, r3
 80057b2:	6963      	ldr	r3, [r4, #20]
 80057b4:	b2f6      	uxtb	r6, r6
 80057b6:	4283      	cmp	r3, r0
 80057b8:	4637      	mov	r7, r6
 80057ba:	dc04      	bgt.n	80057c6 <__swbuf_r+0x42>
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f926 	bl	8005a10 <_fflush_r>
 80057c4:	bb30      	cbnz	r0, 8005814 <__swbuf_r+0x90>
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	60a3      	str	r3, [r4, #8]
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	1c5a      	adds	r2, r3, #1
 80057d0:	6022      	str	r2, [r4, #0]
 80057d2:	701e      	strb	r6, [r3, #0]
 80057d4:	6963      	ldr	r3, [r4, #20]
 80057d6:	3001      	adds	r0, #1
 80057d8:	4283      	cmp	r3, r0
 80057da:	d004      	beq.n	80057e6 <__swbuf_r+0x62>
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	07db      	lsls	r3, r3, #31
 80057e0:	d506      	bpl.n	80057f0 <__swbuf_r+0x6c>
 80057e2:	2e0a      	cmp	r6, #10
 80057e4:	d104      	bne.n	80057f0 <__swbuf_r+0x6c>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f911 	bl	8005a10 <_fflush_r>
 80057ee:	b988      	cbnz	r0, 8005814 <__swbuf_r+0x90>
 80057f0:	4638      	mov	r0, r7
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <__swbuf_r+0x9c>)
 80057f6:	429c      	cmp	r4, r3
 80057f8:	d101      	bne.n	80057fe <__swbuf_r+0x7a>
 80057fa:	68ac      	ldr	r4, [r5, #8]
 80057fc:	e7cf      	b.n	800579e <__swbuf_r+0x1a>
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <__swbuf_r+0xa0>)
 8005800:	429c      	cmp	r4, r3
 8005802:	bf08      	it	eq
 8005804:	68ec      	ldreq	r4, [r5, #12]
 8005806:	e7ca      	b.n	800579e <__swbuf_r+0x1a>
 8005808:	4621      	mov	r1, r4
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f80c 	bl	8005828 <__swsetup_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	d0cb      	beq.n	80057ac <__swbuf_r+0x28>
 8005814:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005818:	e7ea      	b.n	80057f0 <__swbuf_r+0x6c>
 800581a:	bf00      	nop
 800581c:	08009fb8 	.word	0x08009fb8
 8005820:	08009fd8 	.word	0x08009fd8
 8005824:	08009f98 	.word	0x08009f98

08005828 <__swsetup_r>:
 8005828:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <__swsetup_r+0xcc>)
 800582a:	b570      	push	{r4, r5, r6, lr}
 800582c:	681d      	ldr	r5, [r3, #0]
 800582e:	4606      	mov	r6, r0
 8005830:	460c      	mov	r4, r1
 8005832:	b125      	cbz	r5, 800583e <__swsetup_r+0x16>
 8005834:	69ab      	ldr	r3, [r5, #24]
 8005836:	b913      	cbnz	r3, 800583e <__swsetup_r+0x16>
 8005838:	4628      	mov	r0, r5
 800583a:	f000 f97d 	bl	8005b38 <__sinit>
 800583e:	4b2e      	ldr	r3, [pc, #184]	; (80058f8 <__swsetup_r+0xd0>)
 8005840:	429c      	cmp	r4, r3
 8005842:	d10f      	bne.n	8005864 <__swsetup_r+0x3c>
 8005844:	686c      	ldr	r4, [r5, #4]
 8005846:	89a3      	ldrh	r3, [r4, #12]
 8005848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800584c:	0719      	lsls	r1, r3, #28
 800584e:	d42c      	bmi.n	80058aa <__swsetup_r+0x82>
 8005850:	06dd      	lsls	r5, r3, #27
 8005852:	d411      	bmi.n	8005878 <__swsetup_r+0x50>
 8005854:	2309      	movs	r3, #9
 8005856:	6033      	str	r3, [r6, #0]
 8005858:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800585c:	81a3      	strh	r3, [r4, #12]
 800585e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005862:	e03e      	b.n	80058e2 <__swsetup_r+0xba>
 8005864:	4b25      	ldr	r3, [pc, #148]	; (80058fc <__swsetup_r+0xd4>)
 8005866:	429c      	cmp	r4, r3
 8005868:	d101      	bne.n	800586e <__swsetup_r+0x46>
 800586a:	68ac      	ldr	r4, [r5, #8]
 800586c:	e7eb      	b.n	8005846 <__swsetup_r+0x1e>
 800586e:	4b24      	ldr	r3, [pc, #144]	; (8005900 <__swsetup_r+0xd8>)
 8005870:	429c      	cmp	r4, r3
 8005872:	bf08      	it	eq
 8005874:	68ec      	ldreq	r4, [r5, #12]
 8005876:	e7e6      	b.n	8005846 <__swsetup_r+0x1e>
 8005878:	0758      	lsls	r0, r3, #29
 800587a:	d512      	bpl.n	80058a2 <__swsetup_r+0x7a>
 800587c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800587e:	b141      	cbz	r1, 8005892 <__swsetup_r+0x6a>
 8005880:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005884:	4299      	cmp	r1, r3
 8005886:	d002      	beq.n	800588e <__swsetup_r+0x66>
 8005888:	4630      	mov	r0, r6
 800588a:	f7ff fdfd 	bl	8005488 <_free_r>
 800588e:	2300      	movs	r3, #0
 8005890:	6363      	str	r3, [r4, #52]	; 0x34
 8005892:	89a3      	ldrh	r3, [r4, #12]
 8005894:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	2300      	movs	r3, #0
 800589c:	6063      	str	r3, [r4, #4]
 800589e:	6923      	ldr	r3, [r4, #16]
 80058a0:	6023      	str	r3, [r4, #0]
 80058a2:	89a3      	ldrh	r3, [r4, #12]
 80058a4:	f043 0308 	orr.w	r3, r3, #8
 80058a8:	81a3      	strh	r3, [r4, #12]
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	b94b      	cbnz	r3, 80058c2 <__swsetup_r+0x9a>
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b8:	d003      	beq.n	80058c2 <__swsetup_r+0x9a>
 80058ba:	4621      	mov	r1, r4
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 fa01 	bl	8005cc4 <__smakebuf_r>
 80058c2:	89a0      	ldrh	r0, [r4, #12]
 80058c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c8:	f010 0301 	ands.w	r3, r0, #1
 80058cc:	d00a      	beq.n	80058e4 <__swsetup_r+0xbc>
 80058ce:	2300      	movs	r3, #0
 80058d0:	60a3      	str	r3, [r4, #8]
 80058d2:	6963      	ldr	r3, [r4, #20]
 80058d4:	425b      	negs	r3, r3
 80058d6:	61a3      	str	r3, [r4, #24]
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	b943      	cbnz	r3, 80058ee <__swsetup_r+0xc6>
 80058dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058e0:	d1ba      	bne.n	8005858 <__swsetup_r+0x30>
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	0781      	lsls	r1, r0, #30
 80058e6:	bf58      	it	pl
 80058e8:	6963      	ldrpl	r3, [r4, #20]
 80058ea:	60a3      	str	r3, [r4, #8]
 80058ec:	e7f4      	b.n	80058d8 <__swsetup_r+0xb0>
 80058ee:	2000      	movs	r0, #0
 80058f0:	e7f7      	b.n	80058e2 <__swsetup_r+0xba>
 80058f2:	bf00      	nop
 80058f4:	20000044 	.word	0x20000044
 80058f8:	08009fb8 	.word	0x08009fb8
 80058fc:	08009fd8 	.word	0x08009fd8
 8005900:	08009f98 	.word	0x08009f98

08005904 <__sflush_r>:
 8005904:	898a      	ldrh	r2, [r1, #12]
 8005906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590a:	4605      	mov	r5, r0
 800590c:	0710      	lsls	r0, r2, #28
 800590e:	460c      	mov	r4, r1
 8005910:	d458      	bmi.n	80059c4 <__sflush_r+0xc0>
 8005912:	684b      	ldr	r3, [r1, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	dc05      	bgt.n	8005924 <__sflush_r+0x20>
 8005918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	dc02      	bgt.n	8005924 <__sflush_r+0x20>
 800591e:	2000      	movs	r0, #0
 8005920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005926:	2e00      	cmp	r6, #0
 8005928:	d0f9      	beq.n	800591e <__sflush_r+0x1a>
 800592a:	2300      	movs	r3, #0
 800592c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005930:	682f      	ldr	r7, [r5, #0]
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	d032      	beq.n	800599c <__sflush_r+0x98>
 8005936:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	075a      	lsls	r2, r3, #29
 800593c:	d505      	bpl.n	800594a <__sflush_r+0x46>
 800593e:	6863      	ldr	r3, [r4, #4]
 8005940:	1ac0      	subs	r0, r0, r3
 8005942:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005944:	b10b      	cbz	r3, 800594a <__sflush_r+0x46>
 8005946:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005948:	1ac0      	subs	r0, r0, r3
 800594a:	2300      	movs	r3, #0
 800594c:	4602      	mov	r2, r0
 800594e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005950:	6a21      	ldr	r1, [r4, #32]
 8005952:	4628      	mov	r0, r5
 8005954:	47b0      	blx	r6
 8005956:	1c43      	adds	r3, r0, #1
 8005958:	89a3      	ldrh	r3, [r4, #12]
 800595a:	d106      	bne.n	800596a <__sflush_r+0x66>
 800595c:	6829      	ldr	r1, [r5, #0]
 800595e:	291d      	cmp	r1, #29
 8005960:	d82c      	bhi.n	80059bc <__sflush_r+0xb8>
 8005962:	4a2a      	ldr	r2, [pc, #168]	; (8005a0c <__sflush_r+0x108>)
 8005964:	40ca      	lsrs	r2, r1
 8005966:	07d6      	lsls	r6, r2, #31
 8005968:	d528      	bpl.n	80059bc <__sflush_r+0xb8>
 800596a:	2200      	movs	r2, #0
 800596c:	6062      	str	r2, [r4, #4]
 800596e:	04d9      	lsls	r1, r3, #19
 8005970:	6922      	ldr	r2, [r4, #16]
 8005972:	6022      	str	r2, [r4, #0]
 8005974:	d504      	bpl.n	8005980 <__sflush_r+0x7c>
 8005976:	1c42      	adds	r2, r0, #1
 8005978:	d101      	bne.n	800597e <__sflush_r+0x7a>
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	b903      	cbnz	r3, 8005980 <__sflush_r+0x7c>
 800597e:	6560      	str	r0, [r4, #84]	; 0x54
 8005980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005982:	602f      	str	r7, [r5, #0]
 8005984:	2900      	cmp	r1, #0
 8005986:	d0ca      	beq.n	800591e <__sflush_r+0x1a>
 8005988:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800598c:	4299      	cmp	r1, r3
 800598e:	d002      	beq.n	8005996 <__sflush_r+0x92>
 8005990:	4628      	mov	r0, r5
 8005992:	f7ff fd79 	bl	8005488 <_free_r>
 8005996:	2000      	movs	r0, #0
 8005998:	6360      	str	r0, [r4, #52]	; 0x34
 800599a:	e7c1      	b.n	8005920 <__sflush_r+0x1c>
 800599c:	6a21      	ldr	r1, [r4, #32]
 800599e:	2301      	movs	r3, #1
 80059a0:	4628      	mov	r0, r5
 80059a2:	47b0      	blx	r6
 80059a4:	1c41      	adds	r1, r0, #1
 80059a6:	d1c7      	bne.n	8005938 <__sflush_r+0x34>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0c4      	beq.n	8005938 <__sflush_r+0x34>
 80059ae:	2b1d      	cmp	r3, #29
 80059b0:	d001      	beq.n	80059b6 <__sflush_r+0xb2>
 80059b2:	2b16      	cmp	r3, #22
 80059b4:	d101      	bne.n	80059ba <__sflush_r+0xb6>
 80059b6:	602f      	str	r7, [r5, #0]
 80059b8:	e7b1      	b.n	800591e <__sflush_r+0x1a>
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	e7ad      	b.n	8005920 <__sflush_r+0x1c>
 80059c4:	690f      	ldr	r7, [r1, #16]
 80059c6:	2f00      	cmp	r7, #0
 80059c8:	d0a9      	beq.n	800591e <__sflush_r+0x1a>
 80059ca:	0793      	lsls	r3, r2, #30
 80059cc:	680e      	ldr	r6, [r1, #0]
 80059ce:	bf08      	it	eq
 80059d0:	694b      	ldreq	r3, [r1, #20]
 80059d2:	600f      	str	r7, [r1, #0]
 80059d4:	bf18      	it	ne
 80059d6:	2300      	movne	r3, #0
 80059d8:	eba6 0807 	sub.w	r8, r6, r7
 80059dc:	608b      	str	r3, [r1, #8]
 80059de:	f1b8 0f00 	cmp.w	r8, #0
 80059e2:	dd9c      	ble.n	800591e <__sflush_r+0x1a>
 80059e4:	6a21      	ldr	r1, [r4, #32]
 80059e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80059e8:	4643      	mov	r3, r8
 80059ea:	463a      	mov	r2, r7
 80059ec:	4628      	mov	r0, r5
 80059ee:	47b0      	blx	r6
 80059f0:	2800      	cmp	r0, #0
 80059f2:	dc06      	bgt.n	8005a02 <__sflush_r+0xfe>
 80059f4:	89a3      	ldrh	r3, [r4, #12]
 80059f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a00:	e78e      	b.n	8005920 <__sflush_r+0x1c>
 8005a02:	4407      	add	r7, r0
 8005a04:	eba8 0800 	sub.w	r8, r8, r0
 8005a08:	e7e9      	b.n	80059de <__sflush_r+0xda>
 8005a0a:	bf00      	nop
 8005a0c:	20400001 	.word	0x20400001

08005a10 <_fflush_r>:
 8005a10:	b538      	push	{r3, r4, r5, lr}
 8005a12:	690b      	ldr	r3, [r1, #16]
 8005a14:	4605      	mov	r5, r0
 8005a16:	460c      	mov	r4, r1
 8005a18:	b913      	cbnz	r3, 8005a20 <_fflush_r+0x10>
 8005a1a:	2500      	movs	r5, #0
 8005a1c:	4628      	mov	r0, r5
 8005a1e:	bd38      	pop	{r3, r4, r5, pc}
 8005a20:	b118      	cbz	r0, 8005a2a <_fflush_r+0x1a>
 8005a22:	6983      	ldr	r3, [r0, #24]
 8005a24:	b90b      	cbnz	r3, 8005a2a <_fflush_r+0x1a>
 8005a26:	f000 f887 	bl	8005b38 <__sinit>
 8005a2a:	4b14      	ldr	r3, [pc, #80]	; (8005a7c <_fflush_r+0x6c>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	d11b      	bne.n	8005a68 <_fflush_r+0x58>
 8005a30:	686c      	ldr	r4, [r5, #4]
 8005a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0ef      	beq.n	8005a1a <_fflush_r+0xa>
 8005a3a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a3c:	07d0      	lsls	r0, r2, #31
 8005a3e:	d404      	bmi.n	8005a4a <_fflush_r+0x3a>
 8005a40:	0599      	lsls	r1, r3, #22
 8005a42:	d402      	bmi.n	8005a4a <_fflush_r+0x3a>
 8005a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a46:	f000 f915 	bl	8005c74 <__retarget_lock_acquire_recursive>
 8005a4a:	4628      	mov	r0, r5
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	f7ff ff59 	bl	8005904 <__sflush_r>
 8005a52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a54:	07da      	lsls	r2, r3, #31
 8005a56:	4605      	mov	r5, r0
 8005a58:	d4e0      	bmi.n	8005a1c <_fflush_r+0xc>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	059b      	lsls	r3, r3, #22
 8005a5e:	d4dd      	bmi.n	8005a1c <_fflush_r+0xc>
 8005a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a62:	f000 f908 	bl	8005c76 <__retarget_lock_release_recursive>
 8005a66:	e7d9      	b.n	8005a1c <_fflush_r+0xc>
 8005a68:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <_fflush_r+0x70>)
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	d101      	bne.n	8005a72 <_fflush_r+0x62>
 8005a6e:	68ac      	ldr	r4, [r5, #8]
 8005a70:	e7df      	b.n	8005a32 <_fflush_r+0x22>
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <_fflush_r+0x74>)
 8005a74:	429c      	cmp	r4, r3
 8005a76:	bf08      	it	eq
 8005a78:	68ec      	ldreq	r4, [r5, #12]
 8005a7a:	e7da      	b.n	8005a32 <_fflush_r+0x22>
 8005a7c:	08009fb8 	.word	0x08009fb8
 8005a80:	08009fd8 	.word	0x08009fd8
 8005a84:	08009f98 	.word	0x08009f98

08005a88 <std>:
 8005a88:	2300      	movs	r3, #0
 8005a8a:	b510      	push	{r4, lr}
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	e9c0 3300 	strd	r3, r3, [r0]
 8005a92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a96:	6083      	str	r3, [r0, #8]
 8005a98:	8181      	strh	r1, [r0, #12]
 8005a9a:	6643      	str	r3, [r0, #100]	; 0x64
 8005a9c:	81c2      	strh	r2, [r0, #14]
 8005a9e:	6183      	str	r3, [r0, #24]
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	305c      	adds	r0, #92	; 0x5c
 8005aa6:	f7ff fce7 	bl	8005478 <memset>
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <std+0x38>)
 8005aac:	6263      	str	r3, [r4, #36]	; 0x24
 8005aae:	4b05      	ldr	r3, [pc, #20]	; (8005ac4 <std+0x3c>)
 8005ab0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ab2:	4b05      	ldr	r3, [pc, #20]	; (8005ac8 <std+0x40>)
 8005ab4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005ab6:	4b05      	ldr	r3, [pc, #20]	; (8005acc <std+0x44>)
 8005ab8:	6224      	str	r4, [r4, #32]
 8005aba:	6323      	str	r3, [r4, #48]	; 0x30
 8005abc:	bd10      	pop	{r4, pc}
 8005abe:	bf00      	nop
 8005ac0:	08006339 	.word	0x08006339
 8005ac4:	0800635b 	.word	0x0800635b
 8005ac8:	08006393 	.word	0x08006393
 8005acc:	080063b7 	.word	0x080063b7

08005ad0 <_cleanup_r>:
 8005ad0:	4901      	ldr	r1, [pc, #4]	; (8005ad8 <_cleanup_r+0x8>)
 8005ad2:	f000 b8af 	b.w	8005c34 <_fwalk_reent>
 8005ad6:	bf00      	nop
 8005ad8:	08005a11 	.word	0x08005a11

08005adc <__sfmoreglue>:
 8005adc:	b570      	push	{r4, r5, r6, lr}
 8005ade:	2268      	movs	r2, #104	; 0x68
 8005ae0:	1e4d      	subs	r5, r1, #1
 8005ae2:	4355      	muls	r5, r2
 8005ae4:	460e      	mov	r6, r1
 8005ae6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005aea:	f7ff fd39 	bl	8005560 <_malloc_r>
 8005aee:	4604      	mov	r4, r0
 8005af0:	b140      	cbz	r0, 8005b04 <__sfmoreglue+0x28>
 8005af2:	2100      	movs	r1, #0
 8005af4:	e9c0 1600 	strd	r1, r6, [r0]
 8005af8:	300c      	adds	r0, #12
 8005afa:	60a0      	str	r0, [r4, #8]
 8005afc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b00:	f7ff fcba 	bl	8005478 <memset>
 8005b04:	4620      	mov	r0, r4
 8005b06:	bd70      	pop	{r4, r5, r6, pc}

08005b08 <__sfp_lock_acquire>:
 8005b08:	4801      	ldr	r0, [pc, #4]	; (8005b10 <__sfp_lock_acquire+0x8>)
 8005b0a:	f000 b8b3 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005b0e:	bf00      	nop
 8005b10:	200001ed 	.word	0x200001ed

08005b14 <__sfp_lock_release>:
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <__sfp_lock_release+0x8>)
 8005b16:	f000 b8ae 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005b1a:	bf00      	nop
 8005b1c:	200001ed 	.word	0x200001ed

08005b20 <__sinit_lock_acquire>:
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <__sinit_lock_acquire+0x8>)
 8005b22:	f000 b8a7 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005b26:	bf00      	nop
 8005b28:	200001ee 	.word	0x200001ee

08005b2c <__sinit_lock_release>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__sinit_lock_release+0x8>)
 8005b2e:	f000 b8a2 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005b32:	bf00      	nop
 8005b34:	200001ee 	.word	0x200001ee

08005b38 <__sinit>:
 8005b38:	b510      	push	{r4, lr}
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	f7ff fff0 	bl	8005b20 <__sinit_lock_acquire>
 8005b40:	69a3      	ldr	r3, [r4, #24]
 8005b42:	b11b      	cbz	r3, 8005b4c <__sinit+0x14>
 8005b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b48:	f7ff bff0 	b.w	8005b2c <__sinit_lock_release>
 8005b4c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b50:	6523      	str	r3, [r4, #80]	; 0x50
 8005b52:	4b13      	ldr	r3, [pc, #76]	; (8005ba0 <__sinit+0x68>)
 8005b54:	4a13      	ldr	r2, [pc, #76]	; (8005ba4 <__sinit+0x6c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b5a:	42a3      	cmp	r3, r4
 8005b5c:	bf04      	itt	eq
 8005b5e:	2301      	moveq	r3, #1
 8005b60:	61a3      	streq	r3, [r4, #24]
 8005b62:	4620      	mov	r0, r4
 8005b64:	f000 f820 	bl	8005ba8 <__sfp>
 8005b68:	6060      	str	r0, [r4, #4]
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	f000 f81c 	bl	8005ba8 <__sfp>
 8005b70:	60a0      	str	r0, [r4, #8]
 8005b72:	4620      	mov	r0, r4
 8005b74:	f000 f818 	bl	8005ba8 <__sfp>
 8005b78:	2200      	movs	r2, #0
 8005b7a:	60e0      	str	r0, [r4, #12]
 8005b7c:	2104      	movs	r1, #4
 8005b7e:	6860      	ldr	r0, [r4, #4]
 8005b80:	f7ff ff82 	bl	8005a88 <std>
 8005b84:	68a0      	ldr	r0, [r4, #8]
 8005b86:	2201      	movs	r2, #1
 8005b88:	2109      	movs	r1, #9
 8005b8a:	f7ff ff7d 	bl	8005a88 <std>
 8005b8e:	68e0      	ldr	r0, [r4, #12]
 8005b90:	2202      	movs	r2, #2
 8005b92:	2112      	movs	r1, #18
 8005b94:	f7ff ff78 	bl	8005a88 <std>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	61a3      	str	r3, [r4, #24]
 8005b9c:	e7d2      	b.n	8005b44 <__sinit+0xc>
 8005b9e:	bf00      	nop
 8005ba0:	08009f94 	.word	0x08009f94
 8005ba4:	08005ad1 	.word	0x08005ad1

08005ba8 <__sfp>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	4607      	mov	r7, r0
 8005bac:	f7ff ffac 	bl	8005b08 <__sfp_lock_acquire>
 8005bb0:	4b1e      	ldr	r3, [pc, #120]	; (8005c2c <__sfp+0x84>)
 8005bb2:	681e      	ldr	r6, [r3, #0]
 8005bb4:	69b3      	ldr	r3, [r6, #24]
 8005bb6:	b913      	cbnz	r3, 8005bbe <__sfp+0x16>
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ffbd 	bl	8005b38 <__sinit>
 8005bbe:	3648      	adds	r6, #72	; 0x48
 8005bc0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	d503      	bpl.n	8005bd0 <__sfp+0x28>
 8005bc8:	6833      	ldr	r3, [r6, #0]
 8005bca:	b30b      	cbz	r3, 8005c10 <__sfp+0x68>
 8005bcc:	6836      	ldr	r6, [r6, #0]
 8005bce:	e7f7      	b.n	8005bc0 <__sfp+0x18>
 8005bd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bd4:	b9d5      	cbnz	r5, 8005c0c <__sfp+0x64>
 8005bd6:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <__sfp+0x88>)
 8005bd8:	60e3      	str	r3, [r4, #12]
 8005bda:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005bde:	6665      	str	r5, [r4, #100]	; 0x64
 8005be0:	f000 f847 	bl	8005c72 <__retarget_lock_init_recursive>
 8005be4:	f7ff ff96 	bl	8005b14 <__sfp_lock_release>
 8005be8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005bec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005bf0:	6025      	str	r5, [r4, #0]
 8005bf2:	61a5      	str	r5, [r4, #24]
 8005bf4:	2208      	movs	r2, #8
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005bfc:	f7ff fc3c 	bl	8005478 <memset>
 8005c00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c08:	4620      	mov	r0, r4
 8005c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c0c:	3468      	adds	r4, #104	; 0x68
 8005c0e:	e7d9      	b.n	8005bc4 <__sfp+0x1c>
 8005c10:	2104      	movs	r1, #4
 8005c12:	4638      	mov	r0, r7
 8005c14:	f7ff ff62 	bl	8005adc <__sfmoreglue>
 8005c18:	4604      	mov	r4, r0
 8005c1a:	6030      	str	r0, [r6, #0]
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d1d5      	bne.n	8005bcc <__sfp+0x24>
 8005c20:	f7ff ff78 	bl	8005b14 <__sfp_lock_release>
 8005c24:	230c      	movs	r3, #12
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	e7ee      	b.n	8005c08 <__sfp+0x60>
 8005c2a:	bf00      	nop
 8005c2c:	08009f94 	.word	0x08009f94
 8005c30:	ffff0001 	.word	0xffff0001

08005c34 <_fwalk_reent>:
 8005c34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c38:	4606      	mov	r6, r0
 8005c3a:	4688      	mov	r8, r1
 8005c3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c40:	2700      	movs	r7, #0
 8005c42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c46:	f1b9 0901 	subs.w	r9, r9, #1
 8005c4a:	d505      	bpl.n	8005c58 <_fwalk_reent+0x24>
 8005c4c:	6824      	ldr	r4, [r4, #0]
 8005c4e:	2c00      	cmp	r4, #0
 8005c50:	d1f7      	bne.n	8005c42 <_fwalk_reent+0xe>
 8005c52:	4638      	mov	r0, r7
 8005c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c58:	89ab      	ldrh	r3, [r5, #12]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d907      	bls.n	8005c6e <_fwalk_reent+0x3a>
 8005c5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c62:	3301      	adds	r3, #1
 8005c64:	d003      	beq.n	8005c6e <_fwalk_reent+0x3a>
 8005c66:	4629      	mov	r1, r5
 8005c68:	4630      	mov	r0, r6
 8005c6a:	47c0      	blx	r8
 8005c6c:	4307      	orrs	r7, r0
 8005c6e:	3568      	adds	r5, #104	; 0x68
 8005c70:	e7e9      	b.n	8005c46 <_fwalk_reent+0x12>

08005c72 <__retarget_lock_init_recursive>:
 8005c72:	4770      	bx	lr

08005c74 <__retarget_lock_acquire_recursive>:
 8005c74:	4770      	bx	lr

08005c76 <__retarget_lock_release_recursive>:
 8005c76:	4770      	bx	lr

08005c78 <__swhatbuf_r>:
 8005c78:	b570      	push	{r4, r5, r6, lr}
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c80:	2900      	cmp	r1, #0
 8005c82:	b096      	sub	sp, #88	; 0x58
 8005c84:	4614      	mov	r4, r2
 8005c86:	461d      	mov	r5, r3
 8005c88:	da08      	bge.n	8005c9c <__swhatbuf_r+0x24>
 8005c8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	602a      	str	r2, [r5, #0]
 8005c92:	061a      	lsls	r2, r3, #24
 8005c94:	d410      	bmi.n	8005cb8 <__swhatbuf_r+0x40>
 8005c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9a:	e00e      	b.n	8005cba <__swhatbuf_r+0x42>
 8005c9c:	466a      	mov	r2, sp
 8005c9e:	f000 fbb1 	bl	8006404 <_fstat_r>
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	dbf1      	blt.n	8005c8a <__swhatbuf_r+0x12>
 8005ca6:	9a01      	ldr	r2, [sp, #4]
 8005ca8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cb0:	425a      	negs	r2, r3
 8005cb2:	415a      	adcs	r2, r3
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	e7ee      	b.n	8005c96 <__swhatbuf_r+0x1e>
 8005cb8:	2340      	movs	r3, #64	; 0x40
 8005cba:	2000      	movs	r0, #0
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	b016      	add	sp, #88	; 0x58
 8005cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08005cc4 <__smakebuf_r>:
 8005cc4:	898b      	ldrh	r3, [r1, #12]
 8005cc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cc8:	079d      	lsls	r5, r3, #30
 8005cca:	4606      	mov	r6, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	d507      	bpl.n	8005ce0 <__smakebuf_r+0x1c>
 8005cd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	6123      	str	r3, [r4, #16]
 8005cd8:	2301      	movs	r3, #1
 8005cda:	6163      	str	r3, [r4, #20]
 8005cdc:	b002      	add	sp, #8
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	ab01      	add	r3, sp, #4
 8005ce2:	466a      	mov	r2, sp
 8005ce4:	f7ff ffc8 	bl	8005c78 <__swhatbuf_r>
 8005ce8:	9900      	ldr	r1, [sp, #0]
 8005cea:	4605      	mov	r5, r0
 8005cec:	4630      	mov	r0, r6
 8005cee:	f7ff fc37 	bl	8005560 <_malloc_r>
 8005cf2:	b948      	cbnz	r0, 8005d08 <__smakebuf_r+0x44>
 8005cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf8:	059a      	lsls	r2, r3, #22
 8005cfa:	d4ef      	bmi.n	8005cdc <__smakebuf_r+0x18>
 8005cfc:	f023 0303 	bic.w	r3, r3, #3
 8005d00:	f043 0302 	orr.w	r3, r3, #2
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	e7e3      	b.n	8005cd0 <__smakebuf_r+0xc>
 8005d08:	4b0d      	ldr	r3, [pc, #52]	; (8005d40 <__smakebuf_r+0x7c>)
 8005d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	6020      	str	r0, [r4, #0]
 8005d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d14:	81a3      	strh	r3, [r4, #12]
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	6163      	str	r3, [r4, #20]
 8005d1a:	9b01      	ldr	r3, [sp, #4]
 8005d1c:	6120      	str	r0, [r4, #16]
 8005d1e:	b15b      	cbz	r3, 8005d38 <__smakebuf_r+0x74>
 8005d20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d24:	4630      	mov	r0, r6
 8005d26:	f000 fb7f 	bl	8006428 <_isatty_r>
 8005d2a:	b128      	cbz	r0, 8005d38 <__smakebuf_r+0x74>
 8005d2c:	89a3      	ldrh	r3, [r4, #12]
 8005d2e:	f023 0303 	bic.w	r3, r3, #3
 8005d32:	f043 0301 	orr.w	r3, r3, #1
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	89a0      	ldrh	r0, [r4, #12]
 8005d3a:	4305      	orrs	r5, r0
 8005d3c:	81a5      	strh	r5, [r4, #12]
 8005d3e:	e7cd      	b.n	8005cdc <__smakebuf_r+0x18>
 8005d40:	08005ad1 	.word	0x08005ad1

08005d44 <__malloc_lock>:
 8005d44:	4801      	ldr	r0, [pc, #4]	; (8005d4c <__malloc_lock+0x8>)
 8005d46:	f7ff bf95 	b.w	8005c74 <__retarget_lock_acquire_recursive>
 8005d4a:	bf00      	nop
 8005d4c:	200001ec 	.word	0x200001ec

08005d50 <__malloc_unlock>:
 8005d50:	4801      	ldr	r0, [pc, #4]	; (8005d58 <__malloc_unlock+0x8>)
 8005d52:	f7ff bf90 	b.w	8005c76 <__retarget_lock_release_recursive>
 8005d56:	bf00      	nop
 8005d58:	200001ec 	.word	0x200001ec

08005d5c <__sfputc_r>:
 8005d5c:	6893      	ldr	r3, [r2, #8]
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	b410      	push	{r4}
 8005d64:	6093      	str	r3, [r2, #8]
 8005d66:	da08      	bge.n	8005d7a <__sfputc_r+0x1e>
 8005d68:	6994      	ldr	r4, [r2, #24]
 8005d6a:	42a3      	cmp	r3, r4
 8005d6c:	db01      	blt.n	8005d72 <__sfputc_r+0x16>
 8005d6e:	290a      	cmp	r1, #10
 8005d70:	d103      	bne.n	8005d7a <__sfputc_r+0x1e>
 8005d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d76:	f7ff bd05 	b.w	8005784 <__swbuf_r>
 8005d7a:	6813      	ldr	r3, [r2, #0]
 8005d7c:	1c58      	adds	r0, r3, #1
 8005d7e:	6010      	str	r0, [r2, #0]
 8005d80:	7019      	strb	r1, [r3, #0]
 8005d82:	4608      	mov	r0, r1
 8005d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <__sfputs_r>:
 8005d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	460f      	mov	r7, r1
 8005d90:	4614      	mov	r4, r2
 8005d92:	18d5      	adds	r5, r2, r3
 8005d94:	42ac      	cmp	r4, r5
 8005d96:	d101      	bne.n	8005d9c <__sfputs_r+0x12>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e007      	b.n	8005dac <__sfputs_r+0x22>
 8005d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005da0:	463a      	mov	r2, r7
 8005da2:	4630      	mov	r0, r6
 8005da4:	f7ff ffda 	bl	8005d5c <__sfputc_r>
 8005da8:	1c43      	adds	r3, r0, #1
 8005daa:	d1f3      	bne.n	8005d94 <__sfputs_r+0xa>
 8005dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005db0 <_vfiprintf_r>:
 8005db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db4:	460d      	mov	r5, r1
 8005db6:	b09d      	sub	sp, #116	; 0x74
 8005db8:	4614      	mov	r4, r2
 8005dba:	4698      	mov	r8, r3
 8005dbc:	4606      	mov	r6, r0
 8005dbe:	b118      	cbz	r0, 8005dc8 <_vfiprintf_r+0x18>
 8005dc0:	6983      	ldr	r3, [r0, #24]
 8005dc2:	b90b      	cbnz	r3, 8005dc8 <_vfiprintf_r+0x18>
 8005dc4:	f7ff feb8 	bl	8005b38 <__sinit>
 8005dc8:	4b89      	ldr	r3, [pc, #548]	; (8005ff0 <_vfiprintf_r+0x240>)
 8005dca:	429d      	cmp	r5, r3
 8005dcc:	d11b      	bne.n	8005e06 <_vfiprintf_r+0x56>
 8005dce:	6875      	ldr	r5, [r6, #4]
 8005dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005dd2:	07d9      	lsls	r1, r3, #31
 8005dd4:	d405      	bmi.n	8005de2 <_vfiprintf_r+0x32>
 8005dd6:	89ab      	ldrh	r3, [r5, #12]
 8005dd8:	059a      	lsls	r2, r3, #22
 8005dda:	d402      	bmi.n	8005de2 <_vfiprintf_r+0x32>
 8005ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005dde:	f7ff ff49 	bl	8005c74 <__retarget_lock_acquire_recursive>
 8005de2:	89ab      	ldrh	r3, [r5, #12]
 8005de4:	071b      	lsls	r3, r3, #28
 8005de6:	d501      	bpl.n	8005dec <_vfiprintf_r+0x3c>
 8005de8:	692b      	ldr	r3, [r5, #16]
 8005dea:	b9eb      	cbnz	r3, 8005e28 <_vfiprintf_r+0x78>
 8005dec:	4629      	mov	r1, r5
 8005dee:	4630      	mov	r0, r6
 8005df0:	f7ff fd1a 	bl	8005828 <__swsetup_r>
 8005df4:	b1c0      	cbz	r0, 8005e28 <_vfiprintf_r+0x78>
 8005df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005df8:	07dc      	lsls	r4, r3, #31
 8005dfa:	d50e      	bpl.n	8005e1a <_vfiprintf_r+0x6a>
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e00:	b01d      	add	sp, #116	; 0x74
 8005e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e06:	4b7b      	ldr	r3, [pc, #492]	; (8005ff4 <_vfiprintf_r+0x244>)
 8005e08:	429d      	cmp	r5, r3
 8005e0a:	d101      	bne.n	8005e10 <_vfiprintf_r+0x60>
 8005e0c:	68b5      	ldr	r5, [r6, #8]
 8005e0e:	e7df      	b.n	8005dd0 <_vfiprintf_r+0x20>
 8005e10:	4b79      	ldr	r3, [pc, #484]	; (8005ff8 <_vfiprintf_r+0x248>)
 8005e12:	429d      	cmp	r5, r3
 8005e14:	bf08      	it	eq
 8005e16:	68f5      	ldreq	r5, [r6, #12]
 8005e18:	e7da      	b.n	8005dd0 <_vfiprintf_r+0x20>
 8005e1a:	89ab      	ldrh	r3, [r5, #12]
 8005e1c:	0598      	lsls	r0, r3, #22
 8005e1e:	d4ed      	bmi.n	8005dfc <_vfiprintf_r+0x4c>
 8005e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e22:	f7ff ff28 	bl	8005c76 <__retarget_lock_release_recursive>
 8005e26:	e7e9      	b.n	8005dfc <_vfiprintf_r+0x4c>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e2c:	2320      	movs	r3, #32
 8005e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e36:	2330      	movs	r3, #48	; 0x30
 8005e38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005ffc <_vfiprintf_r+0x24c>
 8005e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e40:	f04f 0901 	mov.w	r9, #1
 8005e44:	4623      	mov	r3, r4
 8005e46:	469a      	mov	sl, r3
 8005e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e4c:	b10a      	cbz	r2, 8005e52 <_vfiprintf_r+0xa2>
 8005e4e:	2a25      	cmp	r2, #37	; 0x25
 8005e50:	d1f9      	bne.n	8005e46 <_vfiprintf_r+0x96>
 8005e52:	ebba 0b04 	subs.w	fp, sl, r4
 8005e56:	d00b      	beq.n	8005e70 <_vfiprintf_r+0xc0>
 8005e58:	465b      	mov	r3, fp
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7ff ff93 	bl	8005d8a <__sfputs_r>
 8005e64:	3001      	adds	r0, #1
 8005e66:	f000 80aa 	beq.w	8005fbe <_vfiprintf_r+0x20e>
 8005e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e6c:	445a      	add	r2, fp
 8005e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8005e70:	f89a 3000 	ldrb.w	r3, [sl]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a2 	beq.w	8005fbe <_vfiprintf_r+0x20e>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e84:	f10a 0a01 	add.w	sl, sl, #1
 8005e88:	9304      	str	r3, [sp, #16]
 8005e8a:	9307      	str	r3, [sp, #28]
 8005e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e90:	931a      	str	r3, [sp, #104]	; 0x68
 8005e92:	4654      	mov	r4, sl
 8005e94:	2205      	movs	r2, #5
 8005e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9a:	4858      	ldr	r0, [pc, #352]	; (8005ffc <_vfiprintf_r+0x24c>)
 8005e9c:	f7fa f970 	bl	8000180 <memchr>
 8005ea0:	9a04      	ldr	r2, [sp, #16]
 8005ea2:	b9d8      	cbnz	r0, 8005edc <_vfiprintf_r+0x12c>
 8005ea4:	06d1      	lsls	r1, r2, #27
 8005ea6:	bf44      	itt	mi
 8005ea8:	2320      	movmi	r3, #32
 8005eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eae:	0713      	lsls	r3, r2, #28
 8005eb0:	bf44      	itt	mi
 8005eb2:	232b      	movmi	r3, #43	; 0x2b
 8005eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ebe:	d015      	beq.n	8005eec <_vfiprintf_r+0x13c>
 8005ec0:	9a07      	ldr	r2, [sp, #28]
 8005ec2:	4654      	mov	r4, sl
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f04f 0c0a 	mov.w	ip, #10
 8005eca:	4621      	mov	r1, r4
 8005ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ed0:	3b30      	subs	r3, #48	; 0x30
 8005ed2:	2b09      	cmp	r3, #9
 8005ed4:	d94e      	bls.n	8005f74 <_vfiprintf_r+0x1c4>
 8005ed6:	b1b0      	cbz	r0, 8005f06 <_vfiprintf_r+0x156>
 8005ed8:	9207      	str	r2, [sp, #28]
 8005eda:	e014      	b.n	8005f06 <_vfiprintf_r+0x156>
 8005edc:	eba0 0308 	sub.w	r3, r0, r8
 8005ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	9304      	str	r3, [sp, #16]
 8005ee8:	46a2      	mov	sl, r4
 8005eea:	e7d2      	b.n	8005e92 <_vfiprintf_r+0xe2>
 8005eec:	9b03      	ldr	r3, [sp, #12]
 8005eee:	1d19      	adds	r1, r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	9103      	str	r1, [sp, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bfbb      	ittet	lt
 8005ef8:	425b      	neglt	r3, r3
 8005efa:	f042 0202 	orrlt.w	r2, r2, #2
 8005efe:	9307      	strge	r3, [sp, #28]
 8005f00:	9307      	strlt	r3, [sp, #28]
 8005f02:	bfb8      	it	lt
 8005f04:	9204      	strlt	r2, [sp, #16]
 8005f06:	7823      	ldrb	r3, [r4, #0]
 8005f08:	2b2e      	cmp	r3, #46	; 0x2e
 8005f0a:	d10c      	bne.n	8005f26 <_vfiprintf_r+0x176>
 8005f0c:	7863      	ldrb	r3, [r4, #1]
 8005f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8005f10:	d135      	bne.n	8005f7e <_vfiprintf_r+0x1ce>
 8005f12:	9b03      	ldr	r3, [sp, #12]
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	9203      	str	r2, [sp, #12]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	bfb8      	it	lt
 8005f1e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005f22:	3402      	adds	r4, #2
 8005f24:	9305      	str	r3, [sp, #20]
 8005f26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800600c <_vfiprintf_r+0x25c>
 8005f2a:	7821      	ldrb	r1, [r4, #0]
 8005f2c:	2203      	movs	r2, #3
 8005f2e:	4650      	mov	r0, sl
 8005f30:	f7fa f926 	bl	8000180 <memchr>
 8005f34:	b140      	cbz	r0, 8005f48 <_vfiprintf_r+0x198>
 8005f36:	2340      	movs	r3, #64	; 0x40
 8005f38:	eba0 000a 	sub.w	r0, r0, sl
 8005f3c:	fa03 f000 	lsl.w	r0, r3, r0
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	4303      	orrs	r3, r0
 8005f44:	3401      	adds	r4, #1
 8005f46:	9304      	str	r3, [sp, #16]
 8005f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4c:	482c      	ldr	r0, [pc, #176]	; (8006000 <_vfiprintf_r+0x250>)
 8005f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f52:	2206      	movs	r2, #6
 8005f54:	f7fa f914 	bl	8000180 <memchr>
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d03f      	beq.n	8005fdc <_vfiprintf_r+0x22c>
 8005f5c:	4b29      	ldr	r3, [pc, #164]	; (8006004 <_vfiprintf_r+0x254>)
 8005f5e:	bb1b      	cbnz	r3, 8005fa8 <_vfiprintf_r+0x1f8>
 8005f60:	9b03      	ldr	r3, [sp, #12]
 8005f62:	3307      	adds	r3, #7
 8005f64:	f023 0307 	bic.w	r3, r3, #7
 8005f68:	3308      	adds	r3, #8
 8005f6a:	9303      	str	r3, [sp, #12]
 8005f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f6e:	443b      	add	r3, r7
 8005f70:	9309      	str	r3, [sp, #36]	; 0x24
 8005f72:	e767      	b.n	8005e44 <_vfiprintf_r+0x94>
 8005f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f78:	460c      	mov	r4, r1
 8005f7a:	2001      	movs	r0, #1
 8005f7c:	e7a5      	b.n	8005eca <_vfiprintf_r+0x11a>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	3401      	adds	r4, #1
 8005f82:	9305      	str	r3, [sp, #20]
 8005f84:	4619      	mov	r1, r3
 8005f86:	f04f 0c0a 	mov.w	ip, #10
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f90:	3a30      	subs	r2, #48	; 0x30
 8005f92:	2a09      	cmp	r2, #9
 8005f94:	d903      	bls.n	8005f9e <_vfiprintf_r+0x1ee>
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d0c5      	beq.n	8005f26 <_vfiprintf_r+0x176>
 8005f9a:	9105      	str	r1, [sp, #20]
 8005f9c:	e7c3      	b.n	8005f26 <_vfiprintf_r+0x176>
 8005f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e7f0      	b.n	8005f8a <_vfiprintf_r+0x1da>
 8005fa8:	ab03      	add	r3, sp, #12
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	462a      	mov	r2, r5
 8005fae:	4b16      	ldr	r3, [pc, #88]	; (8006008 <_vfiprintf_r+0x258>)
 8005fb0:	a904      	add	r1, sp, #16
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	f3af 8000 	nop.w
 8005fb8:	4607      	mov	r7, r0
 8005fba:	1c78      	adds	r0, r7, #1
 8005fbc:	d1d6      	bne.n	8005f6c <_vfiprintf_r+0x1bc>
 8005fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005fc0:	07d9      	lsls	r1, r3, #31
 8005fc2:	d405      	bmi.n	8005fd0 <_vfiprintf_r+0x220>
 8005fc4:	89ab      	ldrh	r3, [r5, #12]
 8005fc6:	059a      	lsls	r2, r3, #22
 8005fc8:	d402      	bmi.n	8005fd0 <_vfiprintf_r+0x220>
 8005fca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005fcc:	f7ff fe53 	bl	8005c76 <__retarget_lock_release_recursive>
 8005fd0:	89ab      	ldrh	r3, [r5, #12]
 8005fd2:	065b      	lsls	r3, r3, #25
 8005fd4:	f53f af12 	bmi.w	8005dfc <_vfiprintf_r+0x4c>
 8005fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005fda:	e711      	b.n	8005e00 <_vfiprintf_r+0x50>
 8005fdc:	ab03      	add	r3, sp, #12
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4b09      	ldr	r3, [pc, #36]	; (8006008 <_vfiprintf_r+0x258>)
 8005fe4:	a904      	add	r1, sp, #16
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	f000 f880 	bl	80060ec <_printf_i>
 8005fec:	e7e4      	b.n	8005fb8 <_vfiprintf_r+0x208>
 8005fee:	bf00      	nop
 8005ff0:	08009fb8 	.word	0x08009fb8
 8005ff4:	08009fd8 	.word	0x08009fd8
 8005ff8:	08009f98 	.word	0x08009f98
 8005ffc:	08009ff8 	.word	0x08009ff8
 8006000:	0800a002 	.word	0x0800a002
 8006004:	00000000 	.word	0x00000000
 8006008:	08005d8b 	.word	0x08005d8b
 800600c:	08009ffe 	.word	0x08009ffe

08006010 <_printf_common>:
 8006010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	4616      	mov	r6, r2
 8006016:	4699      	mov	r9, r3
 8006018:	688a      	ldr	r2, [r1, #8]
 800601a:	690b      	ldr	r3, [r1, #16]
 800601c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006020:	4293      	cmp	r3, r2
 8006022:	bfb8      	it	lt
 8006024:	4613      	movlt	r3, r2
 8006026:	6033      	str	r3, [r6, #0]
 8006028:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800602c:	4607      	mov	r7, r0
 800602e:	460c      	mov	r4, r1
 8006030:	b10a      	cbz	r2, 8006036 <_printf_common+0x26>
 8006032:	3301      	adds	r3, #1
 8006034:	6033      	str	r3, [r6, #0]
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	0699      	lsls	r1, r3, #26
 800603a:	bf42      	ittt	mi
 800603c:	6833      	ldrmi	r3, [r6, #0]
 800603e:	3302      	addmi	r3, #2
 8006040:	6033      	strmi	r3, [r6, #0]
 8006042:	6825      	ldr	r5, [r4, #0]
 8006044:	f015 0506 	ands.w	r5, r5, #6
 8006048:	d106      	bne.n	8006058 <_printf_common+0x48>
 800604a:	f104 0a19 	add.w	sl, r4, #25
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	6832      	ldr	r2, [r6, #0]
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	42ab      	cmp	r3, r5
 8006056:	dc26      	bgt.n	80060a6 <_printf_common+0x96>
 8006058:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800605c:	1e13      	subs	r3, r2, #0
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	bf18      	it	ne
 8006062:	2301      	movne	r3, #1
 8006064:	0692      	lsls	r2, r2, #26
 8006066:	d42b      	bmi.n	80060c0 <_printf_common+0xb0>
 8006068:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800606c:	4649      	mov	r1, r9
 800606e:	4638      	mov	r0, r7
 8006070:	47c0      	blx	r8
 8006072:	3001      	adds	r0, #1
 8006074:	d01e      	beq.n	80060b4 <_printf_common+0xa4>
 8006076:	6823      	ldr	r3, [r4, #0]
 8006078:	68e5      	ldr	r5, [r4, #12]
 800607a:	6832      	ldr	r2, [r6, #0]
 800607c:	f003 0306 	and.w	r3, r3, #6
 8006080:	2b04      	cmp	r3, #4
 8006082:	bf08      	it	eq
 8006084:	1aad      	subeq	r5, r5, r2
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	bf0c      	ite	eq
 800608c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006090:	2500      	movne	r5, #0
 8006092:	4293      	cmp	r3, r2
 8006094:	bfc4      	itt	gt
 8006096:	1a9b      	subgt	r3, r3, r2
 8006098:	18ed      	addgt	r5, r5, r3
 800609a:	2600      	movs	r6, #0
 800609c:	341a      	adds	r4, #26
 800609e:	42b5      	cmp	r5, r6
 80060a0:	d11a      	bne.n	80060d8 <_printf_common+0xc8>
 80060a2:	2000      	movs	r0, #0
 80060a4:	e008      	b.n	80060b8 <_printf_common+0xa8>
 80060a6:	2301      	movs	r3, #1
 80060a8:	4652      	mov	r2, sl
 80060aa:	4649      	mov	r1, r9
 80060ac:	4638      	mov	r0, r7
 80060ae:	47c0      	blx	r8
 80060b0:	3001      	adds	r0, #1
 80060b2:	d103      	bne.n	80060bc <_printf_common+0xac>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060bc:	3501      	adds	r5, #1
 80060be:	e7c6      	b.n	800604e <_printf_common+0x3e>
 80060c0:	18e1      	adds	r1, r4, r3
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	2030      	movs	r0, #48	; 0x30
 80060c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060ca:	4422      	add	r2, r4
 80060cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060d4:	3302      	adds	r3, #2
 80060d6:	e7c7      	b.n	8006068 <_printf_common+0x58>
 80060d8:	2301      	movs	r3, #1
 80060da:	4622      	mov	r2, r4
 80060dc:	4649      	mov	r1, r9
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	3001      	adds	r0, #1
 80060e4:	d0e6      	beq.n	80060b4 <_printf_common+0xa4>
 80060e6:	3601      	adds	r6, #1
 80060e8:	e7d9      	b.n	800609e <_printf_common+0x8e>
	...

080060ec <_printf_i>:
 80060ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060f0:	7e0f      	ldrb	r7, [r1, #24]
 80060f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060f4:	2f78      	cmp	r7, #120	; 0x78
 80060f6:	4691      	mov	r9, r2
 80060f8:	4680      	mov	r8, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	469a      	mov	sl, r3
 80060fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006102:	d807      	bhi.n	8006114 <_printf_i+0x28>
 8006104:	2f62      	cmp	r7, #98	; 0x62
 8006106:	d80a      	bhi.n	800611e <_printf_i+0x32>
 8006108:	2f00      	cmp	r7, #0
 800610a:	f000 80d8 	beq.w	80062be <_printf_i+0x1d2>
 800610e:	2f58      	cmp	r7, #88	; 0x58
 8006110:	f000 80a3 	beq.w	800625a <_printf_i+0x16e>
 8006114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006118:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800611c:	e03a      	b.n	8006194 <_printf_i+0xa8>
 800611e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006122:	2b15      	cmp	r3, #21
 8006124:	d8f6      	bhi.n	8006114 <_printf_i+0x28>
 8006126:	a101      	add	r1, pc, #4	; (adr r1, 800612c <_printf_i+0x40>)
 8006128:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800612c:	08006185 	.word	0x08006185
 8006130:	08006199 	.word	0x08006199
 8006134:	08006115 	.word	0x08006115
 8006138:	08006115 	.word	0x08006115
 800613c:	08006115 	.word	0x08006115
 8006140:	08006115 	.word	0x08006115
 8006144:	08006199 	.word	0x08006199
 8006148:	08006115 	.word	0x08006115
 800614c:	08006115 	.word	0x08006115
 8006150:	08006115 	.word	0x08006115
 8006154:	08006115 	.word	0x08006115
 8006158:	080062a5 	.word	0x080062a5
 800615c:	080061c9 	.word	0x080061c9
 8006160:	08006287 	.word	0x08006287
 8006164:	08006115 	.word	0x08006115
 8006168:	08006115 	.word	0x08006115
 800616c:	080062c7 	.word	0x080062c7
 8006170:	08006115 	.word	0x08006115
 8006174:	080061c9 	.word	0x080061c9
 8006178:	08006115 	.word	0x08006115
 800617c:	08006115 	.word	0x08006115
 8006180:	0800628f 	.word	0x0800628f
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	1d1a      	adds	r2, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	602a      	str	r2, [r5, #0]
 800618c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006194:	2301      	movs	r3, #1
 8006196:	e0a3      	b.n	80062e0 <_printf_i+0x1f4>
 8006198:	6820      	ldr	r0, [r4, #0]
 800619a:	6829      	ldr	r1, [r5, #0]
 800619c:	0606      	lsls	r6, r0, #24
 800619e:	f101 0304 	add.w	r3, r1, #4
 80061a2:	d50a      	bpl.n	80061ba <_printf_i+0xce>
 80061a4:	680e      	ldr	r6, [r1, #0]
 80061a6:	602b      	str	r3, [r5, #0]
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	da03      	bge.n	80061b4 <_printf_i+0xc8>
 80061ac:	232d      	movs	r3, #45	; 0x2d
 80061ae:	4276      	negs	r6, r6
 80061b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b4:	485e      	ldr	r0, [pc, #376]	; (8006330 <_printf_i+0x244>)
 80061b6:	230a      	movs	r3, #10
 80061b8:	e019      	b.n	80061ee <_printf_i+0x102>
 80061ba:	680e      	ldr	r6, [r1, #0]
 80061bc:	602b      	str	r3, [r5, #0]
 80061be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80061c2:	bf18      	it	ne
 80061c4:	b236      	sxthne	r6, r6
 80061c6:	e7ef      	b.n	80061a8 <_printf_i+0xbc>
 80061c8:	682b      	ldr	r3, [r5, #0]
 80061ca:	6820      	ldr	r0, [r4, #0]
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	6029      	str	r1, [r5, #0]
 80061d0:	0601      	lsls	r1, r0, #24
 80061d2:	d501      	bpl.n	80061d8 <_printf_i+0xec>
 80061d4:	681e      	ldr	r6, [r3, #0]
 80061d6:	e002      	b.n	80061de <_printf_i+0xf2>
 80061d8:	0646      	lsls	r6, r0, #25
 80061da:	d5fb      	bpl.n	80061d4 <_printf_i+0xe8>
 80061dc:	881e      	ldrh	r6, [r3, #0]
 80061de:	4854      	ldr	r0, [pc, #336]	; (8006330 <_printf_i+0x244>)
 80061e0:	2f6f      	cmp	r7, #111	; 0x6f
 80061e2:	bf0c      	ite	eq
 80061e4:	2308      	moveq	r3, #8
 80061e6:	230a      	movne	r3, #10
 80061e8:	2100      	movs	r1, #0
 80061ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061ee:	6865      	ldr	r5, [r4, #4]
 80061f0:	60a5      	str	r5, [r4, #8]
 80061f2:	2d00      	cmp	r5, #0
 80061f4:	bfa2      	ittt	ge
 80061f6:	6821      	ldrge	r1, [r4, #0]
 80061f8:	f021 0104 	bicge.w	r1, r1, #4
 80061fc:	6021      	strge	r1, [r4, #0]
 80061fe:	b90e      	cbnz	r6, 8006204 <_printf_i+0x118>
 8006200:	2d00      	cmp	r5, #0
 8006202:	d04d      	beq.n	80062a0 <_printf_i+0x1b4>
 8006204:	4615      	mov	r5, r2
 8006206:	fbb6 f1f3 	udiv	r1, r6, r3
 800620a:	fb03 6711 	mls	r7, r3, r1, r6
 800620e:	5dc7      	ldrb	r7, [r0, r7]
 8006210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006214:	4637      	mov	r7, r6
 8006216:	42bb      	cmp	r3, r7
 8006218:	460e      	mov	r6, r1
 800621a:	d9f4      	bls.n	8006206 <_printf_i+0x11a>
 800621c:	2b08      	cmp	r3, #8
 800621e:	d10b      	bne.n	8006238 <_printf_i+0x14c>
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	07de      	lsls	r6, r3, #31
 8006224:	d508      	bpl.n	8006238 <_printf_i+0x14c>
 8006226:	6923      	ldr	r3, [r4, #16]
 8006228:	6861      	ldr	r1, [r4, #4]
 800622a:	4299      	cmp	r1, r3
 800622c:	bfde      	ittt	le
 800622e:	2330      	movle	r3, #48	; 0x30
 8006230:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006234:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006238:	1b52      	subs	r2, r2, r5
 800623a:	6122      	str	r2, [r4, #16]
 800623c:	f8cd a000 	str.w	sl, [sp]
 8006240:	464b      	mov	r3, r9
 8006242:	aa03      	add	r2, sp, #12
 8006244:	4621      	mov	r1, r4
 8006246:	4640      	mov	r0, r8
 8006248:	f7ff fee2 	bl	8006010 <_printf_common>
 800624c:	3001      	adds	r0, #1
 800624e:	d14c      	bne.n	80062ea <_printf_i+0x1fe>
 8006250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006254:	b004      	add	sp, #16
 8006256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800625a:	4835      	ldr	r0, [pc, #212]	; (8006330 <_printf_i+0x244>)
 800625c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006260:	6829      	ldr	r1, [r5, #0]
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	f851 6b04 	ldr.w	r6, [r1], #4
 8006268:	6029      	str	r1, [r5, #0]
 800626a:	061d      	lsls	r5, r3, #24
 800626c:	d514      	bpl.n	8006298 <_printf_i+0x1ac>
 800626e:	07df      	lsls	r7, r3, #31
 8006270:	bf44      	itt	mi
 8006272:	f043 0320 	orrmi.w	r3, r3, #32
 8006276:	6023      	strmi	r3, [r4, #0]
 8006278:	b91e      	cbnz	r6, 8006282 <_printf_i+0x196>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	f023 0320 	bic.w	r3, r3, #32
 8006280:	6023      	str	r3, [r4, #0]
 8006282:	2310      	movs	r3, #16
 8006284:	e7b0      	b.n	80061e8 <_printf_i+0xfc>
 8006286:	6823      	ldr	r3, [r4, #0]
 8006288:	f043 0320 	orr.w	r3, r3, #32
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	2378      	movs	r3, #120	; 0x78
 8006290:	4828      	ldr	r0, [pc, #160]	; (8006334 <_printf_i+0x248>)
 8006292:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006296:	e7e3      	b.n	8006260 <_printf_i+0x174>
 8006298:	0659      	lsls	r1, r3, #25
 800629a:	bf48      	it	mi
 800629c:	b2b6      	uxthmi	r6, r6
 800629e:	e7e6      	b.n	800626e <_printf_i+0x182>
 80062a0:	4615      	mov	r5, r2
 80062a2:	e7bb      	b.n	800621c <_printf_i+0x130>
 80062a4:	682b      	ldr	r3, [r5, #0]
 80062a6:	6826      	ldr	r6, [r4, #0]
 80062a8:	6961      	ldr	r1, [r4, #20]
 80062aa:	1d18      	adds	r0, r3, #4
 80062ac:	6028      	str	r0, [r5, #0]
 80062ae:	0635      	lsls	r5, r6, #24
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	d501      	bpl.n	80062b8 <_printf_i+0x1cc>
 80062b4:	6019      	str	r1, [r3, #0]
 80062b6:	e002      	b.n	80062be <_printf_i+0x1d2>
 80062b8:	0670      	lsls	r0, r6, #25
 80062ba:	d5fb      	bpl.n	80062b4 <_printf_i+0x1c8>
 80062bc:	8019      	strh	r1, [r3, #0]
 80062be:	2300      	movs	r3, #0
 80062c0:	6123      	str	r3, [r4, #16]
 80062c2:	4615      	mov	r5, r2
 80062c4:	e7ba      	b.n	800623c <_printf_i+0x150>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	1d1a      	adds	r2, r3, #4
 80062ca:	602a      	str	r2, [r5, #0]
 80062cc:	681d      	ldr	r5, [r3, #0]
 80062ce:	6862      	ldr	r2, [r4, #4]
 80062d0:	2100      	movs	r1, #0
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7f9 ff54 	bl	8000180 <memchr>
 80062d8:	b108      	cbz	r0, 80062de <_printf_i+0x1f2>
 80062da:	1b40      	subs	r0, r0, r5
 80062dc:	6060      	str	r0, [r4, #4]
 80062de:	6863      	ldr	r3, [r4, #4]
 80062e0:	6123      	str	r3, [r4, #16]
 80062e2:	2300      	movs	r3, #0
 80062e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062e8:	e7a8      	b.n	800623c <_printf_i+0x150>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	462a      	mov	r2, r5
 80062ee:	4649      	mov	r1, r9
 80062f0:	4640      	mov	r0, r8
 80062f2:	47d0      	blx	sl
 80062f4:	3001      	adds	r0, #1
 80062f6:	d0ab      	beq.n	8006250 <_printf_i+0x164>
 80062f8:	6823      	ldr	r3, [r4, #0]
 80062fa:	079b      	lsls	r3, r3, #30
 80062fc:	d413      	bmi.n	8006326 <_printf_i+0x23a>
 80062fe:	68e0      	ldr	r0, [r4, #12]
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	4298      	cmp	r0, r3
 8006304:	bfb8      	it	lt
 8006306:	4618      	movlt	r0, r3
 8006308:	e7a4      	b.n	8006254 <_printf_i+0x168>
 800630a:	2301      	movs	r3, #1
 800630c:	4632      	mov	r2, r6
 800630e:	4649      	mov	r1, r9
 8006310:	4640      	mov	r0, r8
 8006312:	47d0      	blx	sl
 8006314:	3001      	adds	r0, #1
 8006316:	d09b      	beq.n	8006250 <_printf_i+0x164>
 8006318:	3501      	adds	r5, #1
 800631a:	68e3      	ldr	r3, [r4, #12]
 800631c:	9903      	ldr	r1, [sp, #12]
 800631e:	1a5b      	subs	r3, r3, r1
 8006320:	42ab      	cmp	r3, r5
 8006322:	dcf2      	bgt.n	800630a <_printf_i+0x21e>
 8006324:	e7eb      	b.n	80062fe <_printf_i+0x212>
 8006326:	2500      	movs	r5, #0
 8006328:	f104 0619 	add.w	r6, r4, #25
 800632c:	e7f5      	b.n	800631a <_printf_i+0x22e>
 800632e:	bf00      	nop
 8006330:	0800a009 	.word	0x0800a009
 8006334:	0800a01a 	.word	0x0800a01a

08006338 <__sread>:
 8006338:	b510      	push	{r4, lr}
 800633a:	460c      	mov	r4, r1
 800633c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006340:	f000 f894 	bl	800646c <_read_r>
 8006344:	2800      	cmp	r0, #0
 8006346:	bfab      	itete	ge
 8006348:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800634a:	89a3      	ldrhlt	r3, [r4, #12]
 800634c:	181b      	addge	r3, r3, r0
 800634e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006352:	bfac      	ite	ge
 8006354:	6563      	strge	r3, [r4, #84]	; 0x54
 8006356:	81a3      	strhlt	r3, [r4, #12]
 8006358:	bd10      	pop	{r4, pc}

0800635a <__swrite>:
 800635a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635e:	461f      	mov	r7, r3
 8006360:	898b      	ldrh	r3, [r1, #12]
 8006362:	05db      	lsls	r3, r3, #23
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	4616      	mov	r6, r2
 800636a:	d505      	bpl.n	8006378 <__swrite+0x1e>
 800636c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006370:	2302      	movs	r3, #2
 8006372:	2200      	movs	r2, #0
 8006374:	f000 f868 	bl	8006448 <_lseek_r>
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800637e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	4632      	mov	r2, r6
 8006386:	463b      	mov	r3, r7
 8006388:	4628      	mov	r0, r5
 800638a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800638e:	f000 b817 	b.w	80063c0 <_write_r>

08006392 <__sseek>:
 8006392:	b510      	push	{r4, lr}
 8006394:	460c      	mov	r4, r1
 8006396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800639a:	f000 f855 	bl	8006448 <_lseek_r>
 800639e:	1c43      	adds	r3, r0, #1
 80063a0:	89a3      	ldrh	r3, [r4, #12]
 80063a2:	bf15      	itete	ne
 80063a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80063a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80063aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80063ae:	81a3      	strheq	r3, [r4, #12]
 80063b0:	bf18      	it	ne
 80063b2:	81a3      	strhne	r3, [r4, #12]
 80063b4:	bd10      	pop	{r4, pc}

080063b6 <__sclose>:
 80063b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063ba:	f000 b813 	b.w	80063e4 <_close_r>
	...

080063c0 <_write_r>:
 80063c0:	b538      	push	{r3, r4, r5, lr}
 80063c2:	4d07      	ldr	r5, [pc, #28]	; (80063e0 <_write_r+0x20>)
 80063c4:	4604      	mov	r4, r0
 80063c6:	4608      	mov	r0, r1
 80063c8:	4611      	mov	r1, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	602a      	str	r2, [r5, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	f7fb fca8 	bl	8001d24 <_write>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d102      	bne.n	80063de <_write_r+0x1e>
 80063d8:	682b      	ldr	r3, [r5, #0]
 80063da:	b103      	cbz	r3, 80063de <_write_r+0x1e>
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	200001f0 	.word	0x200001f0

080063e4 <_close_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_close_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fb fcb4 	bl	8001d5c <_close>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_close_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_close_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	200001f0 	.word	0x200001f0

08006404 <_fstat_r>:
 8006404:	b538      	push	{r3, r4, r5, lr}
 8006406:	4d07      	ldr	r5, [pc, #28]	; (8006424 <_fstat_r+0x20>)
 8006408:	2300      	movs	r3, #0
 800640a:	4604      	mov	r4, r0
 800640c:	4608      	mov	r0, r1
 800640e:	4611      	mov	r1, r2
 8006410:	602b      	str	r3, [r5, #0]
 8006412:	f7fb fcaf 	bl	8001d74 <_fstat>
 8006416:	1c43      	adds	r3, r0, #1
 8006418:	d102      	bne.n	8006420 <_fstat_r+0x1c>
 800641a:	682b      	ldr	r3, [r5, #0]
 800641c:	b103      	cbz	r3, 8006420 <_fstat_r+0x1c>
 800641e:	6023      	str	r3, [r4, #0]
 8006420:	bd38      	pop	{r3, r4, r5, pc}
 8006422:	bf00      	nop
 8006424:	200001f0 	.word	0x200001f0

08006428 <_isatty_r>:
 8006428:	b538      	push	{r3, r4, r5, lr}
 800642a:	4d06      	ldr	r5, [pc, #24]	; (8006444 <_isatty_r+0x1c>)
 800642c:	2300      	movs	r3, #0
 800642e:	4604      	mov	r4, r0
 8006430:	4608      	mov	r0, r1
 8006432:	602b      	str	r3, [r5, #0]
 8006434:	f7fb fcae 	bl	8001d94 <_isatty>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_isatty_r+0x1a>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_isatty_r+0x1a>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	200001f0 	.word	0x200001f0

08006448 <_lseek_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d07      	ldr	r5, [pc, #28]	; (8006468 <_lseek_r+0x20>)
 800644c:	4604      	mov	r4, r0
 800644e:	4608      	mov	r0, r1
 8006450:	4611      	mov	r1, r2
 8006452:	2200      	movs	r2, #0
 8006454:	602a      	str	r2, [r5, #0]
 8006456:	461a      	mov	r2, r3
 8006458:	f7fb fca7 	bl	8001daa <_lseek>
 800645c:	1c43      	adds	r3, r0, #1
 800645e:	d102      	bne.n	8006466 <_lseek_r+0x1e>
 8006460:	682b      	ldr	r3, [r5, #0]
 8006462:	b103      	cbz	r3, 8006466 <_lseek_r+0x1e>
 8006464:	6023      	str	r3, [r4, #0]
 8006466:	bd38      	pop	{r3, r4, r5, pc}
 8006468:	200001f0 	.word	0x200001f0

0800646c <_read_r>:
 800646c:	b538      	push	{r3, r4, r5, lr}
 800646e:	4d07      	ldr	r5, [pc, #28]	; (800648c <_read_r+0x20>)
 8006470:	4604      	mov	r4, r0
 8006472:	4608      	mov	r0, r1
 8006474:	4611      	mov	r1, r2
 8006476:	2200      	movs	r2, #0
 8006478:	602a      	str	r2, [r5, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	f7fb fc35 	bl	8001cea <_read>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d102      	bne.n	800648a <_read_r+0x1e>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	b103      	cbz	r3, 800648a <_read_r+0x1e>
 8006488:	6023      	str	r3, [r4, #0]
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	200001f0 	.word	0x200001f0

08006490 <_init>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr

0800649c <_fini>:
 800649c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800649e:	bf00      	nop
 80064a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064a2:	bc08      	pop	{r3}
 80064a4:	469e      	mov	lr, r3
 80064a6:	4770      	bx	lr
