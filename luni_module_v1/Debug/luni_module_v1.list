
luni_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083e4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e78  08008528  08008528  00018528  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093a0  080093a0  000193a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080093ac  080093ac  000193ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  080093b0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000164  20000098  08009440  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001fc  08009440  000201fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001537d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002db4  00000000  00000000  00035445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015e0  00000000  00000000  00038200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014c8  00000000  00000000  000397e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000234a9  00000000  00000000  0003aca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000154d6  00000000  00000000  0005e151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000dbffb  00000000  00000000  00073627  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014f622  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006b3c  00000000  00000000  0014f674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	0800850c 	.word	0x0800850c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	0800850c 	.word	0x0800850c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_uldivmod>:
 8000b48:	b953      	cbnz	r3, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4a:	b94a      	cbnz	r2, 8000b60 <__aeabi_uldivmod+0x18>
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	bf08      	it	eq
 8000b50:	2800      	cmpeq	r0, #0
 8000b52:	bf1c      	itt	ne
 8000b54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f000 b974 	b.w	8000e48 <__aeabi_idiv0>
 8000b60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b68:	f000 f806 	bl	8000b78 <__udivmoddi4>
 8000b6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b74:	b004      	add	sp, #16
 8000b76:	4770      	bx	lr

08000b78 <__udivmoddi4>:
 8000b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b7c:	9d08      	ldr	r5, [sp, #32]
 8000b7e:	4604      	mov	r4, r0
 8000b80:	468e      	mov	lr, r1
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d14d      	bne.n	8000c22 <__udivmoddi4+0xaa>
 8000b86:	428a      	cmp	r2, r1
 8000b88:	4694      	mov	ip, r2
 8000b8a:	d969      	bls.n	8000c60 <__udivmoddi4+0xe8>
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b152      	cbz	r2, 8000ba8 <__udivmoddi4+0x30>
 8000b92:	fa01 f302 	lsl.w	r3, r1, r2
 8000b96:	f1c2 0120 	rsb	r1, r2, #32
 8000b9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000b9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ba6:	4094      	lsls	r4, r2
 8000ba8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bac:	0c21      	lsrs	r1, r4, #16
 8000bae:	fbbe f6f8 	udiv	r6, lr, r8
 8000bb2:	fa1f f78c 	uxth.w	r7, ip
 8000bb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000bba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bbe:	fb06 f107 	mul.w	r1, r6, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d90a      	bls.n	8000bdc <__udivmoddi4+0x64>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bce:	f080 811f 	bcs.w	8000e10 <__udivmoddi4+0x298>
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	f240 811c 	bls.w	8000e10 <__udivmoddi4+0x298>
 8000bd8:	3e02      	subs	r6, #2
 8000bda:	4463      	add	r3, ip
 8000bdc:	1a5b      	subs	r3, r3, r1
 8000bde:	b2a4      	uxth	r4, r4
 8000be0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000be4:	fb08 3310 	mls	r3, r8, r0, r3
 8000be8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bec:	fb00 f707 	mul.w	r7, r0, r7
 8000bf0:	42a7      	cmp	r7, r4
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x92>
 8000bf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bfc:	f080 810a 	bcs.w	8000e14 <__udivmoddi4+0x29c>
 8000c00:	42a7      	cmp	r7, r4
 8000c02:	f240 8107 	bls.w	8000e14 <__udivmoddi4+0x29c>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0e:	1be4      	subs	r4, r4, r7
 8000c10:	2600      	movs	r6, #0
 8000c12:	b11d      	cbz	r5, 8000c1c <__udivmoddi4+0xa4>
 8000c14:	40d4      	lsrs	r4, r2
 8000c16:	2300      	movs	r3, #0
 8000c18:	e9c5 4300 	strd	r4, r3, [r5]
 8000c1c:	4631      	mov	r1, r6
 8000c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0xc2>
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	f000 80ef 	beq.w	8000e0a <__udivmoddi4+0x292>
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c32:	4630      	mov	r0, r6
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	fab3 f683 	clz	r6, r3
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d14a      	bne.n	8000cd8 <__udivmoddi4+0x160>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xd4>
 8000c46:	4282      	cmp	r2, r0
 8000c48:	f200 80f9 	bhi.w	8000e3e <__udivmoddi4+0x2c6>
 8000c4c:	1a84      	subs	r4, r0, r2
 8000c4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	469e      	mov	lr, r3
 8000c56:	2d00      	cmp	r5, #0
 8000c58:	d0e0      	beq.n	8000c1c <__udivmoddi4+0xa4>
 8000c5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c5e:	e7dd      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000c60:	b902      	cbnz	r2, 8000c64 <__udivmoddi4+0xec>
 8000c62:	deff      	udf	#255	; 0xff
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f040 8092 	bne.w	8000d92 <__udivmoddi4+0x21a>
 8000c6e:	eba1 010c 	sub.w	r1, r1, ip
 8000c72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c76:	fa1f fe8c 	uxth.w	lr, ip
 8000c7a:	2601      	movs	r6, #1
 8000c7c:	0c20      	lsrs	r0, r4, #16
 8000c7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c82:	fb07 1113 	mls	r1, r7, r3, r1
 8000c86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c8a:	fb0e f003 	mul.w	r0, lr, r3
 8000c8e:	4288      	cmp	r0, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x12c>
 8000c92:	eb1c 0101 	adds.w	r1, ip, r1
 8000c96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x12a>
 8000c9c:	4288      	cmp	r0, r1
 8000c9e:	f200 80cb 	bhi.w	8000e38 <__udivmoddi4+0x2c0>
 8000ca2:	4643      	mov	r3, r8
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cac:	fb07 1110 	mls	r1, r7, r0, r1
 8000cb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cb8:	45a6      	cmp	lr, r4
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x156>
 8000cbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cc4:	d202      	bcs.n	8000ccc <__udivmoddi4+0x154>
 8000cc6:	45a6      	cmp	lr, r4
 8000cc8:	f200 80bb 	bhi.w	8000e42 <__udivmoddi4+0x2ca>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	eba4 040e 	sub.w	r4, r4, lr
 8000cd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000cd6:	e79c      	b.n	8000c12 <__udivmoddi4+0x9a>
 8000cd8:	f1c6 0720 	rsb	r7, r6, #32
 8000cdc:	40b3      	lsls	r3, r6
 8000cde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ce2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ce6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cea:	fa01 f306 	lsl.w	r3, r1, r6
 8000cee:	431c      	orrs	r4, r3
 8000cf0:	40f9      	lsrs	r1, r7
 8000cf2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cf6:	fa00 f306 	lsl.w	r3, r0, r6
 8000cfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cfe:	0c20      	lsrs	r0, r4, #16
 8000d00:	fa1f fe8c 	uxth.w	lr, ip
 8000d04:	fb09 1118 	mls	r1, r9, r8, r1
 8000d08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d10:	4288      	cmp	r0, r1
 8000d12:	fa02 f206 	lsl.w	r2, r2, r6
 8000d16:	d90b      	bls.n	8000d30 <__udivmoddi4+0x1b8>
 8000d18:	eb1c 0101 	adds.w	r1, ip, r1
 8000d1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d20:	f080 8088 	bcs.w	8000e34 <__udivmoddi4+0x2bc>
 8000d24:	4288      	cmp	r0, r1
 8000d26:	f240 8085 	bls.w	8000e34 <__udivmoddi4+0x2bc>
 8000d2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2e:	4461      	add	r1, ip
 8000d30:	1a09      	subs	r1, r1, r0
 8000d32:	b2a4      	uxth	r4, r4
 8000d34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d38:	fb09 1110 	mls	r1, r9, r0, r1
 8000d3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d44:	458e      	cmp	lr, r1
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1e2>
 8000d48:	eb1c 0101 	adds.w	r1, ip, r1
 8000d4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d50:	d26c      	bcs.n	8000e2c <__udivmoddi4+0x2b4>
 8000d52:	458e      	cmp	lr, r1
 8000d54:	d96a      	bls.n	8000e2c <__udivmoddi4+0x2b4>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4461      	add	r1, ip
 8000d5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d62:	eba1 010e 	sub.w	r1, r1, lr
 8000d66:	42a1      	cmp	r1, r4
 8000d68:	46c8      	mov	r8, r9
 8000d6a:	46a6      	mov	lr, r4
 8000d6c:	d356      	bcc.n	8000e1c <__udivmoddi4+0x2a4>
 8000d6e:	d053      	beq.n	8000e18 <__udivmoddi4+0x2a0>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x212>
 8000d72:	ebb3 0208 	subs.w	r2, r3, r8
 8000d76:	eb61 010e 	sbc.w	r1, r1, lr
 8000d7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000d7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000d82:	40f1      	lsrs	r1, r6
 8000d84:	431f      	orrs	r7, r3
 8000d86:	e9c5 7100 	strd	r7, r1, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	f1c2 0320 	rsb	r3, r2, #32
 8000d96:	40d8      	lsrs	r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000da0:	4091      	lsls	r1, r2
 8000da2:	4301      	orrs	r1, r0
 8000da4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000db0:	fb07 3610 	mls	r6, r7, r0, r3
 8000db4:	0c0b      	lsrs	r3, r1, #16
 8000db6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dba:	fb00 f60e 	mul.w	r6, r0, lr
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc4:	d908      	bls.n	8000dd8 <__udivmoddi4+0x260>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dce:	d22f      	bcs.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd0:	429e      	cmp	r6, r3
 8000dd2:	d92d      	bls.n	8000e30 <__udivmoddi4+0x2b8>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	b289      	uxth	r1, r1
 8000ddc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000de0:	fb07 3316 	mls	r3, r7, r6, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb06 f30e 	mul.w	r3, r6, lr
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x28a>
 8000df0:	eb1c 0101 	adds.w	r1, ip, r1
 8000df4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000df8:	d216      	bcs.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d914      	bls.n	8000e28 <__udivmoddi4+0x2b0>
 8000dfe:	3e02      	subs	r6, #2
 8000e00:	4461      	add	r1, ip
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e08:	e738      	b.n	8000c7c <__udivmoddi4+0x104>
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e705      	b.n	8000c1c <__udivmoddi4+0xa4>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e3      	b.n	8000bdc <__udivmoddi4+0x64>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6f8      	b.n	8000c0a <__udivmoddi4+0x92>
 8000e18:	454b      	cmp	r3, r9
 8000e1a:	d2a9      	bcs.n	8000d70 <__udivmoddi4+0x1f8>
 8000e1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7a3      	b.n	8000d70 <__udivmoddi4+0x1f8>
 8000e28:	4646      	mov	r6, r8
 8000e2a:	e7ea      	b.n	8000e02 <__udivmoddi4+0x28a>
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	e794      	b.n	8000d5a <__udivmoddi4+0x1e2>
 8000e30:	4640      	mov	r0, r8
 8000e32:	e7d1      	b.n	8000dd8 <__udivmoddi4+0x260>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	e77b      	b.n	8000d30 <__udivmoddi4+0x1b8>
 8000e38:	3b02      	subs	r3, #2
 8000e3a:	4461      	add	r1, ip
 8000e3c:	e732      	b.n	8000ca4 <__udivmoddi4+0x12c>
 8000e3e:	4630      	mov	r0, r6
 8000e40:	e709      	b.n	8000c56 <__udivmoddi4+0xde>
 8000e42:	4464      	add	r4, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e742      	b.n	8000cce <__udivmoddi4+0x156>

08000e48 <__aeabi_idiv0>:
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	0000      	movs	r0, r0
	...

08000e50 <GUI_ReadBmp>:
#include <string.h> //memset()
#include <math.h> //memset()
#include <stdio.h>

UBYTE GUI_ReadBmp(const char *path, UWORD Xstart, UWORD Ystart)
{
 8000e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e54:	b09f      	sub	sp, #124	; 0x7c
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	817b      	strh	r3, [r7, #10]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	813b      	strh	r3, [r7, #8]
 8000e62:	466b      	mov	r3, sp
 8000e64:	461e      	mov	r6, r3
    BMPFILEHEADER bmpFileHeader;  //Define a bmp file header structure
    BMPINFOHEADER bmpInfoHeader;  //Define a bmp info header structure


    // Binary file open
    if((fp = fopen(path, "rb")) == NULL) {
 8000e66:	49c0      	ldr	r1, [pc, #768]	; (8001168 <GUI_ReadBmp+0x318>)
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f005 f879 	bl	8005f60 <fopen>
 8000e6e:	66b8      	str	r0, [r7, #104]	; 0x68
 8000e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d105      	bne.n	8000e82 <GUI_ReadBmp+0x32>
        Debug("Cann't open the file!\n");
 8000e76:	48bd      	ldr	r0, [pc, #756]	; (800116c <GUI_ReadBmp+0x31c>)
 8000e78:	f005 fcbe 	bl	80067f8 <puts>
        exit(0);
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f004 fde9 	bl	8005a54 <exit>
    }

    // Set the file pointer from the beginning
    fseek(fp, 0, SEEK_SET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2100      	movs	r1, #0
 8000e86:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000e88:	f005 f8f6 	bl	8006078 <fseek>
    fread(&bmpFileHeader, sizeof(BMPFILEHEADER), 1, fp);    //sizeof(BMPFILEHEADER) must be 14
 8000e8c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000e90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000e92:	2201      	movs	r2, #1
 8000e94:	210e      	movs	r1, #14
 8000e96:	f005 f8df 	bl	8006058 <fread>
    fread(&bmpInfoHeader, sizeof(BMPINFOHEADER), 1, fp);    //sizeof(BMPFILEHEADER) must be 50
 8000e9a:	f107 0014 	add.w	r0, r7, #20
 8000e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2128      	movs	r1, #40	; 0x28
 8000ea4:	f005 f8d8 	bl	8006058 <fread>
    printf("pixel = %d * %d\r\n", bmpInfoHeader.biWidth, bmpInfoHeader.biHeight);
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	69fa      	ldr	r2, [r7, #28]
 8000eac:	4619      	mov	r1, r3
 8000eae:	48b0      	ldr	r0, [pc, #704]	; (8001170 <GUI_ReadBmp+0x320>)
 8000eb0:	f005 fc1c 	bl	80066ec <iprintf>

    UWORD Image_Width_Byte = (bmpInfoHeader.biWidth % 8 == 0)? (bmpInfoHeader.biWidth / 8): (bmpInfoHeader.biWidth / 8 + 1);
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d103      	bne.n	8000ec6 <GUI_ReadBmp+0x76>
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	08db      	lsrs	r3, r3, #3
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	e004      	b.n	8000ed0 <GUI_ReadBmp+0x80>
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	08db      	lsrs	r3, r3, #3
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	3301      	adds	r3, #1
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    UWORD Bmp_Width_Byte = (Image_Width_Byte % 4 == 0) ? Image_Width_Byte: ((Image_Width_Byte / 4 + 1) * 4);
 8000ed4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ed8:	f003 0303 	and.w	r3, r3, #3
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d008      	beq.n	8000ef4 <GUI_ReadBmp+0xa4>
 8000ee2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ee6:	089b      	lsrs	r3, r3, #2
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	3301      	adds	r3, #1
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	e001      	b.n	8000ef8 <GUI_ReadBmp+0xa8>
 8000ef4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000ef8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    UBYTE Image[Image_Width_Byte * bmpInfoHeader.biHeight];
 8000efc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	fb02 f103 	mul.w	r1, r2, r3
 8000f06:	460b      	mov	r3, r1
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	663b      	str	r3, [r7, #96]	; 0x60
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	6039      	str	r1, [r7, #0]
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	00c3      	lsls	r3, r0, #3
 8000f1e:	6838      	ldr	r0, [r7, #0]
 8000f20:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	00c2      	lsls	r2, r0, #3
 8000f28:	2300      	movs	r3, #0
 8000f2a:	468a      	mov	sl, r1
 8000f2c:	469b      	mov	fp, r3
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	f04f 0300 	mov.w	r3, #0
 8000f36:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f3a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000f42:	1dcb      	adds	r3, r1, #7
 8000f44:	08db      	lsrs	r3, r3, #3
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	ebad 0d03 	sub.w	sp, sp, r3
 8000f4c:	466b      	mov	r3, sp
 8000f4e:	3300      	adds	r3, #0
 8000f50:	65fb      	str	r3, [r7, #92]	; 0x5c
    memset(Image, 0xFF, Image_Width_Byte * bmpInfoHeader.biHeight);
 8000f52:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000f56:	69fa      	ldr	r2, [r7, #28]
 8000f58:	fb02 f303 	mul.w	r3, r2, r3
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	21ff      	movs	r1, #255	; 0xff
 8000f60:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f62:	f005 fa27 	bl	80063b4 <memset>

    // Determine if it is a monochrome bitmap
    int readbyte = bmpInfoHeader.biBitCount;
 8000f66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f68:	65bb      	str	r3, [r7, #88]	; 0x58
    if(readbyte != 1) {
 8000f6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d005      	beq.n	8000f7c <GUI_ReadBmp+0x12c>
        Debug("the bmp Image is not a monochrome bitmap!\n");
 8000f70:	4880      	ldr	r0, [pc, #512]	; (8001174 <GUI_ReadBmp+0x324>)
 8000f72:	f005 fc41 	bl	80067f8 <puts>
        exit(0);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f004 fd6c 	bl	8005a54 <exit>
    }

    // Determine black and white based on the palette
    UWORD i;
    UWORD Bcolor, Wcolor;
    UWORD bmprgbquadsize = pow(2, bmpInfoHeader.biBitCount);// 2^1 = 2
 8000f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fa98 	bl	80004b4 <__aeabi_ui2d>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	ec43 2b11 	vmov	d1, r2, r3
 8000f8c:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8001160 <GUI_ReadBmp+0x310>
 8000f90:	f006 fba0 	bl	80076d4 <pow>
 8000f94:	ec53 2b10 	vmov	r2, r3, d0
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fdb4 	bl	8000b08 <__aeabi_d2uiz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    BMPRGBQUAD bmprgbquad[bmprgbquadsize];        //palette
 8000fa6:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000faa:	460b      	mov	r3, r1
 8000fac:	3b01      	subs	r3, #1
 8000fae:	653b      	str	r3, [r7, #80]	; 0x50
 8000fb0:	b28b      	uxth	r3, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	4698      	mov	r8, r3
 8000fb6:	4691      	mov	r9, r2
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000fc4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000fc8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000fcc:	b28b      	uxth	r3, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	461c      	mov	r4, r3
 8000fd2:	4615      	mov	r5, r2
 8000fd4:	f04f 0200 	mov.w	r2, #0
 8000fd8:	f04f 0300 	mov.w	r3, #0
 8000fdc:	016b      	lsls	r3, r5, #5
 8000fde:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000fe2:	0162      	lsls	r2, r4, #5
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	3307      	adds	r3, #7
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	ebad 0d03 	sub.w	sp, sp, r3
 8000ff2:	466b      	mov	r3, sp
 8000ff4:	3300      	adds	r3, #0
 8000ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // BMPRGBQUAD bmprgbquad[2];        //palette

    for(i = 0; i < bmprgbquadsize; i++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000ffe:	e00e      	b.n	800101e <GUI_ReadBmp+0x1ce>
    // for(i = 0; i < 2; i++) {
        fread(&bmprgbquad[i], sizeof(BMPRGBQUAD), 1, fp);
 8001000:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001008:	18d0      	adds	r0, r2, r3
 800100a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800100c:	2201      	movs	r2, #1
 800100e:	2104      	movs	r1, #4
 8001010:	f005 f822 	bl	8006058 <fread>
    for(i = 0; i < bmprgbquadsize; i++){
 8001014:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001018:	3301      	adds	r3, #1
 800101a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 800101e:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001022:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001026:	429a      	cmp	r2, r3
 8001028:	d3ea      	bcc.n	8001000 <GUI_ReadBmp+0x1b0>
    }
    if(bmprgbquad[0].rgbBlue == 0xff && bmprgbquad[0].rgbGreen == 0xff && bmprgbquad[0].rgbRed == 0xff) {
 800102a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2bff      	cmp	r3, #255	; 0xff
 8001030:	d10e      	bne.n	8001050 <GUI_ReadBmp+0x200>
 8001032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d10a      	bne.n	8001050 <GUI_ReadBmp+0x200>
 800103a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	2bff      	cmp	r3, #255	; 0xff
 8001040:	d106      	bne.n	8001050 <GUI_ReadBmp+0x200>
        Bcolor = BLACK;
 8001042:	2300      	movs	r3, #0
 8001044:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        Wcolor = WHITE;
 8001048:	23ff      	movs	r3, #255	; 0xff
 800104a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800104e:	e005      	b.n	800105c <GUI_ReadBmp+0x20c>
    } else {
        Bcolor = WHITE;
 8001050:	23ff      	movs	r3, #255	; 0xff
 8001052:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        Wcolor = BLACK;
 8001056:	2300      	movs	r3, #0
 8001058:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    }

    // Read image data into the cache
    UWORD x, y;
    UBYTE Rdata;
    fseek(fp, bmpFileHeader.bOffset, SEEK_SET);
 800105c:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001066:	f005 f807 	bl	8006078 <fseek>
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {//Total display column
 800106a:	2300      	movs	r3, #0
 800106c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8001070:	e037      	b.n	80010e2 <GUI_ReadBmp+0x292>
        for(x = 0; x < Bmp_Width_Byte; x++) {//Show a line in the line
 8001072:	2300      	movs	r3, #0
 8001074:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001078:	e028      	b.n	80010cc <GUI_ReadBmp+0x27c>
            if(fread((char *)&Rdata, 1, readbyte, fp) != readbyte) {
 800107a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800107c:	f107 0013 	add.w	r0, r7, #19
 8001080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001082:	2101      	movs	r1, #1
 8001084:	f004 ffe8 	bl	8006058 <fread>
 8001088:	4602      	mov	r2, r0
 800108a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800108c:	429a      	cmp	r2, r3
 800108e:	d003      	beq.n	8001098 <GUI_ReadBmp+0x248>
                perror("get bmpdata:\r\n");
 8001090:	4839      	ldr	r0, [pc, #228]	; (8001178 <GUI_ReadBmp+0x328>)
 8001092:	f005 fb23 	bl	80066dc <perror>
                break;
 8001096:	e01f      	b.n	80010d8 <GUI_ReadBmp+0x288>
            }
            if(x < Image_Width_Byte) { //bmp
 8001098:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800109c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d20e      	bcs.n	80010c2 <GUI_ReadBmp+0x272>
                Image[x + (bmpInfoHeader.biHeight - y - 1) * Image_Width_Byte] =  Rdata;
 80010a4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80010a8:	69f9      	ldr	r1, [r7, #28]
 80010aa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80010ae:	1acb      	subs	r3, r1, r3
 80010b0:	3b01      	subs	r3, #1
 80010b2:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 80010b6:	fb01 f303 	mul.w	r3, r1, r3
 80010ba:	4413      	add	r3, r2
 80010bc:	7cf9      	ldrb	r1, [r7, #19]
 80010be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80010c0:	54d1      	strb	r1, [r2, r3]
        for(x = 0; x < Bmp_Width_Byte; x++) {//Show a line in the line
 80010c2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80010c6:	3301      	adds	r3, #1
 80010c8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80010cc:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80010d0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3d0      	bcc.n	800107a <GUI_ReadBmp+0x22a>
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {//Total display column
 80010d8:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80010dc:	3301      	adds	r3, #1
 80010de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80010e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d3c2      	bcc.n	8001072 <GUI_ReadBmp+0x222>
                // printf("rdata = %d\r\n", Rdata);
            }
        }
    }
    fclose(fp);
 80010ec:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80010ee:	f004 fd31 	bl	8005b54 <fclose>

    // Refresh the image to the display buffer based on the displayed orientation
    UBYTE color, temp;
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80010f8:	e066      	b.n	80011c8 <GUI_ReadBmp+0x378>
        for(x = 0; x < bmpInfoHeader.biWidth; x++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8001100:	e058      	b.n	80011b4 <GUI_ReadBmp+0x364>
            if(x > Paint.Width || y > Paint.Height) {
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <GUI_ReadBmp+0x32c>)
 8001104:	889b      	ldrh	r3, [r3, #4]
 8001106:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 800110a:	429a      	cmp	r2, r3
 800110c:	d857      	bhi.n	80011be <GUI_ReadBmp+0x36e>
 800110e:	4b1b      	ldr	r3, [pc, #108]	; (800117c <GUI_ReadBmp+0x32c>)
 8001110:	88db      	ldrh	r3, [r3, #6]
 8001112:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001116:	429a      	cmp	r2, r3
 8001118:	d851      	bhi.n	80011be <GUI_ReadBmp+0x36e>
                break;
            }
            temp = Image[(x / 8) + (y * Image_Width_Byte)];
 800111a:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	b29b      	uxth	r3, r3
 8001122:	4619      	mov	r1, r3
 8001124:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8001128:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 800112c:	fb02 f303 	mul.w	r3, r2, r3
 8001130:	440b      	add	r3, r1
 8001132:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            color = (((temp << (x%8)) & 0x80) == 0x80) ?Bcolor:Wcolor;
 800113a:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 800113e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800114e:	2b00      	cmp	r3, #0
 8001150:	d016      	beq.n	8001180 <GUI_ReadBmp+0x330>
 8001152:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001156:	b2db      	uxtb	r3, r3
 8001158:	e015      	b.n	8001186 <GUI_ReadBmp+0x336>
 800115a:	bf00      	nop
 800115c:	f3af 8000 	nop.w
 8001160:	00000000 	.word	0x00000000
 8001164:	40000000 	.word	0x40000000
 8001168:	08008528 	.word	0x08008528
 800116c:	0800852c 	.word	0x0800852c
 8001170:	0800854c 	.word	0x0800854c
 8001174:	08008560 	.word	0x08008560
 8001178:	08008594 	.word	0x08008594
 800117c:	200000b4 	.word	0x200000b4
 8001180:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8001184:	b2db      	uxtb	r3, r3
 8001186:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            Paint_SetPixel(Xstart + x, Ystart + y, color);
 800118a:	897a      	ldrh	r2, [r7, #10]
 800118c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001190:	4413      	add	r3, r2
 8001192:	b298      	uxth	r0, r3
 8001194:	893a      	ldrh	r2, [r7, #8]
 8001196:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800119a:	4413      	add	r3, r2
 800119c:	b29b      	uxth	r3, r3
 800119e:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 80011a2:	b292      	uxth	r2, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f000 f881 	bl	80012ac <Paint_SetPixel>
        for(x = 0; x < bmpInfoHeader.biWidth; x++) {
 80011aa:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80011ae:	3301      	adds	r3, #1
 80011b0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80011b4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d3a1      	bcc.n	8001102 <GUI_ReadBmp+0x2b2>
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {
 80011be:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80011c2:	3301      	adds	r3, #1
 80011c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 80011c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d393      	bcc.n	80010fa <GUI_ReadBmp+0x2aa>
        }
    }
    return 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	46b5      	mov	sp, r6
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	377c      	adds	r7, #124	; 0x7c
 80011da:	46bd      	mov	sp, r7
 80011dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011e0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	4608      	mov	r0, r1
 80011ea:	4611      	mov	r1, r2
 80011ec:	461a      	mov	r2, r3
 80011ee:	4603      	mov	r3, r0
 80011f0:	817b      	strh	r3, [r7, #10]
 80011f2:	460b      	mov	r3, r1
 80011f4:	813b      	strh	r3, [r7, #8]
 80011f6:	4613      	mov	r3, r2
 80011f8:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <Paint_NewImage+0xa8>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8001200:	4a21      	ldr	r2, [pc, #132]	; (8001288 <Paint_NewImage+0xa8>)
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8001206:	4a20      	ldr	r2, [pc, #128]	; (8001288 <Paint_NewImage+0xa8>)
 8001208:	897b      	ldrh	r3, [r7, #10]
 800120a:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800120c:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <Paint_NewImage+0xa8>)
 800120e:	893b      	ldrh	r3, [r7, #8]
 8001210:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8001212:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <Paint_NewImage+0xa8>)
 8001214:	8b3b      	ldrh	r3, [r7, #24]
 8001216:	8193      	strh	r3, [r2, #12]
    Paint.Scale = 2;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <Paint_NewImage+0xa8>)
 800121a:	2202      	movs	r2, #2
 800121c:	82da      	strh	r2, [r3, #22]
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800121e:	897b      	ldrh	r3, [r7, #10]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	b29b      	uxth	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <Paint_NewImage+0x52>
 800122a:	897b      	ldrh	r3, [r7, #10]
 800122c:	08db      	lsrs	r3, r3, #3
 800122e:	b29b      	uxth	r3, r3
 8001230:	e004      	b.n	800123c <Paint_NewImage+0x5c>
 8001232:	897b      	ldrh	r3, [r7, #10]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	b29b      	uxth	r3, r3
 8001238:	3301      	adds	r3, #1
 800123a:	b29b      	uxth	r3, r3
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <Paint_NewImage+0xa8>)
 800123e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <Paint_NewImage+0xa8>)
 8001242:	893b      	ldrh	r3, [r7, #8]
 8001244:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8001246:	4a10      	ldr	r2, [pc, #64]	; (8001288 <Paint_NewImage+0xa8>)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <Paint_NewImage+0xa8>)
 800124e:	2200      	movs	r2, #0
 8001250:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <Paint_NewImage+0x7e>
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	2bb4      	cmp	r3, #180	; 0xb4
 800125c:	d106      	bne.n	800126c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800125e:	4a0a      	ldr	r2, [pc, #40]	; (8001288 <Paint_NewImage+0xa8>)
 8001260:	897b      	ldrh	r3, [r7, #10]
 8001262:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8001264:	4a08      	ldr	r2, [pc, #32]	; (8001288 <Paint_NewImage+0xa8>)
 8001266:	893b      	ldrh	r3, [r7, #8]
 8001268:	80d3      	strh	r3, [r2, #6]
 800126a:	e006      	b.n	800127a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <Paint_NewImage+0xa8>)
 800126e:	893b      	ldrh	r3, [r7, #8]
 8001270:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8001272:	4a05      	ldr	r2, [pc, #20]	; (8001288 <Paint_NewImage+0xa8>)
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	80d3      	strh	r3, [r2, #6]
    }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200000b4 	.word	0x200000b4

0800128c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8001294:	4a04      	ldr	r2, [pc, #16]	; (80012a8 <Paint_SelectImage+0x1c>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200000b4 	.word	0x200000b4

080012ac <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
 80012b6:	460b      	mov	r3, r1
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	4613      	mov	r3, r2
 80012bc:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <Paint_SetPixel+0x290>)
 80012c0:	889b      	ldrh	r3, [r3, #4]
 80012c2:	88fa      	ldrh	r2, [r7, #6]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	f200 8131 	bhi.w	800152c <Paint_SetPixel+0x280>
 80012ca:	4b9c      	ldr	r3, [pc, #624]	; (800153c <Paint_SetPixel+0x290>)
 80012cc:	88db      	ldrh	r3, [r3, #6]
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	f200 812b 	bhi.w	800152c <Paint_SetPixel+0x280>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;
    switch(Paint.Rotate) {
 80012d6:	4b99      	ldr	r3, [pc, #612]	; (800153c <Paint_SetPixel+0x290>)
 80012d8:	89db      	ldrh	r3, [r3, #14]
 80012da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80012de:	d02b      	beq.n	8001338 <Paint_SetPixel+0x8c>
 80012e0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80012e4:	f300 8124 	bgt.w	8001530 <Paint_SetPixel+0x284>
 80012e8:	2bb4      	cmp	r3, #180	; 0xb4
 80012ea:	d016      	beq.n	800131a <Paint_SetPixel+0x6e>
 80012ec:	2bb4      	cmp	r3, #180	; 0xb4
 80012ee:	f300 811f 	bgt.w	8001530 <Paint_SetPixel+0x284>
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <Paint_SetPixel+0x50>
 80012f6:	2b5a      	cmp	r3, #90	; 0x5a
 80012f8:	d005      	beq.n	8001306 <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 80012fa:	e119      	b.n	8001530 <Paint_SetPixel+0x284>
        X = Xpoint;
 80012fc:	88fb      	ldrh	r3, [r7, #6]
 80012fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8001300:	88bb      	ldrh	r3, [r7, #4]
 8001302:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001304:	e022      	b.n	800134c <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 8001306:	4b8d      	ldr	r3, [pc, #564]	; (800153c <Paint_SetPixel+0x290>)
 8001308:	891a      	ldrh	r2, [r3, #8]
 800130a:	88bb      	ldrh	r3, [r7, #4]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	b29b      	uxth	r3, r3
 8001310:	3b01      	subs	r3, #1
 8001312:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001318:	e018      	b.n	800134c <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 800131a:	4b88      	ldr	r3, [pc, #544]	; (800153c <Paint_SetPixel+0x290>)
 800131c:	891a      	ldrh	r2, [r3, #8]
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	b29b      	uxth	r3, r3
 8001324:	3b01      	subs	r3, #1
 8001326:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001328:	4b84      	ldr	r3, [pc, #528]	; (800153c <Paint_SetPixel+0x290>)
 800132a:	895a      	ldrh	r2, [r3, #10]
 800132c:	88bb      	ldrh	r3, [r7, #4]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001336:	e009      	b.n	800134c <Paint_SetPixel+0xa0>
        X = Ypoint;
 8001338:	88bb      	ldrh	r3, [r7, #4]
 800133a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800133c:	4b7f      	ldr	r3, [pc, #508]	; (800153c <Paint_SetPixel+0x290>)
 800133e:	895a      	ldrh	r2, [r3, #10]
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	3b01      	subs	r3, #1
 8001348:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800134a:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800134c:	4b7b      	ldr	r3, [pc, #492]	; (800153c <Paint_SetPixel+0x290>)
 800134e:	8a1b      	ldrh	r3, [r3, #16]
 8001350:	2b03      	cmp	r3, #3
 8001352:	f200 80ef 	bhi.w	8001534 <Paint_SetPixel+0x288>
 8001356:	a201      	add	r2, pc, #4	; (adr r2, 800135c <Paint_SetPixel+0xb0>)
 8001358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800135c:	080013ab 	.word	0x080013ab
 8001360:	0800136d 	.word	0x0800136d
 8001364:	0800137d 	.word	0x0800137d
 8001368:	0800138d 	.word	0x0800138d
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800136c:	4b73      	ldr	r3, [pc, #460]	; (800153c <Paint_SetPixel+0x290>)
 800136e:	891a      	ldrh	r2, [r3, #8]
 8001370:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	3b01      	subs	r3, #1
 8001378:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800137a:	e017      	b.n	80013ac <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800137c:	4b6f      	ldr	r3, [pc, #444]	; (800153c <Paint_SetPixel+0x290>)
 800137e:	895a      	ldrh	r2, [r3, #10]
 8001380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29b      	uxth	r3, r3
 8001386:	3b01      	subs	r3, #1
 8001388:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800138a:	e00f      	b.n	80013ac <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <Paint_SetPixel+0x290>)
 800138e:	891a      	ldrh	r2, [r3, #8]
 8001390:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	b29b      	uxth	r3, r3
 8001396:	3b01      	subs	r3, #1
 8001398:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800139a:	4b68      	ldr	r3, [pc, #416]	; (800153c <Paint_SetPixel+0x290>)
 800139c:	895a      	ldrh	r2, [r3, #10]
 800139e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3b01      	subs	r3, #1
 80013a6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80013a8:	e000      	b.n	80013ac <Paint_SetPixel+0x100>
        break;
 80013aa:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80013ac:	4b63      	ldr	r3, [pc, #396]	; (800153c <Paint_SetPixel+0x290>)
 80013ae:	891b      	ldrh	r3, [r3, #8]
 80013b0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d804      	bhi.n	80013c0 <Paint_SetPixel+0x114>
 80013b6:	4b61      	ldr	r3, [pc, #388]	; (800153c <Paint_SetPixel+0x290>)
 80013b8:	895b      	ldrh	r3, [r3, #10]
 80013ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013bc:	429a      	cmp	r2, r3
 80013be:	d903      	bls.n	80013c8 <Paint_SetPixel+0x11c>
        Debug("Exceeding display boundaries\r\n");
 80013c0:	485f      	ldr	r0, [pc, #380]	; (8001540 <Paint_SetPixel+0x294>)
 80013c2:	f005 fa19 	bl	80067f8 <puts>
        return;
 80013c6:	e0b6      	b.n	8001536 <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 80013c8:	4b5c      	ldr	r3, [pc, #368]	; (800153c <Paint_SetPixel+0x290>)
 80013ca:	8adb      	ldrh	r3, [r3, #22]
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d139      	bne.n	8001444 <Paint_SetPixel+0x198>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80013d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013d2:	08db      	lsrs	r3, r3, #3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	4619      	mov	r1, r3
 80013d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013da:	4a58      	ldr	r2, [pc, #352]	; (800153c <Paint_SetPixel+0x290>)
 80013dc:	8a52      	ldrh	r2, [r2, #18]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	440b      	add	r3, r1
 80013e4:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80013e6:	4b55      	ldr	r3, [pc, #340]	; (800153c <Paint_SetPixel+0x290>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d113      	bne.n	8001420 <Paint_SetPixel+0x174>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80013f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	fa42 f303 	asr.w	r3, r2, r3
 8001404:	b25b      	sxtb	r3, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	b25a      	sxtb	r2, r3
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4013      	ands	r3, r2
 8001410:	b259      	sxtb	r1, r3
 8001412:	4b4a      	ldr	r3, [pc, #296]	; (800153c <Paint_SetPixel+0x290>)
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	4413      	add	r3, r2
 800141a:	b2ca      	uxtb	r2, r1
 800141c:	701a      	strb	r2, [r3, #0]
 800141e:	e08a      	b.n	8001536 <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001420:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	fa42 f303 	asr.w	r3, r2, r3
 800142c:	b25a      	sxtb	r2, r3
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4313      	orrs	r3, r2
 8001434:	b259      	sxtb	r1, r3
 8001436:	4b41      	ldr	r3, [pc, #260]	; (800153c <Paint_SetPixel+0x290>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4413      	add	r3, r2
 800143e:	b2ca      	uxtb	r2, r1
 8001440:	701a      	strb	r2, [r3, #0]
 8001442:	e078      	b.n	8001536 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 8001444:	4b3d      	ldr	r3, [pc, #244]	; (800153c <Paint_SetPixel+0x290>)
 8001446:	8adb      	ldrh	r3, [r3, #22]
 8001448:	2b04      	cmp	r3, #4
 800144a:	d137      	bne.n	80014bc <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800144c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	b29b      	uxth	r3, r3
 8001452:	4619      	mov	r1, r3
 8001454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001456:	4a39      	ldr	r2, [pc, #228]	; (800153c <Paint_SetPixel+0x290>)
 8001458:	8a52      	ldrh	r2, [r2, #18]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	440b      	add	r3, r1
 8001460:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	f003 0303 	and.w	r3, r3, #3
 8001468:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800146a:	4b34      	ldr	r3, [pc, #208]	; (800153c <Paint_SetPixel+0x290>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4413      	add	r3, r2
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	75fb      	strb	r3, [r7, #23]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));//Clear first, then set value
 8001476:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	22c0      	movs	r2, #192	; 0xc0
 8001480:	fa42 f303 	asr.w	r3, r2, r3
 8001484:	b25b      	sxtb	r3, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	b25a      	sxtb	r2, r3
 800148a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800148e:	4013      	ands	r3, r2
 8001490:	b25b      	sxtb	r3, r3
 8001492:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	019a      	lsls	r2, r3, #6
 8001498:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800149a:	f003 0303 	and.w	r3, r3, #3
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa42 f303 	asr.w	r3, r2, r3
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b259      	sxtb	r1, r3
 80014ae:	4b23      	ldr	r3, [pc, #140]	; (800153c <Paint_SetPixel+0x290>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	4413      	add	r3, r2
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
 80014ba:	e03c      	b.n	8001536 <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <Paint_SetPixel+0x290>)
 80014be:	8adb      	ldrh	r3, [r3, #22]
 80014c0:	2b07      	cmp	r3, #7
 80014c2:	d138      	bne.n	8001536 <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80014c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014c6:	085b      	lsrs	r3, r3, #1
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	4619      	mov	r1, r3
 80014cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014ce:	4a1b      	ldr	r2, [pc, #108]	; (800153c <Paint_SetPixel+0x290>)
 80014d0:	8a52      	ldrh	r2, [r2, #18]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	440b      	add	r3, r1
 80014d8:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80014da:	4b18      	ldr	r3, [pc, #96]	; (800153c <Paint_SetPixel+0x290>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	6a3b      	ldr	r3, [r7, #32]
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80014e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	22f0      	movs	r2, #240	; 0xf0
 80014f0:	fa42 f303 	asr.w	r3, r2, r3
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	43db      	mvns	r3, r3
 80014f8:	b25a      	sxtb	r2, r3
 80014fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014fe:	4013      	ands	r3, r2
 8001500:	b25b      	sxtb	r3, r3
 8001502:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	011a      	lsls	r2, r3, #4
 8001508:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	fa42 f303 	asr.w	r3, r2, r3
 8001514:	b25a      	sxtb	r2, r3
 8001516:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800151a:	4313      	orrs	r3, r2
 800151c:	b259      	sxtb	r1, r3
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <Paint_SetPixel+0x290>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	6a3b      	ldr	r3, [r7, #32]
 8001524:	4413      	add	r3, r2
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
 800152a:	e004      	b.n	8001536 <Paint_SetPixel+0x28a>
        return;
 800152c:	bf00      	nop
 800152e:	e002      	b.n	8001536 <Paint_SetPixel+0x28a>
        return;
 8001530:	bf00      	nop
 8001532:	e000      	b.n	8001536 <Paint_SetPixel+0x28a>
        return;
 8001534:	bf00      	nop
		// printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200000b4 	.word	0x200000b4
 8001540:	08008770 	.word	0x08008770

08001544 <EpdDigitalWriteCallback>:
		EPD_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10e      	bne.n	8001572 <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8001554:	4a10      	ldr	r2, [pc, #64]	; (8001598 <EpdDigitalWriteCallback+0x54>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <EpdDigitalWriteCallback+0x54>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	b29b      	uxth	r3, r3
 8001568:	2201      	movs	r2, #1
 800156a:	4619      	mov	r1, r3
 800156c:	f001 fb36 	bl	8002bdc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8001570:	e00d      	b.n	800158e <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8001572:	4a09      	ldr	r2, [pc, #36]	; (8001598 <EpdDigitalWriteCallback+0x54>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800157a:	4a07      	ldr	r2, [pc, #28]	; (8001598 <EpdDigitalWriteCallback+0x54>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	4413      	add	r3, r2
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	b29b      	uxth	r3, r3
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	f001 fb27 	bl	8002bdc <HAL_GPIO_WritePin>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200000cc 	.word	0x200000cc

0800159c <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <EpdDigitalReadCallback+0x38>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <EpdDigitalReadCallback+0x38>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	440b      	add	r3, r1
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f001 faf6 	bl	8002bac <HAL_GPIO_ReadPin>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d101      	bne.n	80015ca <EpdDigitalReadCallback+0x2e>
    return HIGH;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e000      	b.n	80015cc <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 80015ca:	2300      	movs	r3, #0
  }
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	200000cc 	.word	0x200000cc

080015d8 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f001 f86b 	bl	80026bc <HAL_Delay>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <EpdSpiTransferCallback+0x44>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <EpdSpiTransferCallback+0x44>)
 8001600:	6852      	ldr	r2, [r2, #4]
 8001602:	b291      	uxth	r1, r2
 8001604:	2200      	movs	r2, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f001 fae8 	bl	8002bdc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 800160c:	1df9      	adds	r1, r7, #7
 800160e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001612:	2201      	movs	r2, #1
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <EpdSpiTransferCallback+0x48>)
 8001616:	f003 f96a 	bl	80048ee <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <EpdSpiTransferCallback+0x44>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <EpdSpiTransferCallback+0x44>)
 8001620:	6852      	ldr	r2, [r2, #4]
 8001622:	b291      	uxth	r1, r2
 8001624:	2201      	movs	r2, #1
 8001626:	4618      	mov	r0, r3
 8001628:	f001 fad8 	bl	8002bdc <HAL_GPIO_WritePin>
}
 800162c:	bf00      	nop
 800162e:	3708      	adds	r7, #8
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	200000cc 	.word	0x200000cc
 8001638:	200000ec 	.word	0x200000ec

0800163c <EpdInitCallback>:

int EpdInitCallback(void) {
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8001640:	4b10      	ldr	r3, [pc, #64]	; (8001684 <EpdInitCallback+0x48>)
 8001642:	4a11      	ldr	r2, [pc, #68]	; (8001688 <EpdInitCallback+0x4c>)
 8001644:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001648:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 800164c:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <EpdInitCallback+0x48>)
 800164e:	4a0f      	ldr	r2, [pc, #60]	; (800168c <EpdInitCallback+0x50>)
 8001650:	3308      	adds	r3, #8
 8001652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001656:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <EpdInitCallback+0x48>)
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <EpdInitCallback+0x54>)
 800165e:	3310      	adds	r3, #16
 8001660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001664:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <EpdInitCallback+0x48>)
 800166a:	4a0a      	ldr	r2, [pc, #40]	; (8001694 <EpdInitCallback+0x58>)
 800166c:	3318      	adds	r3, #24
 800166e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001672:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200000cc 	.word	0x200000cc
 8001688:	20000008 	.word	0x20000008
 800168c:	20000010 	.word	0x20000010
 8001690:	20000018 	.word	0x20000018
 8001694:	20000020 	.word	0x20000020

08001698 <EPD_Init>:
#include <stdlib.h>
#include "epd2in9.h"
#include "main.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	epd->reset_pin = RST_PIN;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	601a      	str	r2, [r3, #0]
	epd->dc_pin = DC_PIN;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2202      	movs	r2, #2
 80016ac:	605a      	str	r2, [r3, #4]
	epd->cs_pin = CS_PIN;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
	epd->busy_pin = BUSY_PIN;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2203      	movs	r2, #3
 80016b8:	60da      	str	r2, [r3, #12]
	epd->width = EPD_WIDTH;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	611a      	str	r2, [r3, #16]
	epd->height = EPD_HEIGHT;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80016c6:	615a      	str	r2, [r3, #20]
	/* this calls the peripheral hardware interface, see epdif */
	if (EpdInitCallback() != 0) {
 80016c8:	f7ff ffb8 	bl	800163c <EpdInitCallback>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d002      	beq.n	80016d8 <EPD_Init+0x40>
		return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d6:	e073      	b.n	80017c0 <EPD_Init+0x128>
	}

	epd->lut = lut;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	619a      	str	r2, [r3, #24]

	EPD_Reset(epd);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f8f6 	bl	80018d0 <EPD_Reset>

	EPD_WaitUntilIdle(epd);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 f8dc 	bl	80018a2 <EPD_WaitUntilIdle>
	EPD_SendCommand(epd,SW_RESET); // soft reset
 80016ea:	2112      	movs	r1, #18
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f892 	bl	8001816 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f8d5 	bl	80018a2 <EPD_WaitUntilIdle>

	EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 80016f8:	2101      	movs	r1, #1
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 f88b 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x27);
 8001700:	2127      	movs	r1, #39	; 0x27
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8aa 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, 0x01);
 8001708:	2101      	movs	r1, #1
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8a6 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, 0x00);
 8001710:	2100      	movs	r1, #0
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8a2 	bl	800185c <EPD_SendData>

	// Entrymode
	EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 8001718:	2111      	movs	r1, #17
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f87b 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x03);
 8001720:	2103      	movs	r1, #3
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 f89a 	bl	800185c <EPD_SendData>

	// Curseur de mémoire
	EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8001728:	f240 1327 	movw	r3, #295	; 0x127
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	237f      	movs	r3, #127	; 0x7f
 8001730:	2200      	movs	r2, #0
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f9f2 	bl	8001b1e <EPD_SetMemoryArea>

	// Update mode
	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_1);
 800173a:	2121      	movs	r1, #33	; 0x21
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f86a 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x00);
 8001742:	2100      	movs	r1, #0
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f889 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, 0x80);
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f885 	bl	800185c <EPD_SendData>

	// Set the cursor
	EPD_SetMemoryPointer(epd,0,0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fa1c 	bl	8001b94 <EPD_SetMemoryPointer>
	EPD_WaitUntilIdle(epd);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f8a0 	bl	80018a2 <EPD_WaitUntilIdle>

	// Set lut
	EPD_SetLut(epd,epd->lut);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	4619      	mov	r1, r3
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f9b3 	bl	8001ad4 <EPD_SetLut>


	EPD_SendCommand(epd, LUT_INIT_RESERVED);
 800176e:	213f      	movs	r1, #63	; 0x3f
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f850 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x22); // TBC
 8001776:	2122      	movs	r1, #34	; 0x22
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f000 f86f 	bl	800185c <EPD_SendData>

	EPD_SendCommand(epd, GATE_VOLTAGE);
 800177e:	2103      	movs	r1, #3
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f848 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x17); // TBC
 8001786:	2117      	movs	r1, #23
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f867 	bl	800185c <EPD_SendData>

	EPD_SendCommand(epd, SOURCE_VOLTAGE);
 800178e:	2104      	movs	r1, #4
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f000 f840 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x41); // TBC
 8001796:	2141      	movs	r1, #65	; 0x41
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f85f 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, 0x00); // TBC
 800179e:	2100      	movs	r1, #0
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f000 f85b 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, 0x32); // TBC
 80017a6:	2132      	movs	r1, #50	; 0x32
 80017a8:	6878      	ldr	r0, [r7, #4]
 80017aa:	f000 f857 	bl	800185c <EPD_SendData>

	EPD_SendCommand(epd, WRITE_VCOM_REGISTER);
 80017ae:	212c      	movs	r1, #44	; 0x2c
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 f830 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0x36); // TBC
 80017b6:	2136      	movs	r1, #54	; 0x36
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f84f 	bl	800185c <EPD_SendData>


	/* EPD hardware init end */
	return 0;
 80017be:	2300      	movs	r3, #0



}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	EpdDigitalWriteCallback(pin, value);
 80017d4:	6879      	ldr	r1, [r7, #4]
 80017d6:	68b8      	ldr	r0, [r7, #8]
 80017d8:	f7ff feb4 	bl	8001544 <EpdDigitalWriteCallback>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	return EpdDigitalReadCallback(pin);
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	f7ff fed4 	bl	800159c <EpdDigitalReadCallback>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
	EpdDelayMsCallback(delaytime);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7ff fee5 	bl	80015d8 <EpdDelayMsCallback>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	70fb      	strb	r3, [r7, #3]
	EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	4619      	mov	r1, r3
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7ff ffcc 	bl	80017c8 <EPD_DigitalWrite>
	EPD_DigitalWrite(epd, epd->cs_pin, LOW);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2200      	movs	r2, #0
 8001836:	4619      	mov	r1, r3
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff ffc5 	bl	80017c8 <EPD_DigitalWrite>
	EpdSpiTransferCallback(command);
 800183e:	78fb      	ldrb	r3, [r7, #3]
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fed5 	bl	80015f0 <EpdSpiTransferCallback>
	EPD_DigitalWrite(epd, epd->cs_pin, HIGH);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2201      	movs	r2, #1
 800184c:	4619      	mov	r1, r3
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff ffba 	bl	80017c8 <EPD_DigitalWrite>
}
 8001854:	bf00      	nop
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	460b      	mov	r3, r1
 8001866:	70fb      	strb	r3, [r7, #3]
	EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	4619      	mov	r1, r3
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffa9 	bl	80017c8 <EPD_DigitalWrite>
	EPD_DigitalWrite(epd, epd->cs_pin, LOW);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2200      	movs	r2, #0
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ffa2 	bl	80017c8 <EPD_DigitalWrite>
	EpdSpiTransferCallback(data);
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff feb2 	bl	80015f0 <EpdSpiTransferCallback>
	EPD_DigitalWrite(epd, epd->cs_pin, HIGH);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2201      	movs	r2, #1
 8001892:	4619      	mov	r1, r3
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ff97 	bl	80017c8 <EPD_DigitalWrite>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes LOW
 */
void EPD_WaitUntilIdle(EPD* epd) {
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 80018aa:	e003      	b.n	80018b4 <EPD_WaitUntilIdle+0x12>
		EPD_DelayMs(epd, 100);
 80018ac:	2164      	movs	r1, #100	; 0x64
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa5 	bl	80017fe <EPD_DelayMs>
	while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	4619      	mov	r1, r3
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ff92 	bl	80017e4 <EPD_DigitalRead>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d0f2      	beq.n	80018ac <EPD_WaitUntilIdle+0xa>
	}
}
 80018c6:	bf00      	nop
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	4619      	mov	r1, r3
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff ff71 	bl	80017c8 <EPD_DigitalWrite>
	EPD_DelayMs(epd, 1);
 80018e6:	2101      	movs	r1, #1
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff88 	bl	80017fe <EPD_DelayMs>
	EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2201      	movs	r2, #1
 80018f4:	4619      	mov	r1, r3
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff66 	bl	80017c8 <EPD_DigitalWrite>
	EPD_DelayMs(epd, 2);
 80018fc:	2102      	movs	r1, #2
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff7d 	bl	80017fe <EPD_DelayMs>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <EPD_SetFrameMemory>:
		const unsigned char* image_buffer,
		int x,
		int y,
		int image_width,
		int image_height
) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	603b      	str	r3, [r7, #0]
	//EPD_SetMemoryArea(epd, x, y, x_end, y_end);
	//EPD_SetMemoryPointer(epd, x, y);

	int i;

	EPD_SendCommand(epd, WRITE_RAM);
 800191a:	2124      	movs	r1, #36	; 0x24
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff ff7a 	bl	8001816 <EPD_SendCommand>
	for(i=0;i<4736;i++)
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]
 8001926:	e00a      	b.n	800193e <EPD_SetFrameMemory+0x32>
	{
		EPD_SendData(epd,image_buffer[i]);
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4413      	add	r3, r2
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	4619      	mov	r1, r3
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff ff92 	bl	800185c <EPD_SendData>
	for(i=0;i<4736;i++)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001944:	dbf0      	blt.n	8001928 <EPD_SetFrameMemory+0x1c>
	}

	EPD_SendCommand(epd, WRITE_RAM_BASE);
 8001946:	2126      	movs	r1, #38	; 0x26
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ff64 	bl	8001816 <EPD_SendCommand>
	for(i=0;i<4736;i++)
 800194e:	2300      	movs	r3, #0
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	e00a      	b.n	800196a <EPD_SetFrameMemory+0x5e>
	{
		EPD_SendData(epd,image_buffer[i]);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f7ff ff7c 	bl	800185c <EPD_SendData>
	for(i=0;i<4736;i++)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	3301      	adds	r3, #1
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001970:	dbf0      	blt.n	8001954 <EPD_SetFrameMemory+0x48>
	}

	EPD_DisplayFrame(epd);
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 f884 	bl	8001a80 <EPD_DisplayFrame>
}
 8001978:	bf00      	nop
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <EPD_Clear_Full>:

/**
 *  @brief: clear the screen for init
 */

void EPD_Clear_Full(EPD* epd){
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]

	// Reset
	EPD_Reset(epd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffa1 	bl	80018d0 <EPD_Reset>

	// On met les luts
	EPD_SetLut(epd,epd->lut);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	699b      	ldr	r3, [r3, #24]
 8001992:	4619      	mov	r1, r3
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 f89d 	bl	8001ad4 <EPD_SetLut>

	//
	EPD_SendCommand(epd, OTP_SELECTION);
 800199a:	2137      	movs	r1, #55	; 0x37
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7ff ff3a 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd,0x00);
 80019a2:	2100      	movs	r1, #0
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff59 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019aa:	2100      	movs	r1, #0
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff55 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff51 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019ba:	2100      	movs	r1, #0
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff4d 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019c2:	2100      	movs	r1, #0
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff49 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x40);
 80019ca:	2140      	movs	r1, #64	; 0x40
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff ff45 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019d2:	2100      	movs	r1, #0
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff41 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019da:	2100      	movs	r1, #0
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff3d 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019e2:	2100      	movs	r1, #0
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff ff39 	bl	800185c <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019ea:	2100      	movs	r1, #0
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff35 	bl	800185c <EPD_SendData>

	// Border waveform
	EPD_SendCommand(epd, BORDER_WAVEFORM_CONTROL);
 80019f2:	213c      	movs	r1, #60	; 0x3c
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ff0e 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd,0x80);
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff2d 	bl	800185c <EPD_SendData>

	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8001a02:	2122      	movs	r1, #34	; 0x22
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff06 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd,0xC0);
 8001a0a:	21c0      	movs	r1, #192	; 0xc0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff ff25 	bl	800185c <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8001a12:	2120      	movs	r1, #32
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f7ff fefe 	bl	8001816 <EPD_SendCommand>

	// Mémoire
	EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8001a1a:	f240 1327 	movw	r3, #295	; 0x127
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	237f      	movs	r3, #127	; 0x7f
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f000 f879 	bl	8001b1e <EPD_SetMemoryArea>
	EPD_SetMemoryPointer(epd,0,0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8af 	bl	8001b94 <EPD_SetMemoryPointer>

	EPD_SendCommand(epd, WRITE_RAM);   //Write Black and White image to RAM
 8001a36:	2124      	movs	r1, #36	; 0x24
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f7ff feec 	bl	8001816 <EPD_SendCommand>
	for(int i=0;i<4736;++i)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e006      	b.n	8001a52 <EPD_Clear_Full+0xd2>
	{
		EPD_SendData(epd,0xFF);
 8001a44:	21ff      	movs	r1, #255	; 0xff
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff08 	bl	800185c <EPD_SendData>
	for(int i=0;i<4736;++i)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001a58:	dbf4      	blt.n	8001a44 <EPD_Clear_Full+0xc4>
	}

	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8001a5a:	2122      	movs	r1, #34	; 0x22
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff feda 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd,0xF7);
 8001a62:	21f7      	movs	r1, #247	; 0xf7
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff fef9 	bl	800185c <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f7ff fed2 	bl	8001816 <EPD_SendCommand>

	EPD_WaitUntilIdle(epd);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ff15 	bl	80018a2 <EPD_WaitUntilIdle>

}
 8001a78:	bf00      	nop
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <EPD_DisplayFrame>:
 *          there are 2 memory areas embedded in the e-paper display
 *          but once this function is called,
 *          the the next action of SetFrameMemory or ClearFrame will
 *          set the other memory area.
 */
void EPD_DisplayFrame(EPD* epd) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8001a88:	2122      	movs	r1, #34	; 0x22
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff fec3 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, 0xC7);
 8001a90:	21c7      	movs	r1, #199	; 0xc7
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fee2 	bl	800185c <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8001a98:	2120      	movs	r1, #32
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff febb 	bl	8001816 <EPD_SendCommand>
	EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
 8001aa0:	21ff      	movs	r1, #255	; 0xff
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff feb7 	bl	8001816 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fefa 	bl	80018a2 <EPD_WaitUntilIdle>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <EPD_Sleep>:
 *  @brief: After this command is transmitted, the chip would enter the 
 *          deep-sleep mode to save power. 
 *          The deep sleep mode would return to standby by hardware reset. 
 *          You can use EPD_Init() to awaken
 */
void EPD_Sleep(EPD* epd) {
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
	EPD_SendCommand(epd, DEEP_SLEEP_MODE);
 8001abe:	2110      	movs	r1, #16
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fea8 	bl	8001816 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff feeb 	bl	80018a2 <EPD_WaitUntilIdle>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <EPD_SetLut>:

/**
 *  @brief: set the look-up tables
 */
static void EPD_SetLut(EPD* epd, const unsigned char* lut) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
	epd->lut = lut;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	619a      	str	r2, [r3, #24]
	EPD_SendCommand(epd, WRITE_LUT_REGISTER);
 8001ae4:	2132      	movs	r1, #50	; 0x32
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff fe95 	bl	8001816 <EPD_SendCommand>
	/* the length of look-up table is 30 bytes */
	for (int i = 0; i < 153; i++) {
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e00b      	b.n	8001b0a <EPD_SetLut+0x36>
		EPD_SendData(epd, epd->lut[i]);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff feac 	bl	800185c <EPD_SendData>
	for (int i = 0; i < 153; i++) {
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2b98      	cmp	r3, #152	; 0x98
 8001b0e:	ddf0      	ble.n	8001af2 <EPD_SetLut+0x1e>
	}
	EPD_WaitUntilIdle(epd);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fec6 	bl	80018a2 <EPD_WaitUntilIdle>
}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <EPD_SetMemoryArea>:

/**
 *  @brief: private function to specify the memory area for data R/W
 */
static void EPD_SetMemoryArea(EPD* epd, int x_start, int y_start, int x_end, int y_end) {
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b084      	sub	sp, #16
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	60f8      	str	r0, [r7, #12]
 8001b26:	60b9      	str	r1, [r7, #8]
 8001b28:	607a      	str	r2, [r7, #4]
 8001b2a:	603b      	str	r3, [r7, #0]
	EPD_SendCommand(epd, SET_RAM_X_ADDRESS_START_END_POSITION);
 8001b2c:	2144      	movs	r1, #68	; 0x44
 8001b2e:	68f8      	ldr	r0, [r7, #12]
 8001b30:	f7ff fe71 	bl	8001816 <EPD_SendCommand>
	/* x point must be the multiple of 8 or the last 3 bits will be ignored */
	EPD_SendData(epd, (x_start >> 3) & 0xFF);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	10db      	asrs	r3, r3, #3
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f7ff fe8d 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, (x_end >> 3) & 0xFF);
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	10db      	asrs	r3, r3, #3
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe86 	bl	800185c <EPD_SendData>
	EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_START_END_POSITION);
 8001b50:	2145      	movs	r1, #69	; 0x45
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fe5f 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, y_start & 0xFF);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fe7c 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, (y_start >> 8) & 0xFF);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	121b      	asrs	r3, r3, #8
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fe75 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, y_end & 0xFF);
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	4619      	mov	r1, r3
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f7ff fe6f 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, (y_end >> 8) & 0xFF);
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	121b      	asrs	r3, r3, #8
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	4619      	mov	r1, r3
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff fe68 	bl	800185c <EPD_SendData>
}
 8001b8c:	bf00      	nop
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <EPD_SetMemoryPointer>:

/**
 *  @brief: private function to specify the start point for data R/W
 */
static void EPD_SetMemoryPointer(EPD* epd, int x, int y) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	EPD_SendCommand(epd, SET_RAM_X_ADDRESS_COUNTER);
 8001ba0:	214e      	movs	r1, #78	; 0x4e
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fe37 	bl	8001816 <EPD_SendCommand>
	/* x point must be the multiple of 8 or the last 3 bits will be ignored */
	EPD_SendData(epd, (x >> 3) & 0xFF);
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	10db      	asrs	r3, r3, #3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	4619      	mov	r1, r3
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff fe53 	bl	800185c <EPD_SendData>
	EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_COUNTER);
 8001bb6:	214f      	movs	r1, #79	; 0x4f
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff fe2c 	bl	8001816 <EPD_SendCommand>
	EPD_SendData(epd, y & 0xFF);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f7ff fe49 	bl	800185c <EPD_SendData>
	EPD_SendData(epd, (y >> 8) & 0xFF);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	121b      	asrs	r3, r3, #8
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fe42 	bl	800185c <EPD_SendData>
	EPD_WaitUntilIdle(epd);
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fe62 	bl	80018a2 <EPD_WaitUntilIdle>
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08e      	sub	sp, #56	; 0x38
 8001c1c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 8001c1e:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 8001c22:	f004 fbb1 	bl	8006388 <malloc>
 8001c26:	4603      	mov	r3, r0
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	char time_string[] = {'0', '0', ':', '0', '0', '\0'};
 8001c2a:	4a56      	ldr	r2, [pc, #344]	; (8001d84 <main+0x16c>)
 8001c2c:	f107 031c 	add.w	r3, r7, #28
 8001c30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c34:	6018      	str	r0, [r3, #0]
 8001c36:	3304      	adds	r3, #4
 8001c38:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c3a:	f000 fcb9 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c3e:	f000 f8bf 	bl	8001dc0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c42:	f000 f921 	bl	8001e88 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c46:	f000 f9c9 	bl	8001fdc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001c4a:	f000 f979 	bl	8001f40 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001c4e:	f000 f939 	bl	8001ec4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	// DEBUG Attente téléversage
	HAL_Delay(3000);
 8001c52:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001c56:	f000 fd31 	bl	80026bc <HAL_Delay>
	// Fin Attente téléversage

	printf("\n\r ** LuniOne v1.0.3 ** \n\r");
 8001c5a:	484b      	ldr	r0, [pc, #300]	; (8001d88 <main+0x170>)
 8001c5c:	f004 fd46 	bl	80066ec <iprintf>


	printf("DEBUT de l'initialisation \n\r");
 8001c60:	484a      	ldr	r0, [pc, #296]	; (8001d8c <main+0x174>)
 8001c62:	f004 fd43 	bl	80066ec <iprintf>
	EPD epd;
	if (EPD_Init(&epd, lut_full_update) != 0) {
 8001c66:	463b      	mov	r3, r7
 8001c68:	4949      	ldr	r1, [pc, #292]	; (8001d90 <main+0x178>)
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fd14 	bl	8001698 <EPD_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <main+0x6a>
		printf("e-Paper init failed \n\r");
 8001c76:	4847      	ldr	r0, [pc, #284]	; (8001d94 <main+0x17c>)
 8001c78:	f004 fd38 	bl	80066ec <iprintf>
		return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c80:	e07b      	b.n	8001d7a <main+0x162>
	}
	else{
		printf("e-Paper init done \n\r");
 8001c82:	4845      	ldr	r0, [pc, #276]	; (8001d98 <main+0x180>)
 8001c84:	f004 fd32 	bl	80066ec <iprintf>
	}

	printf("Debut du clear...\r\n");
 8001c88:	4844      	ldr	r0, [pc, #272]	; (8001d9c <main+0x184>)
 8001c8a:	f004 fdb5 	bl	80067f8 <puts>
	EPD_Clear_Full(&epd);
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff fe75 	bl	8001980 <EPD_Clear_Full>
	printf("Fin du clear...\r\n");
 8001c96:	4842      	ldr	r0, [pc, #264]	; (8001da0 <main+0x188>)
 8001c98:	f004 fdae 	bl	80067f8 <puts>


	// Nouvel init après
	if (EPD_Init(&epd, lut_full_update) != 0) {
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	493c      	ldr	r1, [pc, #240]	; (8001d90 <main+0x178>)
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fcf9 	bl	8001698 <EPD_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <main+0xa0>
		printf("e-Paper init failed \n\r");
 8001cac:	4839      	ldr	r0, [pc, #228]	; (8001d94 <main+0x17c>)
 8001cae:	f004 fd1d 	bl	80066ec <iprintf>
		return -1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cb6:	e060      	b.n	8001d7a <main+0x162>
	}
	else{
		printf("e-Paper init done \n\r");
 8001cb8:	4837      	ldr	r0, [pc, #220]	; (8001d98 <main+0x180>)
 8001cba:	f004 fd17 	bl	80066ec <iprintf>
	}

	// Pause
	EPD_DelayMs(&epd,1000);
 8001cbe:	463b      	mov	r3, r7
 8001cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fd9a 	bl	80017fe <EPD_DelayMs>

	printf("Debut affichage photo...\r\n");
 8001cca:	4836      	ldr	r0, [pc, #216]	; (8001da4 <main+0x18c>)
 8001ccc:	f004 fd94 	bl	80067f8 <puts>

    //Create a new image cache
    UBYTE *BlackImage;
    UWORD Imagesize = ((epd.width % 8 == 0)? (epd.width / 8 ): (epd.width / 8 + 1)) * epd.height;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d106      	bne.n	8001ce8 <main+0xd0>
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da00      	bge.n	8001ce2 <main+0xca>
 8001ce0:	3307      	adds	r3, #7
 8001ce2:	10db      	asrs	r3, r3, #3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	e006      	b.n	8001cf6 <main+0xde>
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <main+0xd8>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	b292      	uxth	r2, r2
 8001cfa:	fb13 f302 	smulbb	r3, r3, r2
 8001cfe:	857b      	strh	r3, [r7, #42]	; 0x2a
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8001d00:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d02:	4618      	mov	r0, r3
 8001d04:	f004 fb40 	bl	8006388 <malloc>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <main+0x106>
        printf("Failed to apply for black memory...\r\n");
 8001d12:	4825      	ldr	r0, [pc, #148]	; (8001da8 <main+0x190>)
 8001d14:	f004 fd70 	bl	80067f8 <puts>
        return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d1c:	e02d      	b.n	8001d7a <main+0x162>
    }
    printf("Paint_NewImage\r\n");
 8001d1e:	4823      	ldr	r0, [pc, #140]	; (8001dac <main+0x194>)
 8001d20:	f004 fd6a 	bl	80067f8 <puts>

    Paint_NewImage(BlackImage, epd.width, epd.height, 0, WHITE);
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	b299      	uxth	r1, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	23ff      	movs	r3, #255	; 0xff
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	2300      	movs	r3, #0
 8001d32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d34:	f7ff fa54 	bl	80011e0 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8001d38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d3a:	f7ff faa7 	bl	800128c <Paint_SelectImage>
	GUI_ReadBmp("./res/luniwave.bmp", 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	481b      	ldr	r0, [pc, #108]	; (8001db0 <main+0x198>)
 8001d44:	f7ff f884 	bl	8000e50 <GUI_ReadBmp>

	EPD_SetFrameMemory(&epd, BlackImage, 0, 0, epd.width, epd.height);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	9201      	str	r2, [sp, #4]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	2200      	movs	r2, #0
 8001d56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d58:	f7ff fdd8 	bl	800190c <EPD_SetFrameMemory>
	//EPD_SetFrameMemory(&epd, LUNIWAVE_DATA, 0, 0, epd.width, epd.height);

	printf("Fin affichage photo...\r\n");
 8001d5c:	4815      	ldr	r0, [pc, #84]	; (8001db4 <main+0x19c>)
 8001d5e:	f004 fd4b 	bl	80067f8 <puts>

	printf("Debut mise en veille ...\r\n");
 8001d62:	4815      	ldr	r0, [pc, #84]	; (8001db8 <main+0x1a0>)
 8001d64:	f004 fd48 	bl	80067f8 <puts>
	EPD_Sleep(&epd);
 8001d68:	463b      	mov	r3, r7
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fea3 	bl	8001ab6 <EPD_Sleep>
	printf("Fin de mise en veille ...\r\n");
 8001d70:	4812      	ldr	r0, [pc, #72]	; (8001dbc <main+0x1a4>)
 8001d72:	f004 fd41 	bl	80067f8 <puts>

	return -1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    /* USER CODE BEGIN 3 */

	}
  /* USER CODE END 3 */
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3730      	adds	r7, #48	; 0x30
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	08008aa0 	.word	0x08008aa0
 8001d88:	08008954 	.word	0x08008954
 8001d8c:	08008970 	.word	0x08008970
 8001d90:	08008ad4 	.word	0x08008ad4
 8001d94:	08008990 	.word	0x08008990
 8001d98:	080089a8 	.word	0x080089a8
 8001d9c:	080089c0 	.word	0x080089c0
 8001da0:	080089d4 	.word	0x080089d4
 8001da4:	080089e8 	.word	0x080089e8
 8001da8:	08008a04 	.word	0x08008a04
 8001dac:	08008a2c 	.word	0x08008a2c
 8001db0:	08008a3c 	.word	0x08008a3c
 8001db4:	08008a50 	.word	0x08008a50
 8001db8:	08008a68 	.word	0x08008a68
 8001dbc:	08008a84 	.word	0x08008a84

08001dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b09a      	sub	sp, #104	; 0x68
 8001dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dc6:	f107 0320 	add.w	r3, r7, #32
 8001dca:	2248      	movs	r2, #72	; 0x48
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 faf0 	bl	80063b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <SystemClock_Config+0xc4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dee:	4a25      	ldr	r2, [pc, #148]	; (8001e84 <SystemClock_Config+0xc4>)
 8001df0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <SystemClock_Config+0xc4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dfe:	603b      	str	r3, [r7, #0]
 8001e00:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001e02:	2303      	movs	r3, #3
 8001e04:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e12:	2340      	movs	r3, #64	; 0x40
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e16:	2302      	movs	r3, #2
 8001e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001e22:	230c      	movs	r3, #12
 8001e24:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8001e2c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8001e30:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e36:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	f107 0320 	add.w	r3, r7, #32
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f001 fa79 	bl	8003334 <HAL_RCC_OscConfig>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001e48:	f000 f96a 	bl	8002120 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001e4c:	236f      	movs	r3, #111	; 0x6f
 8001e4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	2303      	movs	r3, #3
 8001e52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV4;
 8001e60:	2390      	movs	r3, #144	; 0x90
 8001e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV4;
 8001e64:	2390      	movs	r3, #144	; 0x90
 8001e66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f001 fdd5 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001e78:	f000 f952 	bl	8002120 <Error_Handler>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3768      	adds	r7, #104	; 0x68
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58000400 	.word	0x58000400

08001e88 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b094      	sub	sp, #80	; 0x50
 8001e8c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e8e:	463b      	mov	r3, r7
 8001e90:	2250      	movs	r2, #80	; 0x50
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f004 fa8d 	bl	80063b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8001e9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e9e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea8:	463b      	mov	r3, r7
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f002 f9f5 	bl	800429a <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8001eb6:	f000 f933 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001eba:	bf00      	nop
 8001ebc:	3750      	adds	r7, #80	; 0x50
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001eca:	4a1c      	ldr	r2, [pc, #112]	; (8001f3c <MX_SPI2_Init+0x78>)
 8001ecc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ece:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001ed0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ed4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001ed6:	4b18      	ldr	r3, [pc, #96]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001ed8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001edc:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001ee0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001ee4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001eec:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ef2:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001efa:	4b0f      	ldr	r3, [pc, #60]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001efc:	2208      	movs	r2, #8
 8001efe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f0c:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f12:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f20:	2208      	movs	r2, #8
 8001f22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_SPI2_Init+0x74>)
 8001f26:	f002 fc3f 	bl	80047a8 <HAL_SPI_Init>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8001f30:	f000 f8f6 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	200000ec 	.word	0x200000ec
 8001f3c:	40003800 	.word	0x40003800

08001f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f44:	4b23      	ldr	r3, [pc, #140]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f46:	4a24      	ldr	r2, [pc, #144]	; (8001fd8 <MX_USART1_UART_Init+0x98>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f4a:	4b22      	ldr	r3, [pc, #136]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b20      	ldr	r3, [pc, #128]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f60:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001f64:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f68:	220c      	movs	r2, #12
 8001f6a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f72:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f78:	4b16      	ldr	r3, [pc, #88]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f7e:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f8a:	4812      	ldr	r0, [pc, #72]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f8c:	f002 ffa2 	bl	8004ed4 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f96:	f000 f8c3 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480d      	ldr	r0, [pc, #52]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001f9e:	f003 fc88 	bl	80058b2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001fa8:	f000 f8ba 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fac:	2100      	movs	r1, #0
 8001fae:	4809      	ldr	r0, [pc, #36]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001fb0:	f003 fcbd 	bl	800592e <HAL_UARTEx_SetRxFifoThreshold>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001fba:	f000 f8b1 	bl	8002120 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001fbe:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <MX_USART1_UART_Init+0x94>)
 8001fc0:	f003 fc3e 	bl	8005840 <HAL_UARTEx_DisableFifoMode>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001fca:	f000 f8a9 	bl	8002120 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000150 	.word	0x20000150
 8001fd8:	40013800 	.word	0x40013800

08001fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	605a      	str	r2, [r3, #4]
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	60da      	str	r2, [r3, #12]
 8001fee:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff0:	2004      	movs	r0, #4
 8001ff2:	f7ff fdf8 	bl	8001be6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff6:	2001      	movs	r0, #1
 8001ff8:	f7ff fdf5 	bl	8001be6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffc:	2002      	movs	r0, #2
 8001ffe:	f7ff fdf2 	bl	8001be6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002002:	2008      	movs	r0, #8
 8002004:	f7ff fdef 	bl	8001be6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002008:	2200      	movs	r2, #0
 800200a:	2123      	movs	r1, #35	; 0x23
 800200c:	4838      	ldr	r0, [pc, #224]	; (80020f0 <MX_GPIO_Init+0x114>)
 800200e:	f000 fde5 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002018:	4836      	ldr	r0, [pc, #216]	; (80020f4 <MX_GPIO_Init+0x118>)
 800201a:	f000 fddf 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f000 fdd8 	bl	8002bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800202c:	2310      	movs	r3, #16
 800202e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4619      	mov	r1, r3
 800203c:	482d      	ldr	r0, [pc, #180]	; (80020f4 <MX_GPIO_Init+0x118>)
 800203e:	f000 fc45 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002042:	2323      	movs	r3, #35	; 0x23
 8002044:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002046:	2301      	movs	r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4619      	mov	r1, r3
 8002056:	4826      	ldr	r0, [pc, #152]	; (80020f0 <MX_GPIO_Init+0x114>)
 8002058:	f000 fc38 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 800205c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002060:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002062:	2300      	movs	r3, #0
 8002064:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	4619      	mov	r1, r3
 800206e:	4820      	ldr	r0, [pc, #128]	; (80020f0 <MX_GPIO_Init+0x114>)
 8002070:	f000 fc2c 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DC_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin;
 8002074:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002078:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207a:	2301      	movs	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002086:	1d3b      	adds	r3, r7, #4
 8002088:	4619      	mov	r1, r3
 800208a:	481a      	ldr	r0, [pc, #104]	; (80020f4 <MX_GPIO_Init+0x118>)
 800208c:	f000 fc1e 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002090:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002094:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80020a2:	230a      	movs	r3, #10
 80020a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	4619      	mov	r1, r3
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f000 fc0d 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_RST_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 80020b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b8:	2301      	movs	r3, #1
 80020ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	4619      	mov	r1, r3
 80020c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020cc:	f000 fbfe 	bl	80028cc <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 80020d0:	2303      	movs	r3, #3
 80020d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020dc:	1d3b      	adds	r3, r7, #4
 80020de:	4619      	mov	r1, r3
 80020e0:	4805      	ldr	r0, [pc, #20]	; (80020f8 <MX_GPIO_Init+0x11c>)
 80020e2:	f000 fbf3 	bl	80028cc <HAL_GPIO_Init>

}
 80020e6:	bf00      	nop
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	48000400 	.word	0x48000400
 80020f4:	48000800 	.word	0x48000800
 80020f8:	48000c00 	.word	0x48000c00

080020fc <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8002104:	1d39      	adds	r1, r7, #4
 8002106:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800210a:	2201      	movs	r2, #1
 800210c:	4803      	ldr	r0, [pc, #12]	; (800211c <__io_putchar+0x20>)
 800210e:	f002 ff31 	bl	8004f74 <HAL_UART_Transmit>

	return ch;
 8002112:	687b      	ldr	r3, [r7, #4]
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000150 	.word	0x20000150

08002120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002124:	b672      	cpsid	i
}
 8002126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002128:	e7fe      	b.n	8002128 <Error_Handler+0x8>

0800212a <LL_AHB2_GRP1_EnableClock>:
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002138:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4313      	orrs	r3, r2
 8002140:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4013      	ands	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800214e:	68fb      	ldr	r3, [r7, #12]
}
 8002150:	bf00      	nop
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002164:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002168:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800216a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4313      	orrs	r3, r2
 8002172:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4013      	ands	r3, r2
 800217e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002180:	68fb      	ldr	r3, [r7, #12]
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800218e:	b480      	push	{r7}
 8002190:	b085      	sub	sp, #20
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800219c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4013      	ands	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021b2:	68fb      	ldr	r3, [r7, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021c4:	2007      	movs	r0, #7
 80021c6:	f000 fb4f 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ca:	bf00      	nop
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a19      	ldr	r2, [pc, #100]	; (8002254 <HAL_SPI_MspInit+0x84>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d12b      	bne.n	800224a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021f2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021f6:	f7ff ffb1 	bl	800215c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fa:	2004      	movs	r0, #4
 80021fc:	f7ff ff95 	bl	800212a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	2001      	movs	r0, #1
 8002202:	f7ff ff92 	bl	800212a <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002206:	2302      	movs	r3, #2
 8002208:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002212:	2302      	movs	r3, #2
 8002214:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002216:	2303      	movs	r3, #3
 8002218:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800221a:	f107 030c 	add.w	r3, r7, #12
 800221e:	4619      	mov	r1, r3
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <HAL_SPI_MspInit+0x88>)
 8002222:	f000 fb53 	bl	80028cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002238:	2305      	movs	r3, #5
 800223a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002246:	f000 fb41 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40003800 	.word	0x40003800
 8002258:	48000800 	.word	0x48000800

0800225c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b09c      	sub	sp, #112	; 0x70
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	2250      	movs	r2, #80	; 0x50
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f004 f899 	bl	80063b4 <memset>
  if(huart->Instance==USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a16      	ldr	r2, [pc, #88]	; (80022e0 <HAL_UART_MspInit+0x84>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d124      	bne.n	80022d6 <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800228c:	2301      	movs	r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002290:	2302      	movs	r3, #2
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002294:	f107 030c 	add.w	r3, r7, #12
 8002298:	4618      	mov	r0, r3
 800229a:	f001 fffe 	bl	800429a <HAL_RCCEx_PeriphCLKConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022a4:	f7ff ff3c 	bl	8002120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80022ac:	f7ff ff6f 	bl	800218e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b0:	2002      	movs	r0, #2
 80022b2:	f7ff ff3a 	bl	800212a <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022b6:	23c0      	movs	r3, #192	; 0xc0
 80022b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c6:	2307      	movs	r3, #7
 80022c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80022ce:	4619      	mov	r1, r3
 80022d0:	4804      	ldr	r0, [pc, #16]	; (80022e4 <HAL_UART_MspInit+0x88>)
 80022d2:	f000 fafb 	bl	80028cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022d6:	bf00      	nop
 80022d8:	3770      	adds	r7, #112	; 0x70
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40013800 	.word	0x40013800
 80022e4:	48000400 	.word	0x48000400

080022e8 <PendSV_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fa:	f000 f9b3 	bl	8002664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}

08002302 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800230c:	f003 fb9c 	bl	8005a48 <__errno>
 8002310:	4603      	mov	r3, r0
 8002312:	2216      	movs	r2, #22
 8002314:	601a      	str	r2, [r3, #0]
  return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <_exit>:

void _exit (int status)
{
 8002322:	b580      	push	{r7, lr}
 8002324:	b082      	sub	sp, #8
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800232a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff ffe7 	bl	8002302 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002334:	e7fe      	b.n	8002334 <_exit+0x12>

08002336 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e00a      	b.n	800235e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002348:	f3af 8000 	nop.w
 800234c:	4601      	mov	r1, r0
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	60ba      	str	r2, [r7, #8]
 8002354:	b2ca      	uxtb	r2, r1
 8002356:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	3301      	adds	r3, #1
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	429a      	cmp	r2, r3
 8002364:	dbf0      	blt.n	8002348 <_read+0x12>
  }

  return len;
 8002366:	687b      	ldr	r3, [r7, #4]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
 8002380:	e009      	b.n	8002396 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	1c5a      	adds	r2, r3, #1
 8002386:	60ba      	str	r2, [r7, #8]
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff feb6 	bl	80020fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3301      	adds	r3, #1
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	429a      	cmp	r2, r3
 800239c:	dbf1      	blt.n	8002382 <_write+0x12>
  }
  return len;
 800239e:	687b      	ldr	r3, [r7, #4]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <_close>:

int _close(int file)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023d0:	605a      	str	r2, [r3, #4]
  return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_isatty>:

int _isatty(int file)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023e8:	2301      	movs	r3, #1
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_open>:

int _open(char *path, int flags, ...)
{
 8002410:	b40e      	push	{r1, r2, r3}
 8002412:	b480      	push	{r7}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 800241a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	b003      	add	sp, #12
 800242a:	4770      	bx	lr

0800242c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002434:	4a14      	ldr	r2, [pc, #80]	; (8002488 <_sbrk+0x5c>)
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <_sbrk+0x60>)
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002440:	4b13      	ldr	r3, [pc, #76]	; (8002490 <_sbrk+0x64>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d102      	bne.n	800244e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <_sbrk+0x64>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <_sbrk+0x68>)
 800244c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <_sbrk+0x64>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4413      	add	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	429a      	cmp	r2, r3
 800245a:	d207      	bcs.n	800246c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800245c:	f003 faf4 	bl	8005a48 <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	220c      	movs	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800246a:	e009      	b.n	8002480 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4a05      	ldr	r2, [pc, #20]	; (8002490 <_sbrk+0x64>)
 800247c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3718      	adds	r7, #24
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20030000 	.word	0x20030000
 800248c:	00000400 	.word	0x00000400
 8002490:	200001e4 	.word	0x200001e4
 8002494:	20000200 	.word	0x20000200

08002498 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800249c:	4b24      	ldr	r3, [pc, #144]	; (8002530 <SystemInit+0x98>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	4a23      	ldr	r2, [pc, #140]	; (8002530 <SystemInit+0x98>)
 80024a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024b6:	f043 0301 	orr.w	r3, r3, #1
 80024ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80024bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c0:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80024c4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80024d0:	4b18      	ldr	r3, [pc, #96]	; (8002534 <SystemInit+0x9c>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80024d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e2:	f023 0305 	bic.w	r3, r3, #5
 80024e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80024ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f6:	f023 0301 	bic.w	r3, r3, #1
 80024fa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80024fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002502:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <SystemInit+0xa0>)
 8002504:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002506:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <SystemInit+0xa0>)
 800250c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800250e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002518:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800251e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002522:	2200      	movs	r2, #0
 8002524:	619a      	str	r2, [r3, #24]
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	faf6fefb 	.word	0xfaf6fefb
 8002538:	22041000 	.word	0x22041000

0800253c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800253c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800253e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002540:	3304      	adds	r3, #4

08002542 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002542:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002544:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002546:	d3f9      	bcc.n	800253c <CopyDataInit>
  bx lr
 8002548:	4770      	bx	lr

0800254a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800254a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800254c:	3004      	adds	r0, #4

0800254e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800254e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002550:	d3fb      	bcc.n	800254a <FillZerobss>
  bx lr
 8002552:	4770      	bx	lr

08002554 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002554:	480c      	ldr	r0, [pc, #48]	; (8002588 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002556:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002558:	f7ff ff9e 	bl	8002498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 800255c:	480b      	ldr	r0, [pc, #44]	; (800258c <LoopForever+0x6>)
 800255e:	490c      	ldr	r1, [pc, #48]	; (8002590 <LoopForever+0xa>)
 8002560:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <LoopForever+0xe>)
 8002562:	2300      	movs	r3, #0
 8002564:	f7ff ffed 	bl	8002542 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002568:	480b      	ldr	r0, [pc, #44]	; (8002598 <LoopForever+0x12>)
 800256a:	490c      	ldr	r1, [pc, #48]	; (800259c <LoopForever+0x16>)
 800256c:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <LoopForever+0x1a>)
 800256e:	2300      	movs	r3, #0
 8002570:	f7ff ffe7 	bl	8002542 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002574:	480b      	ldr	r0, [pc, #44]	; (80025a4 <LoopForever+0x1e>)
 8002576:	490c      	ldr	r1, [pc, #48]	; (80025a8 <LoopForever+0x22>)
 8002578:	2300      	movs	r3, #0
 800257a:	f7ff ffe8 	bl	800254e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800257e:	f003 fe75 	bl	800626c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002582:	f7ff fb49 	bl	8001c18 <main>

08002586 <LoopForever>:

LoopForever:
  b LoopForever
 8002586:	e7fe      	b.n	8002586 <LoopForever>
  ldr   r0, =_estack
 8002588:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800258c:	20000008 	.word	0x20000008
 8002590:	20000098 	.word	0x20000098
 8002594:	080093b0 	.word	0x080093b0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002598:	20030000 	.word	0x20030000
 800259c:	20030000 	.word	0x20030000
 80025a0:	08009440 	.word	0x08009440
  INIT_BSS _sbss, _ebss
 80025a4:	20000098 	.word	0x20000098
 80025a8:	200001fc 	.word	0x200001fc

080025ac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80025ac:	e7fe      	b.n	80025ac <ADC1_IRQHandler>
	...

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80025b6:	2300      	movs	r3, #0
 80025b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025ba:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_Init+0x3c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_Init+0x3c>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c6:	2003      	movs	r0, #3
 80025c8:	f000 f94e 	bl	8002868 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025cc:	2000      	movs	r0, #0
 80025ce:	f000 f80f 	bl	80025f0 <HAL_InitTick>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d002      	beq.n	80025de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	71fb      	strb	r3, [r7, #7]
 80025dc:	e001      	b.n	80025e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025de:	f7ff fdef 	bl	80021c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025e2:	79fb      	ldrb	r3, [r7, #7]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	58004000 	.word	0x58004000

080025f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80025fc:	4b17      	ldr	r3, [pc, #92]	; (800265c <HAL_InitTick+0x6c>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d024      	beq.n	800264e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002604:	f001 fbb8 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b14      	ldr	r3, [pc, #80]	; (800265c <HAL_InitTick+0x6c>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	4619      	mov	r1, r3
 8002610:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002614:	fbb3 f3f1 	udiv	r3, r3, r1
 8002618:	fbb2 f3f3 	udiv	r3, r2, r3
 800261c:	4618      	mov	r0, r3
 800261e:	f000 f948 	bl	80028b2 <HAL_SYSTICK_Config>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10f      	bne.n	8002648 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b0f      	cmp	r3, #15
 800262c:	d809      	bhi.n	8002642 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800262e:	2200      	movs	r2, #0
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002636:	f000 f922 	bl	800287e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800263a:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_InitTick+0x70>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e007      	b.n	8002652 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	73fb      	strb	r3, [r7, #15]
 8002646:	e004      	b.n	8002652 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	e001      	b.n	8002652 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002652:	7bfb      	ldrb	r3, [r7, #15]
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000030 	.word	0x20000030
 8002660:	2000002c 	.word	0x2000002c

08002664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002668:	4b06      	ldr	r3, [pc, #24]	; (8002684 <HAL_IncTick+0x20>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	461a      	mov	r2, r3
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <HAL_IncTick+0x24>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4413      	add	r3, r2
 8002674:	4a04      	ldr	r2, [pc, #16]	; (8002688 <HAL_IncTick+0x24>)
 8002676:	6013      	str	r3, [r2, #0]
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	20000030 	.word	0x20000030
 8002688:	200001e8 	.word	0x200001e8

0800268c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return uwTick;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_GetTick+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	200001e8 	.word	0x200001e8

080026a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80026a8:	4b03      	ldr	r3, [pc, #12]	; (80026b8 <HAL_GetTickPrio+0x14>)
 80026aa:	681b      	ldr	r3, [r3, #0]
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000002c 	.word	0x2000002c

080026bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff ffe2 	bl	800268c <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026d4:	d005      	beq.n	80026e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d6:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <HAL_Delay+0x44>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	461a      	mov	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026e2:	bf00      	nop
 80026e4:	f7ff ffd2 	bl	800268c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d8f7      	bhi.n	80026e4 <HAL_Delay+0x28>
  {
  }
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000030 	.word	0x20000030

08002704 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002714:	4b0c      	ldr	r3, [pc, #48]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002720:	4013      	ands	r3, r2
 8002722:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800272c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002730:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002734:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002736:	4a04      	ldr	r2, [pc, #16]	; (8002748 <__NVIC_SetPriorityGrouping+0x44>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	60d3      	str	r3, [r2, #12]
}
 800273c:	bf00      	nop
 800273e:	3714      	adds	r7, #20
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000ed00 	.word	0xe000ed00

0800274c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002750:	4b04      	ldr	r3, [pc, #16]	; (8002764 <__NVIC_GetPriorityGrouping+0x18>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	f003 0307 	and.w	r3, r3, #7
}
 800275a:	4618      	mov	r0, r3
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	4603      	mov	r3, r0
 8002770:	6039      	str	r1, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002778:	2b00      	cmp	r3, #0
 800277a:	db0a      	blt.n	8002792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	b2da      	uxtb	r2, r3
 8002780:	490c      	ldr	r1, [pc, #48]	; (80027b4 <__NVIC_SetPriority+0x4c>)
 8002782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002786:	0112      	lsls	r2, r2, #4
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	440b      	add	r3, r1
 800278c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002790:	e00a      	b.n	80027a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	4908      	ldr	r1, [pc, #32]	; (80027b8 <__NVIC_SetPriority+0x50>)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	3b04      	subs	r3, #4
 80027a0:	0112      	lsls	r2, r2, #4
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	440b      	add	r3, r1
 80027a6:	761a      	strb	r2, [r3, #24]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	e000e100 	.word	0xe000e100
 80027b8:	e000ed00 	.word	0xe000ed00

080027bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027bc:	b480      	push	{r7}
 80027be:	b089      	sub	sp, #36	; 0x24
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f003 0307 	and.w	r3, r3, #7
 80027ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f1c3 0307 	rsb	r3, r3, #7
 80027d6:	2b04      	cmp	r3, #4
 80027d8:	bf28      	it	cs
 80027da:	2304      	movcs	r3, #4
 80027dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	3304      	adds	r3, #4
 80027e2:	2b06      	cmp	r3, #6
 80027e4:	d902      	bls.n	80027ec <NVIC_EncodePriority+0x30>
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3b03      	subs	r3, #3
 80027ea:	e000      	b.n	80027ee <NVIC_EncodePriority+0x32>
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43da      	mvns	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	401a      	ands	r2, r3
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	fa01 f303 	lsl.w	r3, r1, r3
 800280e:	43d9      	mvns	r1, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002814:	4313      	orrs	r3, r2
         );
}
 8002816:	4618      	mov	r0, r3
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
	...

08002824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002834:	d301      	bcc.n	800283a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <SysTick_Config+0x40>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002842:	210f      	movs	r1, #15
 8002844:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002848:	f7ff ff8e 	bl	8002768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800284c:	4b05      	ldr	r3, [pc, #20]	; (8002864 <SysTick_Config+0x40>)
 800284e:	2200      	movs	r2, #0
 8002850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <SysTick_Config+0x40>)
 8002854:	2207      	movs	r2, #7
 8002856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	e000e010 	.word	0xe000e010

08002868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f7ff ff47 	bl	8002704 <__NVIC_SetPriorityGrouping>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b086      	sub	sp, #24
 8002882:	af00      	add	r7, sp, #0
 8002884:	4603      	mov	r3, r0
 8002886:	60b9      	str	r1, [r7, #8]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800288c:	f7ff ff5e 	bl	800274c <__NVIC_GetPriorityGrouping>
 8002890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	6978      	ldr	r0, [r7, #20]
 8002898:	f7ff ff90 	bl	80027bc <NVIC_EncodePriority>
 800289c:	4602      	mov	r2, r0
 800289e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff ff5f 	bl	8002768 <__NVIC_SetPriority>
}
 80028aa:	bf00      	nop
 80028ac:	3718      	adds	r7, #24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b082      	sub	sp, #8
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff ffb2 	bl	8002824 <SysTick_Config>
 80028c0:	4603      	mov	r3, r0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028d6:	2300      	movs	r3, #0
 80028d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028da:	e14c      	b.n	8002b76 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2101      	movs	r1, #1
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	4013      	ands	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 813e 	beq.w	8002b70 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d005      	beq.n	800290c <HAL_GPIO_Init+0x40>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d130      	bne.n	800296e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	2203      	movs	r2, #3
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	693a      	ldr	r2, [r7, #16]
 8002932:	4313      	orrs	r3, r2
 8002934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002942:	2201      	movs	r2, #1
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	43db      	mvns	r3, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4013      	ands	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	091b      	lsrs	r3, r3, #4
 8002958:	f003 0201 	and.w	r2, r3, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	2b03      	cmp	r3, #3
 8002978:	d017      	beq.n	80029aa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	2203      	movs	r2, #3
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43db      	mvns	r3, r3
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4013      	ands	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	693a      	ldr	r2, [r7, #16]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d123      	bne.n	80029fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	220f      	movs	r2, #15
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	f003 0307 	and.w	r3, r3, #7
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	6939      	ldr	r1, [r7, #16]
 80029fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	2203      	movs	r2, #3
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4013      	ands	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 8098 	beq.w	8002b70 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8002a40:	4a54      	ldr	r2, [pc, #336]	; (8002b94 <HAL_GPIO_Init+0x2c8>)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	089b      	lsrs	r3, r3, #2
 8002a46:	3302      	adds	r3, #2
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0303 	and.w	r3, r3, #3
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	220f      	movs	r2, #15
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a6a:	d019      	beq.n	8002aa0 <HAL_GPIO_Init+0x1d4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a4a      	ldr	r2, [pc, #296]	; (8002b98 <HAL_GPIO_Init+0x2cc>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d013      	beq.n	8002a9c <HAL_GPIO_Init+0x1d0>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a49      	ldr	r2, [pc, #292]	; (8002b9c <HAL_GPIO_Init+0x2d0>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00d      	beq.n	8002a98 <HAL_GPIO_Init+0x1cc>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a48      	ldr	r2, [pc, #288]	; (8002ba0 <HAL_GPIO_Init+0x2d4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d007      	beq.n	8002a94 <HAL_GPIO_Init+0x1c8>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a47      	ldr	r2, [pc, #284]	; (8002ba4 <HAL_GPIO_Init+0x2d8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_GPIO_Init+0x1c4>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	e008      	b.n	8002aa2 <HAL_GPIO_Init+0x1d6>
 8002a90:	2307      	movs	r3, #7
 8002a92:	e006      	b.n	8002aa2 <HAL_GPIO_Init+0x1d6>
 8002a94:	2303      	movs	r3, #3
 8002a96:	e004      	b.n	8002aa2 <HAL_GPIO_Init+0x1d6>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e002      	b.n	8002aa2 <HAL_GPIO_Init+0x1d6>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e000      	b.n	8002aa2 <HAL_GPIO_Init+0x1d6>
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	f002 0203 	and.w	r2, r2, #3
 8002aa8:	0092      	lsls	r2, r2, #2
 8002aaa:	4093      	lsls	r3, r2
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ab2:	4938      	ldr	r1, [pc, #224]	; (8002b94 <HAL_GPIO_Init+0x2c8>)
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	089b      	lsrs	r3, r3, #2
 8002ab8:	3302      	adds	r3, #2
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac0:	4b39      	ldr	r3, [pc, #228]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ae4:	4a30      	ldr	r2, [pc, #192]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002aea:	4b2f      	ldr	r3, [pc, #188]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b0e:	4a26      	ldr	r2, [pc, #152]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002b14:	4b24      	ldr	r3, [pc, #144]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b3a:	4a1b      	ldr	r2, [pc, #108]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002b42:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b68:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <HAL_GPIO_Init+0x2dc>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	3301      	adds	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f47f aeab 	bne.w	80028dc <HAL_GPIO_Init+0x10>
  }
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	40010000 	.word	0x40010000
 8002b98:	48000400 	.word	0x48000400
 8002b9c:	48000800 	.word	0x48000800
 8002ba0:	48000c00 	.word	0x48000c00
 8002ba4:	48001000 	.word	0x48001000
 8002ba8:	58000800 	.word	0x58000800

08002bac <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d002      	beq.n	8002bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	e001      	b.n	8002bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	460b      	mov	r3, r1
 8002be6:	807b      	strh	r3, [r7, #2]
 8002be8:	4613      	mov	r3, r2
 8002bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bec:	787b      	ldrb	r3, [r7, #1]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bf2:	887a      	ldrh	r2, [r7, #2]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf8:	e002      	b.n	8002c00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bfa:	887a      	ldrh	r2, [r7, #2]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a04      	ldr	r2, [pc, #16]	; (8002c28 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1a:	6013      	str	r3, [r2, #0]
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	58000400 	.word	0x58000400

08002c2c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c30:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	58000400 	.word	0x58000400

08002c48 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5a:	d101      	bne.n	8002c60 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002c8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cba:	d101      	bne.n	8002cc0 <LL_RCC_HSE_IsReady+0x18>
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e000      	b.n	8002cc2 <LL_RCC_HSE_IsReady+0x1a>
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8002cea:	b480      	push	{r7}
 8002cec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cfc:	6013      	str	r3, [r2, #0]
}
 8002cfe:	bf00      	nop
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d101      	bne.n	8002d20 <LL_RCC_HSI_IsReady+0x18>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e000      	b.n	8002d22 <LL_RCC_HSI_IsReady+0x1a>
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	061b      	lsls	r3, r3, #24
 8002d42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d46:	4313      	orrs	r3, r2
 8002d48:	604b      	str	r3, [r1, #4]
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8002d56:	b480      	push	{r7}
 8002d58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002d6e:	bf00      	nop
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8002d7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8002d90:	bf00      	nop
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8002d9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002da2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d101      	bne.n	8002db2 <LL_RCC_HSI48_IsReady+0x18>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <LL_RCC_HSI48_IsReady+0x1a>
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002dd6:	bf00      	nop
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8002e02:	b480      	push	{r7}
 8002e04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e12:	f043 0304 	orr.w	r3, r3, #4
 8002e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e34:	f023 0304 	bic.w	r3, r3, #4
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e3c:	bf00      	nop
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d101      	bne.n	8002e5e <LL_RCC_LSE_IsReady+0x18>
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e000      	b.n	8002e60 <LL_RCC_LSE_IsReady+0x1a>
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr

08002e6a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002e82:	bf00      	nop
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8002e90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eba:	f003 0302 	and.w	r3, r3, #2
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d101      	bne.n	8002ec6 <LL_RCC_LSI1_IsReady+0x18>
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e000      	b.n	8002ec8 <LL_RCC_LSI1_IsReady+0x1a>
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ede:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ee2:	f043 0304 	orr.w	r3, r3, #4
 8002ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f04:	f023 0304 	bic.w	r3, r3, #4
 8002f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8002f16:	b480      	push	{r7}
 8002f18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8002f1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d101      	bne.n	8002f2e <LL_RCC_LSI2_IsReady+0x18>
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <LL_RCC_LSI2_IsReady+0x1a>
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8002f42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f56:	4313      	orrs	r3, r2
 8002f58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002f6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f76:	f043 0301 	orr.w	r3, r3, #1
 8002f7a:	6013      	str	r3, [r2, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8002f86:	b480      	push	{r7}
 8002f88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f94:	f023 0301 	bic.w	r3, r3, #1
 8002f98:	6013      	str	r3, [r2, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d101      	bne.n	8002fba <LL_RCC_MSI_IsReady+0x16>
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e000      	b.n	8002fbc <LL_RCC_MSI_IsReady+0x18>
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b083      	sub	sp, #12
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8002fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ffe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2bb0      	cmp	r3, #176	; 0xb0
 8003004:	d901      	bls.n	800300a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003006:	23b0      	movs	r3, #176	; 0xb0
 8003008:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800300a:	687b      	ldr	r3, [r7, #4]
}
 800300c:	4618      	mov	r0, r3
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	021b      	lsls	r3, r3, #8
 800302e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003032:	4313      	orrs	r3, r2
 8003034:	604b      	str	r3, [r1, #4]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800304a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 0203 	bic.w	r2, r3, #3
 8003054:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800306e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f003 030c 	and.w	r3, r3, #12
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003094:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4313      	orrs	r3, r2
 800309c:	608b      	str	r3, [r1, #8]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80030de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80030e6:	f023 020f 	bic.w	r2, r3, #15
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800310c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003116:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4313      	orrs	r3, r2
 800311e:	608b      	str	r3, [r1, #8]
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800313e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4313      	orrs	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
}
 8003148:	bf00      	nop
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003154:	b480      	push	{r7}
 8003156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003162:	4618      	mov	r0, r3
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003174:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800317e:	4618      	mov	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80031a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80031da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031e8:	6013      	str	r3, [r2, #0]
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003202:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003206:	d101      	bne.n	800320c <LL_RCC_PLL_IsReady+0x18>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_RCC_PLL_IsReady+0x1a>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800321c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	0a1b      	lsrs	r3, r3, #8
 8003224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003228:	4618      	mov	r0, r3
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003232:	b480      	push	{r7}
 8003234:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003240:	4618      	mov	r0, r3
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr

0800324a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800324a:	b480      	push	{r7}
 800324c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800324e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003258:	4618      	mov	r0, r3
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f003 0303 	and.w	r3, r3, #3
}
 8003270:	4618      	mov	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800327e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328c:	d101      	bne.n	8003292 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032b2:	d101      	bne.n	80032b8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80032b4:	2301      	movs	r3, #1
 80032b6:	e000      	b.n	80032ba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80032c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032cc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032d8:	d101      	bne.n	80032de <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80032ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032fc:	d101      	bne.n	8003302 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80032fe:	2301      	movs	r3, #1
 8003300:	e000      	b.n	8003304 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800330e:	b480      	push	{r7}
 8003310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800331c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003320:	d101      	bne.n	8003326 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b590      	push	{r4, r7, lr}
 8003336:	b08d      	sub	sp, #52	; 0x34
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e363      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	f000 808d 	beq.w	800346e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003354:	f7ff fe89 	bl	800306a <LL_RCC_GetSysClkSource>
 8003358:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800335a:	f7ff ff82 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 800335e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_RCC_OscConfig+0x3e>
 8003366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003368:	2b0c      	cmp	r3, #12
 800336a:	d147      	bne.n	80033fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	2b01      	cmp	r3, #1
 8003370:	d144      	bne.n	80033fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e347      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003382:	f7ff fe34 	bl	8002fee <LL_RCC_MSI_GetRange>
 8003386:	4603      	mov	r3, r0
 8003388:	429c      	cmp	r4, r3
 800338a:	d914      	bls.n	80033b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	4618      	mov	r0, r3
 8003392:	f000 fd31 	bl	8003df8 <RCC_SetFlashLatencyFromMSIRange>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e336      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fe0e 	bl	8002fc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe32 	bl	8003018 <LL_RCC_MSI_SetCalibTrimming>
 80033b4:	e013      	b.n	80033de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fe03 	bl	8002fc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff fe27 	bl	8003018 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fd12 	bl	8003df8 <RCC_SetFlashLatencyFromMSIRange>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e317      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033de:	f000 fccb 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4aa4      	ldr	r2, [pc, #656]	; (8003678 <HAL_RCC_OscConfig+0x344>)
 80033e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80033e8:	4ba4      	ldr	r3, [pc, #656]	; (800367c <HAL_RCC_OscConfig+0x348>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff f8ff 	bl	80025f0 <HAL_InitTick>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d039      	beq.n	800346c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e308      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	69db      	ldr	r3, [r3, #28]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01e      	beq.n	8003442 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003404:	f7ff fdb0 	bl	8002f68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003408:	f7ff f940 	bl	800268c <HAL_GetTick>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003410:	f7ff f93c 	bl	800268c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e2f5      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003422:	f7ff fdbf 	bl	8002fa4 <LL_RCC_MSI_IsReady>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d0f1      	beq.n	8003410 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fdc8 	bl	8002fc6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fdec 	bl	8003018 <LL_RCC_MSI_SetCalibTrimming>
 8003440:	e015      	b.n	800346e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003442:	f7ff fda0 	bl	8002f86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003446:	f7ff f921 	bl	800268c <HAL_GetTick>
 800344a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800344e:	f7ff f91d 	bl	800268c <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e2d6      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003460:	f7ff fda0 	bl	8002fa4 <LL_RCC_MSI_IsReady>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f1      	bne.n	800344e <HAL_RCC_OscConfig+0x11a>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800346c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b00      	cmp	r3, #0
 8003478:	d047      	beq.n	800350a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800347a:	f7ff fdf6 	bl	800306a <LL_RCC_GetSysClkSource>
 800347e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003480:	f7ff feef 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 8003484:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d005      	beq.n	8003498 <HAL_RCC_OscConfig+0x164>
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d108      	bne.n	80034a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	2b03      	cmp	r3, #3
 8003496:	d105      	bne.n	80034a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d134      	bne.n	800350a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e2b4      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d102      	bne.n	80034b4 <HAL_RCC_OscConfig+0x180>
 80034ae:	f7ff fbdd 	bl	8002c6c <LL_RCC_HSE_Enable>
 80034b2:	e001      	b.n	80034b8 <HAL_RCC_OscConfig+0x184>
 80034b4:	f7ff fbe9 	bl	8002c8a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7ff f8e4 	bl	800268c <HAL_GetTick>
 80034c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c8:	f7ff f8e0 	bl	800268c <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e299      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80034da:	f7ff fbe5 	bl	8002ca8 <LL_RCC_HSE_IsReady>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f1      	beq.n	80034c8 <HAL_RCC_OscConfig+0x194>
 80034e4:	e011      	b.n	800350a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e6:	f7ff f8d1 	bl	800268c <HAL_GetTick>
 80034ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034ee:	f7ff f8cd 	bl	800268c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e286      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003500:	f7ff fbd2 	bl	8002ca8 <LL_RCC_HSE_IsReady>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f1      	bne.n	80034ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d04c      	beq.n	80035b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003516:	f7ff fda8 	bl	800306a <LL_RCC_GetSysClkSource>
 800351a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800351c:	f7ff fea1 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 8003520:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d005      	beq.n	8003534 <HAL_RCC_OscConfig+0x200>
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b0c      	cmp	r3, #12
 800352c:	d10e      	bne.n	800354c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b02      	cmp	r3, #2
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d101      	bne.n	8003540 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e266      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fbf1 	bl	8002d2c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800354a:	e031      	b.n	80035b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d019      	beq.n	8003588 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003554:	f7ff fbba 	bl	8002ccc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7ff f898 	bl	800268c <HAL_GetTick>
 800355c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7ff f894 	bl	800268c <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e24d      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003572:	f7ff fbc9 	bl	8002d08 <LL_RCC_HSI_IsReady>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0f1      	beq.n	8003560 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbd3 	bl	8002d2c <LL_RCC_HSI_SetCalibTrimming>
 8003586:	e013      	b.n	80035b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003588:	f7ff fbaf 	bl	8002cea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358c:	f7ff f87e 	bl	800268c <HAL_GetTick>
 8003590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003594:	f7ff f87a 	bl	800268c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e233      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80035a6:	f7ff fbaf 	bl	8002d08 <LL_RCC_HSI_IsReady>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1f1      	bne.n	8003594 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d106      	bne.n	80035ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 80a3 	beq.w	8003710 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d076      	beq.n	80036c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d046      	beq.n	800366c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80035de:	f7ff fc66 	bl	8002eae <LL_RCC_LSI1_IsReady>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d113      	bne.n	8003610 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80035e8:	f7ff fc3f 	bl	8002e6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035ec:	f7ff f84e 	bl	800268c <HAL_GetTick>
 80035f0:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80035f4:	f7ff f84a 	bl	800268c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e203      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003606:	f7ff fc52 	bl	8002eae <LL_RCC_LSI1_IsReady>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f1      	beq.n	80035f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003610:	f7ff fc5f 	bl	8002ed2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003614:	f7ff f83a 	bl	800268c <HAL_GetTick>
 8003618:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800361c:	f7ff f836 	bl	800268c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b03      	cmp	r3, #3
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e1ef      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800362e:	f7ff fc72 	bl	8002f16 <LL_RCC_LSI2_IsReady>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0f1      	beq.n	800361c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fc7c 	bl	8002f3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003642:	f7ff fc23 	bl	8002e8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7ff f821 	bl	800268c <HAL_GetTick>
 800364a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800364e:	f7ff f81d 	bl	800268c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e1d6      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003660:	f7ff fc25 	bl	8002eae <LL_RCC_LSI1_IsReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f1      	bne.n	800364e <HAL_RCC_OscConfig+0x31a>
 800366a:	e051      	b.n	8003710 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800366c:	f7ff fbfd 	bl	8002e6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7ff f80c 	bl	800268c <HAL_GetTick>
 8003674:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003676:	e00c      	b.n	8003692 <HAL_RCC_OscConfig+0x35e>
 8003678:	20000028 	.word	0x20000028
 800367c:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003680:	f7ff f804 	bl	800268c <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e1bd      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003692:	f7ff fc0c 	bl	8002eae <LL_RCC_LSI1_IsReady>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d0f1      	beq.n	8003680 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800369c:	f7ff fc2a 	bl	8002ef4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036a0:	e008      	b.n	80036b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036a2:	f7fe fff3 	bl	800268c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d901      	bls.n	80036b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e1ac      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80036b4:	f7ff fc2f 	bl	8002f16 <LL_RCC_LSI2_IsReady>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f1      	bne.n	80036a2 <HAL_RCC_OscConfig+0x36e>
 80036be:	e027      	b.n	8003710 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80036c0:	f7ff fc18 	bl	8002ef4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036c4:	f7fe ffe2 	bl	800268c <HAL_GetTick>
 80036c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80036cc:	f7fe ffde 	bl	800268c <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e197      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80036de:	f7ff fc1a 	bl	8002f16 <LL_RCC_LSI2_IsReady>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d1f1      	bne.n	80036cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80036e8:	f7ff fbd0 	bl	8002e8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ec:	f7fe ffce 	bl	800268c <HAL_GetTick>
 80036f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80036f4:	f7fe ffca 	bl	800268c <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e183      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003706:	f7ff fbd2 	bl	8002eae <LL_RCC_LSI1_IsReady>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f1      	bne.n	80036f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d05b      	beq.n	80037d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371c:	4ba7      	ldr	r3, [pc, #668]	; (80039bc <HAL_RCC_OscConfig+0x688>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003724:	2b00      	cmp	r3, #0
 8003726:	d114      	bne.n	8003752 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003728:	f7ff fa70 	bl	8002c0c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372c:	f7fe ffae 	bl	800268c <HAL_GetTick>
 8003730:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003734:	f7fe ffaa 	bl	800268c <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e163      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003746:	4b9d      	ldr	r3, [pc, #628]	; (80039bc <HAL_RCC_OscConfig+0x688>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d102      	bne.n	8003760 <HAL_RCC_OscConfig+0x42c>
 800375a:	f7ff fb30 	bl	8002dbe <LL_RCC_LSE_Enable>
 800375e:	e00c      	b.n	800377a <HAL_RCC_OscConfig+0x446>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d104      	bne.n	8003772 <HAL_RCC_OscConfig+0x43e>
 8003768:	f7ff fb4b 	bl	8002e02 <LL_RCC_LSE_EnableBypass>
 800376c:	f7ff fb27 	bl	8002dbe <LL_RCC_LSE_Enable>
 8003770:	e003      	b.n	800377a <HAL_RCC_OscConfig+0x446>
 8003772:	f7ff fb35 	bl	8002de0 <LL_RCC_LSE_Disable>
 8003776:	f7ff fb55 	bl	8002e24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d014      	beq.n	80037ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003782:	f7fe ff83 	bl	800268c <HAL_GetTick>
 8003786:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003788:	e00a      	b.n	80037a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378a:	f7fe ff7f 	bl	800268c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	f241 3288 	movw	r2, #5000	; 0x1388
 8003798:	4293      	cmp	r3, r2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e136      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80037a0:	f7ff fb51 	bl	8002e46 <LL_RCC_LSE_IsReady>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0ef      	beq.n	800378a <HAL_RCC_OscConfig+0x456>
 80037aa:	e013      	b.n	80037d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ac:	f7fe ff6e 	bl	800268c <HAL_GetTick>
 80037b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80037b2:	e00a      	b.n	80037ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b4:	f7fe ff6a 	bl	800268c <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d901      	bls.n	80037ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e121      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80037ca:	f7ff fb3c 	bl	8002e46 <LL_RCC_LSE_IsReady>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1ef      	bne.n	80037b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02c      	beq.n	800383a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d014      	beq.n	8003812 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e8:	f7ff fab5 	bl	8002d56 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe ff4e 	bl	800268c <HAL_GetTick>
 80037f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037f4:	f7fe ff4a 	bl	800268c <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e103      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8003806:	f7ff fac8 	bl	8002d9a <LL_RCC_HSI48_IsReady>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d0f1      	beq.n	80037f4 <HAL_RCC_OscConfig+0x4c0>
 8003810:	e013      	b.n	800383a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003812:	f7ff fab1 	bl	8002d78 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fe ff39 	bl	800268c <HAL_GetTick>
 800381a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800381e:	f7fe ff35 	bl	800268c <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e0ee      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8003830:	f7ff fab3 	bl	8002d9a <LL_RCC_HSI48_IsReady>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1f1      	bne.n	800381e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80e4 	beq.w	8003a0c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003844:	f7ff fc11 	bl	800306a <LL_RCC_GetSysClkSource>
 8003848:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800384a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	2b02      	cmp	r3, #2
 8003858:	f040 80b4 	bne.w	80039c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	429a      	cmp	r2, r3
 8003868:	d123      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d11c      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	0a1b      	lsrs	r3, r3, #8
 800387c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d114      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d10d      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d106      	bne.n	80038b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d05d      	beq.n	800396e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d058      	beq.n	800396a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0a1      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ca:	f7ff fc84 	bl	80031d6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038ce:	f7fe fedd 	bl	800268c <HAL_GetTick>
 80038d2:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fed9 	bl	800268c <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e092      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1ef      	bne.n	80038d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b30      	ldr	r3, [pc, #192]	; (80039c0 <HAL_RCC_OscConfig+0x68c>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800390e:	0212      	lsls	r2, r2, #8
 8003910:	4311      	orrs	r1, r2
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800391c:	4311      	orrs	r1, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003922:	430a      	orrs	r2, r1
 8003924:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003928:	4313      	orrs	r3, r2
 800392a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800392c:	f7ff fc44 	bl	80031b8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800393e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003940:	f7fe fea4 	bl	800268c <HAL_GetTick>
 8003944:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fe fea0 	bl	800268c <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e059      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003968:	e050      	b.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e04f      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d147      	bne.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800397c:	f7ff fc1c 	bl	80031b8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800398a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800398e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003990:	f7fe fe7c 	bl	800268c <HAL_GetTick>
 8003994:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fe fe78 	bl	800268c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e031      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d0ef      	beq.n	8003998 <HAL_RCC_OscConfig+0x664>
 80039b8:	e028      	b.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
 80039ba:	bf00      	nop
 80039bc:	58000400 	.word	0x58000400
 80039c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b0c      	cmp	r3, #12
 80039c8:	d01e      	beq.n	8003a08 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ca:	f7ff fc04 	bl	80031d6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ce:	f7fe fe5d 	bl	800268c <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d6:	f7fe fe59 	bl	800268c <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e012      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1ef      	bne.n	80039d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80039f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a00:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <HAL_RCC_OscConfig+0x6e4>)
 8003a02:	4013      	ands	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
 8003a06:	e001      	b.n	8003a0c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3734      	adds	r7, #52	; 0x34
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd90      	pop	{r4, r7, pc}
 8003a16:	bf00      	nop
 8003a18:	eefefffc 	.word	0xeefefffc

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e12d      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b98      	ldr	r3, [pc, #608]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d91b      	bls.n	8003a76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b95      	ldr	r3, [pc, #596]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4993      	ldr	r1, [pc, #588]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a4e:	f7fe fe1d 	bl	800268c <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a54:	e008      	b.n	8003a68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003a56:	f7fe fe19 	bl	800268c <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e111      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a68:	4b8a      	ldr	r3, [pc, #552]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	683a      	ldr	r2, [r7, #0]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d1ef      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d016      	beq.n	8003ab0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff fafb 	bl	8003082 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fdfe 	bl	800268c <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a94:	f7fe fdfa 	bl	800268c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e0f2      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003aa6:	f7ff fbe8 	bl	800327a <LL_RCC_IsActiveFlag_HPRE>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f1      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0320 	and.w	r3, r3, #32
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d016      	beq.n	8003aea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7ff faf2 	bl	80030aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003ac6:	f7fe fde1 	bl	800268c <HAL_GetTick>
 8003aca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003ace:	f7fe fddd 	bl	800268c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e0d5      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8003ae0:	f7ff fbdd 	bl	800329e <LL_RCC_IsActiveFlag_C2HPRE>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d0f1      	beq.n	8003ace <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7ff faeb 	bl	80030d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b00:	f7fe fdc4 	bl	800268c <HAL_GetTick>
 8003b04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b08:	f7fe fdc0 	bl	800268c <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e0b8      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8003b1a:	f7ff fbd3 	bl	80032c4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f1      	beq.n	8003b08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d016      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fae5 	bl	8003104 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b3a:	f7fe fda7 	bl	800268c <HAL_GetTick>
 8003b3e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b42:	f7fe fda3 	bl	800268c <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e09b      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8003b54:	f7ff fbc9 	bl	80032ea <LL_RCC_IsActiveFlag_PPRE1>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f1      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d017      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4618      	mov	r0, r3
 8003b72:	f7ff fadb 	bl	800312c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003b76:	f7fe fd89 	bl	800268c <HAL_GetTick>
 8003b7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b7c:	e008      	b.n	8003b90 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003b7e:	f7fe fd85 	bl	800268c <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d901      	bls.n	8003b90 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e07d      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003b90:	f7ff fbbd 	bl	800330e <LL_RCC_IsActiveFlag_PPRE2>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d0f1      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d043      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d106      	bne.n	8003bbc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003bae:	f7ff f87b 	bl	8002ca8 <LL_RCC_HSE_IsReady>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d11e      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e067      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b03      	cmp	r3, #3
 8003bc2:	d106      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8003bc4:	f7ff fb16 	bl	80031f4 <LL_RCC_PLL_IsReady>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d113      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e05c      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d106      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003bda:	f7ff f9e3 	bl	8002fa4 <LL_RCC_MSI_IsReady>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e051      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8003be8:	f7ff f88e 	bl	8002d08 <LL_RCC_HSI_IsReady>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e04a      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7ff fa21 	bl	8003042 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c00:	f7fe fd44 	bl	800268c <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c06:	e00a      	b.n	8003c1e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c08:	f7fe fd40 	bl	800268c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e036      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c1e:	f7ff fa24 	bl	800306a <LL_RCC_GetSysClkSource>
 8003c22:	4602      	mov	r2, r0
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d1ec      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c2e:	4b19      	ldr	r3, [pc, #100]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d21b      	bcs.n	8003c74 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3c:	4b15      	ldr	r3, [pc, #84]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f023 0207 	bic.w	r2, r3, #7
 8003c44:	4913      	ldr	r1, [pc, #76]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fe fd1e 	bl	800268c <HAL_GetTick>
 8003c50:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c54:	f7fe fd1a 	bl	800268c <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e012      	b.n	8003c8c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c66:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_ClockConfig+0x278>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d1ef      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c74:	f000 f880 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_RCC_ClockConfig+0x27c>)
 8003c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8003c7e:	f7fe fd11 	bl	80026a4 <HAL_GetTickPrio>
 8003c82:	4603      	mov	r3, r0
 8003c84:	4618      	mov	r0, r3
 8003c86:	f7fe fcb3 	bl	80025f0 <HAL_InitTick>
 8003c8a:	4603      	mov	r3, r0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	58004000 	.word	0x58004000
 8003c98:	20000028 	.word	0x20000028

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ca2:	f7ff f9e2 	bl	800306a <LL_RCC_GetSysClkSource>
 8003ca6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003cae:	f7ff f99e 	bl	8002fee <LL_RCC_MSI_GetRange>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	4a2b      	ldr	r2, [pc, #172]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e04b      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b04      	cmp	r3, #4
 8003cc8:	d102      	bne.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cca:	4b28      	ldr	r3, [pc, #160]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	e045      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d10a      	bne.n	8003cec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003cd6:	f7fe ffb7 	bl	8002c48 <LL_RCC_HSE_IsEnabledDiv2>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d102      	bne.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003ce0:	4b23      	ldr	r3, [pc, #140]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	e03a      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003ce6:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	e037      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003cec:	f7ff fab9 	bl	8003262 <LL_RCC_PLL_GetMainSource>
 8003cf0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d003      	beq.n	8003d00 <HAL_RCC_GetSysClockFreq+0x64>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d003      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x6a>
 8003cfe:	e00d      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003d00:	4b1a      	ldr	r3, [pc, #104]	; (8003d6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003d02:	60bb      	str	r3, [r7, #8]
        break;
 8003d04:	e015      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003d06:	f7fe ff9f 	bl	8002c48 <LL_RCC_HSE_IsEnabledDiv2>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d102      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003d10:	4b17      	ldr	r3, [pc, #92]	; (8003d70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003d12:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003d14:	e00d      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8003d16:	4b17      	ldr	r3, [pc, #92]	; (8003d74 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003d18:	60bb      	str	r3, [r7, #8]
        break;
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8003d1c:	f7ff f967 	bl	8002fee <LL_RCC_MSI_GetRange>
 8003d20:	4603      	mov	r3, r0
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	4a0f      	ldr	r2, [pc, #60]	; (8003d68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d2e:	60bb      	str	r3, [r7, #8]
        break;
 8003d30:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8003d32:	f7ff fa71 	bl	8003218 <LL_RCC_PLL_GetN>
 8003d36:	4602      	mov	r2, r0
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	fb03 f402 	mul.w	r4, r3, r2
 8003d3e:	f7ff fa84 	bl	800324a <LL_RCC_PLL_GetDivider>
 8003d42:	4603      	mov	r3, r0
 8003d44:	091b      	lsrs	r3, r3, #4
 8003d46:	3301      	adds	r3, #1
 8003d48:	fbb4 f4f3 	udiv	r4, r4, r3
 8003d4c:	f7ff fa71 	bl	8003232 <LL_RCC_PLL_GetR>
 8003d50:	4603      	mov	r3, r0
 8003d52:	0f5b      	lsrs	r3, r3, #29
 8003d54:	3301      	adds	r3, #1
 8003d56:	fbb4 f3f3 	udiv	r3, r4, r3
 8003d5a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3714      	adds	r7, #20
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd90      	pop	{r4, r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08008bd4 	.word	0x08008bd4
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	005b8d80 	.word	0x005b8d80
 8003d74:	00b71b00 	.word	0x00b71b00

08003d78 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b598      	push	{r3, r4, r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003d7c:	f7ff ff8e 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003d80:	4604      	mov	r4, r0
 8003d82:	f7ff f9e7 	bl	8003154 <LL_RCC_GetAHBPrescaler>
 8003d86:	4603      	mov	r3, r0
 8003d88:	091b      	lsrs	r3, r3, #4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	4a03      	ldr	r2, [pc, #12]	; (8003d9c <HAL_RCC_GetHCLKFreq+0x24>)
 8003d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d94:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd98      	pop	{r3, r4, r7, pc}
 8003d9c:	08008b74 	.word	0x08008b74

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b598      	push	{r3, r4, r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003da4:	f7ff ffe8 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003da8:	4604      	mov	r4, r0
 8003daa:	f7ff f9ed 	bl	8003188 <LL_RCC_GetAPB1Prescaler>
 8003dae:	4603      	mov	r3, r0
 8003db0:	0a1b      	lsrs	r3, r3, #8
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	4a04      	ldr	r2, [pc, #16]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd98      	pop	{r3, r4, r7, pc}
 8003dc8:	08008bb4 	.word	0x08008bb4

08003dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dcc:	b598      	push	{r3, r4, r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003dd0:	f7ff ffd2 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4604      	mov	r4, r0
 8003dd6:	f7ff f9e3 	bl	80031a0 <LL_RCC_GetAPB2Prescaler>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	0adb      	lsrs	r3, r3, #11
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	4a04      	ldr	r2, [pc, #16]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd98      	pop	{r3, r4, r7, pc}
 8003df4:	08008bb4 	.word	0x08008bb4

08003df8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2bb0      	cmp	r3, #176	; 0xb0
 8003e04:	d903      	bls.n	8003e0e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8003e06:	4b15      	ldr	r3, [pc, #84]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	e007      	b.n	8003e1e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	091b      	lsrs	r3, r3, #4
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	4a11      	ldr	r2, [pc, #68]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8003e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8003e1e:	f7ff f9a5 	bl	800316c <LL_RCC_GetAHB4Prescaler>
 8003e22:	4603      	mov	r3, r0
 8003e24:	091b      	lsrs	r3, r3, #4
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	4a0d      	ldr	r2, [pc, #52]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e36:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8003e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e40:	0c9c      	lsrs	r4, r3, #18
 8003e42:	f7fe fef3 	bl	8002c2c <HAL_PWREx_GetVoltageRange>
 8003e46:	4603      	mov	r3, r0
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f000 f80c 	bl	8003e68 <RCC_SetFlashLatency>
 8003e50:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3714      	adds	r7, #20
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd90      	pop	{r4, r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	08008bd4 	.word	0x08008bd4
 8003e60:	08008b74 	.word	0x08008b74
 8003e64:	431bde83 	.word	0x431bde83

08003e68 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003e68:	b590      	push	{r4, r7, lr}
 8003e6a:	b093      	sub	sp, #76	; 0x4c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <RCC_SetFlashLatency+0xe8>)
 8003e74:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8003e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8003e7e:	4a35      	ldr	r2, [pc, #212]	; (8003f54 <RCC_SetFlashLatency+0xec>)
 8003e80:	f107 031c 	add.w	r3, r7, #28
 8003e84:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8003e8a:	4b33      	ldr	r3, [pc, #204]	; (8003f58 <RCC_SetFlashLatency+0xf0>)
 8003e8c:	f107 040c 	add.w	r4, r7, #12
 8003e90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003e96:	2300      	movs	r3, #0
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea0:	d11a      	bne.n	8003ed8 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	643b      	str	r3, [r7, #64]	; 0x40
 8003ea6:	e013      	b.n	8003ed0 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	3348      	adds	r3, #72	; 0x48
 8003eae:	443b      	add	r3, r7
 8003eb0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d807      	bhi.n	8003eca <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	3348      	adds	r3, #72	; 0x48
 8003ec0:	443b      	add	r3, r7
 8003ec2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003ec6:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003ec8:	e020      	b.n	8003f0c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ecc:	3301      	adds	r3, #1
 8003ece:	643b      	str	r3, [r7, #64]	; 0x40
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ed2:	2b03      	cmp	r3, #3
 8003ed4:	d9e8      	bls.n	8003ea8 <RCC_SetFlashLatency+0x40>
 8003ed6:	e019      	b.n	8003f0c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003edc:	e013      	b.n	8003f06 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	3348      	adds	r3, #72	; 0x48
 8003ee4:	443b      	add	r3, r7
 8003ee6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d807      	bhi.n	8003f00 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	3348      	adds	r3, #72	; 0x48
 8003ef6:	443b      	add	r3, r7
 8003ef8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8003efe:	e005      	b.n	8003f0c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f02:	3301      	adds	r3, #1
 8003f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d9e8      	bls.n	8003ede <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8003f0c:	4b13      	ldr	r3, [pc, #76]	; (8003f5c <RCC_SetFlashLatency+0xf4>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f023 0207 	bic.w	r2, r3, #7
 8003f14:	4911      	ldr	r1, [pc, #68]	; (8003f5c <RCC_SetFlashLatency+0xf4>)
 8003f16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f1c:	f7fe fbb6 	bl	800268c <HAL_GetTick>
 8003f20:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f22:	e008      	b.n	8003f36 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003f24:	f7fe fbb2 	bl	800268c <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d901      	bls.n	8003f36 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e007      	b.n	8003f46 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <RCC_SetFlashLatency+0xf4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d1ef      	bne.n	8003f24 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	374c      	adds	r7, #76	; 0x4c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd90      	pop	{r4, r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	08008aa8 	.word	0x08008aa8
 8003f54:	08008ab8 	.word	0x08008ab8
 8003f58:	08008ac4 	.word	0x08008ac4
 8003f5c:	58004000 	.word	0x58004000

08003f60 <LL_RCC_LSE_IsEnabled>:
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8003f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <LL_RCC_LSE_IsEnabled+0x18>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <LL_RCC_LSE_IsEnabled+0x1a>
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <LL_RCC_LSE_IsReady>:
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d101      	bne.n	8003f9c <LL_RCC_LSE_IsReady+0x18>
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e000      	b.n	8003f9e <LL_RCC_LSE_IsReady+0x1a>
 8003f9c:	2300      	movs	r3, #0
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <LL_RCC_SetRFWKPClockSource>:
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8003fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003fbc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <LL_RCC_SetSMPSClockSource>:
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8003fdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	f023 0203 	bic.w	r2, r3, #3
 8003fe6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <LL_RCC_SetSMPSPrescaler>:
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4313      	orrs	r3, r2
 8004016:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <LL_RCC_SetUSARTClockSource>:
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800402c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f023 0203 	bic.w	r2, r3, #3
 8004038:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_RCC_SetLPUARTClockSource>:
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004064:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <LL_RCC_SetI2CClockSource>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004088:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004094:	43db      	mvns	r3, r3
 8004096:	401a      	ands	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	011b      	lsls	r3, r3, #4
 800409c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80040a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <LL_RCC_SetLPTIMClockSource>:
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80040be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040c2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	0c1b      	lsrs	r3, r3, #16
 80040ca:	041b      	lsls	r3, r3, #16
 80040cc:	43db      	mvns	r3, r3
 80040ce:	401a      	ands	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <LL_RCC_SetSAIClockSource>:
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80040f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_RCC_SetRNGClockSource>:
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800411e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800412a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004136:	bf00      	nop
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <LL_RCC_SetCLK48ClockSource>:
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800414a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004156:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <LL_RCC_SetUSBClockSource>:
{
 800416e:	b580      	push	{r7, lr}
 8004170:	b082      	sub	sp, #8
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f7ff ffe3 	bl	8004142 <LL_RCC_SetCLK48ClockSource>
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <LL_RCC_SetADCClockSource>:
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800418c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004194:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004198:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4313      	orrs	r3, r2
 80041a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <LL_RCC_SetRTCClockSource>:
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80041b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80041d0:	bf00      	nop
 80041d2:	370c      	adds	r7, #12
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <LL_RCC_GetRTCClockSource>:
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80041e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <LL_RCC_ForceBackupDomainReset>:
{
 80041f6:	b480      	push	{r7}
 80041f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80041fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800420e:	bf00      	nop
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800421c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004228:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004230:	bf00      	nop
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <LL_RCC_PLLSAI1_Enable>:
{
 800423a:	b480      	push	{r7}
 800423c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800423e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800424c:	6013      	str	r3, [r2, #0]
}
 800424e:	bf00      	nop
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <LL_RCC_PLLSAI1_Disable>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800425c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800426a:	6013      	str	r3, [r2, #0]
}
 800426c:	bf00      	nop
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_RCC_PLLSAI1_IsReady>:
{
 8004276:	b480      	push	{r7}
 8004278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800427a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004284:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004288:	d101      	bne.n	800428e <LL_RCC_PLLSAI1_IsReady+0x18>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b088      	sub	sp, #32
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80042a2:	2300      	movs	r3, #0
 80042a4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80042a6:	2300      	movs	r3, #0
 80042a8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d034      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042be:	d021      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80042c0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80042c4:	d81b      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042ca:	d01d      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80042cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042d0:	d815      	bhi.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00b      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x54>
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d110      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80042dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ea:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80042ec:	e00d      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	3304      	adds	r3, #4
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 f947 	bl	8004586 <RCCEx_PLLSAI1_ConfigNP>
 80042f8:	4603      	mov	r3, r0
 80042fa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80042fc:	e005      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	77fb      	strb	r3, [r7, #31]
        break;
 8004302:	e002      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004304:	bf00      	nop
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	7ffb      	ldrb	r3, [r7, #31]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d105      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fee8 	bl	80040ea <LL_RCC_SetSAIClockSource>
 800431a:	e001      	b.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	7ffb      	ldrb	r3, [r7, #31]
 800431e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004328:	2b00      	cmp	r3, #0
 800432a:	d046      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800432c:	f7ff ff56 	bl	80041dc <LL_RCC_GetRTCClockSource>
 8004330:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d03c      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800433c:	f7fe fc66 	bl	8002c0c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d105      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff30 	bl	80041b0 <LL_RCC_SetRTCClockSource>
 8004350:	e02e      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800435a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800435c:	f7ff ff4b 	bl	80041f6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004360:	f7ff ff5a 	bl	8004218 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004372:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800437c:	f7ff fdf0 	bl	8003f60 <LL_RCC_LSE_IsEnabled>
 8004380:	4603      	mov	r3, r0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d114      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004386:	f7fe f981 	bl	800268c <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800438c:	e00b      	b.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fe f97d 	bl	800268c <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d902      	bls.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	77fb      	strb	r3, [r7, #31]
              break;
 80043a4:	e004      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80043a6:	f7ff fded 	bl	8003f84 <LL_RCC_LSE_IsReady>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d1ee      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80043b0:	7ffb      	ldrb	r3, [r7, #31]
 80043b2:	77bb      	strb	r3, [r7, #30]
 80043b4:	e001      	b.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b6:	7ffb      	ldrb	r3, [r7, #31]
 80043b8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0301 	and.w	r3, r3, #1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d004      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7ff fe2a 	bl	8004024 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d004      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	4618      	mov	r0, r3
 80043e2:	f7ff fe35 	bl	8004050 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0310 	and.w	r3, r3, #16
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d004      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff fe5d 	bl	80040b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d004      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff fe52 	bl	80040b6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d004      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	4618      	mov	r0, r3
 8004424:	f7ff fe2a 	bl	800407c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d004      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	4618      	mov	r0, r3
 800443a:	f7ff fe1f 	bl	800407c <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d022      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fe8d 	bl	800416e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004458:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800445c:	d107      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800445e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004468:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800446c:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004472:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004476:	d10b      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3304      	adds	r3, #4
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f8dd 	bl	800463c <RCCEx_PLLSAI1_ConfigNQ>
 8004482:	4603      	mov	r3, r0
 8004484:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004486:	7ffb      	ldrb	r3, [r7, #31]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800448c:	7ffb      	ldrb	r3, [r7, #31]
 800448e:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02b      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a4:	d008      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044ae:	d003      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d105      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	4618      	mov	r0, r3
 80044be:	f7ff fe2a 	bl	8004116 <LL_RCC_SetRNGClockSource>
 80044c2:	e00a      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x240>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044cc:	60fb      	str	r3, [r7, #12]
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7ff fe21 	bl	8004116 <LL_RCC_SetRNGClockSource>
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f7ff fe34 	bl	8004142 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80044e2:	d107      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80044e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80044ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d022      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fe3d 	bl	8004184 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800450e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004512:	d107      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004528:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800452c:	d10b      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3304      	adds	r3, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f000 f8dd 	bl	80046f2 <RCCEx_PLLSAI1_ConfigNR>
 8004538:	4603      	mov	r3, r0
 800453a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800453c:	7ffb      	ldrb	r3, [r7, #31]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8004542:	7ffb      	ldrb	r3, [r7, #31]
 8004544:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d004      	beq.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4618      	mov	r0, r3
 8004558:	f7ff fd26 	bl	8003fa8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d009      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800456c:	4618      	mov	r0, r3
 800456e:	f7ff fd45 	bl	8003ffc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004576:	4618      	mov	r0, r3
 8004578:	f7ff fd2c 	bl	8003fd4 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800457c:	7fbb      	ldrb	r3, [r7, #30]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004592:	f7ff fe61 	bl	8004258 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004596:	f7fe f879 	bl	800268c <HAL_GetTick>
 800459a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800459c:	e009      	b.n	80045b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800459e:	f7fe f875 	bl	800268c <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d902      	bls.n	80045b2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	73fb      	strb	r3, [r7, #15]
      break;
 80045b0:	e004      	b.n	80045bc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80045b2:	f7ff fe60 	bl	8004276 <LL_RCC_PLLSAI1_IsReady>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1f0      	bne.n	800459e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d137      	bne.n	8004632 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80045c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045d6:	4313      	orrs	r3, r2
 80045d8:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80045da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80045ec:	4313      	orrs	r3, r2
 80045ee:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80045f0:	f7ff fe23 	bl	800423a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f4:	f7fe f84a 	bl	800268c <HAL_GetTick>
 80045f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80045fa:	e009      	b.n	8004610 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045fc:	f7fe f846 	bl	800268c <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d902      	bls.n	8004610 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	73fb      	strb	r3, [r7, #15]
        break;
 800460e:	e004      	b.n	800461a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004610:	f7ff fe31 	bl	8004276 <LL_RCC_PLLSAI1_IsReady>
 8004614:	4603      	mov	r3, r0
 8004616:	2b01      	cmp	r3, #1
 8004618:	d1f0      	bne.n	80045fc <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004620:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800462e:	4313      	orrs	r3, r2
 8004630:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004632:	7bfb      	ldrb	r3, [r7, #15]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004648:	f7ff fe06 	bl	8004258 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800464c:	f7fe f81e 	bl	800268c <HAL_GetTick>
 8004650:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004652:	e009      	b.n	8004668 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004654:	f7fe f81a 	bl	800268c <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	73fb      	strb	r3, [r7, #15]
      break;
 8004666:	e004      	b.n	8004672 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004668:	f7ff fe05 	bl	8004276 <LL_RCC_PLLSAI1_IsReady>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1f0      	bne.n	8004654 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d137      	bne.n	80046e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	021b      	lsls	r3, r3, #8
 8004688:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800468c:	4313      	orrs	r3, r2
 800468e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80046a6:	f7ff fdc8 	bl	800423a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046aa:	f7fd ffef 	bl	800268c <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046b0:	e009      	b.n	80046c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046b2:	f7fd ffeb 	bl	800268c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d902      	bls.n	80046c6 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	73fb      	strb	r3, [r7, #15]
        break;
 80046c4:	e004      	b.n	80046d0 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80046c6:	f7ff fdd6 	bl	8004276 <LL_RCC_PLLSAI1_IsReady>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d1f0      	bne.n	80046b2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80046d0:	7bfb      	ldrb	r3, [r7, #15]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80046d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046e4:	4313      	orrs	r3, r2
 80046e6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}

080046f2 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b084      	sub	sp, #16
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046fa:	2300      	movs	r3, #0
 80046fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80046fe:	f7ff fdab 	bl	8004258 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004702:	f7fd ffc3 	bl	800268c <HAL_GetTick>
 8004706:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004708:	e009      	b.n	800471e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800470a:	f7fd ffbf 	bl	800268c <HAL_GetTick>
 800470e:	4602      	mov	r2, r0
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d902      	bls.n	800471e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	73fb      	strb	r3, [r7, #15]
      break;
 800471c:	e004      	b.n	8004728 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800471e:	f7ff fdaa 	bl	8004276 <LL_RCC_PLLSAI1_IsReady>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1f0      	bne.n	800470a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004728:	7bfb      	ldrb	r3, [r7, #15]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d137      	bne.n	800479e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800472e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	021b      	lsls	r3, r3, #8
 800473e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004742:	4313      	orrs	r3, r2
 8004744:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004758:	4313      	orrs	r3, r2
 800475a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800475c:	f7ff fd6d 	bl	800423a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004760:	f7fd ff94 	bl	800268c <HAL_GetTick>
 8004764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004766:	e009      	b.n	800477c <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004768:	f7fd ff90 	bl	800268c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d902      	bls.n	800477c <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	73fb      	strb	r3, [r7, #15]
        break;
 800477a:	e004      	b.n	8004786 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800477c:	f7ff fd7b 	bl	8004276 <LL_RCC_PLLSAI1_IsReady>
 8004780:	4603      	mov	r3, r0
 8004782:	2b01      	cmp	r3, #1
 8004784:	d1f0      	bne.n	8004768 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800478c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004790:	691a      	ldr	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800479a:	4313      	orrs	r3, r2
 800479c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e095      	b.n	80048e6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d108      	bne.n	80047d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ca:	d009      	beq.n	80047e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	61da      	str	r2, [r3, #28]
 80047d2:	e005      	b.n	80047e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fd fce8 	bl	80021d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004816:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004820:	d902      	bls.n	8004828 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e002      	b.n	800482e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800482c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004836:	d007      	beq.n	8004848 <HAL_SPI_Init+0xa0>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004840:	d002      	beq.n	8004848 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004858:	431a      	orrs	r2, r3
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488a:	ea42 0103 	orr.w	r1, r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0c1b      	lsrs	r3, r3, #16
 80048a4:	f003 0204 	and.w	r2, r3, #4
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	431a      	orrs	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80048c4:	ea42 0103 	orr.w	r1, r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_SPI_Transmit+0x22>
 800490c:	2302      	movs	r3, #2
 800490e:	e158      	b.n	8004bc2 <HAL_SPI_Transmit+0x2d4>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004918:	f7fd feb8 	bl	800268c <HAL_GetTick>
 800491c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d002      	beq.n	8004934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004932:	e13d      	b.n	8004bb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Transmit+0x52>
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004944:	e134      	b.n	8004bb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2203      	movs	r2, #3
 800494a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004990:	d10f      	bne.n	80049b2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d007      	beq.n	80049d0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049d8:	d94b      	bls.n	8004a72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <HAL_SPI_Transmit+0xfa>
 80049e2:	8afb      	ldrh	r3, [r7, #22]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d13e      	bne.n	8004a66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	881a      	ldrh	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f8:	1c9a      	adds	r2, r3, #2
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a0c:	e02b      	b.n	8004a66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d112      	bne.n	8004a42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a20:	881a      	ldrh	r2, [r3, #0]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	1c9a      	adds	r2, r3, #2
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a40:	e011      	b.n	8004a66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a42:	f7fd fe23 	bl	800268c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	683a      	ldr	r2, [r7, #0]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d803      	bhi.n	8004a5a <HAL_SPI_Transmit+0x16c>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a58:	d102      	bne.n	8004a60 <HAL_SPI_Transmit+0x172>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d102      	bne.n	8004a66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a64:	e0a4      	b.n	8004bb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1ce      	bne.n	8004a0e <HAL_SPI_Transmit+0x120>
 8004a70:	e07c      	b.n	8004b6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Transmit+0x192>
 8004a7a:	8afb      	ldrh	r3, [r7, #22]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d170      	bne.n	8004b62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d912      	bls.n	8004ab0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	881a      	ldrh	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	1c9a      	adds	r2, r3, #2
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b02      	subs	r3, #2
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004aae:	e058      	b.n	8004b62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	7812      	ldrb	r2, [r2, #0]
 8004abc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ad6:	e044      	b.n	8004b62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d12b      	bne.n	8004b3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d912      	bls.n	8004b16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af4:	881a      	ldrh	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	1c9a      	adds	r2, r3, #2
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b02      	subs	r3, #2
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b14:	e025      	b.n	8004b62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3c:	e011      	b.n	8004b62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3e:	f7fd fda5 	bl	800268c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d803      	bhi.n	8004b56 <HAL_SPI_Transmit+0x268>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_Transmit+0x26e>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b60:	e026      	b.n	8004bb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1b5      	bne.n	8004ad8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 f949 	bl	8004e08 <SPI_EndRxTxTransaction>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10a      	bne.n	8004ba0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	77fb      	strb	r3, [r7, #31]
 8004bac:	e000      	b.n	8004bb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b088      	sub	sp, #32
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	603b      	str	r3, [r7, #0]
 8004bd8:	4613      	mov	r3, r2
 8004bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004bdc:	f7fd fd56 	bl	800268c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	4413      	add	r3, r2
 8004bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004bec:	f7fd fd4e 	bl	800268c <HAL_GetTick>
 8004bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004bf2:	4b39      	ldr	r3, [pc, #228]	; (8004cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	015b      	lsls	r3, r3, #5
 8004bf8:	0d1b      	lsrs	r3, r3, #20
 8004bfa:	69fa      	ldr	r2, [r7, #28]
 8004bfc:	fb02 f303 	mul.w	r3, r2, r3
 8004c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c02:	e054      	b.n	8004cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c0a:	d050      	beq.n	8004cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c0c:	f7fd fd3e 	bl	800268c <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	69fa      	ldr	r2, [r7, #28]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d902      	bls.n	8004c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d13d      	bne.n	8004c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3a:	d111      	bne.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c44:	d004      	beq.n	8004c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c4e:	d107      	bne.n	8004c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c68:	d10f      	bne.n	8004c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c78:	601a      	str	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	e017      	b.n	8004cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d101      	bne.n	8004ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	3b01      	subs	r3, #1
 8004cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d19b      	bne.n	8004c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3720      	adds	r7, #32
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000028 	.word	0x20000028

08004cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08a      	sub	sp, #40	; 0x28
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004cee:	f7fd fccd 	bl	800268c <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004cfe:	f7fd fcc5 	bl	800268c <HAL_GetTick>
 8004d02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	330c      	adds	r3, #12
 8004d0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004d0c:	4b3d      	ldr	r3, [pc, #244]	; (8004e04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	0d1b      	lsrs	r3, r3, #20
 8004d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004d24:	e060      	b.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004d2c:	d107      	bne.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d44:	d050      	beq.n	8004de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d46:	f7fd fca1 	bl	800268c <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d902      	bls.n	8004d5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d13d      	bne.n	8004dd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d74:	d111      	bne.n	8004d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d7e:	d004      	beq.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d88:	d107      	bne.n	8004d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da2:	d10f      	bne.n	8004dc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004dc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	e010      	b.n	8004dfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	3b01      	subs	r3, #1
 8004de6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689a      	ldr	r2, [r3, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	4013      	ands	r3, r2
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d196      	bne.n	8004d26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3728      	adds	r7, #40	; 0x28
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000028 	.word	0x20000028

08004e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004e20:	68f8      	ldr	r0, [r7, #12]
 8004e22:	f7ff ff5b 	bl	8004cdc <SPI_WaitFifoStateUntilTimeout>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e30:	f043 0220 	orr.w	r2, r3, #32
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e027      	b.n	8004e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	9300      	str	r3, [sp, #0]
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2200      	movs	r2, #0
 8004e44:	2180      	movs	r1, #128	; 0x80
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f7ff fec0 	bl	8004bcc <SPI_WaitFlagStateUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e56:	f043 0220 	orr.w	r2, r3, #32
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e014      	b.n	8004e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff ff34 	bl	8004cdc <SPI_WaitFifoStateUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e000      	b.n	8004e8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <LL_RCC_GetUSARTClockSource>:
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4013      	ands	r3, r2
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <LL_RCC_GetLPUARTClockSource>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4013      	ands	r3, r2
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e042      	b.n	8004f6c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d106      	bne.n	8004efe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7fd f9af 	bl	800225c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2224      	movs	r2, #36	; 0x24
 8004f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8b2 	bl	8005080 <UART_SetConfig>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e022      	b.n	8004f6c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d002      	beq.n	8004f34 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 face 	bl	80054d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689a      	ldr	r2, [r3, #8]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fb55 	bl	8005614 <UART_CheckIdleState>
 8004f6a:	4603      	mov	r3, r0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b08a      	sub	sp, #40	; 0x28
 8004f78:	af02      	add	r7, sp, #8
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	4613      	mov	r3, r2
 8004f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8a:	2b20      	cmp	r3, #32
 8004f8c:	d173      	bne.n	8005076 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_UART_Transmit+0x26>
 8004f94:	88fb      	ldrh	r3, [r7, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e06c      	b.n	8005078 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2221      	movs	r2, #33	; 0x21
 8004faa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fae:	f7fd fb6d 	bl	800268c <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	88fa      	ldrh	r2, [r7, #6]
 8004fc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d108      	bne.n	8004fe0 <HAL_UART_Transmit+0x6c>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d104      	bne.n	8004fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	61bb      	str	r3, [r7, #24]
 8004fde:	e003      	b.n	8004fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fe8:	e02c      	b.n	8005044 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	68f8      	ldr	r0, [r7, #12]
 8004ff6:	f000 fb5b 	bl	80056b0 <UART_WaitOnFlagUntilTimeout>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e039      	b.n	8005078 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10b      	bne.n	8005022 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	881b      	ldrh	r3, [r3, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005018:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	3302      	adds	r3, #2
 800501e:	61bb      	str	r3, [r7, #24]
 8005020:	e007      	b.n	8005032 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	781a      	ldrb	r2, [r3, #0]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	3301      	adds	r3, #1
 8005030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005038:	b29b      	uxth	r3, r3
 800503a:	3b01      	subs	r3, #1
 800503c:	b29a      	uxth	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1cc      	bne.n	8004fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	9300      	str	r3, [sp, #0]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	2200      	movs	r2, #0
 8005058:	2140      	movs	r1, #64	; 0x40
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fb28 	bl	80056b0 <UART_WaitOnFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e006      	b.n	8005078 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2220      	movs	r2, #32
 800506e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005072:	2300      	movs	r3, #0
 8005074:	e000      	b.n	8005078 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005076:	2302      	movs	r3, #2
  }
}
 8005078:	4618      	mov	r0, r3
 800507a:	3720      	adds	r7, #32
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005084:	b08c      	sub	sp, #48	; 0x30
 8005086:	af00      	add	r7, sp, #0
 8005088:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	689a      	ldr	r2, [r3, #8]
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	431a      	orrs	r2, r3
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4baf      	ldr	r3, [pc, #700]	; (800536c <UART_SetConfig+0x2ec>)
 80050b0:	4013      	ands	r3, r2
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	6812      	ldr	r2, [r2, #0]
 80050b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	68da      	ldr	r2, [r3, #12]
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	430a      	orrs	r2, r1
 80050d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4aa4      	ldr	r2, [pc, #656]	; (8005370 <UART_SetConfig+0x2f0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d004      	beq.n	80050ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80050e8:	4313      	orrs	r3, r2
 80050ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80050f6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005100:	430b      	orrs	r3, r1
 8005102:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	f023 010f 	bic.w	r1, r3, #15
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	430a      	orrs	r2, r1
 8005118:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a95      	ldr	r2, [pc, #596]	; (8005374 <UART_SetConfig+0x2f4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d125      	bne.n	8005170 <UART_SetConfig+0xf0>
 8005124:	2003      	movs	r0, #3
 8005126:	f7ff feb5 	bl	8004e94 <LL_RCC_GetUSARTClockSource>
 800512a:	4603      	mov	r3, r0
 800512c:	2b03      	cmp	r3, #3
 800512e:	d81b      	bhi.n	8005168 <UART_SetConfig+0xe8>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <UART_SetConfig+0xb8>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005149 	.word	0x08005149
 800513c:	08005159 	.word	0x08005159
 8005140:	08005151 	.word	0x08005151
 8005144:	08005161 	.word	0x08005161
 8005148:	2301      	movs	r3, #1
 800514a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800514e:	e042      	b.n	80051d6 <UART_SetConfig+0x156>
 8005150:	2302      	movs	r3, #2
 8005152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005156:	e03e      	b.n	80051d6 <UART_SetConfig+0x156>
 8005158:	2304      	movs	r3, #4
 800515a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800515e:	e03a      	b.n	80051d6 <UART_SetConfig+0x156>
 8005160:	2308      	movs	r3, #8
 8005162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005166:	e036      	b.n	80051d6 <UART_SetConfig+0x156>
 8005168:	2310      	movs	r3, #16
 800516a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800516e:	e032      	b.n	80051d6 <UART_SetConfig+0x156>
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a7e      	ldr	r2, [pc, #504]	; (8005370 <UART_SetConfig+0x2f0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d12a      	bne.n	80051d0 <UART_SetConfig+0x150>
 800517a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800517e:	f7ff fe99 	bl	8004eb4 <LL_RCC_GetLPUARTClockSource>
 8005182:	4603      	mov	r3, r0
 8005184:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005188:	d01a      	beq.n	80051c0 <UART_SetConfig+0x140>
 800518a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800518e:	d81b      	bhi.n	80051c8 <UART_SetConfig+0x148>
 8005190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005194:	d00c      	beq.n	80051b0 <UART_SetConfig+0x130>
 8005196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519a:	d815      	bhi.n	80051c8 <UART_SetConfig+0x148>
 800519c:	2b00      	cmp	r3, #0
 800519e:	d003      	beq.n	80051a8 <UART_SetConfig+0x128>
 80051a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a4:	d008      	beq.n	80051b8 <UART_SetConfig+0x138>
 80051a6:	e00f      	b.n	80051c8 <UART_SetConfig+0x148>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ae:	e012      	b.n	80051d6 <UART_SetConfig+0x156>
 80051b0:	2302      	movs	r3, #2
 80051b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051b6:	e00e      	b.n	80051d6 <UART_SetConfig+0x156>
 80051b8:	2304      	movs	r3, #4
 80051ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051be:	e00a      	b.n	80051d6 <UART_SetConfig+0x156>
 80051c0:	2308      	movs	r3, #8
 80051c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051c6:	e006      	b.n	80051d6 <UART_SetConfig+0x156>
 80051c8:	2310      	movs	r3, #16
 80051ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80051ce:	e002      	b.n	80051d6 <UART_SetConfig+0x156>
 80051d0:	2310      	movs	r3, #16
 80051d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a65      	ldr	r2, [pc, #404]	; (8005370 <UART_SetConfig+0x2f0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	f040 8097 	bne.w	8005310 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d823      	bhi.n	8005232 <UART_SetConfig+0x1b2>
 80051ea:	a201      	add	r2, pc, #4	; (adr r2, 80051f0 <UART_SetConfig+0x170>)
 80051ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f0:	08005215 	.word	0x08005215
 80051f4:	08005233 	.word	0x08005233
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005233 	.word	0x08005233
 8005200:	08005223 	.word	0x08005223
 8005204:	08005233 	.word	0x08005233
 8005208:	08005233 	.word	0x08005233
 800520c:	08005233 	.word	0x08005233
 8005210:	0800522b 	.word	0x0800522b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005214:	f7fe fdc4 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 8005218:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800521a:	e010      	b.n	800523e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800521c:	4b56      	ldr	r3, [pc, #344]	; (8005378 <UART_SetConfig+0x2f8>)
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005220:	e00d      	b.n	800523e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005222:	f7fe fd3b 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005228:	e009      	b.n	800523e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005230:	e005      	b.n	800523e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800523c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 812b 	beq.w	800549c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524a:	4a4c      	ldr	r2, [pc, #304]	; (800537c <UART_SetConfig+0x2fc>)
 800524c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005250:	461a      	mov	r2, r3
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	fbb3 f3f2 	udiv	r3, r3, r2
 8005258:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4413      	add	r3, r2
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	429a      	cmp	r2, r3
 8005268:	d305      	bcc.n	8005276 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005270:	69ba      	ldr	r2, [r7, #24]
 8005272:	429a      	cmp	r2, r3
 8005274:	d903      	bls.n	800527e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800527c:	e10e      	b.n	800549c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800527e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005280:	2200      	movs	r2, #0
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	60fa      	str	r2, [r7, #12]
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800528a:	4a3c      	ldr	r2, [pc, #240]	; (800537c <UART_SetConfig+0x2fc>)
 800528c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005290:	b29b      	uxth	r3, r3
 8005292:	2200      	movs	r2, #0
 8005294:	603b      	str	r3, [r7, #0]
 8005296:	607a      	str	r2, [r7, #4]
 8005298:	e9d7 2300 	ldrd	r2, r3, [r7]
 800529c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052a0:	f7fb fc52 	bl	8000b48 <__aeabi_uldivmod>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	4610      	mov	r0, r2
 80052aa:	4619      	mov	r1, r3
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	020b      	lsls	r3, r1, #8
 80052b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80052ba:	0202      	lsls	r2, r0, #8
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	6849      	ldr	r1, [r1, #4]
 80052c0:	0849      	lsrs	r1, r1, #1
 80052c2:	2000      	movs	r0, #0
 80052c4:	460c      	mov	r4, r1
 80052c6:	4605      	mov	r5, r0
 80052c8:	eb12 0804 	adds.w	r8, r2, r4
 80052cc:	eb43 0905 	adc.w	r9, r3, r5
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	469a      	mov	sl, r3
 80052d8:	4693      	mov	fp, r2
 80052da:	4652      	mov	r2, sl
 80052dc:	465b      	mov	r3, fp
 80052de:	4640      	mov	r0, r8
 80052e0:	4649      	mov	r1, r9
 80052e2:	f7fb fc31 	bl	8000b48 <__aeabi_uldivmod>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4613      	mov	r3, r2
 80052ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f4:	d308      	bcc.n	8005308 <UART_SetConfig+0x288>
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fc:	d204      	bcs.n	8005308 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6a3a      	ldr	r2, [r7, #32]
 8005304:	60da      	str	r2, [r3, #12]
 8005306:	e0c9      	b.n	800549c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800530e:	e0c5      	b.n	800549c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	69db      	ldr	r3, [r3, #28]
 8005314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005318:	d16d      	bne.n	80053f6 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800531a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800531e:	3b01      	subs	r3, #1
 8005320:	2b07      	cmp	r3, #7
 8005322:	d82d      	bhi.n	8005380 <UART_SetConfig+0x300>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0x2ac>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	0800534d 	.word	0x0800534d
 8005330:	08005355 	.word	0x08005355
 8005334:	08005381 	.word	0x08005381
 8005338:	0800535b 	.word	0x0800535b
 800533c:	08005381 	.word	0x08005381
 8005340:	08005381 	.word	0x08005381
 8005344:	08005381 	.word	0x08005381
 8005348:	08005363 	.word	0x08005363
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800534c:	f7fe fd3e 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 8005350:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005352:	e01b      	b.n	800538c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <UART_SetConfig+0x2f8>)
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005358:	e018      	b.n	800538c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800535a:	f7fe fc9f 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 800535e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005360:	e014      	b.n	800538c <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005366:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005368:	e010      	b.n	800538c <UART_SetConfig+0x30c>
 800536a:	bf00      	nop
 800536c:	cfff69f3 	.word	0xcfff69f3
 8005370:	40008000 	.word	0x40008000
 8005374:	40013800 	.word	0x40013800
 8005378:	00f42400 	.word	0x00f42400
 800537c:	08008c14 	.word	0x08008c14
      default:
        pclk = 0U;
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800538a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	2b00      	cmp	r3, #0
 8005390:	f000 8084 	beq.w	800549c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	4a4b      	ldr	r2, [pc, #300]	; (80054c8 <UART_SetConfig+0x448>)
 800539a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800539e:	461a      	mov	r2, r3
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80053a6:	005a      	lsls	r2, r3, #1
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	085b      	lsrs	r3, r3, #1
 80053ae:	441a      	add	r2, r3
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	2b0f      	cmp	r3, #15
 80053be:	d916      	bls.n	80053ee <UART_SetConfig+0x36e>
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053c6:	d212      	bcs.n	80053ee <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	f023 030f 	bic.w	r3, r3, #15
 80053d0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	085b      	lsrs	r3, r3, #1
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	b29a      	uxth	r2, r3
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	8bfa      	ldrh	r2, [r7, #30]
 80053ea:	60da      	str	r2, [r3, #12]
 80053ec:	e056      	b.n	800549c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80053f4:	e052      	b.n	800549c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80053f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053fa:	3b01      	subs	r3, #1
 80053fc:	2b07      	cmp	r3, #7
 80053fe:	d822      	bhi.n	8005446 <UART_SetConfig+0x3c6>
 8005400:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <UART_SetConfig+0x388>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	08005429 	.word	0x08005429
 800540c:	08005431 	.word	0x08005431
 8005410:	08005447 	.word	0x08005447
 8005414:	08005437 	.word	0x08005437
 8005418:	08005447 	.word	0x08005447
 800541c:	08005447 	.word	0x08005447
 8005420:	08005447 	.word	0x08005447
 8005424:	0800543f 	.word	0x0800543f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005428:	f7fe fcd0 	bl	8003dcc <HAL_RCC_GetPCLK2Freq>
 800542c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800542e:	e010      	b.n	8005452 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005430:	4b26      	ldr	r3, [pc, #152]	; (80054cc <UART_SetConfig+0x44c>)
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005434:	e00d      	b.n	8005452 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005436:	f7fe fc31 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 800543a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800543c:	e009      	b.n	8005452 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800543e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005444:	e005      	b.n	8005452 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005450:	bf00      	nop
    }

    if (pclk != 0U)
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d021      	beq.n	800549c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	4a1a      	ldr	r2, [pc, #104]	; (80054c8 <UART_SetConfig+0x448>)
 800545e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005462:	461a      	mov	r2, r3
 8005464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005466:	fbb3 f2f2 	udiv	r2, r3, r2
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	441a      	add	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	fbb2 f3f3 	udiv	r3, r2, r3
 800547a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547c:	6a3b      	ldr	r3, [r7, #32]
 800547e:	2b0f      	cmp	r3, #15
 8005480:	d909      	bls.n	8005496 <UART_SetConfig+0x416>
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005488:	d205      	bcs.n	8005496 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	b29a      	uxth	r2, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60da      	str	r2, [r3, #12]
 8005494:	e002      	b.n	800549c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2201      	movs	r2, #1
 80054a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	2200      	movs	r2, #0
 80054b0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	2200      	movs	r2, #0
 80054b6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80054b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	; 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054c6:	bf00      	nop
 80054c8:	08008c14 	.word	0x08008c14
 80054cc:	00f42400 	.word	0x00f42400

080054d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054dc:	f003 0301 	and.w	r3, r3, #1
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00a      	beq.n	80054fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	430a      	orrs	r2, r1
 80054f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00a      	beq.n	800551c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	430a      	orrs	r2, r1
 800553c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00a      	beq.n	8005560 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005564:	f003 0310 	and.w	r3, r3, #16
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00a      	beq.n	8005582 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	430a      	orrs	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00a      	beq.n	80055a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	430a      	orrs	r2, r1
 80055a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ce:	d10a      	bne.n	80055e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }
}
 8005608:	bf00      	nop
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b086      	sub	sp, #24
 8005618:	af02      	add	r7, sp, #8
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005624:	f7fd f832 	bl	800268c <HAL_GetTick>
 8005628:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b08      	cmp	r3, #8
 8005636:	d10e      	bne.n	8005656 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005638:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f832 	bl	80056b0 <UART_WaitOnFlagUntilTimeout>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e028      	b.n	80056a8 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d10e      	bne.n	8005682 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005664:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005668:	9300      	str	r3, [sp, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f81c 	bl	80056b0 <UART_WaitOnFlagUntilTimeout>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d001      	beq.n	8005682 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e012      	b.n	80056a8 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2220      	movs	r2, #32
 800568e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b09c      	sub	sp, #112	; 0x70
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	4613      	mov	r3, r2
 80056be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c0:	e0a9      	b.n	8005816 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056c8:	f000 80a5 	beq.w	8005816 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056cc:	f7fc ffde 	bl	800268c <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x32>
 80056dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d140      	bne.n	8005764 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80056f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056f6:	667b      	str	r3, [r7, #100]	; 0x64
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	461a      	mov	r2, r3
 80056fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005700:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005702:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005704:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005706:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005708:	e841 2300 	strex	r3, r2, [r1]
 800570c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800570e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1e6      	bne.n	80056e2 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f023 0301 	bic.w	r3, r3, #1
 800572a:	663b      	str	r3, [r7, #96]	; 0x60
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3308      	adds	r3, #8
 8005732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005734:	64ba      	str	r2, [r7, #72]	; 0x48
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005738:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800573a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800573c:	e841 2300 	strex	r3, r2, [r1]
 8005740:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1e5      	bne.n	8005714 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2220      	movs	r2, #32
 8005754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e069      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 0304 	and.w	r3, r3, #4
 800576e:	2b00      	cmp	r3, #0
 8005770:	d051      	beq.n	8005816 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69db      	ldr	r3, [r3, #28]
 8005778:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800577c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005780:	d149      	bne.n	8005816 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800578a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	e853 3f00 	ldrex	r3, [r3]
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800579a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
 80057ac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e6      	bne.n	800578c <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3308      	adds	r3, #8
 80057c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	e853 3f00 	ldrex	r3, [r3]
 80057cc:	613b      	str	r3, [r7, #16]
   return(result);
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f023 0301 	bic.w	r3, r3, #1
 80057d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	3308      	adds	r3, #8
 80057dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80057de:	623a      	str	r2, [r7, #32]
 80057e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e2:	69f9      	ldr	r1, [r7, #28]
 80057e4:	6a3a      	ldr	r2, [r7, #32]
 80057e6:	e841 2300 	strex	r3, r2, [r1]
 80057ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80057ec:	69bb      	ldr	r3, [r7, #24]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1e5      	bne.n	80057be <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2220      	movs	r2, #32
 80057f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2220      	movs	r2, #32
 80057fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2220      	movs	r2, #32
 8005806:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005812:	2303      	movs	r3, #3
 8005814:	e010      	b.n	8005838 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69da      	ldr	r2, [r3, #28]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	4013      	ands	r3, r2
 8005820:	68ba      	ldr	r2, [r7, #8]
 8005822:	429a      	cmp	r2, r3
 8005824:	bf0c      	ite	eq
 8005826:	2301      	moveq	r3, #1
 8005828:	2300      	movne	r3, #0
 800582a:	b2db      	uxtb	r3, r3
 800582c:	461a      	mov	r2, r3
 800582e:	79fb      	ldrb	r3, [r7, #7]
 8005830:	429a      	cmp	r2, r3
 8005832:	f43f af46 	beq.w	80056c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3770      	adds	r7, #112	; 0x70
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_UARTEx_DisableFifoMode+0x16>
 8005852:	2302      	movs	r3, #2
 8005854:	e027      	b.n	80058a6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2224      	movs	r2, #36	; 0x24
 8005862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f022 0201 	bic.w	r2, r2, #1
 800587c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005884:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2220      	movs	r2, #32
 8005898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d101      	bne.n	80058ca <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80058c6:	2302      	movs	r3, #2
 80058c8:	e02d      	b.n	8005926 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2224      	movs	r2, #36	; 0x24
 80058d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0201 	bic.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	683a      	ldr	r2, [r7, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f850 	bl	80059ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2220      	movs	r2, #32
 8005918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800593e:	2b01      	cmp	r3, #1
 8005940:	d101      	bne.n	8005946 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005942:	2302      	movs	r3, #2
 8005944:	e02d      	b.n	80059a2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2224      	movs	r2, #36	; 0x24
 8005952:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0201 	bic.w	r2, r2, #1
 800596c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	683a      	ldr	r2, [r7, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f812 	bl	80059ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2220      	movs	r2, #32
 8005994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3710      	adds	r7, #16
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b085      	sub	sp, #20
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d108      	bne.n	80059ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80059cc:	e031      	b.n	8005a32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80059ce:	2308      	movs	r3, #8
 80059d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80059d2:	2308      	movs	r3, #8
 80059d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	0e5b      	lsrs	r3, r3, #25
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f003 0307 	and.w	r3, r3, #7
 80059e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	0f5b      	lsrs	r3, r3, #29
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0307 	and.w	r3, r3, #7
 80059f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80059f6:	7bbb      	ldrb	r3, [r7, #14]
 80059f8:	7b3a      	ldrb	r2, [r7, #12]
 80059fa:	4911      	ldr	r1, [pc, #68]	; (8005a40 <UARTEx_SetNbDataToProcess+0x94>)
 80059fc:	5c8a      	ldrb	r2, [r1, r2]
 80059fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a02:	7b3a      	ldrb	r2, [r7, #12]
 8005a04:	490f      	ldr	r1, [pc, #60]	; (8005a44 <UARTEx_SetNbDataToProcess+0x98>)
 8005a06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a08:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
 8005a16:	7b7a      	ldrb	r2, [r7, #13]
 8005a18:	4909      	ldr	r1, [pc, #36]	; (8005a40 <UARTEx_SetNbDataToProcess+0x94>)
 8005a1a:	5c8a      	ldrb	r2, [r1, r2]
 8005a1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a20:	7b7a      	ldrb	r2, [r7, #13]
 8005a22:	4908      	ldr	r1, [pc, #32]	; (8005a44 <UARTEx_SetNbDataToProcess+0x98>)
 8005a24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a26:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	08008c2c 	.word	0x08008c2c
 8005a44:	08008c34 	.word	0x08008c34

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	; (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000034 	.word	0x20000034

08005a54 <exit>:
 8005a54:	b508      	push	{r3, lr}
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <exit+0x20>)
 8005a58:	4604      	mov	r4, r0
 8005a5a:	b113      	cbz	r3, 8005a62 <exit+0xe>
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f3af 8000 	nop.w
 8005a62:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <exit+0x24>)
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005a68:	b103      	cbz	r3, 8005a6c <exit+0x18>
 8005a6a:	4798      	blx	r3
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f7fc fc58 	bl	8002322 <_exit>
 8005a72:	bf00      	nop
 8005a74:	00000000 	.word	0x00000000
 8005a78:	08008c9c 	.word	0x08008c9c

08005a7c <_fclose_r>:
 8005a7c:	b570      	push	{r4, r5, r6, lr}
 8005a7e:	4605      	mov	r5, r0
 8005a80:	460c      	mov	r4, r1
 8005a82:	b911      	cbnz	r1, 8005a8a <_fclose_r+0xe>
 8005a84:	2600      	movs	r6, #0
 8005a86:	4630      	mov	r0, r6
 8005a88:	bd70      	pop	{r4, r5, r6, pc}
 8005a8a:	b118      	cbz	r0, 8005a94 <_fclose_r+0x18>
 8005a8c:	6983      	ldr	r3, [r0, #24]
 8005a8e:	b90b      	cbnz	r3, 8005a94 <_fclose_r+0x18>
 8005a90:	f000 f994 	bl	8005dbc <__sinit>
 8005a94:	4b2c      	ldr	r3, [pc, #176]	; (8005b48 <_fclose_r+0xcc>)
 8005a96:	429c      	cmp	r4, r3
 8005a98:	d114      	bne.n	8005ac4 <_fclose_r+0x48>
 8005a9a:	686c      	ldr	r4, [r5, #4]
 8005a9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a9e:	07d8      	lsls	r0, r3, #31
 8005aa0:	d405      	bmi.n	8005aae <_fclose_r+0x32>
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	0599      	lsls	r1, r3, #22
 8005aa6:	d402      	bmi.n	8005aae <_fclose_r+0x32>
 8005aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aaa:	f000 fc05 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8005aae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ab2:	b98b      	cbnz	r3, 8005ad8 <_fclose_r+0x5c>
 8005ab4:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8005ab6:	f016 0601 	ands.w	r6, r6, #1
 8005aba:	d1e3      	bne.n	8005a84 <_fclose_r+0x8>
 8005abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005abe:	f000 fbfc 	bl	80062ba <__retarget_lock_release_recursive>
 8005ac2:	e7e0      	b.n	8005a86 <_fclose_r+0xa>
 8005ac4:	4b21      	ldr	r3, [pc, #132]	; (8005b4c <_fclose_r+0xd0>)
 8005ac6:	429c      	cmp	r4, r3
 8005ac8:	d101      	bne.n	8005ace <_fclose_r+0x52>
 8005aca:	68ac      	ldr	r4, [r5, #8]
 8005acc:	e7e6      	b.n	8005a9c <_fclose_r+0x20>
 8005ace:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <_fclose_r+0xd4>)
 8005ad0:	429c      	cmp	r4, r3
 8005ad2:	bf08      	it	eq
 8005ad4:	68ec      	ldreq	r4, [r5, #12]
 8005ad6:	e7e1      	b.n	8005a9c <_fclose_r+0x20>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 f842 	bl	8005b64 <__sflush_r>
 8005ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	b133      	cbz	r3, 8005af4 <_fclose_r+0x78>
 8005ae6:	6a21      	ldr	r1, [r4, #32]
 8005ae8:	4628      	mov	r0, r5
 8005aea:	4798      	blx	r3
 8005aec:	2800      	cmp	r0, #0
 8005aee:	bfb8      	it	lt
 8005af0:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8005af4:	89a3      	ldrh	r3, [r4, #12]
 8005af6:	061a      	lsls	r2, r3, #24
 8005af8:	d503      	bpl.n	8005b02 <_fclose_r+0x86>
 8005afa:	6921      	ldr	r1, [r4, #16]
 8005afc:	4628      	mov	r0, r5
 8005afe:	f000 fc61 	bl	80063c4 <_free_r>
 8005b02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b04:	b141      	cbz	r1, 8005b18 <_fclose_r+0x9c>
 8005b06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d002      	beq.n	8005b14 <_fclose_r+0x98>
 8005b0e:	4628      	mov	r0, r5
 8005b10:	f000 fc58 	bl	80063c4 <_free_r>
 8005b14:	2300      	movs	r3, #0
 8005b16:	6363      	str	r3, [r4, #52]	; 0x34
 8005b18:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b1a:	b121      	cbz	r1, 8005b26 <_fclose_r+0xaa>
 8005b1c:	4628      	mov	r0, r5
 8005b1e:	f000 fc51 	bl	80063c4 <_free_r>
 8005b22:	2300      	movs	r3, #0
 8005b24:	64a3      	str	r3, [r4, #72]	; 0x48
 8005b26:	f000 f931 	bl	8005d8c <__sfp_lock_acquire>
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	81a3      	strh	r3, [r4, #12]
 8005b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b30:	07db      	lsls	r3, r3, #31
 8005b32:	d402      	bmi.n	8005b3a <_fclose_r+0xbe>
 8005b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b36:	f000 fbc0 	bl	80062ba <__retarget_lock_release_recursive>
 8005b3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b3c:	f000 fbbb 	bl	80062b6 <__retarget_lock_close_recursive>
 8005b40:	f000 f92a 	bl	8005d98 <__sfp_lock_release>
 8005b44:	e79f      	b.n	8005a86 <_fclose_r+0xa>
 8005b46:	bf00      	nop
 8005b48:	08008c5c 	.word	0x08008c5c
 8005b4c:	08008c7c 	.word	0x08008c7c
 8005b50:	08008c3c 	.word	0x08008c3c

08005b54 <fclose>:
 8005b54:	4b02      	ldr	r3, [pc, #8]	; (8005b60 <fclose+0xc>)
 8005b56:	4601      	mov	r1, r0
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	f7ff bf8f 	b.w	8005a7c <_fclose_r>
 8005b5e:	bf00      	nop
 8005b60:	20000034 	.word	0x20000034

08005b64 <__sflush_r>:
 8005b64:	898a      	ldrh	r2, [r1, #12]
 8005b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	0710      	lsls	r0, r2, #28
 8005b6e:	460c      	mov	r4, r1
 8005b70:	d458      	bmi.n	8005c24 <__sflush_r+0xc0>
 8005b72:	684b      	ldr	r3, [r1, #4]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	dc05      	bgt.n	8005b84 <__sflush_r+0x20>
 8005b78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	dc02      	bgt.n	8005b84 <__sflush_r+0x20>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b86:	2e00      	cmp	r6, #0
 8005b88:	d0f9      	beq.n	8005b7e <__sflush_r+0x1a>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005b90:	682f      	ldr	r7, [r5, #0]
 8005b92:	602b      	str	r3, [r5, #0]
 8005b94:	d032      	beq.n	8005bfc <__sflush_r+0x98>
 8005b96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b98:	89a3      	ldrh	r3, [r4, #12]
 8005b9a:	075a      	lsls	r2, r3, #29
 8005b9c:	d505      	bpl.n	8005baa <__sflush_r+0x46>
 8005b9e:	6863      	ldr	r3, [r4, #4]
 8005ba0:	1ac0      	subs	r0, r0, r3
 8005ba2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ba4:	b10b      	cbz	r3, 8005baa <__sflush_r+0x46>
 8005ba6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ba8:	1ac0      	subs	r0, r0, r3
 8005baa:	2300      	movs	r3, #0
 8005bac:	4602      	mov	r2, r0
 8005bae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bb0:	6a21      	ldr	r1, [r4, #32]
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	47b0      	blx	r6
 8005bb6:	1c43      	adds	r3, r0, #1
 8005bb8:	89a3      	ldrh	r3, [r4, #12]
 8005bba:	d106      	bne.n	8005bca <__sflush_r+0x66>
 8005bbc:	6829      	ldr	r1, [r5, #0]
 8005bbe:	291d      	cmp	r1, #29
 8005bc0:	d82c      	bhi.n	8005c1c <__sflush_r+0xb8>
 8005bc2:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <__sflush_r+0x108>)
 8005bc4:	40ca      	lsrs	r2, r1
 8005bc6:	07d6      	lsls	r6, r2, #31
 8005bc8:	d528      	bpl.n	8005c1c <__sflush_r+0xb8>
 8005bca:	2200      	movs	r2, #0
 8005bcc:	6062      	str	r2, [r4, #4]
 8005bce:	04d9      	lsls	r1, r3, #19
 8005bd0:	6922      	ldr	r2, [r4, #16]
 8005bd2:	6022      	str	r2, [r4, #0]
 8005bd4:	d504      	bpl.n	8005be0 <__sflush_r+0x7c>
 8005bd6:	1c42      	adds	r2, r0, #1
 8005bd8:	d101      	bne.n	8005bde <__sflush_r+0x7a>
 8005bda:	682b      	ldr	r3, [r5, #0]
 8005bdc:	b903      	cbnz	r3, 8005be0 <__sflush_r+0x7c>
 8005bde:	6560      	str	r0, [r4, #84]	; 0x54
 8005be0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005be2:	602f      	str	r7, [r5, #0]
 8005be4:	2900      	cmp	r1, #0
 8005be6:	d0ca      	beq.n	8005b7e <__sflush_r+0x1a>
 8005be8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bec:	4299      	cmp	r1, r3
 8005bee:	d002      	beq.n	8005bf6 <__sflush_r+0x92>
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fbe7 	bl	80063c4 <_free_r>
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	6360      	str	r0, [r4, #52]	; 0x34
 8005bfa:	e7c1      	b.n	8005b80 <__sflush_r+0x1c>
 8005bfc:	6a21      	ldr	r1, [r4, #32]
 8005bfe:	2301      	movs	r3, #1
 8005c00:	4628      	mov	r0, r5
 8005c02:	47b0      	blx	r6
 8005c04:	1c41      	adds	r1, r0, #1
 8005c06:	d1c7      	bne.n	8005b98 <__sflush_r+0x34>
 8005c08:	682b      	ldr	r3, [r5, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0c4      	beq.n	8005b98 <__sflush_r+0x34>
 8005c0e:	2b1d      	cmp	r3, #29
 8005c10:	d001      	beq.n	8005c16 <__sflush_r+0xb2>
 8005c12:	2b16      	cmp	r3, #22
 8005c14:	d101      	bne.n	8005c1a <__sflush_r+0xb6>
 8005c16:	602f      	str	r7, [r5, #0]
 8005c18:	e7b1      	b.n	8005b7e <__sflush_r+0x1a>
 8005c1a:	89a3      	ldrh	r3, [r4, #12]
 8005c1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c20:	81a3      	strh	r3, [r4, #12]
 8005c22:	e7ad      	b.n	8005b80 <__sflush_r+0x1c>
 8005c24:	690f      	ldr	r7, [r1, #16]
 8005c26:	2f00      	cmp	r7, #0
 8005c28:	d0a9      	beq.n	8005b7e <__sflush_r+0x1a>
 8005c2a:	0793      	lsls	r3, r2, #30
 8005c2c:	680e      	ldr	r6, [r1, #0]
 8005c2e:	bf08      	it	eq
 8005c30:	694b      	ldreq	r3, [r1, #20]
 8005c32:	600f      	str	r7, [r1, #0]
 8005c34:	bf18      	it	ne
 8005c36:	2300      	movne	r3, #0
 8005c38:	eba6 0807 	sub.w	r8, r6, r7
 8005c3c:	608b      	str	r3, [r1, #8]
 8005c3e:	f1b8 0f00 	cmp.w	r8, #0
 8005c42:	dd9c      	ble.n	8005b7e <__sflush_r+0x1a>
 8005c44:	6a21      	ldr	r1, [r4, #32]
 8005c46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c48:	4643      	mov	r3, r8
 8005c4a:	463a      	mov	r2, r7
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	47b0      	blx	r6
 8005c50:	2800      	cmp	r0, #0
 8005c52:	dc06      	bgt.n	8005c62 <__sflush_r+0xfe>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c60:	e78e      	b.n	8005b80 <__sflush_r+0x1c>
 8005c62:	4407      	add	r7, r0
 8005c64:	eba8 0800 	sub.w	r8, r8, r0
 8005c68:	e7e9      	b.n	8005c3e <__sflush_r+0xda>
 8005c6a:	bf00      	nop
 8005c6c:	20400001 	.word	0x20400001

08005c70 <_fflush_r>:
 8005c70:	b538      	push	{r3, r4, r5, lr}
 8005c72:	690b      	ldr	r3, [r1, #16]
 8005c74:	4605      	mov	r5, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	b913      	cbnz	r3, 8005c80 <_fflush_r+0x10>
 8005c7a:	2500      	movs	r5, #0
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	bd38      	pop	{r3, r4, r5, pc}
 8005c80:	b118      	cbz	r0, 8005c8a <_fflush_r+0x1a>
 8005c82:	6983      	ldr	r3, [r0, #24]
 8005c84:	b90b      	cbnz	r3, 8005c8a <_fflush_r+0x1a>
 8005c86:	f000 f899 	bl	8005dbc <__sinit>
 8005c8a:	4b14      	ldr	r3, [pc, #80]	; (8005cdc <_fflush_r+0x6c>)
 8005c8c:	429c      	cmp	r4, r3
 8005c8e:	d11b      	bne.n	8005cc8 <_fflush_r+0x58>
 8005c90:	686c      	ldr	r4, [r5, #4]
 8005c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ef      	beq.n	8005c7a <_fflush_r+0xa>
 8005c9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c9c:	07d0      	lsls	r0, r2, #31
 8005c9e:	d404      	bmi.n	8005caa <_fflush_r+0x3a>
 8005ca0:	0599      	lsls	r1, r3, #22
 8005ca2:	d402      	bmi.n	8005caa <_fflush_r+0x3a>
 8005ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ca6:	f000 fb07 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8005caa:	4628      	mov	r0, r5
 8005cac:	4621      	mov	r1, r4
 8005cae:	f7ff ff59 	bl	8005b64 <__sflush_r>
 8005cb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cb4:	07da      	lsls	r2, r3, #31
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	d4e0      	bmi.n	8005c7c <_fflush_r+0xc>
 8005cba:	89a3      	ldrh	r3, [r4, #12]
 8005cbc:	059b      	lsls	r3, r3, #22
 8005cbe:	d4dd      	bmi.n	8005c7c <_fflush_r+0xc>
 8005cc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cc2:	f000 fafa 	bl	80062ba <__retarget_lock_release_recursive>
 8005cc6:	e7d9      	b.n	8005c7c <_fflush_r+0xc>
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <_fflush_r+0x70>)
 8005cca:	429c      	cmp	r4, r3
 8005ccc:	d101      	bne.n	8005cd2 <_fflush_r+0x62>
 8005cce:	68ac      	ldr	r4, [r5, #8]
 8005cd0:	e7df      	b.n	8005c92 <_fflush_r+0x22>
 8005cd2:	4b04      	ldr	r3, [pc, #16]	; (8005ce4 <_fflush_r+0x74>)
 8005cd4:	429c      	cmp	r4, r3
 8005cd6:	bf08      	it	eq
 8005cd8:	68ec      	ldreq	r4, [r5, #12]
 8005cda:	e7da      	b.n	8005c92 <_fflush_r+0x22>
 8005cdc:	08008c5c 	.word	0x08008c5c
 8005ce0:	08008c7c 	.word	0x08008c7c
 8005ce4:	08008c3c 	.word	0x08008c3c

08005ce8 <fflush>:
 8005ce8:	4601      	mov	r1, r0
 8005cea:	b920      	cbnz	r0, 8005cf6 <fflush+0xe>
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <fflush+0x18>)
 8005cee:	4905      	ldr	r1, [pc, #20]	; (8005d04 <fflush+0x1c>)
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	f000 ba9c 	b.w	800622e <_fwalk_reent>
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <fflush+0x20>)
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	f7ff bfb9 	b.w	8005c70 <_fflush_r>
 8005cfe:	bf00      	nop
 8005d00:	08008c9c 	.word	0x08008c9c
 8005d04:	08005c71 	.word	0x08005c71
 8005d08:	20000034 	.word	0x20000034

08005d0c <std>:
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	4604      	mov	r4, r0
 8005d12:	e9c0 3300 	strd	r3, r3, [r0]
 8005d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d1a:	6083      	str	r3, [r0, #8]
 8005d1c:	8181      	strh	r1, [r0, #12]
 8005d1e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d20:	81c2      	strh	r2, [r0, #14]
 8005d22:	6183      	str	r3, [r0, #24]
 8005d24:	4619      	mov	r1, r3
 8005d26:	2208      	movs	r2, #8
 8005d28:	305c      	adds	r0, #92	; 0x5c
 8005d2a:	f000 fb43 	bl	80063b4 <memset>
 8005d2e:	4b05      	ldr	r3, [pc, #20]	; (8005d44 <std+0x38>)
 8005d30:	6263      	str	r3, [r4, #36]	; 0x24
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <std+0x3c>)
 8005d34:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <std+0x40>)
 8005d38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <std+0x44>)
 8005d3c:	6224      	str	r4, [r4, #32]
 8005d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	bf00      	nop
 8005d44:	08006951 	.word	0x08006951
 8005d48:	08006973 	.word	0x08006973
 8005d4c:	080069ab 	.word	0x080069ab
 8005d50:	080069cf 	.word	0x080069cf

08005d54 <_cleanup_r>:
 8005d54:	4901      	ldr	r1, [pc, #4]	; (8005d5c <_cleanup_r+0x8>)
 8005d56:	f000 ba6a 	b.w	800622e <_fwalk_reent>
 8005d5a:	bf00      	nop
 8005d5c:	08005c71 	.word	0x08005c71

08005d60 <__sfmoreglue>:
 8005d60:	b570      	push	{r4, r5, r6, lr}
 8005d62:	2268      	movs	r2, #104	; 0x68
 8005d64:	1e4d      	subs	r5, r1, #1
 8005d66:	4355      	muls	r5, r2
 8005d68:	460e      	mov	r6, r1
 8005d6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d6e:	f000 fb95 	bl	800649c <_malloc_r>
 8005d72:	4604      	mov	r4, r0
 8005d74:	b140      	cbz	r0, 8005d88 <__sfmoreglue+0x28>
 8005d76:	2100      	movs	r1, #0
 8005d78:	e9c0 1600 	strd	r1, r6, [r0]
 8005d7c:	300c      	adds	r0, #12
 8005d7e:	60a0      	str	r0, [r4, #8]
 8005d80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d84:	f000 fb16 	bl	80063b4 <memset>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	bd70      	pop	{r4, r5, r6, pc}

08005d8c <__sfp_lock_acquire>:
 8005d8c:	4801      	ldr	r0, [pc, #4]	; (8005d94 <__sfp_lock_acquire+0x8>)
 8005d8e:	f000 ba93 	b.w	80062b8 <__retarget_lock_acquire_recursive>
 8005d92:	bf00      	nop
 8005d94:	200001ed 	.word	0x200001ed

08005d98 <__sfp_lock_release>:
 8005d98:	4801      	ldr	r0, [pc, #4]	; (8005da0 <__sfp_lock_release+0x8>)
 8005d9a:	f000 ba8e 	b.w	80062ba <__retarget_lock_release_recursive>
 8005d9e:	bf00      	nop
 8005da0:	200001ed 	.word	0x200001ed

08005da4 <__sinit_lock_acquire>:
 8005da4:	4801      	ldr	r0, [pc, #4]	; (8005dac <__sinit_lock_acquire+0x8>)
 8005da6:	f000 ba87 	b.w	80062b8 <__retarget_lock_acquire_recursive>
 8005daa:	bf00      	nop
 8005dac:	200001ee 	.word	0x200001ee

08005db0 <__sinit_lock_release>:
 8005db0:	4801      	ldr	r0, [pc, #4]	; (8005db8 <__sinit_lock_release+0x8>)
 8005db2:	f000 ba82 	b.w	80062ba <__retarget_lock_release_recursive>
 8005db6:	bf00      	nop
 8005db8:	200001ee 	.word	0x200001ee

08005dbc <__sinit>:
 8005dbc:	b510      	push	{r4, lr}
 8005dbe:	4604      	mov	r4, r0
 8005dc0:	f7ff fff0 	bl	8005da4 <__sinit_lock_acquire>
 8005dc4:	69a3      	ldr	r3, [r4, #24]
 8005dc6:	b11b      	cbz	r3, 8005dd0 <__sinit+0x14>
 8005dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dcc:	f7ff bff0 	b.w	8005db0 <__sinit_lock_release>
 8005dd0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005dd4:	6523      	str	r3, [r4, #80]	; 0x50
 8005dd6:	4b13      	ldr	r3, [pc, #76]	; (8005e24 <__sinit+0x68>)
 8005dd8:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <__sinit+0x6c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005dde:	42a3      	cmp	r3, r4
 8005de0:	bf04      	itt	eq
 8005de2:	2301      	moveq	r3, #1
 8005de4:	61a3      	streq	r3, [r4, #24]
 8005de6:	4620      	mov	r0, r4
 8005de8:	f000 f820 	bl	8005e2c <__sfp>
 8005dec:	6060      	str	r0, [r4, #4]
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 f81c 	bl	8005e2c <__sfp>
 8005df4:	60a0      	str	r0, [r4, #8]
 8005df6:	4620      	mov	r0, r4
 8005df8:	f000 f818 	bl	8005e2c <__sfp>
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	60e0      	str	r0, [r4, #12]
 8005e00:	2104      	movs	r1, #4
 8005e02:	6860      	ldr	r0, [r4, #4]
 8005e04:	f7ff ff82 	bl	8005d0c <std>
 8005e08:	68a0      	ldr	r0, [r4, #8]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	2109      	movs	r1, #9
 8005e0e:	f7ff ff7d 	bl	8005d0c <std>
 8005e12:	68e0      	ldr	r0, [r4, #12]
 8005e14:	2202      	movs	r2, #2
 8005e16:	2112      	movs	r1, #18
 8005e18:	f7ff ff78 	bl	8005d0c <std>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	61a3      	str	r3, [r4, #24]
 8005e20:	e7d2      	b.n	8005dc8 <__sinit+0xc>
 8005e22:	bf00      	nop
 8005e24:	08008c9c 	.word	0x08008c9c
 8005e28:	08005d55 	.word	0x08005d55

08005e2c <__sfp>:
 8005e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e2e:	4607      	mov	r7, r0
 8005e30:	f7ff ffac 	bl	8005d8c <__sfp_lock_acquire>
 8005e34:	4b1e      	ldr	r3, [pc, #120]	; (8005eb0 <__sfp+0x84>)
 8005e36:	681e      	ldr	r6, [r3, #0]
 8005e38:	69b3      	ldr	r3, [r6, #24]
 8005e3a:	b913      	cbnz	r3, 8005e42 <__sfp+0x16>
 8005e3c:	4630      	mov	r0, r6
 8005e3e:	f7ff ffbd 	bl	8005dbc <__sinit>
 8005e42:	3648      	adds	r6, #72	; 0x48
 8005e44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	d503      	bpl.n	8005e54 <__sfp+0x28>
 8005e4c:	6833      	ldr	r3, [r6, #0]
 8005e4e:	b30b      	cbz	r3, 8005e94 <__sfp+0x68>
 8005e50:	6836      	ldr	r6, [r6, #0]
 8005e52:	e7f7      	b.n	8005e44 <__sfp+0x18>
 8005e54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e58:	b9d5      	cbnz	r5, 8005e90 <__sfp+0x64>
 8005e5a:	4b16      	ldr	r3, [pc, #88]	; (8005eb4 <__sfp+0x88>)
 8005e5c:	60e3      	str	r3, [r4, #12]
 8005e5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e62:	6665      	str	r5, [r4, #100]	; 0x64
 8005e64:	f000 fa26 	bl	80062b4 <__retarget_lock_init_recursive>
 8005e68:	f7ff ff96 	bl	8005d98 <__sfp_lock_release>
 8005e6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005e70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005e74:	6025      	str	r5, [r4, #0]
 8005e76:	61a5      	str	r5, [r4, #24]
 8005e78:	2208      	movs	r2, #8
 8005e7a:	4629      	mov	r1, r5
 8005e7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e80:	f000 fa98 	bl	80063b4 <memset>
 8005e84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e90:	3468      	adds	r4, #104	; 0x68
 8005e92:	e7d9      	b.n	8005e48 <__sfp+0x1c>
 8005e94:	2104      	movs	r1, #4
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7ff ff62 	bl	8005d60 <__sfmoreglue>
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	6030      	str	r0, [r6, #0]
 8005ea0:	2800      	cmp	r0, #0
 8005ea2:	d1d5      	bne.n	8005e50 <__sfp+0x24>
 8005ea4:	f7ff ff78 	bl	8005d98 <__sfp_lock_release>
 8005ea8:	230c      	movs	r3, #12
 8005eaa:	603b      	str	r3, [r7, #0]
 8005eac:	e7ee      	b.n	8005e8c <__sfp+0x60>
 8005eae:	bf00      	nop
 8005eb0:	08008c9c 	.word	0x08008c9c
 8005eb4:	ffff0001 	.word	0xffff0001

08005eb8 <_fopen_r>:
 8005eb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005eba:	460f      	mov	r7, r1
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	aa01      	add	r2, sp, #4
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	f001 f891 	bl	8006fe8 <__sflags>
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	b918      	cbnz	r0, 8005ed2 <_fopen_r+0x1a>
 8005eca:	2400      	movs	r4, #0
 8005ecc:	4620      	mov	r0, r4
 8005ece:	b003      	add	sp, #12
 8005ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f7ff ffaa 	bl	8005e2c <__sfp>
 8005ed8:	4604      	mov	r4, r0
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d0f5      	beq.n	8005eca <_fopen_r+0x12>
 8005ede:	4639      	mov	r1, r7
 8005ee0:	9a01      	ldr	r2, [sp, #4]
 8005ee2:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 fb4c 	bl	8006584 <_open_r>
 8005eec:	1e07      	subs	r7, r0, #0
 8005eee:	da09      	bge.n	8005f04 <_fopen_r+0x4c>
 8005ef0:	2500      	movs	r5, #0
 8005ef2:	f7ff ff4b 	bl	8005d8c <__sfp_lock_acquire>
 8005ef6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ef8:	81a5      	strh	r5, [r4, #12]
 8005efa:	f000 f9dc 	bl	80062b6 <__retarget_lock_close_recursive>
 8005efe:	f7ff ff4b 	bl	8005d98 <__sfp_lock_release>
 8005f02:	e7e2      	b.n	8005eca <_fopen_r+0x12>
 8005f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f06:	07db      	lsls	r3, r3, #31
 8005f08:	d405      	bmi.n	8005f16 <_fopen_r+0x5e>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	0598      	lsls	r0, r3, #22
 8005f0e:	d402      	bmi.n	8005f16 <_fopen_r+0x5e>
 8005f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f12:	f000 f9d1 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8005f16:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <_fopen_r+0x98>)
 8005f18:	6263      	str	r3, [r4, #36]	; 0x24
 8005f1a:	4b0e      	ldr	r3, [pc, #56]	; (8005f54 <_fopen_r+0x9c>)
 8005f1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f1e:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <_fopen_r+0xa0>)
 8005f20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f22:	05f1      	lsls	r1, r6, #23
 8005f24:	4b0d      	ldr	r3, [pc, #52]	; (8005f5c <_fopen_r+0xa4>)
 8005f26:	81e7      	strh	r7, [r4, #14]
 8005f28:	81a6      	strh	r6, [r4, #12]
 8005f2a:	6224      	str	r4, [r4, #32]
 8005f2c:	6323      	str	r3, [r4, #48]	; 0x30
 8005f2e:	d505      	bpl.n	8005f3c <_fopen_r+0x84>
 8005f30:	2302      	movs	r3, #2
 8005f32:	2200      	movs	r2, #0
 8005f34:	4621      	mov	r1, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	f000 f89c 	bl	8006074 <_fseek_r>
 8005f3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f3e:	07da      	lsls	r2, r3, #31
 8005f40:	d4c4      	bmi.n	8005ecc <_fopen_r+0x14>
 8005f42:	89a3      	ldrh	r3, [r4, #12]
 8005f44:	059b      	lsls	r3, r3, #22
 8005f46:	d4c1      	bmi.n	8005ecc <_fopen_r+0x14>
 8005f48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f4a:	f000 f9b6 	bl	80062ba <__retarget_lock_release_recursive>
 8005f4e:	e7bd      	b.n	8005ecc <_fopen_r+0x14>
 8005f50:	08006951 	.word	0x08006951
 8005f54:	08006973 	.word	0x08006973
 8005f58:	080069ab 	.word	0x080069ab
 8005f5c:	080069cf 	.word	0x080069cf

08005f60 <fopen>:
 8005f60:	4b02      	ldr	r3, [pc, #8]	; (8005f6c <fopen+0xc>)
 8005f62:	460a      	mov	r2, r1
 8005f64:	4601      	mov	r1, r0
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	f7ff bfa6 	b.w	8005eb8 <_fopen_r>
 8005f6c:	20000034 	.word	0x20000034

08005f70 <_fread_r>:
 8005f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	461f      	mov	r7, r3
 8005f76:	4613      	mov	r3, r2
 8005f78:	437b      	muls	r3, r7
 8005f7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005f7c:	4606      	mov	r6, r0
 8005f7e:	468a      	mov	sl, r1
 8005f80:	4691      	mov	r9, r2
 8005f82:	469b      	mov	fp, r3
 8005f84:	d05f      	beq.n	8006046 <_fread_r+0xd6>
 8005f86:	b118      	cbz	r0, 8005f90 <_fread_r+0x20>
 8005f88:	6983      	ldr	r3, [r0, #24]
 8005f8a:	b90b      	cbnz	r3, 8005f90 <_fread_r+0x20>
 8005f8c:	f7ff ff16 	bl	8005dbc <__sinit>
 8005f90:	4b2e      	ldr	r3, [pc, #184]	; (800604c <_fread_r+0xdc>)
 8005f92:	429c      	cmp	r4, r3
 8005f94:	d128      	bne.n	8005fe8 <_fread_r+0x78>
 8005f96:	6874      	ldr	r4, [r6, #4]
 8005f98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f9a:	07db      	lsls	r3, r3, #31
 8005f9c:	d405      	bmi.n	8005faa <_fread_r+0x3a>
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	059d      	lsls	r5, r3, #22
 8005fa2:	d402      	bmi.n	8005faa <_fread_r+0x3a>
 8005fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fa6:	f000 f987 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8005faa:	6863      	ldr	r3, [r4, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	da01      	bge.n	8005fb4 <_fread_r+0x44>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6063      	str	r3, [r4, #4]
 8005fb4:	46d8      	mov	r8, fp
 8005fb6:	e9d4 1500 	ldrd	r1, r5, [r4]
 8005fba:	4545      	cmp	r5, r8
 8005fbc:	d31e      	bcc.n	8005ffc <_fread_r+0x8c>
 8005fbe:	4642      	mov	r2, r8
 8005fc0:	4650      	mov	r0, sl
 8005fc2:	f000 f9e9 	bl	8006398 <memcpy>
 8005fc6:	6862      	ldr	r2, [r4, #4]
 8005fc8:	6821      	ldr	r1, [r4, #0]
 8005fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fcc:	eba2 0208 	sub.w	r2, r2, r8
 8005fd0:	6062      	str	r2, [r4, #4]
 8005fd2:	4441      	add	r1, r8
 8005fd4:	07da      	lsls	r2, r3, #31
 8005fd6:	6021      	str	r1, [r4, #0]
 8005fd8:	d42f      	bmi.n	800603a <_fread_r+0xca>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	059b      	lsls	r3, r3, #22
 8005fde:	d42c      	bmi.n	800603a <_fread_r+0xca>
 8005fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe2:	f000 f96a 	bl	80062ba <__retarget_lock_release_recursive>
 8005fe6:	e028      	b.n	800603a <_fread_r+0xca>
 8005fe8:	4b19      	ldr	r3, [pc, #100]	; (8006050 <_fread_r+0xe0>)
 8005fea:	429c      	cmp	r4, r3
 8005fec:	d101      	bne.n	8005ff2 <_fread_r+0x82>
 8005fee:	68b4      	ldr	r4, [r6, #8]
 8005ff0:	e7d2      	b.n	8005f98 <_fread_r+0x28>
 8005ff2:	4b18      	ldr	r3, [pc, #96]	; (8006054 <_fread_r+0xe4>)
 8005ff4:	429c      	cmp	r4, r3
 8005ff6:	bf08      	it	eq
 8005ff8:	68f4      	ldreq	r4, [r6, #12]
 8005ffa:	e7cd      	b.n	8005f98 <_fread_r+0x28>
 8005ffc:	462a      	mov	r2, r5
 8005ffe:	4650      	mov	r0, sl
 8006000:	f000 f9ca 	bl	8006398 <memcpy>
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	442b      	add	r3, r5
 8006008:	6023      	str	r3, [r4, #0]
 800600a:	4621      	mov	r1, r4
 800600c:	eba8 0305 	sub.w	r3, r8, r5
 8006010:	4630      	mov	r0, r6
 8006012:	9301      	str	r3, [sp, #4]
 8006014:	f000 fc02 	bl	800681c <__srefill_r>
 8006018:	44aa      	add	sl, r5
 800601a:	9b01      	ldr	r3, [sp, #4]
 800601c:	b188      	cbz	r0, 8006042 <_fread_r+0xd2>
 800601e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006020:	07d8      	lsls	r0, r3, #31
 8006022:	d405      	bmi.n	8006030 <_fread_r+0xc0>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	0599      	lsls	r1, r3, #22
 8006028:	d402      	bmi.n	8006030 <_fread_r+0xc0>
 800602a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800602c:	f000 f945 	bl	80062ba <__retarget_lock_release_recursive>
 8006030:	445d      	add	r5, fp
 8006032:	eba5 0308 	sub.w	r3, r5, r8
 8006036:	fbb3 f7f9 	udiv	r7, r3, r9
 800603a:	4638      	mov	r0, r7
 800603c:	b003      	add	sp, #12
 800603e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006042:	4698      	mov	r8, r3
 8006044:	e7b7      	b.n	8005fb6 <_fread_r+0x46>
 8006046:	461f      	mov	r7, r3
 8006048:	e7f7      	b.n	800603a <_fread_r+0xca>
 800604a:	bf00      	nop
 800604c:	08008c5c 	.word	0x08008c5c
 8006050:	08008c7c 	.word	0x08008c7c
 8006054:	08008c3c 	.word	0x08008c3c

08006058 <fread>:
 8006058:	b507      	push	{r0, r1, r2, lr}
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	4613      	mov	r3, r2
 800605e:	460a      	mov	r2, r1
 8006060:	4601      	mov	r1, r0
 8006062:	4803      	ldr	r0, [pc, #12]	; (8006070 <fread+0x18>)
 8006064:	6800      	ldr	r0, [r0, #0]
 8006066:	f7ff ff83 	bl	8005f70 <_fread_r>
 800606a:	b003      	add	sp, #12
 800606c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006070:	20000034 	.word	0x20000034

08006074 <_fseek_r>:
 8006074:	f000 b80a 	b.w	800608c <_fseeko_r>

08006078 <fseek>:
 8006078:	4613      	mov	r3, r2
 800607a:	460a      	mov	r2, r1
 800607c:	4601      	mov	r1, r0
 800607e:	4802      	ldr	r0, [pc, #8]	; (8006088 <fseek+0x10>)
 8006080:	6800      	ldr	r0, [r0, #0]
 8006082:	f000 b803 	b.w	800608c <_fseeko_r>
 8006086:	bf00      	nop
 8006088:	20000034 	.word	0x20000034

0800608c <_fseeko_r>:
 800608c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006090:	460c      	mov	r4, r1
 8006092:	4617      	mov	r7, r2
 8006094:	461d      	mov	r5, r3
 8006096:	4606      	mov	r6, r0
 8006098:	b118      	cbz	r0, 80060a2 <_fseeko_r+0x16>
 800609a:	6983      	ldr	r3, [r0, #24]
 800609c:	b90b      	cbnz	r3, 80060a2 <_fseeko_r+0x16>
 800609e:	f7ff fe8d 	bl	8005dbc <__sinit>
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <_fseeko_r+0x15c>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	d122      	bne.n	80060ee <_fseeko_r+0x62>
 80060a8:	6874      	ldr	r4, [r6, #4]
 80060aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060ac:	07d9      	lsls	r1, r3, #31
 80060ae:	d405      	bmi.n	80060bc <_fseeko_r+0x30>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	059a      	lsls	r2, r3, #22
 80060b4:	d402      	bmi.n	80060bc <_fseeko_r+0x30>
 80060b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060b8:	f000 f8fe 	bl	80062b8 <__retarget_lock_acquire_recursive>
 80060bc:	89a3      	ldrh	r3, [r4, #12]
 80060be:	f403 7384 	and.w	r3, r3, #264	; 0x108
 80060c2:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 80060c6:	d103      	bne.n	80060d0 <_fseeko_r+0x44>
 80060c8:	4621      	mov	r1, r4
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff fdd0 	bl	8005c70 <_fflush_r>
 80060d0:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80060d4:	f1b8 0f00 	cmp.w	r8, #0
 80060d8:	d113      	bne.n	8006102 <_fseeko_r+0x76>
 80060da:	231d      	movs	r3, #29
 80060dc:	6033      	str	r3, [r6, #0]
 80060de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e0:	07d9      	lsls	r1, r3, #31
 80060e2:	d578      	bpl.n	80061d6 <_fseeko_r+0x14a>
 80060e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80060e8:	4628      	mov	r0, r5
 80060ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ee:	4b3f      	ldr	r3, [pc, #252]	; (80061ec <_fseeko_r+0x160>)
 80060f0:	429c      	cmp	r4, r3
 80060f2:	d101      	bne.n	80060f8 <_fseeko_r+0x6c>
 80060f4:	68b4      	ldr	r4, [r6, #8]
 80060f6:	e7d8      	b.n	80060aa <_fseeko_r+0x1e>
 80060f8:	4b3d      	ldr	r3, [pc, #244]	; (80061f0 <_fseeko_r+0x164>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	bf08      	it	eq
 80060fe:	68f4      	ldreq	r4, [r6, #12]
 8006100:	e7d3      	b.n	80060aa <_fseeko_r+0x1e>
 8006102:	2d01      	cmp	r5, #1
 8006104:	d036      	beq.n	8006174 <_fseeko_r+0xe8>
 8006106:	f035 0302 	bics.w	r3, r5, #2
 800610a:	d162      	bne.n	80061d2 <_fseeko_r+0x146>
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b91b      	cbnz	r3, 8006118 <_fseeko_r+0x8c>
 8006110:	4621      	mov	r1, r4
 8006112:	4630      	mov	r0, r6
 8006114:	f000 f8f8 	bl	8006308 <__smakebuf_r>
 8006118:	4621      	mov	r1, r4
 800611a:	4630      	mov	r0, r6
 800611c:	f7ff fda8 	bl	8005c70 <_fflush_r>
 8006120:	2800      	cmp	r0, #0
 8006122:	d1dc      	bne.n	80060de <_fseeko_r+0x52>
 8006124:	6a21      	ldr	r1, [r4, #32]
 8006126:	462b      	mov	r3, r5
 8006128:	463a      	mov	r2, r7
 800612a:	4630      	mov	r0, r6
 800612c:	47c0      	blx	r8
 800612e:	3001      	adds	r0, #1
 8006130:	d0d5      	beq.n	80060de <_fseeko_r+0x52>
 8006132:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006134:	b141      	cbz	r1, 8006148 <_fseeko_r+0xbc>
 8006136:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800613a:	4299      	cmp	r1, r3
 800613c:	d002      	beq.n	8006144 <_fseeko_r+0xb8>
 800613e:	4630      	mov	r0, r6
 8006140:	f000 f940 	bl	80063c4 <_free_r>
 8006144:	2300      	movs	r3, #0
 8006146:	6363      	str	r3, [r4, #52]	; 0x34
 8006148:	6923      	ldr	r3, [r4, #16]
 800614a:	6023      	str	r3, [r4, #0]
 800614c:	89a3      	ldrh	r3, [r4, #12]
 800614e:	2600      	movs	r6, #0
 8006150:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 8006154:	6066      	str	r6, [r4, #4]
 8006156:	81a3      	strh	r3, [r4, #12]
 8006158:	2208      	movs	r2, #8
 800615a:	4631      	mov	r1, r6
 800615c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006160:	f000 f928 	bl	80063b4 <memset>
 8006164:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006166:	f015 0501 	ands.w	r5, r5, #1
 800616a:	d13b      	bne.n	80061e4 <_fseeko_r+0x158>
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	059b      	lsls	r3, r3, #22
 8006170:	d4ba      	bmi.n	80060e8 <_fseeko_r+0x5c>
 8006172:	e021      	b.n	80061b8 <_fseeko_r+0x12c>
 8006174:	4621      	mov	r1, r4
 8006176:	4630      	mov	r0, r6
 8006178:	f7ff fd7a 	bl	8005c70 <_fflush_r>
 800617c:	89a2      	ldrh	r2, [r4, #12]
 800617e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006182:	d00c      	beq.n	800619e <_fseeko_r+0x112>
 8006184:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8006186:	89a3      	ldrh	r3, [r4, #12]
 8006188:	075a      	lsls	r2, r3, #29
 800618a:	d519      	bpl.n	80061c0 <_fseeko_r+0x134>
 800618c:	6863      	ldr	r3, [r4, #4]
 800618e:	1aed      	subs	r5, r5, r3
 8006190:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006192:	b10b      	cbz	r3, 8006198 <_fseeko_r+0x10c>
 8006194:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006196:	1aed      	subs	r5, r5, r3
 8006198:	442f      	add	r7, r5
 800619a:	2500      	movs	r5, #0
 800619c:	e7b6      	b.n	800610c <_fseeko_r+0x80>
 800619e:	462b      	mov	r3, r5
 80061a0:	6a21      	ldr	r1, [r4, #32]
 80061a2:	4630      	mov	r0, r6
 80061a4:	47c0      	blx	r8
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	4605      	mov	r5, r0
 80061aa:	d1ec      	bne.n	8006186 <_fseeko_r+0xfa>
 80061ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ae:	07d8      	lsls	r0, r3, #31
 80061b0:	d498      	bmi.n	80060e4 <_fseeko_r+0x58>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	0599      	lsls	r1, r3, #22
 80061b6:	d495      	bmi.n	80060e4 <_fseeko_r+0x58>
 80061b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061ba:	f000 f87e 	bl	80062ba <__retarget_lock_release_recursive>
 80061be:	e793      	b.n	80060e8 <_fseeko_r+0x5c>
 80061c0:	0718      	lsls	r0, r3, #28
 80061c2:	d5e9      	bpl.n	8006198 <_fseeko_r+0x10c>
 80061c4:	6823      	ldr	r3, [r4, #0]
 80061c6:	6922      	ldr	r2, [r4, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d0e5      	beq.n	8006198 <_fseeko_r+0x10c>
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	441d      	add	r5, r3
 80061d0:	e7e2      	b.n	8006198 <_fseeko_r+0x10c>
 80061d2:	2316      	movs	r3, #22
 80061d4:	e782      	b.n	80060dc <_fseeko_r+0x50>
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	059a      	lsls	r2, r3, #22
 80061da:	d483      	bmi.n	80060e4 <_fseeko_r+0x58>
 80061dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061de:	f000 f86c 	bl	80062ba <__retarget_lock_release_recursive>
 80061e2:	e77f      	b.n	80060e4 <_fseeko_r+0x58>
 80061e4:	4635      	mov	r5, r6
 80061e6:	e77f      	b.n	80060e8 <_fseeko_r+0x5c>
 80061e8:	08008c5c 	.word	0x08008c5c
 80061ec:	08008c7c 	.word	0x08008c7c
 80061f0:	08008c3c 	.word	0x08008c3c

080061f4 <_fwalk>:
 80061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	460f      	mov	r7, r1
 80061fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061fe:	2600      	movs	r6, #0
 8006200:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8006204:	f1b8 0801 	subs.w	r8, r8, #1
 8006208:	d505      	bpl.n	8006216 <_fwalk+0x22>
 800620a:	6824      	ldr	r4, [r4, #0]
 800620c:	2c00      	cmp	r4, #0
 800620e:	d1f7      	bne.n	8006200 <_fwalk+0xc>
 8006210:	4630      	mov	r0, r6
 8006212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006216:	89ab      	ldrh	r3, [r5, #12]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d906      	bls.n	800622a <_fwalk+0x36>
 800621c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006220:	3301      	adds	r3, #1
 8006222:	d002      	beq.n	800622a <_fwalk+0x36>
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	4306      	orrs	r6, r0
 800622a:	3568      	adds	r5, #104	; 0x68
 800622c:	e7ea      	b.n	8006204 <_fwalk+0x10>

0800622e <_fwalk_reent>:
 800622e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006232:	4606      	mov	r6, r0
 8006234:	4688      	mov	r8, r1
 8006236:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800623a:	2700      	movs	r7, #0
 800623c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006240:	f1b9 0901 	subs.w	r9, r9, #1
 8006244:	d505      	bpl.n	8006252 <_fwalk_reent+0x24>
 8006246:	6824      	ldr	r4, [r4, #0]
 8006248:	2c00      	cmp	r4, #0
 800624a:	d1f7      	bne.n	800623c <_fwalk_reent+0xe>
 800624c:	4638      	mov	r0, r7
 800624e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d907      	bls.n	8006268 <_fwalk_reent+0x3a>
 8006258:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800625c:	3301      	adds	r3, #1
 800625e:	d003      	beq.n	8006268 <_fwalk_reent+0x3a>
 8006260:	4629      	mov	r1, r5
 8006262:	4630      	mov	r0, r6
 8006264:	47c0      	blx	r8
 8006266:	4307      	orrs	r7, r0
 8006268:	3568      	adds	r5, #104	; 0x68
 800626a:	e7e9      	b.n	8006240 <_fwalk_reent+0x12>

0800626c <__libc_init_array>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4d0d      	ldr	r5, [pc, #52]	; (80062a4 <__libc_init_array+0x38>)
 8006270:	4c0d      	ldr	r4, [pc, #52]	; (80062a8 <__libc_init_array+0x3c>)
 8006272:	1b64      	subs	r4, r4, r5
 8006274:	10a4      	asrs	r4, r4, #2
 8006276:	2600      	movs	r6, #0
 8006278:	42a6      	cmp	r6, r4
 800627a:	d109      	bne.n	8006290 <__libc_init_array+0x24>
 800627c:	4d0b      	ldr	r5, [pc, #44]	; (80062ac <__libc_init_array+0x40>)
 800627e:	4c0c      	ldr	r4, [pc, #48]	; (80062b0 <__libc_init_array+0x44>)
 8006280:	f002 f944 	bl	800850c <_init>
 8006284:	1b64      	subs	r4, r4, r5
 8006286:	10a4      	asrs	r4, r4, #2
 8006288:	2600      	movs	r6, #0
 800628a:	42a6      	cmp	r6, r4
 800628c:	d105      	bne.n	800629a <__libc_init_array+0x2e>
 800628e:	bd70      	pop	{r4, r5, r6, pc}
 8006290:	f855 3b04 	ldr.w	r3, [r5], #4
 8006294:	4798      	blx	r3
 8006296:	3601      	adds	r6, #1
 8006298:	e7ee      	b.n	8006278 <__libc_init_array+0xc>
 800629a:	f855 3b04 	ldr.w	r3, [r5], #4
 800629e:	4798      	blx	r3
 80062a0:	3601      	adds	r6, #1
 80062a2:	e7f2      	b.n	800628a <__libc_init_array+0x1e>
 80062a4:	080093a8 	.word	0x080093a8
 80062a8:	080093a8 	.word	0x080093a8
 80062ac:	080093a8 	.word	0x080093a8
 80062b0:	080093ac 	.word	0x080093ac

080062b4 <__retarget_lock_init_recursive>:
 80062b4:	4770      	bx	lr

080062b6 <__retarget_lock_close_recursive>:
 80062b6:	4770      	bx	lr

080062b8 <__retarget_lock_acquire_recursive>:
 80062b8:	4770      	bx	lr

080062ba <__retarget_lock_release_recursive>:
 80062ba:	4770      	bx	lr

080062bc <__swhatbuf_r>:
 80062bc:	b570      	push	{r4, r5, r6, lr}
 80062be:	460e      	mov	r6, r1
 80062c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062c4:	2900      	cmp	r1, #0
 80062c6:	b096      	sub	sp, #88	; 0x58
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	da08      	bge.n	80062e0 <__swhatbuf_r+0x24>
 80062ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	602a      	str	r2, [r5, #0]
 80062d6:	061a      	lsls	r2, r3, #24
 80062d8:	d410      	bmi.n	80062fc <__swhatbuf_r+0x40>
 80062da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062de:	e00e      	b.n	80062fe <__swhatbuf_r+0x42>
 80062e0:	466a      	mov	r2, sp
 80062e2:	f000 feb7 	bl	8007054 <_fstat_r>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	dbf1      	blt.n	80062ce <__swhatbuf_r+0x12>
 80062ea:	9a01      	ldr	r2, [sp, #4]
 80062ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80062f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80062f4:	425a      	negs	r2, r3
 80062f6:	415a      	adcs	r2, r3
 80062f8:	602a      	str	r2, [r5, #0]
 80062fa:	e7ee      	b.n	80062da <__swhatbuf_r+0x1e>
 80062fc:	2340      	movs	r3, #64	; 0x40
 80062fe:	2000      	movs	r0, #0
 8006300:	6023      	str	r3, [r4, #0]
 8006302:	b016      	add	sp, #88	; 0x58
 8006304:	bd70      	pop	{r4, r5, r6, pc}
	...

08006308 <__smakebuf_r>:
 8006308:	898b      	ldrh	r3, [r1, #12]
 800630a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800630c:	079d      	lsls	r5, r3, #30
 800630e:	4606      	mov	r6, r0
 8006310:	460c      	mov	r4, r1
 8006312:	d507      	bpl.n	8006324 <__smakebuf_r+0x1c>
 8006314:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006318:	6023      	str	r3, [r4, #0]
 800631a:	6123      	str	r3, [r4, #16]
 800631c:	2301      	movs	r3, #1
 800631e:	6163      	str	r3, [r4, #20]
 8006320:	b002      	add	sp, #8
 8006322:	bd70      	pop	{r4, r5, r6, pc}
 8006324:	ab01      	add	r3, sp, #4
 8006326:	466a      	mov	r2, sp
 8006328:	f7ff ffc8 	bl	80062bc <__swhatbuf_r>
 800632c:	9900      	ldr	r1, [sp, #0]
 800632e:	4605      	mov	r5, r0
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f8b3 	bl	800649c <_malloc_r>
 8006336:	b948      	cbnz	r0, 800634c <__smakebuf_r+0x44>
 8006338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633c:	059a      	lsls	r2, r3, #22
 800633e:	d4ef      	bmi.n	8006320 <__smakebuf_r+0x18>
 8006340:	f023 0303 	bic.w	r3, r3, #3
 8006344:	f043 0302 	orr.w	r3, r3, #2
 8006348:	81a3      	strh	r3, [r4, #12]
 800634a:	e7e3      	b.n	8006314 <__smakebuf_r+0xc>
 800634c:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <__smakebuf_r+0x7c>)
 800634e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006350:	89a3      	ldrh	r3, [r4, #12]
 8006352:	6020      	str	r0, [r4, #0]
 8006354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006358:	81a3      	strh	r3, [r4, #12]
 800635a:	9b00      	ldr	r3, [sp, #0]
 800635c:	6163      	str	r3, [r4, #20]
 800635e:	9b01      	ldr	r3, [sp, #4]
 8006360:	6120      	str	r0, [r4, #16]
 8006362:	b15b      	cbz	r3, 800637c <__smakebuf_r+0x74>
 8006364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006368:	4630      	mov	r0, r6
 800636a:	f000 fe85 	bl	8007078 <_isatty_r>
 800636e:	b128      	cbz	r0, 800637c <__smakebuf_r+0x74>
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f023 0303 	bic.w	r3, r3, #3
 8006376:	f043 0301 	orr.w	r3, r3, #1
 800637a:	81a3      	strh	r3, [r4, #12]
 800637c:	89a0      	ldrh	r0, [r4, #12]
 800637e:	4305      	orrs	r5, r0
 8006380:	81a5      	strh	r5, [r4, #12]
 8006382:	e7cd      	b.n	8006320 <__smakebuf_r+0x18>
 8006384:	08005d55 	.word	0x08005d55

08006388 <malloc>:
 8006388:	4b02      	ldr	r3, [pc, #8]	; (8006394 <malloc+0xc>)
 800638a:	4601      	mov	r1, r0
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	f000 b885 	b.w	800649c <_malloc_r>
 8006392:	bf00      	nop
 8006394:	20000034 	.word	0x20000034

08006398 <memcpy>:
 8006398:	440a      	add	r2, r1
 800639a:	4291      	cmp	r1, r2
 800639c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80063a0:	d100      	bne.n	80063a4 <memcpy+0xc>
 80063a2:	4770      	bx	lr
 80063a4:	b510      	push	{r4, lr}
 80063a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ae:	4291      	cmp	r1, r2
 80063b0:	d1f9      	bne.n	80063a6 <memcpy+0xe>
 80063b2:	bd10      	pop	{r4, pc}

080063b4 <memset>:
 80063b4:	4402      	add	r2, r0
 80063b6:	4603      	mov	r3, r0
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d100      	bne.n	80063be <memset+0xa>
 80063bc:	4770      	bx	lr
 80063be:	f803 1b01 	strb.w	r1, [r3], #1
 80063c2:	e7f9      	b.n	80063b8 <memset+0x4>

080063c4 <_free_r>:
 80063c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063c6:	2900      	cmp	r1, #0
 80063c8:	d044      	beq.n	8006454 <_free_r+0x90>
 80063ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ce:	9001      	str	r0, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f1a1 0404 	sub.w	r4, r1, #4
 80063d6:	bfb8      	it	lt
 80063d8:	18e4      	addlt	r4, r4, r3
 80063da:	f000 fe6f 	bl	80070bc <__malloc_lock>
 80063de:	4a1e      	ldr	r2, [pc, #120]	; (8006458 <_free_r+0x94>)
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	6813      	ldr	r3, [r2, #0]
 80063e4:	b933      	cbnz	r3, 80063f4 <_free_r+0x30>
 80063e6:	6063      	str	r3, [r4, #4]
 80063e8:	6014      	str	r4, [r2, #0]
 80063ea:	b003      	add	sp, #12
 80063ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063f0:	f000 be6a 	b.w	80070c8 <__malloc_unlock>
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d908      	bls.n	800640a <_free_r+0x46>
 80063f8:	6825      	ldr	r5, [r4, #0]
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	428b      	cmp	r3, r1
 80063fe:	bf01      	itttt	eq
 8006400:	6819      	ldreq	r1, [r3, #0]
 8006402:	685b      	ldreq	r3, [r3, #4]
 8006404:	1949      	addeq	r1, r1, r5
 8006406:	6021      	streq	r1, [r4, #0]
 8006408:	e7ed      	b.n	80063e6 <_free_r+0x22>
 800640a:	461a      	mov	r2, r3
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b10b      	cbz	r3, 8006414 <_free_r+0x50>
 8006410:	42a3      	cmp	r3, r4
 8006412:	d9fa      	bls.n	800640a <_free_r+0x46>
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	1855      	adds	r5, r2, r1
 8006418:	42a5      	cmp	r5, r4
 800641a:	d10b      	bne.n	8006434 <_free_r+0x70>
 800641c:	6824      	ldr	r4, [r4, #0]
 800641e:	4421      	add	r1, r4
 8006420:	1854      	adds	r4, r2, r1
 8006422:	42a3      	cmp	r3, r4
 8006424:	6011      	str	r1, [r2, #0]
 8006426:	d1e0      	bne.n	80063ea <_free_r+0x26>
 8006428:	681c      	ldr	r4, [r3, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6053      	str	r3, [r2, #4]
 800642e:	4421      	add	r1, r4
 8006430:	6011      	str	r1, [r2, #0]
 8006432:	e7da      	b.n	80063ea <_free_r+0x26>
 8006434:	d902      	bls.n	800643c <_free_r+0x78>
 8006436:	230c      	movs	r3, #12
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	e7d6      	b.n	80063ea <_free_r+0x26>
 800643c:	6825      	ldr	r5, [r4, #0]
 800643e:	1961      	adds	r1, r4, r5
 8006440:	428b      	cmp	r3, r1
 8006442:	bf04      	itt	eq
 8006444:	6819      	ldreq	r1, [r3, #0]
 8006446:	685b      	ldreq	r3, [r3, #4]
 8006448:	6063      	str	r3, [r4, #4]
 800644a:	bf04      	itt	eq
 800644c:	1949      	addeq	r1, r1, r5
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	6054      	str	r4, [r2, #4]
 8006452:	e7ca      	b.n	80063ea <_free_r+0x26>
 8006454:	b003      	add	sp, #12
 8006456:	bd30      	pop	{r4, r5, pc}
 8006458:	200001f0 	.word	0x200001f0

0800645c <sbrk_aligned>:
 800645c:	b570      	push	{r4, r5, r6, lr}
 800645e:	4e0e      	ldr	r6, [pc, #56]	; (8006498 <sbrk_aligned+0x3c>)
 8006460:	460c      	mov	r4, r1
 8006462:	6831      	ldr	r1, [r6, #0]
 8006464:	4605      	mov	r5, r0
 8006466:	b911      	cbnz	r1, 800646e <sbrk_aligned+0x12>
 8006468:	f000 fa62 	bl	8006930 <_sbrk_r>
 800646c:	6030      	str	r0, [r6, #0]
 800646e:	4621      	mov	r1, r4
 8006470:	4628      	mov	r0, r5
 8006472:	f000 fa5d 	bl	8006930 <_sbrk_r>
 8006476:	1c43      	adds	r3, r0, #1
 8006478:	d00a      	beq.n	8006490 <sbrk_aligned+0x34>
 800647a:	1cc4      	adds	r4, r0, #3
 800647c:	f024 0403 	bic.w	r4, r4, #3
 8006480:	42a0      	cmp	r0, r4
 8006482:	d007      	beq.n	8006494 <sbrk_aligned+0x38>
 8006484:	1a21      	subs	r1, r4, r0
 8006486:	4628      	mov	r0, r5
 8006488:	f000 fa52 	bl	8006930 <_sbrk_r>
 800648c:	3001      	adds	r0, #1
 800648e:	d101      	bne.n	8006494 <sbrk_aligned+0x38>
 8006490:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006494:	4620      	mov	r0, r4
 8006496:	bd70      	pop	{r4, r5, r6, pc}
 8006498:	200001f4 	.word	0x200001f4

0800649c <_malloc_r>:
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	1ccd      	adds	r5, r1, #3
 80064a2:	f025 0503 	bic.w	r5, r5, #3
 80064a6:	3508      	adds	r5, #8
 80064a8:	2d0c      	cmp	r5, #12
 80064aa:	bf38      	it	cc
 80064ac:	250c      	movcc	r5, #12
 80064ae:	2d00      	cmp	r5, #0
 80064b0:	4607      	mov	r7, r0
 80064b2:	db01      	blt.n	80064b8 <_malloc_r+0x1c>
 80064b4:	42a9      	cmp	r1, r5
 80064b6:	d905      	bls.n	80064c4 <_malloc_r+0x28>
 80064b8:	230c      	movs	r3, #12
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	2600      	movs	r6, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064c4:	4e2e      	ldr	r6, [pc, #184]	; (8006580 <_malloc_r+0xe4>)
 80064c6:	f000 fdf9 	bl	80070bc <__malloc_lock>
 80064ca:	6833      	ldr	r3, [r6, #0]
 80064cc:	461c      	mov	r4, r3
 80064ce:	bb34      	cbnz	r4, 800651e <_malloc_r+0x82>
 80064d0:	4629      	mov	r1, r5
 80064d2:	4638      	mov	r0, r7
 80064d4:	f7ff ffc2 	bl	800645c <sbrk_aligned>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	4604      	mov	r4, r0
 80064dc:	d14d      	bne.n	800657a <_malloc_r+0xde>
 80064de:	6834      	ldr	r4, [r6, #0]
 80064e0:	4626      	mov	r6, r4
 80064e2:	2e00      	cmp	r6, #0
 80064e4:	d140      	bne.n	8006568 <_malloc_r+0xcc>
 80064e6:	6823      	ldr	r3, [r4, #0]
 80064e8:	4631      	mov	r1, r6
 80064ea:	4638      	mov	r0, r7
 80064ec:	eb04 0803 	add.w	r8, r4, r3
 80064f0:	f000 fa1e 	bl	8006930 <_sbrk_r>
 80064f4:	4580      	cmp	r8, r0
 80064f6:	d13a      	bne.n	800656e <_malloc_r+0xd2>
 80064f8:	6821      	ldr	r1, [r4, #0]
 80064fa:	3503      	adds	r5, #3
 80064fc:	1a6d      	subs	r5, r5, r1
 80064fe:	f025 0503 	bic.w	r5, r5, #3
 8006502:	3508      	adds	r5, #8
 8006504:	2d0c      	cmp	r5, #12
 8006506:	bf38      	it	cc
 8006508:	250c      	movcc	r5, #12
 800650a:	4629      	mov	r1, r5
 800650c:	4638      	mov	r0, r7
 800650e:	f7ff ffa5 	bl	800645c <sbrk_aligned>
 8006512:	3001      	adds	r0, #1
 8006514:	d02b      	beq.n	800656e <_malloc_r+0xd2>
 8006516:	6823      	ldr	r3, [r4, #0]
 8006518:	442b      	add	r3, r5
 800651a:	6023      	str	r3, [r4, #0]
 800651c:	e00e      	b.n	800653c <_malloc_r+0xa0>
 800651e:	6822      	ldr	r2, [r4, #0]
 8006520:	1b52      	subs	r2, r2, r5
 8006522:	d41e      	bmi.n	8006562 <_malloc_r+0xc6>
 8006524:	2a0b      	cmp	r2, #11
 8006526:	d916      	bls.n	8006556 <_malloc_r+0xba>
 8006528:	1961      	adds	r1, r4, r5
 800652a:	42a3      	cmp	r3, r4
 800652c:	6025      	str	r5, [r4, #0]
 800652e:	bf18      	it	ne
 8006530:	6059      	strne	r1, [r3, #4]
 8006532:	6863      	ldr	r3, [r4, #4]
 8006534:	bf08      	it	eq
 8006536:	6031      	streq	r1, [r6, #0]
 8006538:	5162      	str	r2, [r4, r5]
 800653a:	604b      	str	r3, [r1, #4]
 800653c:	4638      	mov	r0, r7
 800653e:	f104 060b 	add.w	r6, r4, #11
 8006542:	f000 fdc1 	bl	80070c8 <__malloc_unlock>
 8006546:	f026 0607 	bic.w	r6, r6, #7
 800654a:	1d23      	adds	r3, r4, #4
 800654c:	1af2      	subs	r2, r6, r3
 800654e:	d0b6      	beq.n	80064be <_malloc_r+0x22>
 8006550:	1b9b      	subs	r3, r3, r6
 8006552:	50a3      	str	r3, [r4, r2]
 8006554:	e7b3      	b.n	80064be <_malloc_r+0x22>
 8006556:	6862      	ldr	r2, [r4, #4]
 8006558:	42a3      	cmp	r3, r4
 800655a:	bf0c      	ite	eq
 800655c:	6032      	streq	r2, [r6, #0]
 800655e:	605a      	strne	r2, [r3, #4]
 8006560:	e7ec      	b.n	800653c <_malloc_r+0xa0>
 8006562:	4623      	mov	r3, r4
 8006564:	6864      	ldr	r4, [r4, #4]
 8006566:	e7b2      	b.n	80064ce <_malloc_r+0x32>
 8006568:	4634      	mov	r4, r6
 800656a:	6876      	ldr	r6, [r6, #4]
 800656c:	e7b9      	b.n	80064e2 <_malloc_r+0x46>
 800656e:	230c      	movs	r3, #12
 8006570:	603b      	str	r3, [r7, #0]
 8006572:	4638      	mov	r0, r7
 8006574:	f000 fda8 	bl	80070c8 <__malloc_unlock>
 8006578:	e7a1      	b.n	80064be <_malloc_r+0x22>
 800657a:	6025      	str	r5, [r4, #0]
 800657c:	e7de      	b.n	800653c <_malloc_r+0xa0>
 800657e:	bf00      	nop
 8006580:	200001f0 	.word	0x200001f0

08006584 <_open_r>:
 8006584:	b538      	push	{r3, r4, r5, lr}
 8006586:	4d07      	ldr	r5, [pc, #28]	; (80065a4 <_open_r+0x20>)
 8006588:	4604      	mov	r4, r0
 800658a:	4608      	mov	r0, r1
 800658c:	4611      	mov	r1, r2
 800658e:	2200      	movs	r2, #0
 8006590:	602a      	str	r2, [r5, #0]
 8006592:	461a      	mov	r2, r3
 8006594:	f7fb ff3c 	bl	8002410 <_open>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_open_r+0x1e>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_open_r+0x1e>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	200001f8 	.word	0x200001f8

080065a8 <_perror_r>:
 80065a8:	6983      	ldr	r3, [r0, #24]
 80065aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065ac:	68c4      	ldr	r4, [r0, #12]
 80065ae:	4605      	mov	r5, r0
 80065b0:	460e      	mov	r6, r1
 80065b2:	b90b      	cbnz	r3, 80065b8 <_perror_r+0x10>
 80065b4:	f7ff fc02 	bl	8005dbc <__sinit>
 80065b8:	4b43      	ldr	r3, [pc, #268]	; (80066c8 <_perror_r+0x120>)
 80065ba:	429c      	cmp	r4, r3
 80065bc:	d132      	bne.n	8006624 <_perror_r+0x7c>
 80065be:	686c      	ldr	r4, [r5, #4]
 80065c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065c2:	07d8      	lsls	r0, r3, #31
 80065c4:	d405      	bmi.n	80065d2 <_perror_r+0x2a>
 80065c6:	89a3      	ldrh	r3, [r4, #12]
 80065c8:	0599      	lsls	r1, r3, #22
 80065ca:	d402      	bmi.n	80065d2 <_perror_r+0x2a>
 80065cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065ce:	f7ff fe73 	bl	80062b8 <__retarget_lock_acquire_recursive>
 80065d2:	4621      	mov	r1, r4
 80065d4:	4628      	mov	r0, r5
 80065d6:	f7ff fb4b 	bl	8005c70 <_fflush_r>
 80065da:	bb6e      	cbnz	r6, 8006638 <_perror_r+0x90>
 80065dc:	6829      	ldr	r1, [r5, #0]
 80065de:	ab01      	add	r3, sp, #4
 80065e0:	2201      	movs	r2, #1
 80065e2:	4628      	mov	r0, r5
 80065e4:	f000 f9f8 	bl	80069d8 <_strerror_r>
 80065e8:	4607      	mov	r7, r0
 80065ea:	2800      	cmp	r0, #0
 80065ec:	d14f      	bne.n	800668e <_perror_r+0xe6>
 80065ee:	4837      	ldr	r0, [pc, #220]	; (80066cc <_perror_r+0x124>)
 80065f0:	4f36      	ldr	r7, [pc, #216]	; (80066cc <_perror_r+0x124>)
 80065f2:	f7f9 fdc5 	bl	8000180 <strlen>
 80065f6:	4606      	mov	r6, r0
 80065f8:	b156      	cbz	r6, 8006610 <_perror_r+0x68>
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 fcb6 	bl	8006f6c <fileno>
 8006600:	4633      	mov	r3, r6
 8006602:	4601      	mov	r1, r0
 8006604:	463a      	mov	r2, r7
 8006606:	4628      	mov	r0, r5
 8006608:	f000 fc20 	bl	8006e4c <_write_r>
 800660c:	2800      	cmp	r0, #0
 800660e:	da51      	bge.n	80066b4 <_perror_r+0x10c>
 8006610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006614:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661a:	07d2      	lsls	r2, r2, #31
 800661c:	81a3      	strh	r3, [r4, #12]
 800661e:	d54c      	bpl.n	80066ba <_perror_r+0x112>
 8006620:	b003      	add	sp, #12
 8006622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006624:	4b2a      	ldr	r3, [pc, #168]	; (80066d0 <_perror_r+0x128>)
 8006626:	429c      	cmp	r4, r3
 8006628:	d101      	bne.n	800662e <_perror_r+0x86>
 800662a:	68ac      	ldr	r4, [r5, #8]
 800662c:	e7c8      	b.n	80065c0 <_perror_r+0x18>
 800662e:	4b29      	ldr	r3, [pc, #164]	; (80066d4 <_perror_r+0x12c>)
 8006630:	429c      	cmp	r4, r3
 8006632:	bf08      	it	eq
 8006634:	68ec      	ldreq	r4, [r5, #12]
 8006636:	e7c3      	b.n	80065c0 <_perror_r+0x18>
 8006638:	7833      	ldrb	r3, [r6, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ce      	beq.n	80065dc <_perror_r+0x34>
 800663e:	4630      	mov	r0, r6
 8006640:	f7f9 fd9e 	bl	8000180 <strlen>
 8006644:	4607      	mov	r7, r0
 8006646:	b157      	cbz	r7, 800665e <_perror_r+0xb6>
 8006648:	4620      	mov	r0, r4
 800664a:	f000 fc8f 	bl	8006f6c <fileno>
 800664e:	463b      	mov	r3, r7
 8006650:	4601      	mov	r1, r0
 8006652:	4632      	mov	r2, r6
 8006654:	4628      	mov	r0, r5
 8006656:	f000 fbf9 	bl	8006e4c <_write_r>
 800665a:	2800      	cmp	r0, #0
 800665c:	da14      	bge.n	8006688 <_perror_r+0xe0>
 800665e:	481e      	ldr	r0, [pc, #120]	; (80066d8 <_perror_r+0x130>)
 8006660:	4f1d      	ldr	r7, [pc, #116]	; (80066d8 <_perror_r+0x130>)
 8006662:	f7f9 fd8d 	bl	8000180 <strlen>
 8006666:	4606      	mov	r6, r0
 8006668:	2e00      	cmp	r6, #0
 800666a:	d0b7      	beq.n	80065dc <_perror_r+0x34>
 800666c:	4620      	mov	r0, r4
 800666e:	f000 fc7d 	bl	8006f6c <fileno>
 8006672:	4633      	mov	r3, r6
 8006674:	4601      	mov	r1, r0
 8006676:	463a      	mov	r2, r7
 8006678:	4628      	mov	r0, r5
 800667a:	f000 fbe7 	bl	8006e4c <_write_r>
 800667e:	2800      	cmp	r0, #0
 8006680:	dbac      	blt.n	80065dc <_perror_r+0x34>
 8006682:	1a36      	subs	r6, r6, r0
 8006684:	4407      	add	r7, r0
 8006686:	e7ef      	b.n	8006668 <_perror_r+0xc0>
 8006688:	1a3f      	subs	r7, r7, r0
 800668a:	4406      	add	r6, r0
 800668c:	e7db      	b.n	8006646 <_perror_r+0x9e>
 800668e:	f7f9 fd77 	bl	8000180 <strlen>
 8006692:	4606      	mov	r6, r0
 8006694:	2e00      	cmp	r6, #0
 8006696:	d0aa      	beq.n	80065ee <_perror_r+0x46>
 8006698:	4620      	mov	r0, r4
 800669a:	f000 fc67 	bl	8006f6c <fileno>
 800669e:	4633      	mov	r3, r6
 80066a0:	4601      	mov	r1, r0
 80066a2:	463a      	mov	r2, r7
 80066a4:	4628      	mov	r0, r5
 80066a6:	f000 fbd1 	bl	8006e4c <_write_r>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	db9f      	blt.n	80065ee <_perror_r+0x46>
 80066ae:	1a36      	subs	r6, r6, r0
 80066b0:	4407      	add	r7, r0
 80066b2:	e7ef      	b.n	8006694 <_perror_r+0xec>
 80066b4:	1a36      	subs	r6, r6, r0
 80066b6:	4407      	add	r7, r0
 80066b8:	e79e      	b.n	80065f8 <_perror_r+0x50>
 80066ba:	059b      	lsls	r3, r3, #22
 80066bc:	d4b0      	bmi.n	8006620 <_perror_r+0x78>
 80066be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066c0:	f7ff fdfb 	bl	80062ba <__retarget_lock_release_recursive>
 80066c4:	e7ac      	b.n	8006620 <_perror_r+0x78>
 80066c6:	bf00      	nop
 80066c8:	08008c5c 	.word	0x08008c5c
 80066cc:	08008ca3 	.word	0x08008ca3
 80066d0:	08008c7c 	.word	0x08008c7c
 80066d4:	08008c3c 	.word	0x08008c3c
 80066d8:	08008ca0 	.word	0x08008ca0

080066dc <perror>:
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <perror+0xc>)
 80066de:	4601      	mov	r1, r0
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	f7ff bf61 	b.w	80065a8 <_perror_r>
 80066e6:	bf00      	nop
 80066e8:	20000034 	.word	0x20000034

080066ec <iprintf>:
 80066ec:	b40f      	push	{r0, r1, r2, r3}
 80066ee:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <iprintf+0x2c>)
 80066f0:	b513      	push	{r0, r1, r4, lr}
 80066f2:	681c      	ldr	r4, [r3, #0]
 80066f4:	b124      	cbz	r4, 8006700 <iprintf+0x14>
 80066f6:	69a3      	ldr	r3, [r4, #24]
 80066f8:	b913      	cbnz	r3, 8006700 <iprintf+0x14>
 80066fa:	4620      	mov	r0, r4
 80066fc:	f7ff fb5e 	bl	8005dbc <__sinit>
 8006700:	ab05      	add	r3, sp, #20
 8006702:	9a04      	ldr	r2, [sp, #16]
 8006704:	68a1      	ldr	r1, [r4, #8]
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	4620      	mov	r0, r4
 800670a:	f000 fd0d 	bl	8007128 <_vfiprintf_r>
 800670e:	b002      	add	sp, #8
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr
 8006718:	20000034 	.word	0x20000034

0800671c <_puts_r>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	460e      	mov	r6, r1
 8006720:	4605      	mov	r5, r0
 8006722:	b118      	cbz	r0, 800672c <_puts_r+0x10>
 8006724:	6983      	ldr	r3, [r0, #24]
 8006726:	b90b      	cbnz	r3, 800672c <_puts_r+0x10>
 8006728:	f7ff fb48 	bl	8005dbc <__sinit>
 800672c:	69ab      	ldr	r3, [r5, #24]
 800672e:	68ac      	ldr	r4, [r5, #8]
 8006730:	b913      	cbnz	r3, 8006738 <_puts_r+0x1c>
 8006732:	4628      	mov	r0, r5
 8006734:	f7ff fb42 	bl	8005dbc <__sinit>
 8006738:	4b2c      	ldr	r3, [pc, #176]	; (80067ec <_puts_r+0xd0>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d120      	bne.n	8006780 <_puts_r+0x64>
 800673e:	686c      	ldr	r4, [r5, #4]
 8006740:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006742:	07db      	lsls	r3, r3, #31
 8006744:	d405      	bmi.n	8006752 <_puts_r+0x36>
 8006746:	89a3      	ldrh	r3, [r4, #12]
 8006748:	0598      	lsls	r0, r3, #22
 800674a:	d402      	bmi.n	8006752 <_puts_r+0x36>
 800674c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800674e:	f7ff fdb3 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8006752:	89a3      	ldrh	r3, [r4, #12]
 8006754:	0719      	lsls	r1, r3, #28
 8006756:	d51d      	bpl.n	8006794 <_puts_r+0x78>
 8006758:	6923      	ldr	r3, [r4, #16]
 800675a:	b1db      	cbz	r3, 8006794 <_puts_r+0x78>
 800675c:	3e01      	subs	r6, #1
 800675e:	68a3      	ldr	r3, [r4, #8]
 8006760:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006764:	3b01      	subs	r3, #1
 8006766:	60a3      	str	r3, [r4, #8]
 8006768:	bb39      	cbnz	r1, 80067ba <_puts_r+0x9e>
 800676a:	2b00      	cmp	r3, #0
 800676c:	da38      	bge.n	80067e0 <_puts_r+0xc4>
 800676e:	4622      	mov	r2, r4
 8006770:	210a      	movs	r1, #10
 8006772:	4628      	mov	r0, r5
 8006774:	f000 fb18 	bl	8006da8 <__swbuf_r>
 8006778:	3001      	adds	r0, #1
 800677a:	d011      	beq.n	80067a0 <_puts_r+0x84>
 800677c:	250a      	movs	r5, #10
 800677e:	e011      	b.n	80067a4 <_puts_r+0x88>
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <_puts_r+0xd4>)
 8006782:	429c      	cmp	r4, r3
 8006784:	d101      	bne.n	800678a <_puts_r+0x6e>
 8006786:	68ac      	ldr	r4, [r5, #8]
 8006788:	e7da      	b.n	8006740 <_puts_r+0x24>
 800678a:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <_puts_r+0xd8>)
 800678c:	429c      	cmp	r4, r3
 800678e:	bf08      	it	eq
 8006790:	68ec      	ldreq	r4, [r5, #12]
 8006792:	e7d5      	b.n	8006740 <_puts_r+0x24>
 8006794:	4621      	mov	r1, r4
 8006796:	4628      	mov	r0, r5
 8006798:	f000 fb6a 	bl	8006e70 <__swsetup_r>
 800679c:	2800      	cmp	r0, #0
 800679e:	d0dd      	beq.n	800675c <_puts_r+0x40>
 80067a0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80067a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067a6:	07da      	lsls	r2, r3, #31
 80067a8:	d405      	bmi.n	80067b6 <_puts_r+0x9a>
 80067aa:	89a3      	ldrh	r3, [r4, #12]
 80067ac:	059b      	lsls	r3, r3, #22
 80067ae:	d402      	bmi.n	80067b6 <_puts_r+0x9a>
 80067b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067b2:	f7ff fd82 	bl	80062ba <__retarget_lock_release_recursive>
 80067b6:	4628      	mov	r0, r5
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da04      	bge.n	80067c8 <_puts_r+0xac>
 80067be:	69a2      	ldr	r2, [r4, #24]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	dc06      	bgt.n	80067d2 <_puts_r+0xb6>
 80067c4:	290a      	cmp	r1, #10
 80067c6:	d004      	beq.n	80067d2 <_puts_r+0xb6>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	6022      	str	r2, [r4, #0]
 80067ce:	7019      	strb	r1, [r3, #0]
 80067d0:	e7c5      	b.n	800675e <_puts_r+0x42>
 80067d2:	4622      	mov	r2, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 fae7 	bl	8006da8 <__swbuf_r>
 80067da:	3001      	adds	r0, #1
 80067dc:	d1bf      	bne.n	800675e <_puts_r+0x42>
 80067de:	e7df      	b.n	80067a0 <_puts_r+0x84>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	250a      	movs	r5, #10
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	6022      	str	r2, [r4, #0]
 80067e8:	701d      	strb	r5, [r3, #0]
 80067ea:	e7db      	b.n	80067a4 <_puts_r+0x88>
 80067ec:	08008c5c 	.word	0x08008c5c
 80067f0:	08008c7c 	.word	0x08008c7c
 80067f4:	08008c3c 	.word	0x08008c3c

080067f8 <puts>:
 80067f8:	4b02      	ldr	r3, [pc, #8]	; (8006804 <puts+0xc>)
 80067fa:	4601      	mov	r1, r0
 80067fc:	6818      	ldr	r0, [r3, #0]
 80067fe:	f7ff bf8d 	b.w	800671c <_puts_r>
 8006802:	bf00      	nop
 8006804:	20000034 	.word	0x20000034

08006808 <lflush>:
 8006808:	8983      	ldrh	r3, [r0, #12]
 800680a:	f003 0309 	and.w	r3, r3, #9
 800680e:	2b09      	cmp	r3, #9
 8006810:	d101      	bne.n	8006816 <lflush+0xe>
 8006812:	f7ff ba69 	b.w	8005ce8 <fflush>
 8006816:	2000      	movs	r0, #0
 8006818:	4770      	bx	lr
	...

0800681c <__srefill_r>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	460c      	mov	r4, r1
 8006820:	4605      	mov	r5, r0
 8006822:	b118      	cbz	r0, 800682c <__srefill_r+0x10>
 8006824:	6983      	ldr	r3, [r0, #24]
 8006826:	b90b      	cbnz	r3, 800682c <__srefill_r+0x10>
 8006828:	f7ff fac8 	bl	8005dbc <__sinit>
 800682c:	4b3b      	ldr	r3, [pc, #236]	; (800691c <__srefill_r+0x100>)
 800682e:	429c      	cmp	r4, r3
 8006830:	d10a      	bne.n	8006848 <__srefill_r+0x2c>
 8006832:	686c      	ldr	r4, [r5, #4]
 8006834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006838:	2300      	movs	r3, #0
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	89a3      	ldrh	r3, [r4, #12]
 800683e:	069e      	lsls	r6, r3, #26
 8006840:	d50c      	bpl.n	800685c <__srefill_r+0x40>
 8006842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006846:	e066      	b.n	8006916 <__srefill_r+0xfa>
 8006848:	4b35      	ldr	r3, [pc, #212]	; (8006920 <__srefill_r+0x104>)
 800684a:	429c      	cmp	r4, r3
 800684c:	d101      	bne.n	8006852 <__srefill_r+0x36>
 800684e:	68ac      	ldr	r4, [r5, #8]
 8006850:	e7f0      	b.n	8006834 <__srefill_r+0x18>
 8006852:	4b34      	ldr	r3, [pc, #208]	; (8006924 <__srefill_r+0x108>)
 8006854:	429c      	cmp	r4, r3
 8006856:	bf08      	it	eq
 8006858:	68ec      	ldreq	r4, [r5, #12]
 800685a:	e7eb      	b.n	8006834 <__srefill_r+0x18>
 800685c:	0758      	lsls	r0, r3, #29
 800685e:	d448      	bmi.n	80068f2 <__srefill_r+0xd6>
 8006860:	06d9      	lsls	r1, r3, #27
 8006862:	d405      	bmi.n	8006870 <__srefill_r+0x54>
 8006864:	2309      	movs	r3, #9
 8006866:	602b      	str	r3, [r5, #0]
 8006868:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7e8      	b.n	8006842 <__srefill_r+0x26>
 8006870:	071a      	lsls	r2, r3, #28
 8006872:	d50b      	bpl.n	800688c <__srefill_r+0x70>
 8006874:	4621      	mov	r1, r4
 8006876:	4628      	mov	r0, r5
 8006878:	f7ff f9fa 	bl	8005c70 <_fflush_r>
 800687c:	2800      	cmp	r0, #0
 800687e:	d1e0      	bne.n	8006842 <__srefill_r+0x26>
 8006880:	89a3      	ldrh	r3, [r4, #12]
 8006882:	60a0      	str	r0, [r4, #8]
 8006884:	f023 0308 	bic.w	r3, r3, #8
 8006888:	81a3      	strh	r3, [r4, #12]
 800688a:	61a0      	str	r0, [r4, #24]
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f043 0304 	orr.w	r3, r3, #4
 8006892:	81a3      	strh	r3, [r4, #12]
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	b91b      	cbnz	r3, 80068a0 <__srefill_r+0x84>
 8006898:	4621      	mov	r1, r4
 800689a:	4628      	mov	r0, r5
 800689c:	f7ff fd34 	bl	8006308 <__smakebuf_r>
 80068a0:	89a6      	ldrh	r6, [r4, #12]
 80068a2:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 80068a6:	07b3      	lsls	r3, r6, #30
 80068a8:	d00f      	beq.n	80068ca <__srefill_r+0xae>
 80068aa:	2301      	movs	r3, #1
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	4b1e      	ldr	r3, [pc, #120]	; (8006928 <__srefill_r+0x10c>)
 80068b0:	491e      	ldr	r1, [pc, #120]	; (800692c <__srefill_r+0x110>)
 80068b2:	6818      	ldr	r0, [r3, #0]
 80068b4:	f006 0609 	and.w	r6, r6, #9
 80068b8:	f7ff fc9c 	bl	80061f4 <_fwalk>
 80068bc:	2e09      	cmp	r6, #9
 80068be:	81a7      	strh	r7, [r4, #12]
 80068c0:	d103      	bne.n	80068ca <__srefill_r+0xae>
 80068c2:	4621      	mov	r1, r4
 80068c4:	4628      	mov	r0, r5
 80068c6:	f7ff f94d 	bl	8005b64 <__sflush_r>
 80068ca:	6922      	ldr	r2, [r4, #16]
 80068cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80068ce:	6963      	ldr	r3, [r4, #20]
 80068d0:	6a21      	ldr	r1, [r4, #32]
 80068d2:	6022      	str	r2, [r4, #0]
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b0      	blx	r6
 80068d8:	2800      	cmp	r0, #0
 80068da:	6060      	str	r0, [r4, #4]
 80068dc:	dc1c      	bgt.n	8006918 <__srefill_r+0xfc>
 80068de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068e2:	bf17      	itett	ne
 80068e4:	2200      	movne	r2, #0
 80068e6:	f043 0320 	orreq.w	r3, r3, #32
 80068ea:	6062      	strne	r2, [r4, #4]
 80068ec:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 80068f0:	e7bc      	b.n	800686c <__srefill_r+0x50>
 80068f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068f4:	2900      	cmp	r1, #0
 80068f6:	d0cd      	beq.n	8006894 <__srefill_r+0x78>
 80068f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068fc:	4299      	cmp	r1, r3
 80068fe:	d002      	beq.n	8006906 <__srefill_r+0xea>
 8006900:	4628      	mov	r0, r5
 8006902:	f7ff fd5f 	bl	80063c4 <_free_r>
 8006906:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006908:	6063      	str	r3, [r4, #4]
 800690a:	2000      	movs	r0, #0
 800690c:	6360      	str	r0, [r4, #52]	; 0x34
 800690e:	2b00      	cmp	r3, #0
 8006910:	d0c0      	beq.n	8006894 <__srefill_r+0x78>
 8006912:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006918:	2000      	movs	r0, #0
 800691a:	e7fc      	b.n	8006916 <__srefill_r+0xfa>
 800691c:	08008c5c 	.word	0x08008c5c
 8006920:	08008c7c 	.word	0x08008c7c
 8006924:	08008c3c 	.word	0x08008c3c
 8006928:	08008c9c 	.word	0x08008c9c
 800692c:	08006809 	.word	0x08006809

08006930 <_sbrk_r>:
 8006930:	b538      	push	{r3, r4, r5, lr}
 8006932:	4d06      	ldr	r5, [pc, #24]	; (800694c <_sbrk_r+0x1c>)
 8006934:	2300      	movs	r3, #0
 8006936:	4604      	mov	r4, r0
 8006938:	4608      	mov	r0, r1
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fb fd76 	bl	800242c <_sbrk>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d102      	bne.n	800694a <_sbrk_r+0x1a>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	b103      	cbz	r3, 800694a <_sbrk_r+0x1a>
 8006948:	6023      	str	r3, [r4, #0]
 800694a:	bd38      	pop	{r3, r4, r5, pc}
 800694c:	200001f8 	.word	0x200001f8

08006950 <__sread>:
 8006950:	b510      	push	{r4, lr}
 8006952:	460c      	mov	r4, r1
 8006954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006958:	f000 feaa 	bl	80076b0 <_read_r>
 800695c:	2800      	cmp	r0, #0
 800695e:	bfab      	itete	ge
 8006960:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006962:	89a3      	ldrhlt	r3, [r4, #12]
 8006964:	181b      	addge	r3, r3, r0
 8006966:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800696a:	bfac      	ite	ge
 800696c:	6563      	strge	r3, [r4, #84]	; 0x54
 800696e:	81a3      	strhlt	r3, [r4, #12]
 8006970:	bd10      	pop	{r4, pc}

08006972 <__swrite>:
 8006972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006976:	461f      	mov	r7, r3
 8006978:	898b      	ldrh	r3, [r1, #12]
 800697a:	05db      	lsls	r3, r3, #23
 800697c:	4605      	mov	r5, r0
 800697e:	460c      	mov	r4, r1
 8006980:	4616      	mov	r6, r2
 8006982:	d505      	bpl.n	8006990 <__swrite+0x1e>
 8006984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006988:	2302      	movs	r3, #2
 800698a:	2200      	movs	r2, #0
 800698c:	f000 fb84 	bl	8007098 <_lseek_r>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006996:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800699a:	81a3      	strh	r3, [r4, #12]
 800699c:	4632      	mov	r2, r6
 800699e:	463b      	mov	r3, r7
 80069a0:	4628      	mov	r0, r5
 80069a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069a6:	f000 ba51 	b.w	8006e4c <_write_r>

080069aa <__sseek>:
 80069aa:	b510      	push	{r4, lr}
 80069ac:	460c      	mov	r4, r1
 80069ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b2:	f000 fb71 	bl	8007098 <_lseek_r>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	bf15      	itete	ne
 80069bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80069be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069c6:	81a3      	strheq	r3, [r4, #12]
 80069c8:	bf18      	it	ne
 80069ca:	81a3      	strhne	r3, [r4, #12]
 80069cc:	bd10      	pop	{r4, pc}

080069ce <__sclose>:
 80069ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d2:	f000 babb 	b.w	8006f4c <_close_r>
	...

080069d8 <_strerror_r>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	288e      	cmp	r0, #142	; 0x8e
 80069e2:	f200 8130 	bhi.w	8006c46 <_strerror_r+0x26e>
 80069e6:	e8df f010 	tbh	[pc, r0, lsl #1]
 80069ea:	0139      	.short	0x0139
 80069ec:	0092008f 	.word	0x0092008f
 80069f0:	00960094 	.word	0x00960094
 80069f4:	009a0098 	.word	0x009a0098
 80069f8:	009e009c 	.word	0x009e009c
 80069fc:	00a400a2 	.word	0x00a400a2
 8006a00:	00aa00a8 	.word	0x00aa00a8
 8006a04:	00ae00ac 	.word	0x00ae00ac
 8006a08:	00b0012e 	.word	0x00b0012e
 8006a0c:	00b400b2 	.word	0x00b400b2
 8006a10:	00b800b6 	.word	0x00b800b6
 8006a14:	00c000be 	.word	0x00c000be
 8006a18:	00c800c6 	.word	0x00c800c6
 8006a1c:	00cc00ca 	.word	0x00cc00ca
 8006a20:	00d200ce 	.word	0x00d200ce
 8006a24:	00d800d6 	.word	0x00d800d6
 8006a28:	00dc00da 	.word	0x00dc00da
 8006a2c:	00e000de 	.word	0x00e000de
 8006a30:	00e400e2 	.word	0x00e400e2
 8006a34:	012e012e 	.word	0x012e012e
 8006a38:	012e012e 	.word	0x012e012e
 8006a3c:	012e012e 	.word	0x012e012e
 8006a40:	012e012e 	.word	0x012e012e
 8006a44:	00ec00e8 	.word	0x00ec00e8
 8006a48:	012e012e 	.word	0x012e012e
 8006a4c:	012e012e 	.word	0x012e012e
 8006a50:	012e012e 	.word	0x012e012e
 8006a54:	012e012e 	.word	0x012e012e
 8006a58:	012e012e 	.word	0x012e012e
 8006a5c:	012e012e 	.word	0x012e012e
 8006a60:	00ee012e 	.word	0x00ee012e
 8006a64:	00f00108 	.word	0x00f00108
 8006a68:	012e00f2 	.word	0x012e00f2
 8006a6c:	012e012e 	.word	0x012e012e
 8006a70:	012e00f4 	.word	0x012e00f4
 8006a74:	012e012e 	.word	0x012e012e
 8006a78:	012e00f6 	.word	0x012e00f6
 8006a7c:	00fa012e 	.word	0x00fa012e
 8006a80:	012e012e 	.word	0x012e012e
 8006a84:	012e00fc 	.word	0x012e00fc
 8006a88:	012e012e 	.word	0x012e012e
 8006a8c:	012e012e 	.word	0x012e012e
 8006a90:	012e012e 	.word	0x012e012e
 8006a94:	012e012e 	.word	0x012e012e
 8006a98:	00fe012e 	.word	0x00fe012e
 8006a9c:	0100012e 	.word	0x0100012e
 8006aa0:	01040102 	.word	0x01040102
 8006aa4:	012e012e 	.word	0x012e012e
 8006aa8:	012e0126 	.word	0x012e0126
 8006aac:	012e012e 	.word	0x012e012e
 8006ab0:	012e012e 	.word	0x012e012e
 8006ab4:	012e012e 	.word	0x012e012e
 8006ab8:	0114012e 	.word	0x0114012e
 8006abc:	010a0106 	.word	0x010a0106
 8006ac0:	010e010c 	.word	0x010e010c
 8006ac4:	012e0110 	.word	0x012e0110
 8006ac8:	01160112 	.word	0x01160112
 8006acc:	00ea011a 	.word	0x00ea011a
 8006ad0:	012c00c2 	.word	0x012c00c2
 8006ad4:	00d000ba 	.word	0x00d000ba
 8006ad8:	00a000bc 	.word	0x00a000bc
 8006adc:	012a00a6 	.word	0x012a00a6
 8006ae0:	012e00f8 	.word	0x012e00f8
 8006ae4:	00c40118 	.word	0x00c40118
 8006ae8:	011c011e 	.word	0x011c011e
 8006aec:	012e012e 	.word	0x012e012e
 8006af0:	012e012e 	.word	0x012e012e
 8006af4:	00d4012e 	.word	0x00d4012e
 8006af8:	012e012e 	.word	0x012e012e
 8006afc:	00e6012e 	.word	0x00e6012e
 8006b00:	01200128 	.word	0x01200128
 8006b04:	01240122 	.word	0x01240122
 8006b08:	4b55      	ldr	r3, [pc, #340]	; (8006c60 <_strerror_r+0x288>)
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	bd10      	pop	{r4, pc}
 8006b0e:	4b55      	ldr	r3, [pc, #340]	; (8006c64 <_strerror_r+0x28c>)
 8006b10:	e7fb      	b.n	8006b0a <_strerror_r+0x132>
 8006b12:	4b55      	ldr	r3, [pc, #340]	; (8006c68 <_strerror_r+0x290>)
 8006b14:	e7f9      	b.n	8006b0a <_strerror_r+0x132>
 8006b16:	4b55      	ldr	r3, [pc, #340]	; (8006c6c <_strerror_r+0x294>)
 8006b18:	e7f7      	b.n	8006b0a <_strerror_r+0x132>
 8006b1a:	4b55      	ldr	r3, [pc, #340]	; (8006c70 <_strerror_r+0x298>)
 8006b1c:	e7f5      	b.n	8006b0a <_strerror_r+0x132>
 8006b1e:	4b55      	ldr	r3, [pc, #340]	; (8006c74 <_strerror_r+0x29c>)
 8006b20:	e7f3      	b.n	8006b0a <_strerror_r+0x132>
 8006b22:	4b55      	ldr	r3, [pc, #340]	; (8006c78 <_strerror_r+0x2a0>)
 8006b24:	e7f1      	b.n	8006b0a <_strerror_r+0x132>
 8006b26:	4b55      	ldr	r3, [pc, #340]	; (8006c7c <_strerror_r+0x2a4>)
 8006b28:	e7ef      	b.n	8006b0a <_strerror_r+0x132>
 8006b2a:	4b55      	ldr	r3, [pc, #340]	; (8006c80 <_strerror_r+0x2a8>)
 8006b2c:	e7ed      	b.n	8006b0a <_strerror_r+0x132>
 8006b2e:	4b55      	ldr	r3, [pc, #340]	; (8006c84 <_strerror_r+0x2ac>)
 8006b30:	e7eb      	b.n	8006b0a <_strerror_r+0x132>
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <_strerror_r+0x2b0>)
 8006b34:	e7e9      	b.n	8006b0a <_strerror_r+0x132>
 8006b36:	4b55      	ldr	r3, [pc, #340]	; (8006c8c <_strerror_r+0x2b4>)
 8006b38:	e7e7      	b.n	8006b0a <_strerror_r+0x132>
 8006b3a:	4b55      	ldr	r3, [pc, #340]	; (8006c90 <_strerror_r+0x2b8>)
 8006b3c:	e7e5      	b.n	8006b0a <_strerror_r+0x132>
 8006b3e:	4b55      	ldr	r3, [pc, #340]	; (8006c94 <_strerror_r+0x2bc>)
 8006b40:	e7e3      	b.n	8006b0a <_strerror_r+0x132>
 8006b42:	4b55      	ldr	r3, [pc, #340]	; (8006c98 <_strerror_r+0x2c0>)
 8006b44:	e7e1      	b.n	8006b0a <_strerror_r+0x132>
 8006b46:	4b55      	ldr	r3, [pc, #340]	; (8006c9c <_strerror_r+0x2c4>)
 8006b48:	e7df      	b.n	8006b0a <_strerror_r+0x132>
 8006b4a:	4b55      	ldr	r3, [pc, #340]	; (8006ca0 <_strerror_r+0x2c8>)
 8006b4c:	e7dd      	b.n	8006b0a <_strerror_r+0x132>
 8006b4e:	4b55      	ldr	r3, [pc, #340]	; (8006ca4 <_strerror_r+0x2cc>)
 8006b50:	e7db      	b.n	8006b0a <_strerror_r+0x132>
 8006b52:	4b55      	ldr	r3, [pc, #340]	; (8006ca8 <_strerror_r+0x2d0>)
 8006b54:	e7d9      	b.n	8006b0a <_strerror_r+0x132>
 8006b56:	4b55      	ldr	r3, [pc, #340]	; (8006cac <_strerror_r+0x2d4>)
 8006b58:	e7d7      	b.n	8006b0a <_strerror_r+0x132>
 8006b5a:	4b55      	ldr	r3, [pc, #340]	; (8006cb0 <_strerror_r+0x2d8>)
 8006b5c:	e7d5      	b.n	8006b0a <_strerror_r+0x132>
 8006b5e:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <_strerror_r+0x2dc>)
 8006b60:	e7d3      	b.n	8006b0a <_strerror_r+0x132>
 8006b62:	4b55      	ldr	r3, [pc, #340]	; (8006cb8 <_strerror_r+0x2e0>)
 8006b64:	e7d1      	b.n	8006b0a <_strerror_r+0x132>
 8006b66:	4b55      	ldr	r3, [pc, #340]	; (8006cbc <_strerror_r+0x2e4>)
 8006b68:	e7cf      	b.n	8006b0a <_strerror_r+0x132>
 8006b6a:	4b55      	ldr	r3, [pc, #340]	; (8006cc0 <_strerror_r+0x2e8>)
 8006b6c:	e7cd      	b.n	8006b0a <_strerror_r+0x132>
 8006b6e:	4b55      	ldr	r3, [pc, #340]	; (8006cc4 <_strerror_r+0x2ec>)
 8006b70:	e7cb      	b.n	8006b0a <_strerror_r+0x132>
 8006b72:	4b55      	ldr	r3, [pc, #340]	; (8006cc8 <_strerror_r+0x2f0>)
 8006b74:	e7c9      	b.n	8006b0a <_strerror_r+0x132>
 8006b76:	4b55      	ldr	r3, [pc, #340]	; (8006ccc <_strerror_r+0x2f4>)
 8006b78:	e7c7      	b.n	8006b0a <_strerror_r+0x132>
 8006b7a:	4b55      	ldr	r3, [pc, #340]	; (8006cd0 <_strerror_r+0x2f8>)
 8006b7c:	e7c5      	b.n	8006b0a <_strerror_r+0x132>
 8006b7e:	4b55      	ldr	r3, [pc, #340]	; (8006cd4 <_strerror_r+0x2fc>)
 8006b80:	e7c3      	b.n	8006b0a <_strerror_r+0x132>
 8006b82:	4b55      	ldr	r3, [pc, #340]	; (8006cd8 <_strerror_r+0x300>)
 8006b84:	e7c1      	b.n	8006b0a <_strerror_r+0x132>
 8006b86:	4b55      	ldr	r3, [pc, #340]	; (8006cdc <_strerror_r+0x304>)
 8006b88:	e7bf      	b.n	8006b0a <_strerror_r+0x132>
 8006b8a:	4b55      	ldr	r3, [pc, #340]	; (8006ce0 <_strerror_r+0x308>)
 8006b8c:	e7bd      	b.n	8006b0a <_strerror_r+0x132>
 8006b8e:	4b55      	ldr	r3, [pc, #340]	; (8006ce4 <_strerror_r+0x30c>)
 8006b90:	e7bb      	b.n	8006b0a <_strerror_r+0x132>
 8006b92:	4b55      	ldr	r3, [pc, #340]	; (8006ce8 <_strerror_r+0x310>)
 8006b94:	e7b9      	b.n	8006b0a <_strerror_r+0x132>
 8006b96:	4b55      	ldr	r3, [pc, #340]	; (8006cec <_strerror_r+0x314>)
 8006b98:	e7b7      	b.n	8006b0a <_strerror_r+0x132>
 8006b9a:	4b55      	ldr	r3, [pc, #340]	; (8006cf0 <_strerror_r+0x318>)
 8006b9c:	e7b5      	b.n	8006b0a <_strerror_r+0x132>
 8006b9e:	4b55      	ldr	r3, [pc, #340]	; (8006cf4 <_strerror_r+0x31c>)
 8006ba0:	e7b3      	b.n	8006b0a <_strerror_r+0x132>
 8006ba2:	4b55      	ldr	r3, [pc, #340]	; (8006cf8 <_strerror_r+0x320>)
 8006ba4:	e7b1      	b.n	8006b0a <_strerror_r+0x132>
 8006ba6:	4b55      	ldr	r3, [pc, #340]	; (8006cfc <_strerror_r+0x324>)
 8006ba8:	e7af      	b.n	8006b0a <_strerror_r+0x132>
 8006baa:	4b55      	ldr	r3, [pc, #340]	; (8006d00 <_strerror_r+0x328>)
 8006bac:	e7ad      	b.n	8006b0a <_strerror_r+0x132>
 8006bae:	4b55      	ldr	r3, [pc, #340]	; (8006d04 <_strerror_r+0x32c>)
 8006bb0:	e7ab      	b.n	8006b0a <_strerror_r+0x132>
 8006bb2:	4b55      	ldr	r3, [pc, #340]	; (8006d08 <_strerror_r+0x330>)
 8006bb4:	e7a9      	b.n	8006b0a <_strerror_r+0x132>
 8006bb6:	4b55      	ldr	r3, [pc, #340]	; (8006d0c <_strerror_r+0x334>)
 8006bb8:	e7a7      	b.n	8006b0a <_strerror_r+0x132>
 8006bba:	4b55      	ldr	r3, [pc, #340]	; (8006d10 <_strerror_r+0x338>)
 8006bbc:	e7a5      	b.n	8006b0a <_strerror_r+0x132>
 8006bbe:	4b55      	ldr	r3, [pc, #340]	; (8006d14 <_strerror_r+0x33c>)
 8006bc0:	e7a3      	b.n	8006b0a <_strerror_r+0x132>
 8006bc2:	4b55      	ldr	r3, [pc, #340]	; (8006d18 <_strerror_r+0x340>)
 8006bc4:	e7a1      	b.n	8006b0a <_strerror_r+0x132>
 8006bc6:	4b55      	ldr	r3, [pc, #340]	; (8006d1c <_strerror_r+0x344>)
 8006bc8:	e79f      	b.n	8006b0a <_strerror_r+0x132>
 8006bca:	4b55      	ldr	r3, [pc, #340]	; (8006d20 <_strerror_r+0x348>)
 8006bcc:	e79d      	b.n	8006b0a <_strerror_r+0x132>
 8006bce:	4b55      	ldr	r3, [pc, #340]	; (8006d24 <_strerror_r+0x34c>)
 8006bd0:	e79b      	b.n	8006b0a <_strerror_r+0x132>
 8006bd2:	4b55      	ldr	r3, [pc, #340]	; (8006d28 <_strerror_r+0x350>)
 8006bd4:	e799      	b.n	8006b0a <_strerror_r+0x132>
 8006bd6:	4b55      	ldr	r3, [pc, #340]	; (8006d2c <_strerror_r+0x354>)
 8006bd8:	e797      	b.n	8006b0a <_strerror_r+0x132>
 8006bda:	4b55      	ldr	r3, [pc, #340]	; (8006d30 <_strerror_r+0x358>)
 8006bdc:	e795      	b.n	8006b0a <_strerror_r+0x132>
 8006bde:	4b55      	ldr	r3, [pc, #340]	; (8006d34 <_strerror_r+0x35c>)
 8006be0:	e793      	b.n	8006b0a <_strerror_r+0x132>
 8006be2:	4b55      	ldr	r3, [pc, #340]	; (8006d38 <_strerror_r+0x360>)
 8006be4:	e791      	b.n	8006b0a <_strerror_r+0x132>
 8006be6:	4b55      	ldr	r3, [pc, #340]	; (8006d3c <_strerror_r+0x364>)
 8006be8:	e78f      	b.n	8006b0a <_strerror_r+0x132>
 8006bea:	4b55      	ldr	r3, [pc, #340]	; (8006d40 <_strerror_r+0x368>)
 8006bec:	e78d      	b.n	8006b0a <_strerror_r+0x132>
 8006bee:	4b55      	ldr	r3, [pc, #340]	; (8006d44 <_strerror_r+0x36c>)
 8006bf0:	e78b      	b.n	8006b0a <_strerror_r+0x132>
 8006bf2:	4b55      	ldr	r3, [pc, #340]	; (8006d48 <_strerror_r+0x370>)
 8006bf4:	e789      	b.n	8006b0a <_strerror_r+0x132>
 8006bf6:	4b55      	ldr	r3, [pc, #340]	; (8006d4c <_strerror_r+0x374>)
 8006bf8:	e787      	b.n	8006b0a <_strerror_r+0x132>
 8006bfa:	4b55      	ldr	r3, [pc, #340]	; (8006d50 <_strerror_r+0x378>)
 8006bfc:	e785      	b.n	8006b0a <_strerror_r+0x132>
 8006bfe:	4b55      	ldr	r3, [pc, #340]	; (8006d54 <_strerror_r+0x37c>)
 8006c00:	e783      	b.n	8006b0a <_strerror_r+0x132>
 8006c02:	4b55      	ldr	r3, [pc, #340]	; (8006d58 <_strerror_r+0x380>)
 8006c04:	e781      	b.n	8006b0a <_strerror_r+0x132>
 8006c06:	4b55      	ldr	r3, [pc, #340]	; (8006d5c <_strerror_r+0x384>)
 8006c08:	e77f      	b.n	8006b0a <_strerror_r+0x132>
 8006c0a:	4b55      	ldr	r3, [pc, #340]	; (8006d60 <_strerror_r+0x388>)
 8006c0c:	e77d      	b.n	8006b0a <_strerror_r+0x132>
 8006c0e:	4b55      	ldr	r3, [pc, #340]	; (8006d64 <_strerror_r+0x38c>)
 8006c10:	e77b      	b.n	8006b0a <_strerror_r+0x132>
 8006c12:	4b55      	ldr	r3, [pc, #340]	; (8006d68 <_strerror_r+0x390>)
 8006c14:	e779      	b.n	8006b0a <_strerror_r+0x132>
 8006c16:	4b55      	ldr	r3, [pc, #340]	; (8006d6c <_strerror_r+0x394>)
 8006c18:	e777      	b.n	8006b0a <_strerror_r+0x132>
 8006c1a:	4b55      	ldr	r3, [pc, #340]	; (8006d70 <_strerror_r+0x398>)
 8006c1c:	e775      	b.n	8006b0a <_strerror_r+0x132>
 8006c1e:	4b55      	ldr	r3, [pc, #340]	; (8006d74 <_strerror_r+0x39c>)
 8006c20:	e773      	b.n	8006b0a <_strerror_r+0x132>
 8006c22:	4b55      	ldr	r3, [pc, #340]	; (8006d78 <_strerror_r+0x3a0>)
 8006c24:	e771      	b.n	8006b0a <_strerror_r+0x132>
 8006c26:	4b55      	ldr	r3, [pc, #340]	; (8006d7c <_strerror_r+0x3a4>)
 8006c28:	e76f      	b.n	8006b0a <_strerror_r+0x132>
 8006c2a:	4b55      	ldr	r3, [pc, #340]	; (8006d80 <_strerror_r+0x3a8>)
 8006c2c:	e76d      	b.n	8006b0a <_strerror_r+0x132>
 8006c2e:	4b55      	ldr	r3, [pc, #340]	; (8006d84 <_strerror_r+0x3ac>)
 8006c30:	e76b      	b.n	8006b0a <_strerror_r+0x132>
 8006c32:	4b55      	ldr	r3, [pc, #340]	; (8006d88 <_strerror_r+0x3b0>)
 8006c34:	e769      	b.n	8006b0a <_strerror_r+0x132>
 8006c36:	4b55      	ldr	r3, [pc, #340]	; (8006d8c <_strerror_r+0x3b4>)
 8006c38:	e767      	b.n	8006b0a <_strerror_r+0x132>
 8006c3a:	4b55      	ldr	r3, [pc, #340]	; (8006d90 <_strerror_r+0x3b8>)
 8006c3c:	e765      	b.n	8006b0a <_strerror_r+0x132>
 8006c3e:	4b55      	ldr	r3, [pc, #340]	; (8006d94 <_strerror_r+0x3bc>)
 8006c40:	e763      	b.n	8006b0a <_strerror_r+0x132>
 8006c42:	4b55      	ldr	r3, [pc, #340]	; (8006d98 <_strerror_r+0x3c0>)
 8006c44:	e761      	b.n	8006b0a <_strerror_r+0x132>
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	bf14      	ite	ne
 8006c4a:	461a      	movne	r2, r3
 8006c4c:	4622      	moveq	r2, r4
 8006c4e:	f000 f8a9 	bl	8006da4 <_user_strerror>
 8006c52:	4b52      	ldr	r3, [pc, #328]	; (8006d9c <_strerror_r+0x3c4>)
 8006c54:	2800      	cmp	r0, #0
 8006c56:	bf18      	it	ne
 8006c58:	4603      	movne	r3, r0
 8006c5a:	e756      	b.n	8006b0a <_strerror_r+0x132>
 8006c5c:	4b50      	ldr	r3, [pc, #320]	; (8006da0 <_strerror_r+0x3c8>)
 8006c5e:	e754      	b.n	8006b0a <_strerror_r+0x132>
 8006c60:	08008ca5 	.word	0x08008ca5
 8006c64:	08008caf 	.word	0x08008caf
 8006c68:	08008cc9 	.word	0x08008cc9
 8006c6c:	08008cd9 	.word	0x08008cd9
 8006c70:	08008cf1 	.word	0x08008cf1
 8006c74:	08008cfb 	.word	0x08008cfb
 8006c78:	08008d15 	.word	0x08008d15
 8006c7c:	08008d27 	.word	0x08008d27
 8006c80:	08008d39 	.word	0x08008d39
 8006c84:	08008d52 	.word	0x08008d52
 8006c88:	08008d62 	.word	0x08008d62
 8006c8c:	08008d6e 	.word	0x08008d6e
 8006c90:	08008d8b 	.word	0x08008d8b
 8006c94:	08008d9d 	.word	0x08008d9d
 8006c98:	08008dae 	.word	0x08008dae
 8006c9c:	08008dc0 	.word	0x08008dc0
 8006ca0:	08008dcc 	.word	0x08008dcc
 8006ca4:	08008de4 	.word	0x08008de4
 8006ca8:	08008df0 	.word	0x08008df0
 8006cac:	08008e02 	.word	0x08008e02
 8006cb0:	08008e11 	.word	0x08008e11
 8006cb4:	08008e21 	.word	0x08008e21
 8006cb8:	08008e2e 	.word	0x08008e2e
 8006cbc:	08008e4d 	.word	0x08008e4d
 8006cc0:	08008e5c 	.word	0x08008e5c
 8006cc4:	08008e6d 	.word	0x08008e6d
 8006cc8:	08008e91 	.word	0x08008e91
 8006ccc:	08008eaf 	.word	0x08008eaf
 8006cd0:	08008ecd 	.word	0x08008ecd
 8006cd4:	08008eed 	.word	0x08008eed
 8006cd8:	08008f04 	.word	0x08008f04
 8006cdc:	08008f13 	.word	0x08008f13
 8006ce0:	08008f22 	.word	0x08008f22
 8006ce4:	08008f36 	.word	0x08008f36
 8006ce8:	08008f4e 	.word	0x08008f4e
 8006cec:	08008f5c 	.word	0x08008f5c
 8006cf0:	08008f69 	.word	0x08008f69
 8006cf4:	08008f7f 	.word	0x08008f7f
 8006cf8:	08008f8e 	.word	0x08008f8e
 8006cfc:	08008f9a 	.word	0x08008f9a
 8006d00:	08008fc9 	.word	0x08008fc9
 8006d04:	08008fda 	.word	0x08008fda
 8006d08:	08008ff5 	.word	0x08008ff5
 8006d0c:	08009008 	.word	0x08009008
 8006d10:	0800901e 	.word	0x0800901e
 8006d14:	08009027 	.word	0x08009027
 8006d18:	0800903e 	.word	0x0800903e
 8006d1c:	08009046 	.word	0x08009046
 8006d20:	08009053 	.word	0x08009053
 8006d24:	08009068 	.word	0x08009068
 8006d28:	0800907c 	.word	0x0800907c
 8006d2c:	08009094 	.word	0x08009094
 8006d30:	080090a3 	.word	0x080090a3
 8006d34:	080090b4 	.word	0x080090b4
 8006d38:	080090c7 	.word	0x080090c7
 8006d3c:	080090d3 	.word	0x080090d3
 8006d40:	080090ec 	.word	0x080090ec
 8006d44:	08009100 	.word	0x08009100
 8006d48:	0800911b 	.word	0x0800911b
 8006d4c:	08009133 	.word	0x08009133
 8006d50:	0800914d 	.word	0x0800914d
 8006d54:	08009155 	.word	0x08009155
 8006d58:	08009185 	.word	0x08009185
 8006d5c:	080091a4 	.word	0x080091a4
 8006d60:	080091c3 	.word	0x080091c3
 8006d64:	080091da 	.word	0x080091da
 8006d68:	080091ed 	.word	0x080091ed
 8006d6c:	08009206 	.word	0x08009206
 8006d70:	0800921d 	.word	0x0800921d
 8006d74:	08009233 	.word	0x08009233
 8006d78:	08009254 	.word	0x08009254
 8006d7c:	0800926c 	.word	0x0800926c
 8006d80:	08009288 	.word	0x08009288
 8006d84:	0800929b 	.word	0x0800929b
 8006d88:	080092b1 	.word	0x080092b1
 8006d8c:	080092c5 	.word	0x080092c5
 8006d90:	080092e7 	.word	0x080092e7
 8006d94:	0800930d 	.word	0x0800930d
 8006d98:	0800931e 	.word	0x0800931e
 8006d9c:	08008ca4 	.word	0x08008ca4
 8006da0:	08009333 	.word	0x08009333

08006da4 <_user_strerror>:
 8006da4:	2000      	movs	r0, #0
 8006da6:	4770      	bx	lr

08006da8 <__swbuf_r>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	460e      	mov	r6, r1
 8006dac:	4614      	mov	r4, r2
 8006dae:	4605      	mov	r5, r0
 8006db0:	b118      	cbz	r0, 8006dba <__swbuf_r+0x12>
 8006db2:	6983      	ldr	r3, [r0, #24]
 8006db4:	b90b      	cbnz	r3, 8006dba <__swbuf_r+0x12>
 8006db6:	f7ff f801 	bl	8005dbc <__sinit>
 8006dba:	4b21      	ldr	r3, [pc, #132]	; (8006e40 <__swbuf_r+0x98>)
 8006dbc:	429c      	cmp	r4, r3
 8006dbe:	d12b      	bne.n	8006e18 <__swbuf_r+0x70>
 8006dc0:	686c      	ldr	r4, [r5, #4]
 8006dc2:	69a3      	ldr	r3, [r4, #24]
 8006dc4:	60a3      	str	r3, [r4, #8]
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	071a      	lsls	r2, r3, #28
 8006dca:	d52f      	bpl.n	8006e2c <__swbuf_r+0x84>
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	b36b      	cbz	r3, 8006e2c <__swbuf_r+0x84>
 8006dd0:	6923      	ldr	r3, [r4, #16]
 8006dd2:	6820      	ldr	r0, [r4, #0]
 8006dd4:	1ac0      	subs	r0, r0, r3
 8006dd6:	6963      	ldr	r3, [r4, #20]
 8006dd8:	b2f6      	uxtb	r6, r6
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	4637      	mov	r7, r6
 8006dde:	dc04      	bgt.n	8006dea <__swbuf_r+0x42>
 8006de0:	4621      	mov	r1, r4
 8006de2:	4628      	mov	r0, r5
 8006de4:	f7fe ff44 	bl	8005c70 <_fflush_r>
 8006de8:	bb30      	cbnz	r0, 8006e38 <__swbuf_r+0x90>
 8006dea:	68a3      	ldr	r3, [r4, #8]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	60a3      	str	r3, [r4, #8]
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	6022      	str	r2, [r4, #0]
 8006df6:	701e      	strb	r6, [r3, #0]
 8006df8:	6963      	ldr	r3, [r4, #20]
 8006dfa:	3001      	adds	r0, #1
 8006dfc:	4283      	cmp	r3, r0
 8006dfe:	d004      	beq.n	8006e0a <__swbuf_r+0x62>
 8006e00:	89a3      	ldrh	r3, [r4, #12]
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d506      	bpl.n	8006e14 <__swbuf_r+0x6c>
 8006e06:	2e0a      	cmp	r6, #10
 8006e08:	d104      	bne.n	8006e14 <__swbuf_r+0x6c>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	f7fe ff2f 	bl	8005c70 <_fflush_r>
 8006e12:	b988      	cbnz	r0, 8006e38 <__swbuf_r+0x90>
 8006e14:	4638      	mov	r0, r7
 8006e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e18:	4b0a      	ldr	r3, [pc, #40]	; (8006e44 <__swbuf_r+0x9c>)
 8006e1a:	429c      	cmp	r4, r3
 8006e1c:	d101      	bne.n	8006e22 <__swbuf_r+0x7a>
 8006e1e:	68ac      	ldr	r4, [r5, #8]
 8006e20:	e7cf      	b.n	8006dc2 <__swbuf_r+0x1a>
 8006e22:	4b09      	ldr	r3, [pc, #36]	; (8006e48 <__swbuf_r+0xa0>)
 8006e24:	429c      	cmp	r4, r3
 8006e26:	bf08      	it	eq
 8006e28:	68ec      	ldreq	r4, [r5, #12]
 8006e2a:	e7ca      	b.n	8006dc2 <__swbuf_r+0x1a>
 8006e2c:	4621      	mov	r1, r4
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f000 f81e 	bl	8006e70 <__swsetup_r>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d0cb      	beq.n	8006dd0 <__swbuf_r+0x28>
 8006e38:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e3c:	e7ea      	b.n	8006e14 <__swbuf_r+0x6c>
 8006e3e:	bf00      	nop
 8006e40:	08008c5c 	.word	0x08008c5c
 8006e44:	08008c7c 	.word	0x08008c7c
 8006e48:	08008c3c 	.word	0x08008c3c

08006e4c <_write_r>:
 8006e4c:	b538      	push	{r3, r4, r5, lr}
 8006e4e:	4d07      	ldr	r5, [pc, #28]	; (8006e6c <_write_r+0x20>)
 8006e50:	4604      	mov	r4, r0
 8006e52:	4608      	mov	r0, r1
 8006e54:	4611      	mov	r1, r2
 8006e56:	2200      	movs	r2, #0
 8006e58:	602a      	str	r2, [r5, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	f7fb fa88 	bl	8002370 <_write>
 8006e60:	1c43      	adds	r3, r0, #1
 8006e62:	d102      	bne.n	8006e6a <_write_r+0x1e>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	b103      	cbz	r3, 8006e6a <_write_r+0x1e>
 8006e68:	6023      	str	r3, [r4, #0]
 8006e6a:	bd38      	pop	{r3, r4, r5, pc}
 8006e6c:	200001f8 	.word	0x200001f8

08006e70 <__swsetup_r>:
 8006e70:	4b32      	ldr	r3, [pc, #200]	; (8006f3c <__swsetup_r+0xcc>)
 8006e72:	b570      	push	{r4, r5, r6, lr}
 8006e74:	681d      	ldr	r5, [r3, #0]
 8006e76:	4606      	mov	r6, r0
 8006e78:	460c      	mov	r4, r1
 8006e7a:	b125      	cbz	r5, 8006e86 <__swsetup_r+0x16>
 8006e7c:	69ab      	ldr	r3, [r5, #24]
 8006e7e:	b913      	cbnz	r3, 8006e86 <__swsetup_r+0x16>
 8006e80:	4628      	mov	r0, r5
 8006e82:	f7fe ff9b 	bl	8005dbc <__sinit>
 8006e86:	4b2e      	ldr	r3, [pc, #184]	; (8006f40 <__swsetup_r+0xd0>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	d10f      	bne.n	8006eac <__swsetup_r+0x3c>
 8006e8c:	686c      	ldr	r4, [r5, #4]
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e94:	0719      	lsls	r1, r3, #28
 8006e96:	d42c      	bmi.n	8006ef2 <__swsetup_r+0x82>
 8006e98:	06dd      	lsls	r5, r3, #27
 8006e9a:	d411      	bmi.n	8006ec0 <__swsetup_r+0x50>
 8006e9c:	2309      	movs	r3, #9
 8006e9e:	6033      	str	r3, [r6, #0]
 8006ea0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006eaa:	e03e      	b.n	8006f2a <__swsetup_r+0xba>
 8006eac:	4b25      	ldr	r3, [pc, #148]	; (8006f44 <__swsetup_r+0xd4>)
 8006eae:	429c      	cmp	r4, r3
 8006eb0:	d101      	bne.n	8006eb6 <__swsetup_r+0x46>
 8006eb2:	68ac      	ldr	r4, [r5, #8]
 8006eb4:	e7eb      	b.n	8006e8e <__swsetup_r+0x1e>
 8006eb6:	4b24      	ldr	r3, [pc, #144]	; (8006f48 <__swsetup_r+0xd8>)
 8006eb8:	429c      	cmp	r4, r3
 8006eba:	bf08      	it	eq
 8006ebc:	68ec      	ldreq	r4, [r5, #12]
 8006ebe:	e7e6      	b.n	8006e8e <__swsetup_r+0x1e>
 8006ec0:	0758      	lsls	r0, r3, #29
 8006ec2:	d512      	bpl.n	8006eea <__swsetup_r+0x7a>
 8006ec4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ec6:	b141      	cbz	r1, 8006eda <__swsetup_r+0x6a>
 8006ec8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ecc:	4299      	cmp	r1, r3
 8006ece:	d002      	beq.n	8006ed6 <__swsetup_r+0x66>
 8006ed0:	4630      	mov	r0, r6
 8006ed2:	f7ff fa77 	bl	80063c4 <_free_r>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6363      	str	r3, [r4, #52]	; 0x34
 8006eda:	89a3      	ldrh	r3, [r4, #12]
 8006edc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ee0:	81a3      	strh	r3, [r4, #12]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6063      	str	r3, [r4, #4]
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f043 0308 	orr.w	r3, r3, #8
 8006ef0:	81a3      	strh	r3, [r4, #12]
 8006ef2:	6923      	ldr	r3, [r4, #16]
 8006ef4:	b94b      	cbnz	r3, 8006f0a <__swsetup_r+0x9a>
 8006ef6:	89a3      	ldrh	r3, [r4, #12]
 8006ef8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f00:	d003      	beq.n	8006f0a <__swsetup_r+0x9a>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4630      	mov	r0, r6
 8006f06:	f7ff f9ff 	bl	8006308 <__smakebuf_r>
 8006f0a:	89a0      	ldrh	r0, [r4, #12]
 8006f0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f10:	f010 0301 	ands.w	r3, r0, #1
 8006f14:	d00a      	beq.n	8006f2c <__swsetup_r+0xbc>
 8006f16:	2300      	movs	r3, #0
 8006f18:	60a3      	str	r3, [r4, #8]
 8006f1a:	6963      	ldr	r3, [r4, #20]
 8006f1c:	425b      	negs	r3, r3
 8006f1e:	61a3      	str	r3, [r4, #24]
 8006f20:	6923      	ldr	r3, [r4, #16]
 8006f22:	b943      	cbnz	r3, 8006f36 <__swsetup_r+0xc6>
 8006f24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f28:	d1ba      	bne.n	8006ea0 <__swsetup_r+0x30>
 8006f2a:	bd70      	pop	{r4, r5, r6, pc}
 8006f2c:	0781      	lsls	r1, r0, #30
 8006f2e:	bf58      	it	pl
 8006f30:	6963      	ldrpl	r3, [r4, #20]
 8006f32:	60a3      	str	r3, [r4, #8]
 8006f34:	e7f4      	b.n	8006f20 <__swsetup_r+0xb0>
 8006f36:	2000      	movs	r0, #0
 8006f38:	e7f7      	b.n	8006f2a <__swsetup_r+0xba>
 8006f3a:	bf00      	nop
 8006f3c:	20000034 	.word	0x20000034
 8006f40:	08008c5c 	.word	0x08008c5c
 8006f44:	08008c7c 	.word	0x08008c7c
 8006f48:	08008c3c 	.word	0x08008c3c

08006f4c <_close_r>:
 8006f4c:	b538      	push	{r3, r4, r5, lr}
 8006f4e:	4d06      	ldr	r5, [pc, #24]	; (8006f68 <_close_r+0x1c>)
 8006f50:	2300      	movs	r3, #0
 8006f52:	4604      	mov	r4, r0
 8006f54:	4608      	mov	r0, r1
 8006f56:	602b      	str	r3, [r5, #0]
 8006f58:	f7fb fa26 	bl	80023a8 <_close>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	d102      	bne.n	8006f66 <_close_r+0x1a>
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	b103      	cbz	r3, 8006f66 <_close_r+0x1a>
 8006f64:	6023      	str	r3, [r4, #0]
 8006f66:	bd38      	pop	{r3, r4, r5, pc}
 8006f68:	200001f8 	.word	0x200001f8

08006f6c <fileno>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	4e1a      	ldr	r6, [pc, #104]	; (8006fd8 <fileno+0x6c>)
 8006f70:	6835      	ldr	r5, [r6, #0]
 8006f72:	4604      	mov	r4, r0
 8006f74:	b125      	cbz	r5, 8006f80 <fileno+0x14>
 8006f76:	69ab      	ldr	r3, [r5, #24]
 8006f78:	b913      	cbnz	r3, 8006f80 <fileno+0x14>
 8006f7a:	4628      	mov	r0, r5
 8006f7c:	f7fe ff1e 	bl	8005dbc <__sinit>
 8006f80:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <fileno+0x70>)
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d118      	bne.n	8006fb8 <fileno+0x4c>
 8006f86:	686c      	ldr	r4, [r5, #4]
 8006f88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f8a:	07d8      	lsls	r0, r3, #31
 8006f8c:	d405      	bmi.n	8006f9a <fileno+0x2e>
 8006f8e:	89a3      	ldrh	r3, [r4, #12]
 8006f90:	0599      	lsls	r1, r3, #22
 8006f92:	d402      	bmi.n	8006f9a <fileno+0x2e>
 8006f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f96:	f7ff f98f 	bl	80062b8 <__retarget_lock_acquire_recursive>
 8006f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f9e:	b1ab      	cbz	r3, 8006fcc <fileno+0x60>
 8006fa0:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8006fa4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006fa6:	07d2      	lsls	r2, r2, #31
 8006fa8:	d404      	bmi.n	8006fb4 <fileno+0x48>
 8006faa:	059b      	lsls	r3, r3, #22
 8006fac:	d402      	bmi.n	8006fb4 <fileno+0x48>
 8006fae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fb0:	f7ff f983 	bl	80062ba <__retarget_lock_release_recursive>
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	bd70      	pop	{r4, r5, r6, pc}
 8006fb8:	4b09      	ldr	r3, [pc, #36]	; (8006fe0 <fileno+0x74>)
 8006fba:	429c      	cmp	r4, r3
 8006fbc:	d101      	bne.n	8006fc2 <fileno+0x56>
 8006fbe:	68ac      	ldr	r4, [r5, #8]
 8006fc0:	e7e2      	b.n	8006f88 <fileno+0x1c>
 8006fc2:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <fileno+0x78>)
 8006fc4:	429c      	cmp	r4, r3
 8006fc6:	bf08      	it	eq
 8006fc8:	68ec      	ldreq	r4, [r5, #12]
 8006fca:	e7dd      	b.n	8006f88 <fileno+0x1c>
 8006fcc:	6832      	ldr	r2, [r6, #0]
 8006fce:	2109      	movs	r1, #9
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006fd6:	e7e5      	b.n	8006fa4 <fileno+0x38>
 8006fd8:	20000034 	.word	0x20000034
 8006fdc:	08008c5c 	.word	0x08008c5c
 8006fe0:	08008c7c 	.word	0x08008c7c
 8006fe4:	08008c3c 	.word	0x08008c3c

08006fe8 <__sflags>:
 8006fe8:	780b      	ldrb	r3, [r1, #0]
 8006fea:	2b72      	cmp	r3, #114	; 0x72
 8006fec:	b530      	push	{r4, r5, lr}
 8006fee:	d022      	beq.n	8007036 <__sflags+0x4e>
 8006ff0:	2b77      	cmp	r3, #119	; 0x77
 8006ff2:	d024      	beq.n	800703e <__sflags+0x56>
 8006ff4:	2b61      	cmp	r3, #97	; 0x61
 8006ff6:	d027      	beq.n	8007048 <__sflags+0x60>
 8006ff8:	2316      	movs	r3, #22
 8006ffa:	6003      	str	r3, [r0, #0]
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	bd30      	pop	{r4, r5, pc}
 8007000:	2d62      	cmp	r5, #98	; 0x62
 8007002:	d012      	beq.n	800702a <__sflags+0x42>
 8007004:	2d78      	cmp	r5, #120	; 0x78
 8007006:	d013      	beq.n	8007030 <__sflags+0x48>
 8007008:	2d2b      	cmp	r5, #43	; 0x2b
 800700a:	d107      	bne.n	800701c <__sflags+0x34>
 800700c:	f020 001c 	bic.w	r0, r0, #28
 8007010:	f023 0303 	bic.w	r3, r3, #3
 8007014:	f040 0010 	orr.w	r0, r0, #16
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007020:	2d00      	cmp	r5, #0
 8007022:	d1ed      	bne.n	8007000 <__sflags+0x18>
 8007024:	4323      	orrs	r3, r4
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	e7e9      	b.n	8006ffe <__sflags+0x16>
 800702a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800702e:	e7f5      	b.n	800701c <__sflags+0x34>
 8007030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007034:	e7f2      	b.n	800701c <__sflags+0x34>
 8007036:	2400      	movs	r4, #0
 8007038:	4623      	mov	r3, r4
 800703a:	2004      	movs	r0, #4
 800703c:	e7ee      	b.n	800701c <__sflags+0x34>
 800703e:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 8007042:	2301      	movs	r3, #1
 8007044:	2008      	movs	r0, #8
 8007046:	e7e9      	b.n	800701c <__sflags+0x34>
 8007048:	f44f 7402 	mov.w	r4, #520	; 0x208
 800704c:	2301      	movs	r3, #1
 800704e:	f44f 7084 	mov.w	r0, #264	; 0x108
 8007052:	e7e3      	b.n	800701c <__sflags+0x34>

08007054 <_fstat_r>:
 8007054:	b538      	push	{r3, r4, r5, lr}
 8007056:	4d07      	ldr	r5, [pc, #28]	; (8007074 <_fstat_r+0x20>)
 8007058:	2300      	movs	r3, #0
 800705a:	4604      	mov	r4, r0
 800705c:	4608      	mov	r0, r1
 800705e:	4611      	mov	r1, r2
 8007060:	602b      	str	r3, [r5, #0]
 8007062:	f7fb f9ad 	bl	80023c0 <_fstat>
 8007066:	1c43      	adds	r3, r0, #1
 8007068:	d102      	bne.n	8007070 <_fstat_r+0x1c>
 800706a:	682b      	ldr	r3, [r5, #0]
 800706c:	b103      	cbz	r3, 8007070 <_fstat_r+0x1c>
 800706e:	6023      	str	r3, [r4, #0]
 8007070:	bd38      	pop	{r3, r4, r5, pc}
 8007072:	bf00      	nop
 8007074:	200001f8 	.word	0x200001f8

08007078 <_isatty_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d06      	ldr	r5, [pc, #24]	; (8007094 <_isatty_r+0x1c>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fb f9ac 	bl	80023e0 <_isatty>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_isatty_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_isatty_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200001f8 	.word	0x200001f8

08007098 <_lseek_r>:
 8007098:	b538      	push	{r3, r4, r5, lr}
 800709a:	4d07      	ldr	r5, [pc, #28]	; (80070b8 <_lseek_r+0x20>)
 800709c:	4604      	mov	r4, r0
 800709e:	4608      	mov	r0, r1
 80070a0:	4611      	mov	r1, r2
 80070a2:	2200      	movs	r2, #0
 80070a4:	602a      	str	r2, [r5, #0]
 80070a6:	461a      	mov	r2, r3
 80070a8:	f7fb f9a5 	bl	80023f6 <_lseek>
 80070ac:	1c43      	adds	r3, r0, #1
 80070ae:	d102      	bne.n	80070b6 <_lseek_r+0x1e>
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	b103      	cbz	r3, 80070b6 <_lseek_r+0x1e>
 80070b4:	6023      	str	r3, [r4, #0]
 80070b6:	bd38      	pop	{r3, r4, r5, pc}
 80070b8:	200001f8 	.word	0x200001f8

080070bc <__malloc_lock>:
 80070bc:	4801      	ldr	r0, [pc, #4]	; (80070c4 <__malloc_lock+0x8>)
 80070be:	f7ff b8fb 	b.w	80062b8 <__retarget_lock_acquire_recursive>
 80070c2:	bf00      	nop
 80070c4:	200001ec 	.word	0x200001ec

080070c8 <__malloc_unlock>:
 80070c8:	4801      	ldr	r0, [pc, #4]	; (80070d0 <__malloc_unlock+0x8>)
 80070ca:	f7ff b8f6 	b.w	80062ba <__retarget_lock_release_recursive>
 80070ce:	bf00      	nop
 80070d0:	200001ec 	.word	0x200001ec

080070d4 <__sfputc_r>:
 80070d4:	6893      	ldr	r3, [r2, #8]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	b410      	push	{r4}
 80070dc:	6093      	str	r3, [r2, #8]
 80070de:	da08      	bge.n	80070f2 <__sfputc_r+0x1e>
 80070e0:	6994      	ldr	r4, [r2, #24]
 80070e2:	42a3      	cmp	r3, r4
 80070e4:	db01      	blt.n	80070ea <__sfputc_r+0x16>
 80070e6:	290a      	cmp	r1, #10
 80070e8:	d103      	bne.n	80070f2 <__sfputc_r+0x1e>
 80070ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070ee:	f7ff be5b 	b.w	8006da8 <__swbuf_r>
 80070f2:	6813      	ldr	r3, [r2, #0]
 80070f4:	1c58      	adds	r0, r3, #1
 80070f6:	6010      	str	r0, [r2, #0]
 80070f8:	7019      	strb	r1, [r3, #0]
 80070fa:	4608      	mov	r0, r1
 80070fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007100:	4770      	bx	lr

08007102 <__sfputs_r>:
 8007102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007104:	4606      	mov	r6, r0
 8007106:	460f      	mov	r7, r1
 8007108:	4614      	mov	r4, r2
 800710a:	18d5      	adds	r5, r2, r3
 800710c:	42ac      	cmp	r4, r5
 800710e:	d101      	bne.n	8007114 <__sfputs_r+0x12>
 8007110:	2000      	movs	r0, #0
 8007112:	e007      	b.n	8007124 <__sfputs_r+0x22>
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	463a      	mov	r2, r7
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ffda 	bl	80070d4 <__sfputc_r>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d1f3      	bne.n	800710c <__sfputs_r+0xa>
 8007124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007128 <_vfiprintf_r>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	460d      	mov	r5, r1
 800712e:	b09d      	sub	sp, #116	; 0x74
 8007130:	4614      	mov	r4, r2
 8007132:	4698      	mov	r8, r3
 8007134:	4606      	mov	r6, r0
 8007136:	b118      	cbz	r0, 8007140 <_vfiprintf_r+0x18>
 8007138:	6983      	ldr	r3, [r0, #24]
 800713a:	b90b      	cbnz	r3, 8007140 <_vfiprintf_r+0x18>
 800713c:	f7fe fe3e 	bl	8005dbc <__sinit>
 8007140:	4b89      	ldr	r3, [pc, #548]	; (8007368 <_vfiprintf_r+0x240>)
 8007142:	429d      	cmp	r5, r3
 8007144:	d11b      	bne.n	800717e <_vfiprintf_r+0x56>
 8007146:	6875      	ldr	r5, [r6, #4]
 8007148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800714a:	07d9      	lsls	r1, r3, #31
 800714c:	d405      	bmi.n	800715a <_vfiprintf_r+0x32>
 800714e:	89ab      	ldrh	r3, [r5, #12]
 8007150:	059a      	lsls	r2, r3, #22
 8007152:	d402      	bmi.n	800715a <_vfiprintf_r+0x32>
 8007154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007156:	f7ff f8af 	bl	80062b8 <__retarget_lock_acquire_recursive>
 800715a:	89ab      	ldrh	r3, [r5, #12]
 800715c:	071b      	lsls	r3, r3, #28
 800715e:	d501      	bpl.n	8007164 <_vfiprintf_r+0x3c>
 8007160:	692b      	ldr	r3, [r5, #16]
 8007162:	b9eb      	cbnz	r3, 80071a0 <_vfiprintf_r+0x78>
 8007164:	4629      	mov	r1, r5
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff fe82 	bl	8006e70 <__swsetup_r>
 800716c:	b1c0      	cbz	r0, 80071a0 <_vfiprintf_r+0x78>
 800716e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007170:	07dc      	lsls	r4, r3, #31
 8007172:	d50e      	bpl.n	8007192 <_vfiprintf_r+0x6a>
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007178:	b01d      	add	sp, #116	; 0x74
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	4b7b      	ldr	r3, [pc, #492]	; (800736c <_vfiprintf_r+0x244>)
 8007180:	429d      	cmp	r5, r3
 8007182:	d101      	bne.n	8007188 <_vfiprintf_r+0x60>
 8007184:	68b5      	ldr	r5, [r6, #8]
 8007186:	e7df      	b.n	8007148 <_vfiprintf_r+0x20>
 8007188:	4b79      	ldr	r3, [pc, #484]	; (8007370 <_vfiprintf_r+0x248>)
 800718a:	429d      	cmp	r5, r3
 800718c:	bf08      	it	eq
 800718e:	68f5      	ldreq	r5, [r6, #12]
 8007190:	e7da      	b.n	8007148 <_vfiprintf_r+0x20>
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	0598      	lsls	r0, r3, #22
 8007196:	d4ed      	bmi.n	8007174 <_vfiprintf_r+0x4c>
 8007198:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800719a:	f7ff f88e 	bl	80062ba <__retarget_lock_release_recursive>
 800719e:	e7e9      	b.n	8007174 <_vfiprintf_r+0x4c>
 80071a0:	2300      	movs	r3, #0
 80071a2:	9309      	str	r3, [sp, #36]	; 0x24
 80071a4:	2320      	movs	r3, #32
 80071a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ae:	2330      	movs	r3, #48	; 0x30
 80071b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007374 <_vfiprintf_r+0x24c>
 80071b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071b8:	f04f 0901 	mov.w	r9, #1
 80071bc:	4623      	mov	r3, r4
 80071be:	469a      	mov	sl, r3
 80071c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071c4:	b10a      	cbz	r2, 80071ca <_vfiprintf_r+0xa2>
 80071c6:	2a25      	cmp	r2, #37	; 0x25
 80071c8:	d1f9      	bne.n	80071be <_vfiprintf_r+0x96>
 80071ca:	ebba 0b04 	subs.w	fp, sl, r4
 80071ce:	d00b      	beq.n	80071e8 <_vfiprintf_r+0xc0>
 80071d0:	465b      	mov	r3, fp
 80071d2:	4622      	mov	r2, r4
 80071d4:	4629      	mov	r1, r5
 80071d6:	4630      	mov	r0, r6
 80071d8:	f7ff ff93 	bl	8007102 <__sfputs_r>
 80071dc:	3001      	adds	r0, #1
 80071de:	f000 80aa 	beq.w	8007336 <_vfiprintf_r+0x20e>
 80071e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071e4:	445a      	add	r2, fp
 80071e6:	9209      	str	r2, [sp, #36]	; 0x24
 80071e8:	f89a 3000 	ldrb.w	r3, [sl]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 80a2 	beq.w	8007336 <_vfiprintf_r+0x20e>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071fc:	f10a 0a01 	add.w	sl, sl, #1
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	9307      	str	r3, [sp, #28]
 8007204:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007208:	931a      	str	r3, [sp, #104]	; 0x68
 800720a:	4654      	mov	r4, sl
 800720c:	2205      	movs	r2, #5
 800720e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007212:	4858      	ldr	r0, [pc, #352]	; (8007374 <_vfiprintf_r+0x24c>)
 8007214:	f7f8 ffbc 	bl	8000190 <memchr>
 8007218:	9a04      	ldr	r2, [sp, #16]
 800721a:	b9d8      	cbnz	r0, 8007254 <_vfiprintf_r+0x12c>
 800721c:	06d1      	lsls	r1, r2, #27
 800721e:	bf44      	itt	mi
 8007220:	2320      	movmi	r3, #32
 8007222:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007226:	0713      	lsls	r3, r2, #28
 8007228:	bf44      	itt	mi
 800722a:	232b      	movmi	r3, #43	; 0x2b
 800722c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007230:	f89a 3000 	ldrb.w	r3, [sl]
 8007234:	2b2a      	cmp	r3, #42	; 0x2a
 8007236:	d015      	beq.n	8007264 <_vfiprintf_r+0x13c>
 8007238:	9a07      	ldr	r2, [sp, #28]
 800723a:	4654      	mov	r4, sl
 800723c:	2000      	movs	r0, #0
 800723e:	f04f 0c0a 	mov.w	ip, #10
 8007242:	4621      	mov	r1, r4
 8007244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007248:	3b30      	subs	r3, #48	; 0x30
 800724a:	2b09      	cmp	r3, #9
 800724c:	d94e      	bls.n	80072ec <_vfiprintf_r+0x1c4>
 800724e:	b1b0      	cbz	r0, 800727e <_vfiprintf_r+0x156>
 8007250:	9207      	str	r2, [sp, #28]
 8007252:	e014      	b.n	800727e <_vfiprintf_r+0x156>
 8007254:	eba0 0308 	sub.w	r3, r0, r8
 8007258:	fa09 f303 	lsl.w	r3, r9, r3
 800725c:	4313      	orrs	r3, r2
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	46a2      	mov	sl, r4
 8007262:	e7d2      	b.n	800720a <_vfiprintf_r+0xe2>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	1d19      	adds	r1, r3, #4
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	9103      	str	r1, [sp, #12]
 800726c:	2b00      	cmp	r3, #0
 800726e:	bfbb      	ittet	lt
 8007270:	425b      	neglt	r3, r3
 8007272:	f042 0202 	orrlt.w	r2, r2, #2
 8007276:	9307      	strge	r3, [sp, #28]
 8007278:	9307      	strlt	r3, [sp, #28]
 800727a:	bfb8      	it	lt
 800727c:	9204      	strlt	r2, [sp, #16]
 800727e:	7823      	ldrb	r3, [r4, #0]
 8007280:	2b2e      	cmp	r3, #46	; 0x2e
 8007282:	d10c      	bne.n	800729e <_vfiprintf_r+0x176>
 8007284:	7863      	ldrb	r3, [r4, #1]
 8007286:	2b2a      	cmp	r3, #42	; 0x2a
 8007288:	d135      	bne.n	80072f6 <_vfiprintf_r+0x1ce>
 800728a:	9b03      	ldr	r3, [sp, #12]
 800728c:	1d1a      	adds	r2, r3, #4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	9203      	str	r2, [sp, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	bfb8      	it	lt
 8007296:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800729a:	3402      	adds	r4, #2
 800729c:	9305      	str	r3, [sp, #20]
 800729e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007384 <_vfiprintf_r+0x25c>
 80072a2:	7821      	ldrb	r1, [r4, #0]
 80072a4:	2203      	movs	r2, #3
 80072a6:	4650      	mov	r0, sl
 80072a8:	f7f8 ff72 	bl	8000190 <memchr>
 80072ac:	b140      	cbz	r0, 80072c0 <_vfiprintf_r+0x198>
 80072ae:	2340      	movs	r3, #64	; 0x40
 80072b0:	eba0 000a 	sub.w	r0, r0, sl
 80072b4:	fa03 f000 	lsl.w	r0, r3, r0
 80072b8:	9b04      	ldr	r3, [sp, #16]
 80072ba:	4303      	orrs	r3, r0
 80072bc:	3401      	adds	r4, #1
 80072be:	9304      	str	r3, [sp, #16]
 80072c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072c4:	482c      	ldr	r0, [pc, #176]	; (8007378 <_vfiprintf_r+0x250>)
 80072c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072ca:	2206      	movs	r2, #6
 80072cc:	f7f8 ff60 	bl	8000190 <memchr>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d03f      	beq.n	8007354 <_vfiprintf_r+0x22c>
 80072d4:	4b29      	ldr	r3, [pc, #164]	; (800737c <_vfiprintf_r+0x254>)
 80072d6:	bb1b      	cbnz	r3, 8007320 <_vfiprintf_r+0x1f8>
 80072d8:	9b03      	ldr	r3, [sp, #12]
 80072da:	3307      	adds	r3, #7
 80072dc:	f023 0307 	bic.w	r3, r3, #7
 80072e0:	3308      	adds	r3, #8
 80072e2:	9303      	str	r3, [sp, #12]
 80072e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072e6:	443b      	add	r3, r7
 80072e8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ea:	e767      	b.n	80071bc <_vfiprintf_r+0x94>
 80072ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80072f0:	460c      	mov	r4, r1
 80072f2:	2001      	movs	r0, #1
 80072f4:	e7a5      	b.n	8007242 <_vfiprintf_r+0x11a>
 80072f6:	2300      	movs	r3, #0
 80072f8:	3401      	adds	r4, #1
 80072fa:	9305      	str	r3, [sp, #20]
 80072fc:	4619      	mov	r1, r3
 80072fe:	f04f 0c0a 	mov.w	ip, #10
 8007302:	4620      	mov	r0, r4
 8007304:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007308:	3a30      	subs	r2, #48	; 0x30
 800730a:	2a09      	cmp	r2, #9
 800730c:	d903      	bls.n	8007316 <_vfiprintf_r+0x1ee>
 800730e:	2b00      	cmp	r3, #0
 8007310:	d0c5      	beq.n	800729e <_vfiprintf_r+0x176>
 8007312:	9105      	str	r1, [sp, #20]
 8007314:	e7c3      	b.n	800729e <_vfiprintf_r+0x176>
 8007316:	fb0c 2101 	mla	r1, ip, r1, r2
 800731a:	4604      	mov	r4, r0
 800731c:	2301      	movs	r3, #1
 800731e:	e7f0      	b.n	8007302 <_vfiprintf_r+0x1da>
 8007320:	ab03      	add	r3, sp, #12
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	462a      	mov	r2, r5
 8007326:	4b16      	ldr	r3, [pc, #88]	; (8007380 <_vfiprintf_r+0x258>)
 8007328:	a904      	add	r1, sp, #16
 800732a:	4630      	mov	r0, r6
 800732c:	f3af 8000 	nop.w
 8007330:	4607      	mov	r7, r0
 8007332:	1c78      	adds	r0, r7, #1
 8007334:	d1d6      	bne.n	80072e4 <_vfiprintf_r+0x1bc>
 8007336:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007338:	07d9      	lsls	r1, r3, #31
 800733a:	d405      	bmi.n	8007348 <_vfiprintf_r+0x220>
 800733c:	89ab      	ldrh	r3, [r5, #12]
 800733e:	059a      	lsls	r2, r3, #22
 8007340:	d402      	bmi.n	8007348 <_vfiprintf_r+0x220>
 8007342:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007344:	f7fe ffb9 	bl	80062ba <__retarget_lock_release_recursive>
 8007348:	89ab      	ldrh	r3, [r5, #12]
 800734a:	065b      	lsls	r3, r3, #25
 800734c:	f53f af12 	bmi.w	8007174 <_vfiprintf_r+0x4c>
 8007350:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007352:	e711      	b.n	8007178 <_vfiprintf_r+0x50>
 8007354:	ab03      	add	r3, sp, #12
 8007356:	9300      	str	r3, [sp, #0]
 8007358:	462a      	mov	r2, r5
 800735a:	4b09      	ldr	r3, [pc, #36]	; (8007380 <_vfiprintf_r+0x258>)
 800735c:	a904      	add	r1, sp, #16
 800735e:	4630      	mov	r0, r6
 8007360:	f000 f880 	bl	8007464 <_printf_i>
 8007364:	e7e4      	b.n	8007330 <_vfiprintf_r+0x208>
 8007366:	bf00      	nop
 8007368:	08008c5c 	.word	0x08008c5c
 800736c:	08008c7c 	.word	0x08008c7c
 8007370:	08008c3c 	.word	0x08008c3c
 8007374:	0800933b 	.word	0x0800933b
 8007378:	08009345 	.word	0x08009345
 800737c:	00000000 	.word	0x00000000
 8007380:	08007103 	.word	0x08007103
 8007384:	08009341 	.word	0x08009341

08007388 <_printf_common>:
 8007388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	4616      	mov	r6, r2
 800738e:	4699      	mov	r9, r3
 8007390:	688a      	ldr	r2, [r1, #8]
 8007392:	690b      	ldr	r3, [r1, #16]
 8007394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007398:	4293      	cmp	r3, r2
 800739a:	bfb8      	it	lt
 800739c:	4613      	movlt	r3, r2
 800739e:	6033      	str	r3, [r6, #0]
 80073a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073a4:	4607      	mov	r7, r0
 80073a6:	460c      	mov	r4, r1
 80073a8:	b10a      	cbz	r2, 80073ae <_printf_common+0x26>
 80073aa:	3301      	adds	r3, #1
 80073ac:	6033      	str	r3, [r6, #0]
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	0699      	lsls	r1, r3, #26
 80073b2:	bf42      	ittt	mi
 80073b4:	6833      	ldrmi	r3, [r6, #0]
 80073b6:	3302      	addmi	r3, #2
 80073b8:	6033      	strmi	r3, [r6, #0]
 80073ba:	6825      	ldr	r5, [r4, #0]
 80073bc:	f015 0506 	ands.w	r5, r5, #6
 80073c0:	d106      	bne.n	80073d0 <_printf_common+0x48>
 80073c2:	f104 0a19 	add.w	sl, r4, #25
 80073c6:	68e3      	ldr	r3, [r4, #12]
 80073c8:	6832      	ldr	r2, [r6, #0]
 80073ca:	1a9b      	subs	r3, r3, r2
 80073cc:	42ab      	cmp	r3, r5
 80073ce:	dc26      	bgt.n	800741e <_printf_common+0x96>
 80073d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80073d4:	1e13      	subs	r3, r2, #0
 80073d6:	6822      	ldr	r2, [r4, #0]
 80073d8:	bf18      	it	ne
 80073da:	2301      	movne	r3, #1
 80073dc:	0692      	lsls	r2, r2, #26
 80073de:	d42b      	bmi.n	8007438 <_printf_common+0xb0>
 80073e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073e4:	4649      	mov	r1, r9
 80073e6:	4638      	mov	r0, r7
 80073e8:	47c0      	blx	r8
 80073ea:	3001      	adds	r0, #1
 80073ec:	d01e      	beq.n	800742c <_printf_common+0xa4>
 80073ee:	6823      	ldr	r3, [r4, #0]
 80073f0:	68e5      	ldr	r5, [r4, #12]
 80073f2:	6832      	ldr	r2, [r6, #0]
 80073f4:	f003 0306 	and.w	r3, r3, #6
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	bf08      	it	eq
 80073fc:	1aad      	subeq	r5, r5, r2
 80073fe:	68a3      	ldr	r3, [r4, #8]
 8007400:	6922      	ldr	r2, [r4, #16]
 8007402:	bf0c      	ite	eq
 8007404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007408:	2500      	movne	r5, #0
 800740a:	4293      	cmp	r3, r2
 800740c:	bfc4      	itt	gt
 800740e:	1a9b      	subgt	r3, r3, r2
 8007410:	18ed      	addgt	r5, r5, r3
 8007412:	2600      	movs	r6, #0
 8007414:	341a      	adds	r4, #26
 8007416:	42b5      	cmp	r5, r6
 8007418:	d11a      	bne.n	8007450 <_printf_common+0xc8>
 800741a:	2000      	movs	r0, #0
 800741c:	e008      	b.n	8007430 <_printf_common+0xa8>
 800741e:	2301      	movs	r3, #1
 8007420:	4652      	mov	r2, sl
 8007422:	4649      	mov	r1, r9
 8007424:	4638      	mov	r0, r7
 8007426:	47c0      	blx	r8
 8007428:	3001      	adds	r0, #1
 800742a:	d103      	bne.n	8007434 <_printf_common+0xac>
 800742c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007434:	3501      	adds	r5, #1
 8007436:	e7c6      	b.n	80073c6 <_printf_common+0x3e>
 8007438:	18e1      	adds	r1, r4, r3
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	2030      	movs	r0, #48	; 0x30
 800743e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007442:	4422      	add	r2, r4
 8007444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800744c:	3302      	adds	r3, #2
 800744e:	e7c7      	b.n	80073e0 <_printf_common+0x58>
 8007450:	2301      	movs	r3, #1
 8007452:	4622      	mov	r2, r4
 8007454:	4649      	mov	r1, r9
 8007456:	4638      	mov	r0, r7
 8007458:	47c0      	blx	r8
 800745a:	3001      	adds	r0, #1
 800745c:	d0e6      	beq.n	800742c <_printf_common+0xa4>
 800745e:	3601      	adds	r6, #1
 8007460:	e7d9      	b.n	8007416 <_printf_common+0x8e>
	...

08007464 <_printf_i>:
 8007464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007468:	7e0f      	ldrb	r7, [r1, #24]
 800746a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800746c:	2f78      	cmp	r7, #120	; 0x78
 800746e:	4691      	mov	r9, r2
 8007470:	4680      	mov	r8, r0
 8007472:	460c      	mov	r4, r1
 8007474:	469a      	mov	sl, r3
 8007476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800747a:	d807      	bhi.n	800748c <_printf_i+0x28>
 800747c:	2f62      	cmp	r7, #98	; 0x62
 800747e:	d80a      	bhi.n	8007496 <_printf_i+0x32>
 8007480:	2f00      	cmp	r7, #0
 8007482:	f000 80d8 	beq.w	8007636 <_printf_i+0x1d2>
 8007486:	2f58      	cmp	r7, #88	; 0x58
 8007488:	f000 80a3 	beq.w	80075d2 <_printf_i+0x16e>
 800748c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007494:	e03a      	b.n	800750c <_printf_i+0xa8>
 8007496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800749a:	2b15      	cmp	r3, #21
 800749c:	d8f6      	bhi.n	800748c <_printf_i+0x28>
 800749e:	a101      	add	r1, pc, #4	; (adr r1, 80074a4 <_printf_i+0x40>)
 80074a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074a4:	080074fd 	.word	0x080074fd
 80074a8:	08007511 	.word	0x08007511
 80074ac:	0800748d 	.word	0x0800748d
 80074b0:	0800748d 	.word	0x0800748d
 80074b4:	0800748d 	.word	0x0800748d
 80074b8:	0800748d 	.word	0x0800748d
 80074bc:	08007511 	.word	0x08007511
 80074c0:	0800748d 	.word	0x0800748d
 80074c4:	0800748d 	.word	0x0800748d
 80074c8:	0800748d 	.word	0x0800748d
 80074cc:	0800748d 	.word	0x0800748d
 80074d0:	0800761d 	.word	0x0800761d
 80074d4:	08007541 	.word	0x08007541
 80074d8:	080075ff 	.word	0x080075ff
 80074dc:	0800748d 	.word	0x0800748d
 80074e0:	0800748d 	.word	0x0800748d
 80074e4:	0800763f 	.word	0x0800763f
 80074e8:	0800748d 	.word	0x0800748d
 80074ec:	08007541 	.word	0x08007541
 80074f0:	0800748d 	.word	0x0800748d
 80074f4:	0800748d 	.word	0x0800748d
 80074f8:	08007607 	.word	0x08007607
 80074fc:	682b      	ldr	r3, [r5, #0]
 80074fe:	1d1a      	adds	r2, r3, #4
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	602a      	str	r2, [r5, #0]
 8007504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800750c:	2301      	movs	r3, #1
 800750e:	e0a3      	b.n	8007658 <_printf_i+0x1f4>
 8007510:	6820      	ldr	r0, [r4, #0]
 8007512:	6829      	ldr	r1, [r5, #0]
 8007514:	0606      	lsls	r6, r0, #24
 8007516:	f101 0304 	add.w	r3, r1, #4
 800751a:	d50a      	bpl.n	8007532 <_printf_i+0xce>
 800751c:	680e      	ldr	r6, [r1, #0]
 800751e:	602b      	str	r3, [r5, #0]
 8007520:	2e00      	cmp	r6, #0
 8007522:	da03      	bge.n	800752c <_printf_i+0xc8>
 8007524:	232d      	movs	r3, #45	; 0x2d
 8007526:	4276      	negs	r6, r6
 8007528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800752c:	485e      	ldr	r0, [pc, #376]	; (80076a8 <_printf_i+0x244>)
 800752e:	230a      	movs	r3, #10
 8007530:	e019      	b.n	8007566 <_printf_i+0x102>
 8007532:	680e      	ldr	r6, [r1, #0]
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800753a:	bf18      	it	ne
 800753c:	b236      	sxthne	r6, r6
 800753e:	e7ef      	b.n	8007520 <_printf_i+0xbc>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	6820      	ldr	r0, [r4, #0]
 8007544:	1d19      	adds	r1, r3, #4
 8007546:	6029      	str	r1, [r5, #0]
 8007548:	0601      	lsls	r1, r0, #24
 800754a:	d501      	bpl.n	8007550 <_printf_i+0xec>
 800754c:	681e      	ldr	r6, [r3, #0]
 800754e:	e002      	b.n	8007556 <_printf_i+0xf2>
 8007550:	0646      	lsls	r6, r0, #25
 8007552:	d5fb      	bpl.n	800754c <_printf_i+0xe8>
 8007554:	881e      	ldrh	r6, [r3, #0]
 8007556:	4854      	ldr	r0, [pc, #336]	; (80076a8 <_printf_i+0x244>)
 8007558:	2f6f      	cmp	r7, #111	; 0x6f
 800755a:	bf0c      	ite	eq
 800755c:	2308      	moveq	r3, #8
 800755e:	230a      	movne	r3, #10
 8007560:	2100      	movs	r1, #0
 8007562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007566:	6865      	ldr	r5, [r4, #4]
 8007568:	60a5      	str	r5, [r4, #8]
 800756a:	2d00      	cmp	r5, #0
 800756c:	bfa2      	ittt	ge
 800756e:	6821      	ldrge	r1, [r4, #0]
 8007570:	f021 0104 	bicge.w	r1, r1, #4
 8007574:	6021      	strge	r1, [r4, #0]
 8007576:	b90e      	cbnz	r6, 800757c <_printf_i+0x118>
 8007578:	2d00      	cmp	r5, #0
 800757a:	d04d      	beq.n	8007618 <_printf_i+0x1b4>
 800757c:	4615      	mov	r5, r2
 800757e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007582:	fb03 6711 	mls	r7, r3, r1, r6
 8007586:	5dc7      	ldrb	r7, [r0, r7]
 8007588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800758c:	4637      	mov	r7, r6
 800758e:	42bb      	cmp	r3, r7
 8007590:	460e      	mov	r6, r1
 8007592:	d9f4      	bls.n	800757e <_printf_i+0x11a>
 8007594:	2b08      	cmp	r3, #8
 8007596:	d10b      	bne.n	80075b0 <_printf_i+0x14c>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07de      	lsls	r6, r3, #31
 800759c:	d508      	bpl.n	80075b0 <_printf_i+0x14c>
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	6861      	ldr	r1, [r4, #4]
 80075a2:	4299      	cmp	r1, r3
 80075a4:	bfde      	ittt	le
 80075a6:	2330      	movle	r3, #48	; 0x30
 80075a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80075b0:	1b52      	subs	r2, r2, r5
 80075b2:	6122      	str	r2, [r4, #16]
 80075b4:	f8cd a000 	str.w	sl, [sp]
 80075b8:	464b      	mov	r3, r9
 80075ba:	aa03      	add	r2, sp, #12
 80075bc:	4621      	mov	r1, r4
 80075be:	4640      	mov	r0, r8
 80075c0:	f7ff fee2 	bl	8007388 <_printf_common>
 80075c4:	3001      	adds	r0, #1
 80075c6:	d14c      	bne.n	8007662 <_printf_i+0x1fe>
 80075c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075cc:	b004      	add	sp, #16
 80075ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d2:	4835      	ldr	r0, [pc, #212]	; (80076a8 <_printf_i+0x244>)
 80075d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80075d8:	6829      	ldr	r1, [r5, #0]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80075e0:	6029      	str	r1, [r5, #0]
 80075e2:	061d      	lsls	r5, r3, #24
 80075e4:	d514      	bpl.n	8007610 <_printf_i+0x1ac>
 80075e6:	07df      	lsls	r7, r3, #31
 80075e8:	bf44      	itt	mi
 80075ea:	f043 0320 	orrmi.w	r3, r3, #32
 80075ee:	6023      	strmi	r3, [r4, #0]
 80075f0:	b91e      	cbnz	r6, 80075fa <_printf_i+0x196>
 80075f2:	6823      	ldr	r3, [r4, #0]
 80075f4:	f023 0320 	bic.w	r3, r3, #32
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	2310      	movs	r3, #16
 80075fc:	e7b0      	b.n	8007560 <_printf_i+0xfc>
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	f043 0320 	orr.w	r3, r3, #32
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	2378      	movs	r3, #120	; 0x78
 8007608:	4828      	ldr	r0, [pc, #160]	; (80076ac <_printf_i+0x248>)
 800760a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800760e:	e7e3      	b.n	80075d8 <_printf_i+0x174>
 8007610:	0659      	lsls	r1, r3, #25
 8007612:	bf48      	it	mi
 8007614:	b2b6      	uxthmi	r6, r6
 8007616:	e7e6      	b.n	80075e6 <_printf_i+0x182>
 8007618:	4615      	mov	r5, r2
 800761a:	e7bb      	b.n	8007594 <_printf_i+0x130>
 800761c:	682b      	ldr	r3, [r5, #0]
 800761e:	6826      	ldr	r6, [r4, #0]
 8007620:	6961      	ldr	r1, [r4, #20]
 8007622:	1d18      	adds	r0, r3, #4
 8007624:	6028      	str	r0, [r5, #0]
 8007626:	0635      	lsls	r5, r6, #24
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	d501      	bpl.n	8007630 <_printf_i+0x1cc>
 800762c:	6019      	str	r1, [r3, #0]
 800762e:	e002      	b.n	8007636 <_printf_i+0x1d2>
 8007630:	0670      	lsls	r0, r6, #25
 8007632:	d5fb      	bpl.n	800762c <_printf_i+0x1c8>
 8007634:	8019      	strh	r1, [r3, #0]
 8007636:	2300      	movs	r3, #0
 8007638:	6123      	str	r3, [r4, #16]
 800763a:	4615      	mov	r5, r2
 800763c:	e7ba      	b.n	80075b4 <_printf_i+0x150>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	1d1a      	adds	r2, r3, #4
 8007642:	602a      	str	r2, [r5, #0]
 8007644:	681d      	ldr	r5, [r3, #0]
 8007646:	6862      	ldr	r2, [r4, #4]
 8007648:	2100      	movs	r1, #0
 800764a:	4628      	mov	r0, r5
 800764c:	f7f8 fda0 	bl	8000190 <memchr>
 8007650:	b108      	cbz	r0, 8007656 <_printf_i+0x1f2>
 8007652:	1b40      	subs	r0, r0, r5
 8007654:	6060      	str	r0, [r4, #4]
 8007656:	6863      	ldr	r3, [r4, #4]
 8007658:	6123      	str	r3, [r4, #16]
 800765a:	2300      	movs	r3, #0
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007660:	e7a8      	b.n	80075b4 <_printf_i+0x150>
 8007662:	6923      	ldr	r3, [r4, #16]
 8007664:	462a      	mov	r2, r5
 8007666:	4649      	mov	r1, r9
 8007668:	4640      	mov	r0, r8
 800766a:	47d0      	blx	sl
 800766c:	3001      	adds	r0, #1
 800766e:	d0ab      	beq.n	80075c8 <_printf_i+0x164>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	079b      	lsls	r3, r3, #30
 8007674:	d413      	bmi.n	800769e <_printf_i+0x23a>
 8007676:	68e0      	ldr	r0, [r4, #12]
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	4298      	cmp	r0, r3
 800767c:	bfb8      	it	lt
 800767e:	4618      	movlt	r0, r3
 8007680:	e7a4      	b.n	80075cc <_printf_i+0x168>
 8007682:	2301      	movs	r3, #1
 8007684:	4632      	mov	r2, r6
 8007686:	4649      	mov	r1, r9
 8007688:	4640      	mov	r0, r8
 800768a:	47d0      	blx	sl
 800768c:	3001      	adds	r0, #1
 800768e:	d09b      	beq.n	80075c8 <_printf_i+0x164>
 8007690:	3501      	adds	r5, #1
 8007692:	68e3      	ldr	r3, [r4, #12]
 8007694:	9903      	ldr	r1, [sp, #12]
 8007696:	1a5b      	subs	r3, r3, r1
 8007698:	42ab      	cmp	r3, r5
 800769a:	dcf2      	bgt.n	8007682 <_printf_i+0x21e>
 800769c:	e7eb      	b.n	8007676 <_printf_i+0x212>
 800769e:	2500      	movs	r5, #0
 80076a0:	f104 0619 	add.w	r6, r4, #25
 80076a4:	e7f5      	b.n	8007692 <_printf_i+0x22e>
 80076a6:	bf00      	nop
 80076a8:	0800934c 	.word	0x0800934c
 80076ac:	0800935d 	.word	0x0800935d

080076b0 <_read_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d07      	ldr	r5, [pc, #28]	; (80076d0 <_read_r+0x20>)
 80076b4:	4604      	mov	r4, r0
 80076b6:	4608      	mov	r0, r1
 80076b8:	4611      	mov	r1, r2
 80076ba:	2200      	movs	r2, #0
 80076bc:	602a      	str	r2, [r5, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	f7fa fe39 	bl	8002336 <_read>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_read_r+0x1e>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_read_r+0x1e>
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	200001f8 	.word	0x200001f8

080076d4 <pow>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	ed2d 8b02 	vpush	{d8}
 80076da:	eeb0 8a40 	vmov.f32	s16, s0
 80076de:	eef0 8a60 	vmov.f32	s17, s1
 80076e2:	ec55 4b11 	vmov	r4, r5, d1
 80076e6:	f000 f867 	bl	80077b8 <__ieee754_pow>
 80076ea:	4622      	mov	r2, r4
 80076ec:	462b      	mov	r3, r5
 80076ee:	4620      	mov	r0, r4
 80076f0:	4629      	mov	r1, r5
 80076f2:	ec57 6b10 	vmov	r6, r7, d0
 80076f6:	f7f9 f9f1 	bl	8000adc <__aeabi_dcmpun>
 80076fa:	2800      	cmp	r0, #0
 80076fc:	d13b      	bne.n	8007776 <pow+0xa2>
 80076fe:	ec51 0b18 	vmov	r0, r1, d8
 8007702:	2200      	movs	r2, #0
 8007704:	2300      	movs	r3, #0
 8007706:	f7f9 f9b7 	bl	8000a78 <__aeabi_dcmpeq>
 800770a:	b1b8      	cbz	r0, 800773c <pow+0x68>
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	4620      	mov	r0, r4
 8007712:	4629      	mov	r1, r5
 8007714:	f7f9 f9b0 	bl	8000a78 <__aeabi_dcmpeq>
 8007718:	2800      	cmp	r0, #0
 800771a:	d146      	bne.n	80077aa <pow+0xd6>
 800771c:	ec45 4b10 	vmov	d0, r4, r5
 8007720:	f000 fe63 	bl	80083ea <finite>
 8007724:	b338      	cbz	r0, 8007776 <pow+0xa2>
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f9 f9ad 	bl	8000a8c <__aeabi_dcmplt>
 8007732:	b300      	cbz	r0, 8007776 <pow+0xa2>
 8007734:	f7fe f988 	bl	8005a48 <__errno>
 8007738:	2322      	movs	r3, #34	; 0x22
 800773a:	e01b      	b.n	8007774 <pow+0xa0>
 800773c:	ec47 6b10 	vmov	d0, r6, r7
 8007740:	f000 fe53 	bl	80083ea <finite>
 8007744:	b9e0      	cbnz	r0, 8007780 <pow+0xac>
 8007746:	eeb0 0a48 	vmov.f32	s0, s16
 800774a:	eef0 0a68 	vmov.f32	s1, s17
 800774e:	f000 fe4c 	bl	80083ea <finite>
 8007752:	b1a8      	cbz	r0, 8007780 <pow+0xac>
 8007754:	ec45 4b10 	vmov	d0, r4, r5
 8007758:	f000 fe47 	bl	80083ea <finite>
 800775c:	b180      	cbz	r0, 8007780 <pow+0xac>
 800775e:	4632      	mov	r2, r6
 8007760:	463b      	mov	r3, r7
 8007762:	4630      	mov	r0, r6
 8007764:	4639      	mov	r1, r7
 8007766:	f7f9 f9b9 	bl	8000adc <__aeabi_dcmpun>
 800776a:	2800      	cmp	r0, #0
 800776c:	d0e2      	beq.n	8007734 <pow+0x60>
 800776e:	f7fe f96b 	bl	8005a48 <__errno>
 8007772:	2321      	movs	r3, #33	; 0x21
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	ecbd 8b02 	vpop	{d8}
 800777a:	ec47 6b10 	vmov	d0, r6, r7
 800777e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007780:	2200      	movs	r2, #0
 8007782:	2300      	movs	r3, #0
 8007784:	4630      	mov	r0, r6
 8007786:	4639      	mov	r1, r7
 8007788:	f7f9 f976 	bl	8000a78 <__aeabi_dcmpeq>
 800778c:	2800      	cmp	r0, #0
 800778e:	d0f2      	beq.n	8007776 <pow+0xa2>
 8007790:	eeb0 0a48 	vmov.f32	s0, s16
 8007794:	eef0 0a68 	vmov.f32	s1, s17
 8007798:	f000 fe27 	bl	80083ea <finite>
 800779c:	2800      	cmp	r0, #0
 800779e:	d0ea      	beq.n	8007776 <pow+0xa2>
 80077a0:	ec45 4b10 	vmov	d0, r4, r5
 80077a4:	f000 fe21 	bl	80083ea <finite>
 80077a8:	e7c3      	b.n	8007732 <pow+0x5e>
 80077aa:	4f01      	ldr	r7, [pc, #4]	; (80077b0 <pow+0xdc>)
 80077ac:	2600      	movs	r6, #0
 80077ae:	e7e2      	b.n	8007776 <pow+0xa2>
 80077b0:	3ff00000 	.word	0x3ff00000
 80077b4:	00000000 	.word	0x00000000

080077b8 <__ieee754_pow>:
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	ed2d 8b06 	vpush	{d8-d10}
 80077c0:	b089      	sub	sp, #36	; 0x24
 80077c2:	ed8d 1b00 	vstr	d1, [sp]
 80077c6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80077ca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80077ce:	ea58 0102 	orrs.w	r1, r8, r2
 80077d2:	ec57 6b10 	vmov	r6, r7, d0
 80077d6:	d115      	bne.n	8007804 <__ieee754_pow+0x4c>
 80077d8:	19b3      	adds	r3, r6, r6
 80077da:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80077de:	4152      	adcs	r2, r2
 80077e0:	4299      	cmp	r1, r3
 80077e2:	4b89      	ldr	r3, [pc, #548]	; (8007a08 <__ieee754_pow+0x250>)
 80077e4:	4193      	sbcs	r3, r2
 80077e6:	f080 84d2 	bcs.w	800818e <__ieee754_pow+0x9d6>
 80077ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ee:	4630      	mov	r0, r6
 80077f0:	4639      	mov	r1, r7
 80077f2:	f7f8 fd23 	bl	800023c <__adddf3>
 80077f6:	ec41 0b10 	vmov	d0, r0, r1
 80077fa:	b009      	add	sp, #36	; 0x24
 80077fc:	ecbd 8b06 	vpop	{d8-d10}
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4b81      	ldr	r3, [pc, #516]	; (8007a0c <__ieee754_pow+0x254>)
 8007806:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800780a:	429c      	cmp	r4, r3
 800780c:	ee10 aa10 	vmov	sl, s0
 8007810:	463d      	mov	r5, r7
 8007812:	dc06      	bgt.n	8007822 <__ieee754_pow+0x6a>
 8007814:	d101      	bne.n	800781a <__ieee754_pow+0x62>
 8007816:	2e00      	cmp	r6, #0
 8007818:	d1e7      	bne.n	80077ea <__ieee754_pow+0x32>
 800781a:	4598      	cmp	r8, r3
 800781c:	dc01      	bgt.n	8007822 <__ieee754_pow+0x6a>
 800781e:	d10f      	bne.n	8007840 <__ieee754_pow+0x88>
 8007820:	b172      	cbz	r2, 8007840 <__ieee754_pow+0x88>
 8007822:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8007826:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800782a:	ea55 050a 	orrs.w	r5, r5, sl
 800782e:	d1dc      	bne.n	80077ea <__ieee754_pow+0x32>
 8007830:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007834:	18db      	adds	r3, r3, r3
 8007836:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800783a:	4152      	adcs	r2, r2
 800783c:	429d      	cmp	r5, r3
 800783e:	e7d0      	b.n	80077e2 <__ieee754_pow+0x2a>
 8007840:	2d00      	cmp	r5, #0
 8007842:	da3b      	bge.n	80078bc <__ieee754_pow+0x104>
 8007844:	4b72      	ldr	r3, [pc, #456]	; (8007a10 <__ieee754_pow+0x258>)
 8007846:	4598      	cmp	r8, r3
 8007848:	dc51      	bgt.n	80078ee <__ieee754_pow+0x136>
 800784a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800784e:	4598      	cmp	r8, r3
 8007850:	f340 84ac 	ble.w	80081ac <__ieee754_pow+0x9f4>
 8007854:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007858:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800785c:	2b14      	cmp	r3, #20
 800785e:	dd0f      	ble.n	8007880 <__ieee754_pow+0xc8>
 8007860:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007864:	fa22 f103 	lsr.w	r1, r2, r3
 8007868:	fa01 f303 	lsl.w	r3, r1, r3
 800786c:	4293      	cmp	r3, r2
 800786e:	f040 849d 	bne.w	80081ac <__ieee754_pow+0x9f4>
 8007872:	f001 0101 	and.w	r1, r1, #1
 8007876:	f1c1 0302 	rsb	r3, r1, #2
 800787a:	9304      	str	r3, [sp, #16]
 800787c:	b182      	cbz	r2, 80078a0 <__ieee754_pow+0xe8>
 800787e:	e05f      	b.n	8007940 <__ieee754_pow+0x188>
 8007880:	2a00      	cmp	r2, #0
 8007882:	d15b      	bne.n	800793c <__ieee754_pow+0x184>
 8007884:	f1c3 0314 	rsb	r3, r3, #20
 8007888:	fa48 f103 	asr.w	r1, r8, r3
 800788c:	fa01 f303 	lsl.w	r3, r1, r3
 8007890:	4543      	cmp	r3, r8
 8007892:	f040 8488 	bne.w	80081a6 <__ieee754_pow+0x9ee>
 8007896:	f001 0101 	and.w	r1, r1, #1
 800789a:	f1c1 0302 	rsb	r3, r1, #2
 800789e:	9304      	str	r3, [sp, #16]
 80078a0:	4b5c      	ldr	r3, [pc, #368]	; (8007a14 <__ieee754_pow+0x25c>)
 80078a2:	4598      	cmp	r8, r3
 80078a4:	d132      	bne.n	800790c <__ieee754_pow+0x154>
 80078a6:	f1b9 0f00 	cmp.w	r9, #0
 80078aa:	f280 8478 	bge.w	800819e <__ieee754_pow+0x9e6>
 80078ae:	4959      	ldr	r1, [pc, #356]	; (8007a14 <__ieee754_pow+0x25c>)
 80078b0:	4632      	mov	r2, r6
 80078b2:	463b      	mov	r3, r7
 80078b4:	2000      	movs	r0, #0
 80078b6:	f7f8 ffa1 	bl	80007fc <__aeabi_ddiv>
 80078ba:	e79c      	b.n	80077f6 <__ieee754_pow+0x3e>
 80078bc:	2300      	movs	r3, #0
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	2a00      	cmp	r2, #0
 80078c2:	d13d      	bne.n	8007940 <__ieee754_pow+0x188>
 80078c4:	4b51      	ldr	r3, [pc, #324]	; (8007a0c <__ieee754_pow+0x254>)
 80078c6:	4598      	cmp	r8, r3
 80078c8:	d1ea      	bne.n	80078a0 <__ieee754_pow+0xe8>
 80078ca:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80078ce:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80078d2:	ea53 030a 	orrs.w	r3, r3, sl
 80078d6:	f000 845a 	beq.w	800818e <__ieee754_pow+0x9d6>
 80078da:	4b4f      	ldr	r3, [pc, #316]	; (8007a18 <__ieee754_pow+0x260>)
 80078dc:	429c      	cmp	r4, r3
 80078de:	dd08      	ble.n	80078f2 <__ieee754_pow+0x13a>
 80078e0:	f1b9 0f00 	cmp.w	r9, #0
 80078e4:	f2c0 8457 	blt.w	8008196 <__ieee754_pow+0x9de>
 80078e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80078ec:	e783      	b.n	80077f6 <__ieee754_pow+0x3e>
 80078ee:	2302      	movs	r3, #2
 80078f0:	e7e5      	b.n	80078be <__ieee754_pow+0x106>
 80078f2:	f1b9 0f00 	cmp.w	r9, #0
 80078f6:	f04f 0000 	mov.w	r0, #0
 80078fa:	f04f 0100 	mov.w	r1, #0
 80078fe:	f6bf af7a 	bge.w	80077f6 <__ieee754_pow+0x3e>
 8007902:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007906:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800790a:	e774      	b.n	80077f6 <__ieee754_pow+0x3e>
 800790c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007910:	d106      	bne.n	8007920 <__ieee754_pow+0x168>
 8007912:	4632      	mov	r2, r6
 8007914:	463b      	mov	r3, r7
 8007916:	4630      	mov	r0, r6
 8007918:	4639      	mov	r1, r7
 800791a:	f7f8 fe45 	bl	80005a8 <__aeabi_dmul>
 800791e:	e76a      	b.n	80077f6 <__ieee754_pow+0x3e>
 8007920:	4b3e      	ldr	r3, [pc, #248]	; (8007a1c <__ieee754_pow+0x264>)
 8007922:	4599      	cmp	r9, r3
 8007924:	d10c      	bne.n	8007940 <__ieee754_pow+0x188>
 8007926:	2d00      	cmp	r5, #0
 8007928:	db0a      	blt.n	8007940 <__ieee754_pow+0x188>
 800792a:	ec47 6b10 	vmov	d0, r6, r7
 800792e:	b009      	add	sp, #36	; 0x24
 8007930:	ecbd 8b06 	vpop	{d8-d10}
 8007934:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007938:	f000 bc6c 	b.w	8008214 <__ieee754_sqrt>
 800793c:	2300      	movs	r3, #0
 800793e:	9304      	str	r3, [sp, #16]
 8007940:	ec47 6b10 	vmov	d0, r6, r7
 8007944:	f000 fd48 	bl	80083d8 <fabs>
 8007948:	ec51 0b10 	vmov	r0, r1, d0
 800794c:	f1ba 0f00 	cmp.w	sl, #0
 8007950:	d129      	bne.n	80079a6 <__ieee754_pow+0x1ee>
 8007952:	b124      	cbz	r4, 800795e <__ieee754_pow+0x1a6>
 8007954:	4b2f      	ldr	r3, [pc, #188]	; (8007a14 <__ieee754_pow+0x25c>)
 8007956:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800795a:	429a      	cmp	r2, r3
 800795c:	d123      	bne.n	80079a6 <__ieee754_pow+0x1ee>
 800795e:	f1b9 0f00 	cmp.w	r9, #0
 8007962:	da05      	bge.n	8007970 <__ieee754_pow+0x1b8>
 8007964:	4602      	mov	r2, r0
 8007966:	460b      	mov	r3, r1
 8007968:	2000      	movs	r0, #0
 800796a:	492a      	ldr	r1, [pc, #168]	; (8007a14 <__ieee754_pow+0x25c>)
 800796c:	f7f8 ff46 	bl	80007fc <__aeabi_ddiv>
 8007970:	2d00      	cmp	r5, #0
 8007972:	f6bf af40 	bge.w	80077f6 <__ieee754_pow+0x3e>
 8007976:	9b04      	ldr	r3, [sp, #16]
 8007978:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800797c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007980:	4323      	orrs	r3, r4
 8007982:	d108      	bne.n	8007996 <__ieee754_pow+0x1de>
 8007984:	4602      	mov	r2, r0
 8007986:	460b      	mov	r3, r1
 8007988:	4610      	mov	r0, r2
 800798a:	4619      	mov	r1, r3
 800798c:	f7f8 fc54 	bl	8000238 <__aeabi_dsub>
 8007990:	4602      	mov	r2, r0
 8007992:	460b      	mov	r3, r1
 8007994:	e78f      	b.n	80078b6 <__ieee754_pow+0xfe>
 8007996:	9b04      	ldr	r3, [sp, #16]
 8007998:	2b01      	cmp	r3, #1
 800799a:	f47f af2c 	bne.w	80077f6 <__ieee754_pow+0x3e>
 800799e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079a2:	4619      	mov	r1, r3
 80079a4:	e727      	b.n	80077f6 <__ieee754_pow+0x3e>
 80079a6:	0feb      	lsrs	r3, r5, #31
 80079a8:	3b01      	subs	r3, #1
 80079aa:	9306      	str	r3, [sp, #24]
 80079ac:	9a06      	ldr	r2, [sp, #24]
 80079ae:	9b04      	ldr	r3, [sp, #16]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	d102      	bne.n	80079ba <__ieee754_pow+0x202>
 80079b4:	4632      	mov	r2, r6
 80079b6:	463b      	mov	r3, r7
 80079b8:	e7e6      	b.n	8007988 <__ieee754_pow+0x1d0>
 80079ba:	4b19      	ldr	r3, [pc, #100]	; (8007a20 <__ieee754_pow+0x268>)
 80079bc:	4598      	cmp	r8, r3
 80079be:	f340 80fb 	ble.w	8007bb8 <__ieee754_pow+0x400>
 80079c2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80079c6:	4598      	cmp	r8, r3
 80079c8:	4b13      	ldr	r3, [pc, #76]	; (8007a18 <__ieee754_pow+0x260>)
 80079ca:	dd0c      	ble.n	80079e6 <__ieee754_pow+0x22e>
 80079cc:	429c      	cmp	r4, r3
 80079ce:	dc0f      	bgt.n	80079f0 <__ieee754_pow+0x238>
 80079d0:	f1b9 0f00 	cmp.w	r9, #0
 80079d4:	da0f      	bge.n	80079f6 <__ieee754_pow+0x23e>
 80079d6:	2000      	movs	r0, #0
 80079d8:	b009      	add	sp, #36	; 0x24
 80079da:	ecbd 8b06 	vpop	{d8-d10}
 80079de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e2:	f000 bcf0 	b.w	80083c6 <__math_oflow>
 80079e6:	429c      	cmp	r4, r3
 80079e8:	dbf2      	blt.n	80079d0 <__ieee754_pow+0x218>
 80079ea:	4b0a      	ldr	r3, [pc, #40]	; (8007a14 <__ieee754_pow+0x25c>)
 80079ec:	429c      	cmp	r4, r3
 80079ee:	dd19      	ble.n	8007a24 <__ieee754_pow+0x26c>
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	dcef      	bgt.n	80079d6 <__ieee754_pow+0x21e>
 80079f6:	2000      	movs	r0, #0
 80079f8:	b009      	add	sp, #36	; 0x24
 80079fa:	ecbd 8b06 	vpop	{d8-d10}
 80079fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a02:	f000 bcd7 	b.w	80083b4 <__math_uflow>
 8007a06:	bf00      	nop
 8007a08:	fff00000 	.word	0xfff00000
 8007a0c:	7ff00000 	.word	0x7ff00000
 8007a10:	433fffff 	.word	0x433fffff
 8007a14:	3ff00000 	.word	0x3ff00000
 8007a18:	3fefffff 	.word	0x3fefffff
 8007a1c:	3fe00000 	.word	0x3fe00000
 8007a20:	41e00000 	.word	0x41e00000
 8007a24:	4b60      	ldr	r3, [pc, #384]	; (8007ba8 <__ieee754_pow+0x3f0>)
 8007a26:	2200      	movs	r2, #0
 8007a28:	f7f8 fc06 	bl	8000238 <__aeabi_dsub>
 8007a2c:	a354      	add	r3, pc, #336	; (adr r3, 8007b80 <__ieee754_pow+0x3c8>)
 8007a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a32:	4604      	mov	r4, r0
 8007a34:	460d      	mov	r5, r1
 8007a36:	f7f8 fdb7 	bl	80005a8 <__aeabi_dmul>
 8007a3a:	a353      	add	r3, pc, #332	; (adr r3, 8007b88 <__ieee754_pow+0x3d0>)
 8007a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a40:	4606      	mov	r6, r0
 8007a42:	460f      	mov	r7, r1
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f8 fdae 	bl	80005a8 <__aeabi_dmul>
 8007a4c:	4b57      	ldr	r3, [pc, #348]	; (8007bac <__ieee754_pow+0x3f4>)
 8007a4e:	4682      	mov	sl, r0
 8007a50:	468b      	mov	fp, r1
 8007a52:	2200      	movs	r2, #0
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	f7f8 fda6 	bl	80005a8 <__aeabi_dmul>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	460b      	mov	r3, r1
 8007a60:	a14b      	add	r1, pc, #300	; (adr r1, 8007b90 <__ieee754_pow+0x3d8>)
 8007a62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a66:	f7f8 fbe7 	bl	8000238 <__aeabi_dsub>
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	462b      	mov	r3, r5
 8007a6e:	f7f8 fd9b 	bl	80005a8 <__aeabi_dmul>
 8007a72:	4602      	mov	r2, r0
 8007a74:	460b      	mov	r3, r1
 8007a76:	2000      	movs	r0, #0
 8007a78:	494d      	ldr	r1, [pc, #308]	; (8007bb0 <__ieee754_pow+0x3f8>)
 8007a7a:	f7f8 fbdd 	bl	8000238 <__aeabi_dsub>
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4680      	mov	r8, r0
 8007a82:	4689      	mov	r9, r1
 8007a84:	462b      	mov	r3, r5
 8007a86:	4620      	mov	r0, r4
 8007a88:	4629      	mov	r1, r5
 8007a8a:	f7f8 fd8d 	bl	80005a8 <__aeabi_dmul>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	460b      	mov	r3, r1
 8007a92:	4640      	mov	r0, r8
 8007a94:	4649      	mov	r1, r9
 8007a96:	f7f8 fd87 	bl	80005a8 <__aeabi_dmul>
 8007a9a:	a33f      	add	r3, pc, #252	; (adr r3, 8007b98 <__ieee754_pow+0x3e0>)
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f7f8 fd82 	bl	80005a8 <__aeabi_dmul>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	4659      	mov	r1, fp
 8007aac:	f7f8 fbc4 	bl	8000238 <__aeabi_dsub>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	4689      	mov	r9, r1
 8007ab8:	4630      	mov	r0, r6
 8007aba:	4639      	mov	r1, r7
 8007abc:	f7f8 fbbe 	bl	800023c <__adddf3>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	4632      	mov	r2, r6
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f7f8 fbb5 	bl	8000238 <__aeabi_dsub>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4640      	mov	r0, r8
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f8 fbaf 	bl	8000238 <__aeabi_dsub>
 8007ada:	9b04      	ldr	r3, [sp, #16]
 8007adc:	9a06      	ldr	r2, [sp, #24]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	468b      	mov	fp, r1
 8007ae6:	f040 81e7 	bne.w	8007eb8 <__ieee754_pow+0x700>
 8007aea:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8007ba0 <__ieee754_pow+0x3e8>
 8007aee:	eeb0 8a47 	vmov.f32	s16, s14
 8007af2:	eef0 8a67 	vmov.f32	s17, s15
 8007af6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007afa:	2600      	movs	r6, #0
 8007afc:	4632      	mov	r2, r6
 8007afe:	463b      	mov	r3, r7
 8007b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b04:	f7f8 fb98 	bl	8000238 <__aeabi_dsub>
 8007b08:	4622      	mov	r2, r4
 8007b0a:	462b      	mov	r3, r5
 8007b0c:	f7f8 fd4c 	bl	80005a8 <__aeabi_dmul>
 8007b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b14:	4680      	mov	r8, r0
 8007b16:	4689      	mov	r9, r1
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4659      	mov	r1, fp
 8007b1c:	f7f8 fd44 	bl	80005a8 <__aeabi_dmul>
 8007b20:	4602      	mov	r2, r0
 8007b22:	460b      	mov	r3, r1
 8007b24:	4640      	mov	r0, r8
 8007b26:	4649      	mov	r1, r9
 8007b28:	f7f8 fb88 	bl	800023c <__adddf3>
 8007b2c:	4632      	mov	r2, r6
 8007b2e:	463b      	mov	r3, r7
 8007b30:	4680      	mov	r8, r0
 8007b32:	4689      	mov	r9, r1
 8007b34:	4620      	mov	r0, r4
 8007b36:	4629      	mov	r1, r5
 8007b38:	f7f8 fd36 	bl	80005a8 <__aeabi_dmul>
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4604      	mov	r4, r0
 8007b40:	460d      	mov	r5, r1
 8007b42:	4602      	mov	r2, r0
 8007b44:	4649      	mov	r1, r9
 8007b46:	4640      	mov	r0, r8
 8007b48:	f7f8 fb78 	bl	800023c <__adddf3>
 8007b4c:	4b19      	ldr	r3, [pc, #100]	; (8007bb4 <__ieee754_pow+0x3fc>)
 8007b4e:	4299      	cmp	r1, r3
 8007b50:	ec45 4b19 	vmov	d9, r4, r5
 8007b54:	4606      	mov	r6, r0
 8007b56:	460f      	mov	r7, r1
 8007b58:	468b      	mov	fp, r1
 8007b5a:	f340 82f1 	ble.w	8008140 <__ieee754_pow+0x988>
 8007b5e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007b62:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007b66:	4303      	orrs	r3, r0
 8007b68:	f000 81e4 	beq.w	8007f34 <__ieee754_pow+0x77c>
 8007b6c:	ec51 0b18 	vmov	r0, r1, d8
 8007b70:	2200      	movs	r2, #0
 8007b72:	2300      	movs	r3, #0
 8007b74:	f7f8 ff8a 	bl	8000a8c <__aeabi_dcmplt>
 8007b78:	3800      	subs	r0, #0
 8007b7a:	bf18      	it	ne
 8007b7c:	2001      	movne	r0, #1
 8007b7e:	e72b      	b.n	80079d8 <__ieee754_pow+0x220>
 8007b80:	60000000 	.word	0x60000000
 8007b84:	3ff71547 	.word	0x3ff71547
 8007b88:	f85ddf44 	.word	0xf85ddf44
 8007b8c:	3e54ae0b 	.word	0x3e54ae0b
 8007b90:	55555555 	.word	0x55555555
 8007b94:	3fd55555 	.word	0x3fd55555
 8007b98:	652b82fe 	.word	0x652b82fe
 8007b9c:	3ff71547 	.word	0x3ff71547
 8007ba0:	00000000 	.word	0x00000000
 8007ba4:	bff00000 	.word	0xbff00000
 8007ba8:	3ff00000 	.word	0x3ff00000
 8007bac:	3fd00000 	.word	0x3fd00000
 8007bb0:	3fe00000 	.word	0x3fe00000
 8007bb4:	408fffff 	.word	0x408fffff
 8007bb8:	4bd5      	ldr	r3, [pc, #852]	; (8007f10 <__ieee754_pow+0x758>)
 8007bba:	402b      	ands	r3, r5
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	b92b      	cbnz	r3, 8007bcc <__ieee754_pow+0x414>
 8007bc0:	4bd4      	ldr	r3, [pc, #848]	; (8007f14 <__ieee754_pow+0x75c>)
 8007bc2:	f7f8 fcf1 	bl	80005a8 <__aeabi_dmul>
 8007bc6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007bca:	460c      	mov	r4, r1
 8007bcc:	1523      	asrs	r3, r4, #20
 8007bce:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007bd2:	4413      	add	r3, r2
 8007bd4:	9305      	str	r3, [sp, #20]
 8007bd6:	4bd0      	ldr	r3, [pc, #832]	; (8007f18 <__ieee754_pow+0x760>)
 8007bd8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007bdc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007be0:	429c      	cmp	r4, r3
 8007be2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007be6:	dd08      	ble.n	8007bfa <__ieee754_pow+0x442>
 8007be8:	4bcc      	ldr	r3, [pc, #816]	; (8007f1c <__ieee754_pow+0x764>)
 8007bea:	429c      	cmp	r4, r3
 8007bec:	f340 8162 	ble.w	8007eb4 <__ieee754_pow+0x6fc>
 8007bf0:	9b05      	ldr	r3, [sp, #20]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	9305      	str	r3, [sp, #20]
 8007bf6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007bfa:	2400      	movs	r4, #0
 8007bfc:	00e3      	lsls	r3, r4, #3
 8007bfe:	9307      	str	r3, [sp, #28]
 8007c00:	4bc7      	ldr	r3, [pc, #796]	; (8007f20 <__ieee754_pow+0x768>)
 8007c02:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c06:	ed93 7b00 	vldr	d7, [r3]
 8007c0a:	4629      	mov	r1, r5
 8007c0c:	ec53 2b17 	vmov	r2, r3, d7
 8007c10:	eeb0 9a47 	vmov.f32	s18, s14
 8007c14:	eef0 9a67 	vmov.f32	s19, s15
 8007c18:	4682      	mov	sl, r0
 8007c1a:	f7f8 fb0d 	bl	8000238 <__aeabi_dsub>
 8007c1e:	4652      	mov	r2, sl
 8007c20:	4606      	mov	r6, r0
 8007c22:	460f      	mov	r7, r1
 8007c24:	462b      	mov	r3, r5
 8007c26:	ec51 0b19 	vmov	r0, r1, d9
 8007c2a:	f7f8 fb07 	bl	800023c <__adddf3>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	2000      	movs	r0, #0
 8007c34:	49bb      	ldr	r1, [pc, #748]	; (8007f24 <__ieee754_pow+0x76c>)
 8007c36:	f7f8 fde1 	bl	80007fc <__aeabi_ddiv>
 8007c3a:	ec41 0b1a 	vmov	d10, r0, r1
 8007c3e:	4602      	mov	r2, r0
 8007c40:	460b      	mov	r3, r1
 8007c42:	4630      	mov	r0, r6
 8007c44:	4639      	mov	r1, r7
 8007c46:	f7f8 fcaf 	bl	80005a8 <__aeabi_dmul>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c50:	9302      	str	r3, [sp, #8]
 8007c52:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007c56:	46ab      	mov	fp, r5
 8007c58:	106d      	asrs	r5, r5, #1
 8007c5a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007c5e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007c62:	ec41 0b18 	vmov	d8, r0, r1
 8007c66:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	4640      	mov	r0, r8
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4614      	mov	r4, r2
 8007c72:	461d      	mov	r5, r3
 8007c74:	f7f8 fc98 	bl	80005a8 <__aeabi_dmul>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 fada 	bl	8000238 <__aeabi_dsub>
 8007c84:	ec53 2b19 	vmov	r2, r3, d9
 8007c88:	4606      	mov	r6, r0
 8007c8a:	460f      	mov	r7, r1
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	4629      	mov	r1, r5
 8007c90:	f7f8 fad2 	bl	8000238 <__aeabi_dsub>
 8007c94:	4602      	mov	r2, r0
 8007c96:	460b      	mov	r3, r1
 8007c98:	4650      	mov	r0, sl
 8007c9a:	4659      	mov	r1, fp
 8007c9c:	f7f8 facc 	bl	8000238 <__aeabi_dsub>
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	464b      	mov	r3, r9
 8007ca4:	f7f8 fc80 	bl	80005a8 <__aeabi_dmul>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4630      	mov	r0, r6
 8007cae:	4639      	mov	r1, r7
 8007cb0:	f7f8 fac2 	bl	8000238 <__aeabi_dsub>
 8007cb4:	ec53 2b1a 	vmov	r2, r3, d10
 8007cb8:	f7f8 fc76 	bl	80005a8 <__aeabi_dmul>
 8007cbc:	ec53 2b18 	vmov	r2, r3, d8
 8007cc0:	ec41 0b19 	vmov	d9, r0, r1
 8007cc4:	ec51 0b18 	vmov	r0, r1, d8
 8007cc8:	f7f8 fc6e 	bl	80005a8 <__aeabi_dmul>
 8007ccc:	a37c      	add	r3, pc, #496	; (adr r3, 8007ec0 <__ieee754_pow+0x708>)
 8007cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	460d      	mov	r5, r1
 8007cd6:	f7f8 fc67 	bl	80005a8 <__aeabi_dmul>
 8007cda:	a37b      	add	r3, pc, #492	; (adr r3, 8007ec8 <__ieee754_pow+0x710>)
 8007cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce0:	f7f8 faac 	bl	800023c <__adddf3>
 8007ce4:	4622      	mov	r2, r4
 8007ce6:	462b      	mov	r3, r5
 8007ce8:	f7f8 fc5e 	bl	80005a8 <__aeabi_dmul>
 8007cec:	a378      	add	r3, pc, #480	; (adr r3, 8007ed0 <__ieee754_pow+0x718>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 faa3 	bl	800023c <__adddf3>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	f7f8 fc55 	bl	80005a8 <__aeabi_dmul>
 8007cfe:	a376      	add	r3, pc, #472	; (adr r3, 8007ed8 <__ieee754_pow+0x720>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fa9a 	bl	800023c <__adddf3>
 8007d08:	4622      	mov	r2, r4
 8007d0a:	462b      	mov	r3, r5
 8007d0c:	f7f8 fc4c 	bl	80005a8 <__aeabi_dmul>
 8007d10:	a373      	add	r3, pc, #460	; (adr r3, 8007ee0 <__ieee754_pow+0x728>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fa91 	bl	800023c <__adddf3>
 8007d1a:	4622      	mov	r2, r4
 8007d1c:	462b      	mov	r3, r5
 8007d1e:	f7f8 fc43 	bl	80005a8 <__aeabi_dmul>
 8007d22:	a371      	add	r3, pc, #452	; (adr r3, 8007ee8 <__ieee754_pow+0x730>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fa88 	bl	800023c <__adddf3>
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	4606      	mov	r6, r0
 8007d30:	460f      	mov	r7, r1
 8007d32:	462b      	mov	r3, r5
 8007d34:	4620      	mov	r0, r4
 8007d36:	4629      	mov	r1, r5
 8007d38:	f7f8 fc36 	bl	80005a8 <__aeabi_dmul>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	4630      	mov	r0, r6
 8007d42:	4639      	mov	r1, r7
 8007d44:	f7f8 fc30 	bl	80005a8 <__aeabi_dmul>
 8007d48:	4642      	mov	r2, r8
 8007d4a:	4604      	mov	r4, r0
 8007d4c:	460d      	mov	r5, r1
 8007d4e:	464b      	mov	r3, r9
 8007d50:	ec51 0b18 	vmov	r0, r1, d8
 8007d54:	f7f8 fa72 	bl	800023c <__adddf3>
 8007d58:	ec53 2b19 	vmov	r2, r3, d9
 8007d5c:	f7f8 fc24 	bl	80005a8 <__aeabi_dmul>
 8007d60:	4622      	mov	r2, r4
 8007d62:	462b      	mov	r3, r5
 8007d64:	f7f8 fa6a 	bl	800023c <__adddf3>
 8007d68:	4642      	mov	r2, r8
 8007d6a:	4682      	mov	sl, r0
 8007d6c:	468b      	mov	fp, r1
 8007d6e:	464b      	mov	r3, r9
 8007d70:	4640      	mov	r0, r8
 8007d72:	4649      	mov	r1, r9
 8007d74:	f7f8 fc18 	bl	80005a8 <__aeabi_dmul>
 8007d78:	4b6b      	ldr	r3, [pc, #428]	; (8007f28 <__ieee754_pow+0x770>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	460f      	mov	r7, r1
 8007d80:	f7f8 fa5c 	bl	800023c <__adddf3>
 8007d84:	4652      	mov	r2, sl
 8007d86:	465b      	mov	r3, fp
 8007d88:	f7f8 fa58 	bl	800023c <__adddf3>
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	460d      	mov	r5, r1
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fc05 	bl	80005a8 <__aeabi_dmul>
 8007d9e:	4b62      	ldr	r3, [pc, #392]	; (8007f28 <__ieee754_pow+0x770>)
 8007da0:	4680      	mov	r8, r0
 8007da2:	4689      	mov	r9, r1
 8007da4:	2200      	movs	r2, #0
 8007da6:	4620      	mov	r0, r4
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fa45 	bl	8000238 <__aeabi_dsub>
 8007dae:	4632      	mov	r2, r6
 8007db0:	463b      	mov	r3, r7
 8007db2:	f7f8 fa41 	bl	8000238 <__aeabi_dsub>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	4650      	mov	r0, sl
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	f7f8 fa3b 	bl	8000238 <__aeabi_dsub>
 8007dc2:	ec53 2b18 	vmov	r2, r3, d8
 8007dc6:	f7f8 fbef 	bl	80005a8 <__aeabi_dmul>
 8007dca:	4622      	mov	r2, r4
 8007dcc:	4606      	mov	r6, r0
 8007dce:	460f      	mov	r7, r1
 8007dd0:	462b      	mov	r3, r5
 8007dd2:	ec51 0b19 	vmov	r0, r1, d9
 8007dd6:	f7f8 fbe7 	bl	80005a8 <__aeabi_dmul>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4630      	mov	r0, r6
 8007de0:	4639      	mov	r1, r7
 8007de2:	f7f8 fa2b 	bl	800023c <__adddf3>
 8007de6:	4606      	mov	r6, r0
 8007de8:	460f      	mov	r7, r1
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 fa23 	bl	800023c <__adddf3>
 8007df6:	a33e      	add	r3, pc, #248	; (adr r3, 8007ef0 <__ieee754_pow+0x738>)
 8007df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	4604      	mov	r4, r0
 8007e00:	460d      	mov	r5, r1
 8007e02:	f7f8 fbd1 	bl	80005a8 <__aeabi_dmul>
 8007e06:	4642      	mov	r2, r8
 8007e08:	ec41 0b18 	vmov	d8, r0, r1
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	4620      	mov	r0, r4
 8007e10:	4629      	mov	r1, r5
 8007e12:	f7f8 fa11 	bl	8000238 <__aeabi_dsub>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4630      	mov	r0, r6
 8007e1c:	4639      	mov	r1, r7
 8007e1e:	f7f8 fa0b 	bl	8000238 <__aeabi_dsub>
 8007e22:	a335      	add	r3, pc, #212	; (adr r3, 8007ef8 <__ieee754_pow+0x740>)
 8007e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e28:	f7f8 fbbe 	bl	80005a8 <__aeabi_dmul>
 8007e2c:	a334      	add	r3, pc, #208	; (adr r3, 8007f00 <__ieee754_pow+0x748>)
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	4606      	mov	r6, r0
 8007e34:	460f      	mov	r7, r1
 8007e36:	4620      	mov	r0, r4
 8007e38:	4629      	mov	r1, r5
 8007e3a:	f7f8 fbb5 	bl	80005a8 <__aeabi_dmul>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	460b      	mov	r3, r1
 8007e42:	4630      	mov	r0, r6
 8007e44:	4639      	mov	r1, r7
 8007e46:	f7f8 f9f9 	bl	800023c <__adddf3>
 8007e4a:	9a07      	ldr	r2, [sp, #28]
 8007e4c:	4b37      	ldr	r3, [pc, #220]	; (8007f2c <__ieee754_pow+0x774>)
 8007e4e:	4413      	add	r3, r2
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	f7f8 f9f2 	bl	800023c <__adddf3>
 8007e58:	4682      	mov	sl, r0
 8007e5a:	9805      	ldr	r0, [sp, #20]
 8007e5c:	468b      	mov	fp, r1
 8007e5e:	f7f8 fb39 	bl	80004d4 <__aeabi_i2d>
 8007e62:	9a07      	ldr	r2, [sp, #28]
 8007e64:	4b32      	ldr	r3, [pc, #200]	; (8007f30 <__ieee754_pow+0x778>)
 8007e66:	4413      	add	r3, r2
 8007e68:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e6c:	4606      	mov	r6, r0
 8007e6e:	460f      	mov	r7, r1
 8007e70:	4652      	mov	r2, sl
 8007e72:	465b      	mov	r3, fp
 8007e74:	ec51 0b18 	vmov	r0, r1, d8
 8007e78:	f7f8 f9e0 	bl	800023c <__adddf3>
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	464b      	mov	r3, r9
 8007e80:	f7f8 f9dc 	bl	800023c <__adddf3>
 8007e84:	4632      	mov	r2, r6
 8007e86:	463b      	mov	r3, r7
 8007e88:	f7f8 f9d8 	bl	800023c <__adddf3>
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	4632      	mov	r2, r6
 8007e90:	463b      	mov	r3, r7
 8007e92:	4604      	mov	r4, r0
 8007e94:	460d      	mov	r5, r1
 8007e96:	f7f8 f9cf 	bl	8000238 <__aeabi_dsub>
 8007e9a:	4642      	mov	r2, r8
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	f7f8 f9cb 	bl	8000238 <__aeabi_dsub>
 8007ea2:	ec53 2b18 	vmov	r2, r3, d8
 8007ea6:	f7f8 f9c7 	bl	8000238 <__aeabi_dsub>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4650      	mov	r0, sl
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	e610      	b.n	8007ad6 <__ieee754_pow+0x31e>
 8007eb4:	2401      	movs	r4, #1
 8007eb6:	e6a1      	b.n	8007bfc <__ieee754_pow+0x444>
 8007eb8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8007f08 <__ieee754_pow+0x750>
 8007ebc:	e617      	b.n	8007aee <__ieee754_pow+0x336>
 8007ebe:	bf00      	nop
 8007ec0:	4a454eef 	.word	0x4a454eef
 8007ec4:	3fca7e28 	.word	0x3fca7e28
 8007ec8:	93c9db65 	.word	0x93c9db65
 8007ecc:	3fcd864a 	.word	0x3fcd864a
 8007ed0:	a91d4101 	.word	0xa91d4101
 8007ed4:	3fd17460 	.word	0x3fd17460
 8007ed8:	518f264d 	.word	0x518f264d
 8007edc:	3fd55555 	.word	0x3fd55555
 8007ee0:	db6fabff 	.word	0xdb6fabff
 8007ee4:	3fdb6db6 	.word	0x3fdb6db6
 8007ee8:	33333303 	.word	0x33333303
 8007eec:	3fe33333 	.word	0x3fe33333
 8007ef0:	e0000000 	.word	0xe0000000
 8007ef4:	3feec709 	.word	0x3feec709
 8007ef8:	dc3a03fd 	.word	0xdc3a03fd
 8007efc:	3feec709 	.word	0x3feec709
 8007f00:	145b01f5 	.word	0x145b01f5
 8007f04:	be3e2fe0 	.word	0xbe3e2fe0
 8007f08:	00000000 	.word	0x00000000
 8007f0c:	3ff00000 	.word	0x3ff00000
 8007f10:	7ff00000 	.word	0x7ff00000
 8007f14:	43400000 	.word	0x43400000
 8007f18:	0003988e 	.word	0x0003988e
 8007f1c:	000bb679 	.word	0x000bb679
 8007f20:	08009370 	.word	0x08009370
 8007f24:	3ff00000 	.word	0x3ff00000
 8007f28:	40080000 	.word	0x40080000
 8007f2c:	08009390 	.word	0x08009390
 8007f30:	08009380 	.word	0x08009380
 8007f34:	a3b5      	add	r3, pc, #724	; (adr r3, 800820c <__ieee754_pow+0xa54>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	4640      	mov	r0, r8
 8007f3c:	4649      	mov	r1, r9
 8007f3e:	f7f8 f97d 	bl	800023c <__adddf3>
 8007f42:	4622      	mov	r2, r4
 8007f44:	ec41 0b1a 	vmov	d10, r0, r1
 8007f48:	462b      	mov	r3, r5
 8007f4a:	4630      	mov	r0, r6
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 f973 	bl	8000238 <__aeabi_dsub>
 8007f52:	4602      	mov	r2, r0
 8007f54:	460b      	mov	r3, r1
 8007f56:	ec51 0b1a 	vmov	r0, r1, d10
 8007f5a:	f7f8 fdb5 	bl	8000ac8 <__aeabi_dcmpgt>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f47f ae04 	bne.w	8007b6c <__ieee754_pow+0x3b4>
 8007f64:	4aa4      	ldr	r2, [pc, #656]	; (80081f8 <__ieee754_pow+0xa40>)
 8007f66:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	f340 8108 	ble.w	8008180 <__ieee754_pow+0x9c8>
 8007f70:	151b      	asrs	r3, r3, #20
 8007f72:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007f76:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007f7a:	fa4a f303 	asr.w	r3, sl, r3
 8007f7e:	445b      	add	r3, fp
 8007f80:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007f84:	4e9d      	ldr	r6, [pc, #628]	; (80081fc <__ieee754_pow+0xa44>)
 8007f86:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007f8a:	4116      	asrs	r6, r2
 8007f8c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007f90:	2000      	movs	r0, #0
 8007f92:	ea23 0106 	bic.w	r1, r3, r6
 8007f96:	f1c2 0214 	rsb	r2, r2, #20
 8007f9a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007f9e:	fa4a fa02 	asr.w	sl, sl, r2
 8007fa2:	f1bb 0f00 	cmp.w	fp, #0
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	460b      	mov	r3, r1
 8007faa:	4620      	mov	r0, r4
 8007fac:	4629      	mov	r1, r5
 8007fae:	bfb8      	it	lt
 8007fb0:	f1ca 0a00 	rsblt	sl, sl, #0
 8007fb4:	f7f8 f940 	bl	8000238 <__aeabi_dsub>
 8007fb8:	ec41 0b19 	vmov	d9, r0, r1
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	ec51 0b19 	vmov	r0, r1, d9
 8007fc4:	f7f8 f93a 	bl	800023c <__adddf3>
 8007fc8:	a37b      	add	r3, pc, #492	; (adr r3, 80081b8 <__ieee754_pow+0xa00>)
 8007fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fce:	2000      	movs	r0, #0
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	460d      	mov	r5, r1
 8007fd4:	f7f8 fae8 	bl	80005a8 <__aeabi_dmul>
 8007fd8:	ec53 2b19 	vmov	r2, r3, d9
 8007fdc:	4606      	mov	r6, r0
 8007fde:	460f      	mov	r7, r1
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	f7f8 f928 	bl	8000238 <__aeabi_dsub>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	460b      	mov	r3, r1
 8007fec:	4640      	mov	r0, r8
 8007fee:	4649      	mov	r1, r9
 8007ff0:	f7f8 f922 	bl	8000238 <__aeabi_dsub>
 8007ff4:	a372      	add	r3, pc, #456	; (adr r3, 80081c0 <__ieee754_pow+0xa08>)
 8007ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ffa:	f7f8 fad5 	bl	80005a8 <__aeabi_dmul>
 8007ffe:	a372      	add	r3, pc, #456	; (adr r3, 80081c8 <__ieee754_pow+0xa10>)
 8008000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008004:	4680      	mov	r8, r0
 8008006:	4689      	mov	r9, r1
 8008008:	4620      	mov	r0, r4
 800800a:	4629      	mov	r1, r5
 800800c:	f7f8 facc 	bl	80005a8 <__aeabi_dmul>
 8008010:	4602      	mov	r2, r0
 8008012:	460b      	mov	r3, r1
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	f7f8 f910 	bl	800023c <__adddf3>
 800801c:	4604      	mov	r4, r0
 800801e:	460d      	mov	r5, r1
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	4630      	mov	r0, r6
 8008026:	4639      	mov	r1, r7
 8008028:	f7f8 f908 	bl	800023c <__adddf3>
 800802c:	4632      	mov	r2, r6
 800802e:	463b      	mov	r3, r7
 8008030:	4680      	mov	r8, r0
 8008032:	4689      	mov	r9, r1
 8008034:	f7f8 f900 	bl	8000238 <__aeabi_dsub>
 8008038:	4602      	mov	r2, r0
 800803a:	460b      	mov	r3, r1
 800803c:	4620      	mov	r0, r4
 800803e:	4629      	mov	r1, r5
 8008040:	f7f8 f8fa 	bl	8000238 <__aeabi_dsub>
 8008044:	4642      	mov	r2, r8
 8008046:	4606      	mov	r6, r0
 8008048:	460f      	mov	r7, r1
 800804a:	464b      	mov	r3, r9
 800804c:	4640      	mov	r0, r8
 800804e:	4649      	mov	r1, r9
 8008050:	f7f8 faaa 	bl	80005a8 <__aeabi_dmul>
 8008054:	a35e      	add	r3, pc, #376	; (adr r3, 80081d0 <__ieee754_pow+0xa18>)
 8008056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800805a:	4604      	mov	r4, r0
 800805c:	460d      	mov	r5, r1
 800805e:	f7f8 faa3 	bl	80005a8 <__aeabi_dmul>
 8008062:	a35d      	add	r3, pc, #372	; (adr r3, 80081d8 <__ieee754_pow+0xa20>)
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	f7f8 f8e6 	bl	8000238 <__aeabi_dsub>
 800806c:	4622      	mov	r2, r4
 800806e:	462b      	mov	r3, r5
 8008070:	f7f8 fa9a 	bl	80005a8 <__aeabi_dmul>
 8008074:	a35a      	add	r3, pc, #360	; (adr r3, 80081e0 <__ieee754_pow+0xa28>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f7f8 f8df 	bl	800023c <__adddf3>
 800807e:	4622      	mov	r2, r4
 8008080:	462b      	mov	r3, r5
 8008082:	f7f8 fa91 	bl	80005a8 <__aeabi_dmul>
 8008086:	a358      	add	r3, pc, #352	; (adr r3, 80081e8 <__ieee754_pow+0xa30>)
 8008088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808c:	f7f8 f8d4 	bl	8000238 <__aeabi_dsub>
 8008090:	4622      	mov	r2, r4
 8008092:	462b      	mov	r3, r5
 8008094:	f7f8 fa88 	bl	80005a8 <__aeabi_dmul>
 8008098:	a355      	add	r3, pc, #340	; (adr r3, 80081f0 <__ieee754_pow+0xa38>)
 800809a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809e:	f7f8 f8cd 	bl	800023c <__adddf3>
 80080a2:	4622      	mov	r2, r4
 80080a4:	462b      	mov	r3, r5
 80080a6:	f7f8 fa7f 	bl	80005a8 <__aeabi_dmul>
 80080aa:	4602      	mov	r2, r0
 80080ac:	460b      	mov	r3, r1
 80080ae:	4640      	mov	r0, r8
 80080b0:	4649      	mov	r1, r9
 80080b2:	f7f8 f8c1 	bl	8000238 <__aeabi_dsub>
 80080b6:	4604      	mov	r4, r0
 80080b8:	460d      	mov	r5, r1
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4640      	mov	r0, r8
 80080c0:	4649      	mov	r1, r9
 80080c2:	f7f8 fa71 	bl	80005a8 <__aeabi_dmul>
 80080c6:	2200      	movs	r2, #0
 80080c8:	ec41 0b19 	vmov	d9, r0, r1
 80080cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080d0:	4620      	mov	r0, r4
 80080d2:	4629      	mov	r1, r5
 80080d4:	f7f8 f8b0 	bl	8000238 <__aeabi_dsub>
 80080d8:	4602      	mov	r2, r0
 80080da:	460b      	mov	r3, r1
 80080dc:	ec51 0b19 	vmov	r0, r1, d9
 80080e0:	f7f8 fb8c 	bl	80007fc <__aeabi_ddiv>
 80080e4:	4632      	mov	r2, r6
 80080e6:	4604      	mov	r4, r0
 80080e8:	460d      	mov	r5, r1
 80080ea:	463b      	mov	r3, r7
 80080ec:	4640      	mov	r0, r8
 80080ee:	4649      	mov	r1, r9
 80080f0:	f7f8 fa5a 	bl	80005a8 <__aeabi_dmul>
 80080f4:	4632      	mov	r2, r6
 80080f6:	463b      	mov	r3, r7
 80080f8:	f7f8 f8a0 	bl	800023c <__adddf3>
 80080fc:	4602      	mov	r2, r0
 80080fe:	460b      	mov	r3, r1
 8008100:	4620      	mov	r0, r4
 8008102:	4629      	mov	r1, r5
 8008104:	f7f8 f898 	bl	8000238 <__aeabi_dsub>
 8008108:	4642      	mov	r2, r8
 800810a:	464b      	mov	r3, r9
 800810c:	f7f8 f894 	bl	8000238 <__aeabi_dsub>
 8008110:	460b      	mov	r3, r1
 8008112:	4602      	mov	r2, r0
 8008114:	493a      	ldr	r1, [pc, #232]	; (8008200 <__ieee754_pow+0xa48>)
 8008116:	2000      	movs	r0, #0
 8008118:	f7f8 f88e 	bl	8000238 <__aeabi_dsub>
 800811c:	ec41 0b10 	vmov	d0, r0, r1
 8008120:	ee10 3a90 	vmov	r3, s1
 8008124:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812c:	da2b      	bge.n	8008186 <__ieee754_pow+0x9ce>
 800812e:	4650      	mov	r0, sl
 8008130:	f000 f966 	bl	8008400 <scalbn>
 8008134:	ec51 0b10 	vmov	r0, r1, d0
 8008138:	ec53 2b18 	vmov	r2, r3, d8
 800813c:	f7ff bbed 	b.w	800791a <__ieee754_pow+0x162>
 8008140:	4b30      	ldr	r3, [pc, #192]	; (8008204 <__ieee754_pow+0xa4c>)
 8008142:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008146:	429e      	cmp	r6, r3
 8008148:	f77f af0c 	ble.w	8007f64 <__ieee754_pow+0x7ac>
 800814c:	4b2e      	ldr	r3, [pc, #184]	; (8008208 <__ieee754_pow+0xa50>)
 800814e:	440b      	add	r3, r1
 8008150:	4303      	orrs	r3, r0
 8008152:	d009      	beq.n	8008168 <__ieee754_pow+0x9b0>
 8008154:	ec51 0b18 	vmov	r0, r1, d8
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	f7f8 fc96 	bl	8000a8c <__aeabi_dcmplt>
 8008160:	3800      	subs	r0, #0
 8008162:	bf18      	it	ne
 8008164:	2001      	movne	r0, #1
 8008166:	e447      	b.n	80079f8 <__ieee754_pow+0x240>
 8008168:	4622      	mov	r2, r4
 800816a:	462b      	mov	r3, r5
 800816c:	f7f8 f864 	bl	8000238 <__aeabi_dsub>
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	f7f8 fc9e 	bl	8000ab4 <__aeabi_dcmpge>
 8008178:	2800      	cmp	r0, #0
 800817a:	f43f aef3 	beq.w	8007f64 <__ieee754_pow+0x7ac>
 800817e:	e7e9      	b.n	8008154 <__ieee754_pow+0x99c>
 8008180:	f04f 0a00 	mov.w	sl, #0
 8008184:	e71a      	b.n	8007fbc <__ieee754_pow+0x804>
 8008186:	ec51 0b10 	vmov	r0, r1, d0
 800818a:	4619      	mov	r1, r3
 800818c:	e7d4      	b.n	8008138 <__ieee754_pow+0x980>
 800818e:	491c      	ldr	r1, [pc, #112]	; (8008200 <__ieee754_pow+0xa48>)
 8008190:	2000      	movs	r0, #0
 8008192:	f7ff bb30 	b.w	80077f6 <__ieee754_pow+0x3e>
 8008196:	2000      	movs	r0, #0
 8008198:	2100      	movs	r1, #0
 800819a:	f7ff bb2c 	b.w	80077f6 <__ieee754_pow+0x3e>
 800819e:	4630      	mov	r0, r6
 80081a0:	4639      	mov	r1, r7
 80081a2:	f7ff bb28 	b.w	80077f6 <__ieee754_pow+0x3e>
 80081a6:	9204      	str	r2, [sp, #16]
 80081a8:	f7ff bb7a 	b.w	80078a0 <__ieee754_pow+0xe8>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f7ff bb64 	b.w	800787a <__ieee754_pow+0xc2>
 80081b2:	bf00      	nop
 80081b4:	f3af 8000 	nop.w
 80081b8:	00000000 	.word	0x00000000
 80081bc:	3fe62e43 	.word	0x3fe62e43
 80081c0:	fefa39ef 	.word	0xfefa39ef
 80081c4:	3fe62e42 	.word	0x3fe62e42
 80081c8:	0ca86c39 	.word	0x0ca86c39
 80081cc:	be205c61 	.word	0xbe205c61
 80081d0:	72bea4d0 	.word	0x72bea4d0
 80081d4:	3e663769 	.word	0x3e663769
 80081d8:	c5d26bf1 	.word	0xc5d26bf1
 80081dc:	3ebbbd41 	.word	0x3ebbbd41
 80081e0:	af25de2c 	.word	0xaf25de2c
 80081e4:	3f11566a 	.word	0x3f11566a
 80081e8:	16bebd93 	.word	0x16bebd93
 80081ec:	3f66c16c 	.word	0x3f66c16c
 80081f0:	5555553e 	.word	0x5555553e
 80081f4:	3fc55555 	.word	0x3fc55555
 80081f8:	3fe00000 	.word	0x3fe00000
 80081fc:	000fffff 	.word	0x000fffff
 8008200:	3ff00000 	.word	0x3ff00000
 8008204:	4090cbff 	.word	0x4090cbff
 8008208:	3f6f3400 	.word	0x3f6f3400
 800820c:	652b82fe 	.word	0x652b82fe
 8008210:	3c971547 	.word	0x3c971547

08008214 <__ieee754_sqrt>:
 8008214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008218:	ec55 4b10 	vmov	r4, r5, d0
 800821c:	4e55      	ldr	r6, [pc, #340]	; (8008374 <__ieee754_sqrt+0x160>)
 800821e:	43ae      	bics	r6, r5
 8008220:	ee10 0a10 	vmov	r0, s0
 8008224:	ee10 3a10 	vmov	r3, s0
 8008228:	462a      	mov	r2, r5
 800822a:	4629      	mov	r1, r5
 800822c:	d110      	bne.n	8008250 <__ieee754_sqrt+0x3c>
 800822e:	ee10 2a10 	vmov	r2, s0
 8008232:	462b      	mov	r3, r5
 8008234:	f7f8 f9b8 	bl	80005a8 <__aeabi_dmul>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4620      	mov	r0, r4
 800823e:	4629      	mov	r1, r5
 8008240:	f7f7 fffc 	bl	800023c <__adddf3>
 8008244:	4604      	mov	r4, r0
 8008246:	460d      	mov	r5, r1
 8008248:	ec45 4b10 	vmov	d0, r4, r5
 800824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008250:	2d00      	cmp	r5, #0
 8008252:	dc10      	bgt.n	8008276 <__ieee754_sqrt+0x62>
 8008254:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008258:	4330      	orrs	r0, r6
 800825a:	d0f5      	beq.n	8008248 <__ieee754_sqrt+0x34>
 800825c:	b15d      	cbz	r5, 8008276 <__ieee754_sqrt+0x62>
 800825e:	ee10 2a10 	vmov	r2, s0
 8008262:	462b      	mov	r3, r5
 8008264:	ee10 0a10 	vmov	r0, s0
 8008268:	f7f7 ffe6 	bl	8000238 <__aeabi_dsub>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	f7f8 fac4 	bl	80007fc <__aeabi_ddiv>
 8008274:	e7e6      	b.n	8008244 <__ieee754_sqrt+0x30>
 8008276:	1512      	asrs	r2, r2, #20
 8008278:	d074      	beq.n	8008364 <__ieee754_sqrt+0x150>
 800827a:	07d4      	lsls	r4, r2, #31
 800827c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008280:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008288:	bf5e      	ittt	pl
 800828a:	0fda      	lsrpl	r2, r3, #31
 800828c:	005b      	lslpl	r3, r3, #1
 800828e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008292:	2400      	movs	r4, #0
 8008294:	0fda      	lsrs	r2, r3, #31
 8008296:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800829a:	107f      	asrs	r7, r7, #1
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	2516      	movs	r5, #22
 80082a0:	4620      	mov	r0, r4
 80082a2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80082a6:	1886      	adds	r6, r0, r2
 80082a8:	428e      	cmp	r6, r1
 80082aa:	bfde      	ittt	le
 80082ac:	1b89      	suble	r1, r1, r6
 80082ae:	18b0      	addle	r0, r6, r2
 80082b0:	18a4      	addle	r4, r4, r2
 80082b2:	0049      	lsls	r1, r1, #1
 80082b4:	3d01      	subs	r5, #1
 80082b6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80082ba:	ea4f 0252 	mov.w	r2, r2, lsr #1
 80082be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80082c2:	d1f0      	bne.n	80082a6 <__ieee754_sqrt+0x92>
 80082c4:	462a      	mov	r2, r5
 80082c6:	f04f 0e20 	mov.w	lr, #32
 80082ca:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80082ce:	4281      	cmp	r1, r0
 80082d0:	eb06 0c05 	add.w	ip, r6, r5
 80082d4:	dc02      	bgt.n	80082dc <__ieee754_sqrt+0xc8>
 80082d6:	d113      	bne.n	8008300 <__ieee754_sqrt+0xec>
 80082d8:	459c      	cmp	ip, r3
 80082da:	d811      	bhi.n	8008300 <__ieee754_sqrt+0xec>
 80082dc:	f1bc 0f00 	cmp.w	ip, #0
 80082e0:	eb0c 0506 	add.w	r5, ip, r6
 80082e4:	da43      	bge.n	800836e <__ieee754_sqrt+0x15a>
 80082e6:	2d00      	cmp	r5, #0
 80082e8:	db41      	blt.n	800836e <__ieee754_sqrt+0x15a>
 80082ea:	f100 0801 	add.w	r8, r0, #1
 80082ee:	1a09      	subs	r1, r1, r0
 80082f0:	459c      	cmp	ip, r3
 80082f2:	bf88      	it	hi
 80082f4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 80082f8:	eba3 030c 	sub.w	r3, r3, ip
 80082fc:	4432      	add	r2, r6
 80082fe:	4640      	mov	r0, r8
 8008300:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008304:	f1be 0e01 	subs.w	lr, lr, #1
 8008308:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800830c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008310:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008314:	d1db      	bne.n	80082ce <__ieee754_sqrt+0xba>
 8008316:	430b      	orrs	r3, r1
 8008318:	d006      	beq.n	8008328 <__ieee754_sqrt+0x114>
 800831a:	1c50      	adds	r0, r2, #1
 800831c:	bf13      	iteet	ne
 800831e:	3201      	addne	r2, #1
 8008320:	3401      	addeq	r4, #1
 8008322:	4672      	moveq	r2, lr
 8008324:	f022 0201 	bicne.w	r2, r2, #1
 8008328:	1063      	asrs	r3, r4, #1
 800832a:	0852      	lsrs	r2, r2, #1
 800832c:	07e1      	lsls	r1, r4, #31
 800832e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008332:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008336:	bf48      	it	mi
 8008338:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800833c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008340:	4614      	mov	r4, r2
 8008342:	e781      	b.n	8008248 <__ieee754_sqrt+0x34>
 8008344:	0ad9      	lsrs	r1, r3, #11
 8008346:	3815      	subs	r0, #21
 8008348:	055b      	lsls	r3, r3, #21
 800834a:	2900      	cmp	r1, #0
 800834c:	d0fa      	beq.n	8008344 <__ieee754_sqrt+0x130>
 800834e:	02cd      	lsls	r5, r1, #11
 8008350:	d50a      	bpl.n	8008368 <__ieee754_sqrt+0x154>
 8008352:	f1c2 0420 	rsb	r4, r2, #32
 8008356:	fa23 f404 	lsr.w	r4, r3, r4
 800835a:	1e55      	subs	r5, r2, #1
 800835c:	4093      	lsls	r3, r2
 800835e:	4321      	orrs	r1, r4
 8008360:	1b42      	subs	r2, r0, r5
 8008362:	e78a      	b.n	800827a <__ieee754_sqrt+0x66>
 8008364:	4610      	mov	r0, r2
 8008366:	e7f0      	b.n	800834a <__ieee754_sqrt+0x136>
 8008368:	0049      	lsls	r1, r1, #1
 800836a:	3201      	adds	r2, #1
 800836c:	e7ef      	b.n	800834e <__ieee754_sqrt+0x13a>
 800836e:	4680      	mov	r8, r0
 8008370:	e7bd      	b.n	80082ee <__ieee754_sqrt+0xda>
 8008372:	bf00      	nop
 8008374:	7ff00000 	.word	0x7ff00000

08008378 <with_errno>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	4604      	mov	r4, r0
 800837c:	460d      	mov	r5, r1
 800837e:	4616      	mov	r6, r2
 8008380:	f7fd fb62 	bl	8005a48 <__errno>
 8008384:	4629      	mov	r1, r5
 8008386:	6006      	str	r6, [r0, #0]
 8008388:	4620      	mov	r0, r4
 800838a:	bd70      	pop	{r4, r5, r6, pc}

0800838c <xflow>:
 800838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800838e:	4614      	mov	r4, r2
 8008390:	461d      	mov	r5, r3
 8008392:	b108      	cbz	r0, 8008398 <xflow+0xc>
 8008394:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008398:	e9cd 2300 	strd	r2, r3, [sp]
 800839c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083a0:	4620      	mov	r0, r4
 80083a2:	4629      	mov	r1, r5
 80083a4:	f7f8 f900 	bl	80005a8 <__aeabi_dmul>
 80083a8:	2222      	movs	r2, #34	; 0x22
 80083aa:	b003      	add	sp, #12
 80083ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083b0:	f7ff bfe2 	b.w	8008378 <with_errno>

080083b4 <__math_uflow>:
 80083b4:	b508      	push	{r3, lr}
 80083b6:	2200      	movs	r2, #0
 80083b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083bc:	f7ff ffe6 	bl	800838c <xflow>
 80083c0:	ec41 0b10 	vmov	d0, r0, r1
 80083c4:	bd08      	pop	{r3, pc}

080083c6 <__math_oflow>:
 80083c6:	b508      	push	{r3, lr}
 80083c8:	2200      	movs	r2, #0
 80083ca:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80083ce:	f7ff ffdd 	bl	800838c <xflow>
 80083d2:	ec41 0b10 	vmov	d0, r0, r1
 80083d6:	bd08      	pop	{r3, pc}

080083d8 <fabs>:
 80083d8:	ec51 0b10 	vmov	r0, r1, d0
 80083dc:	ee10 2a10 	vmov	r2, s0
 80083e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80083e4:	ec43 2b10 	vmov	d0, r2, r3
 80083e8:	4770      	bx	lr

080083ea <finite>:
 80083ea:	b082      	sub	sp, #8
 80083ec:	ed8d 0b00 	vstr	d0, [sp]
 80083f0:	9801      	ldr	r0, [sp, #4]
 80083f2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80083f6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80083fa:	0fc0      	lsrs	r0, r0, #31
 80083fc:	b002      	add	sp, #8
 80083fe:	4770      	bx	lr

08008400 <scalbn>:
 8008400:	b570      	push	{r4, r5, r6, lr}
 8008402:	ec55 4b10 	vmov	r4, r5, d0
 8008406:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800840a:	4606      	mov	r6, r0
 800840c:	462b      	mov	r3, r5
 800840e:	b99a      	cbnz	r2, 8008438 <scalbn+0x38>
 8008410:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008414:	4323      	orrs	r3, r4
 8008416:	d036      	beq.n	8008486 <scalbn+0x86>
 8008418:	4b39      	ldr	r3, [pc, #228]	; (8008500 <scalbn+0x100>)
 800841a:	4629      	mov	r1, r5
 800841c:	ee10 0a10 	vmov	r0, s0
 8008420:	2200      	movs	r2, #0
 8008422:	f7f8 f8c1 	bl	80005a8 <__aeabi_dmul>
 8008426:	4b37      	ldr	r3, [pc, #220]	; (8008504 <scalbn+0x104>)
 8008428:	429e      	cmp	r6, r3
 800842a:	4604      	mov	r4, r0
 800842c:	460d      	mov	r5, r1
 800842e:	da10      	bge.n	8008452 <scalbn+0x52>
 8008430:	a32b      	add	r3, pc, #172	; (adr r3, 80084e0 <scalbn+0xe0>)
 8008432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008436:	e03a      	b.n	80084ae <scalbn+0xae>
 8008438:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800843c:	428a      	cmp	r2, r1
 800843e:	d10c      	bne.n	800845a <scalbn+0x5a>
 8008440:	ee10 2a10 	vmov	r2, s0
 8008444:	4620      	mov	r0, r4
 8008446:	4629      	mov	r1, r5
 8008448:	f7f7 fef8 	bl	800023c <__adddf3>
 800844c:	4604      	mov	r4, r0
 800844e:	460d      	mov	r5, r1
 8008450:	e019      	b.n	8008486 <scalbn+0x86>
 8008452:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008456:	460b      	mov	r3, r1
 8008458:	3a36      	subs	r2, #54	; 0x36
 800845a:	4432      	add	r2, r6
 800845c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008460:	428a      	cmp	r2, r1
 8008462:	dd08      	ble.n	8008476 <scalbn+0x76>
 8008464:	2d00      	cmp	r5, #0
 8008466:	a120      	add	r1, pc, #128	; (adr r1, 80084e8 <scalbn+0xe8>)
 8008468:	e9d1 0100 	ldrd	r0, r1, [r1]
 800846c:	da1c      	bge.n	80084a8 <scalbn+0xa8>
 800846e:	a120      	add	r1, pc, #128	; (adr r1, 80084f0 <scalbn+0xf0>)
 8008470:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008474:	e018      	b.n	80084a8 <scalbn+0xa8>
 8008476:	2a00      	cmp	r2, #0
 8008478:	dd08      	ble.n	800848c <scalbn+0x8c>
 800847a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800847e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008482:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008486:	ec45 4b10 	vmov	d0, r4, r5
 800848a:	bd70      	pop	{r4, r5, r6, pc}
 800848c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008490:	da19      	bge.n	80084c6 <scalbn+0xc6>
 8008492:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008496:	429e      	cmp	r6, r3
 8008498:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800849c:	dd0a      	ble.n	80084b4 <scalbn+0xb4>
 800849e:	a112      	add	r1, pc, #72	; (adr r1, 80084e8 <scalbn+0xe8>)
 80084a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d1e2      	bne.n	800846e <scalbn+0x6e>
 80084a8:	a30f      	add	r3, pc, #60	; (adr r3, 80084e8 <scalbn+0xe8>)
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	f7f8 f87b 	bl	80005a8 <__aeabi_dmul>
 80084b2:	e7cb      	b.n	800844c <scalbn+0x4c>
 80084b4:	a10a      	add	r1, pc, #40	; (adr r1, 80084e0 <scalbn+0xe0>)
 80084b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0b8      	beq.n	8008430 <scalbn+0x30>
 80084be:	a10e      	add	r1, pc, #56	; (adr r1, 80084f8 <scalbn+0xf8>)
 80084c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084c4:	e7b4      	b.n	8008430 <scalbn+0x30>
 80084c6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084ca:	3236      	adds	r2, #54	; 0x36
 80084cc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084d0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80084d4:	4620      	mov	r0, r4
 80084d6:	4b0c      	ldr	r3, [pc, #48]	; (8008508 <scalbn+0x108>)
 80084d8:	2200      	movs	r2, #0
 80084da:	e7e8      	b.n	80084ae <scalbn+0xae>
 80084dc:	f3af 8000 	nop.w
 80084e0:	c2f8f359 	.word	0xc2f8f359
 80084e4:	01a56e1f 	.word	0x01a56e1f
 80084e8:	8800759c 	.word	0x8800759c
 80084ec:	7e37e43c 	.word	0x7e37e43c
 80084f0:	8800759c 	.word	0x8800759c
 80084f4:	fe37e43c 	.word	0xfe37e43c
 80084f8:	c2f8f359 	.word	0xc2f8f359
 80084fc:	81a56e1f 	.word	0x81a56e1f
 8008500:	43500000 	.word	0x43500000
 8008504:	ffff3cb0 	.word	0xffff3cb0
 8008508:	3c900000 	.word	0x3c900000

0800850c <_init>:
 800850c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850e:	bf00      	nop
 8008510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008512:	bc08      	pop	{r3}
 8008514:	469e      	mov	lr, r3
 8008516:	4770      	bx	lr

08008518 <_fini>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr
