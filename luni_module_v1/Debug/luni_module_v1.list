
luni_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a674  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e30  0800a7b8  0800a7b8  0001a7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000090  20000008  0800b5f0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002fc  20000098  0800b680  00020098  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000394  0800b680  00020394  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
  9 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 10 MB_MEM1       000000b0  20030028  20030028  00030000  2**2
                  ALLOC
 11 .debug_info   000219da  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005051  00000000  00000000  00041aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002028  00000000  00000000  00046af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00001e20  00000000  00000000  00048b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0002b67f  00000000  00000000  0004a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000250e8  00000000  00000000  00075fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000f76fb  00000000  00000000  0009b0a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  001927a2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009424  00000000  00000000  001927f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a79c 	.word	0x0800a79c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	0800a79c 	.word	0x0800a79c

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <GUI_ReadBmp>:
#include <string.h> //memset()
#include <math.h> //memset()
#include <stdio.h>

UBYTE GUI_ReadBmp(const char *path, UWORD Xstart, UWORD Ystart)
{
 8000b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b4c:	b09f      	sub	sp, #124	; 0x7c
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	60f8      	str	r0, [r7, #12]
 8000b52:	460b      	mov	r3, r1
 8000b54:	817b      	strh	r3, [r7, #10]
 8000b56:	4613      	mov	r3, r2
 8000b58:	813b      	strh	r3, [r7, #8]
 8000b5a:	466b      	mov	r3, sp
 8000b5c:	461e      	mov	r6, r3
    BMPFILEHEADER bmpFileHeader;  //Define a bmp file header structure
    BMPINFOHEADER bmpInfoHeader;  //Define a bmp info header structure


    // Binary file open
    if((fp = fopen(path, "rb")) == NULL) {
 8000b5e:	49c0      	ldr	r1, [pc, #768]	; (8000e60 <GUI_ReadBmp+0x318>)
 8000b60:	68f8      	ldr	r0, [r7, #12]
 8000b62:	f007 fb47 	bl	80081f4 <fopen>
 8000b66:	66b8      	str	r0, [r7, #104]	; 0x68
 8000b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <GUI_ReadBmp+0x32>
        Debug("Cann't open the file!\n");
 8000b6e:	48bd      	ldr	r0, [pc, #756]	; (8000e64 <GUI_ReadBmp+0x31c>)
 8000b70:	f007 ff8c 	bl	8008a8c <puts>
        exit(0);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f007 f8b7 	bl	8007ce8 <exit>
    }

    // Set the file pointer from the beginning
    fseek(fp, 0, SEEK_SET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000b80:	f007 fbc4 	bl	800830c <fseek>
    fread(&bmpFileHeader, sizeof(BMPFILEHEADER), 1, fp);    //sizeof(BMPFILEHEADER) must be 14
 8000b84:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000b88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	210e      	movs	r1, #14
 8000b8e:	f007 fbad 	bl	80082ec <fread>
    fread(&bmpInfoHeader, sizeof(BMPINFOHEADER), 1, fp);    //sizeof(BMPFILEHEADER) must be 50
 8000b92:	f107 0014 	add.w	r0, r7, #20
 8000b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b98:	2201      	movs	r2, #1
 8000b9a:	2128      	movs	r1, #40	; 0x28
 8000b9c:	f007 fba6 	bl	80082ec <fread>
    printf("pixel = %d * %d\r\n", bmpInfoHeader.biWidth, bmpInfoHeader.biHeight);
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	48b0      	ldr	r0, [pc, #704]	; (8000e68 <GUI_ReadBmp+0x320>)
 8000ba8:	f007 feea 	bl	8008980 <iprintf>

    UWORD Image_Width_Byte = (bmpInfoHeader.biWidth % 8 == 0)? (bmpInfoHeader.biWidth / 8): (bmpInfoHeader.biWidth / 8 + 1);
 8000bac:	69bb      	ldr	r3, [r7, #24]
 8000bae:	f003 0307 	and.w	r3, r3, #7
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d103      	bne.n	8000bbe <GUI_ReadBmp+0x76>
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	08db      	lsrs	r3, r3, #3
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	e004      	b.n	8000bc8 <GUI_ReadBmp+0x80>
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	b29b      	uxth	r3, r3
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    UWORD Bmp_Width_Byte = (Image_Width_Byte % 4 == 0) ? Image_Width_Byte: ((Image_Width_Byte / 4 + 1) * 4);
 8000bcc:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000bd0:	f003 0303 	and.w	r3, r3, #3
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <GUI_ReadBmp+0xa4>
 8000bda:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	3301      	adds	r3, #1
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	009b      	lsls	r3, r3, #2
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	e001      	b.n	8000bf0 <GUI_ReadBmp+0xa8>
 8000bec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000bf0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
    UBYTE Image[Image_Width_Byte * bmpInfoHeader.biHeight];
 8000bf4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000bf8:	69fa      	ldr	r2, [r7, #28]
 8000bfa:	fb02 f103 	mul.w	r1, r2, r3
 8000bfe:	460b      	mov	r3, r1
 8000c00:	3b01      	subs	r3, #1
 8000c02:	663b      	str	r3, [r7, #96]	; 0x60
 8000c04:	2300      	movs	r3, #0
 8000c06:	6039      	str	r1, [r7, #0]
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	f04f 0200 	mov.w	r2, #0
 8000c0e:	f04f 0300 	mov.w	r3, #0
 8000c12:	6878      	ldr	r0, [r7, #4]
 8000c14:	00c3      	lsls	r3, r0, #3
 8000c16:	6838      	ldr	r0, [r7, #0]
 8000c18:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000c1c:	6838      	ldr	r0, [r7, #0]
 8000c1e:	00c2      	lsls	r2, r0, #3
 8000c20:	2300      	movs	r3, #0
 8000c22:	468a      	mov	sl, r1
 8000c24:	469b      	mov	fp, r3
 8000c26:	f04f 0200 	mov.w	r2, #0
 8000c2a:	f04f 0300 	mov.w	r3, #0
 8000c2e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000c32:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000c3a:	1dcb      	adds	r3, r1, #7
 8000c3c:	08db      	lsrs	r3, r3, #3
 8000c3e:	00db      	lsls	r3, r3, #3
 8000c40:	ebad 0d03 	sub.w	sp, sp, r3
 8000c44:	466b      	mov	r3, sp
 8000c46:	3300      	adds	r3, #0
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
    memset(Image, 0xFF, Image_Width_Byte * bmpInfoHeader.biHeight);
 8000c4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000c4e:	69fa      	ldr	r2, [r7, #28]
 8000c50:	fb02 f303 	mul.w	r3, r2, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	21ff      	movs	r1, #255	; 0xff
 8000c58:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000c5a:	f007 fcf5 	bl	8008648 <memset>

    // Determine if it is a monochrome bitmap
    int readbyte = bmpInfoHeader.biBitCount;
 8000c5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c60:	65bb      	str	r3, [r7, #88]	; 0x58
    if(readbyte != 1) {
 8000c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d005      	beq.n	8000c74 <GUI_ReadBmp+0x12c>
        Debug("the bmp Image is not a monochrome bitmap!\n");
 8000c68:	4880      	ldr	r0, [pc, #512]	; (8000e6c <GUI_ReadBmp+0x324>)
 8000c6a:	f007 ff0f 	bl	8008a8c <puts>
        exit(0);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f007 f83a 	bl	8007ce8 <exit>
    }

    // Determine black and white based on the palette
    UWORD i;
    UWORD Bcolor, Wcolor;
    UWORD bmprgbquadsize = pow(2, bmpInfoHeader.biBitCount);// 2^1 = 2
 8000c74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fc1c 	bl	80004b4 <__aeabi_ui2d>
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	460b      	mov	r3, r1
 8000c80:	ec43 2b11 	vmov	d1, r2, r3
 8000c84:	ed9f 0b74 	vldr	d0, [pc, #464]	; 8000e58 <GUI_ReadBmp+0x310>
 8000c88:	f008 fe6e 	bl	8009968 <pow>
 8000c8c:	ec53 2b10 	vmov	r2, r3, d0
 8000c90:	4610      	mov	r0, r2
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff ff38 	bl	8000b08 <__aeabi_d2uiz>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    BMPRGBQUAD bmprgbquad[bmprgbquadsize];        //palette
 8000c9e:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	3b01      	subs	r3, #1
 8000ca6:	653b      	str	r3, [r7, #80]	; 0x50
 8000ca8:	b28b      	uxth	r3, r1
 8000caa:	2200      	movs	r2, #0
 8000cac:	4698      	mov	r8, r3
 8000cae:	4691      	mov	r9, r2
 8000cb0:	f04f 0200 	mov.w	r2, #0
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000cbc:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000cc0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000cc4:	b28b      	uxth	r3, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	461c      	mov	r4, r3
 8000cca:	4615      	mov	r5, r2
 8000ccc:	f04f 0200 	mov.w	r2, #0
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	016b      	lsls	r3, r5, #5
 8000cd6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000cda:	0162      	lsls	r2, r4, #5
 8000cdc:	460b      	mov	r3, r1
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	3307      	adds	r3, #7
 8000ce2:	08db      	lsrs	r3, r3, #3
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	ebad 0d03 	sub.w	sp, sp, r3
 8000cea:	466b      	mov	r3, sp
 8000cec:	3300      	adds	r3, #0
 8000cee:	64fb      	str	r3, [r7, #76]	; 0x4c
    // BMPRGBQUAD bmprgbquad[2];        //palette

    for(i = 0; i < bmprgbquadsize; i++){
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000cf6:	e00e      	b.n	8000d16 <GUI_ReadBmp+0x1ce>
    // for(i = 0; i < 2; i++) {
        fread(&bmprgbquad[i], sizeof(BMPRGBQUAD), 1, fp);
 8000cf8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d00:	18d0      	adds	r0, r2, r3
 8000d02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d04:	2201      	movs	r2, #1
 8000d06:	2104      	movs	r1, #4
 8000d08:	f007 faf0 	bl	80082ec <fread>
    for(i = 0; i < bmprgbquadsize; i++){
 8000d0c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8000d10:	3301      	adds	r3, #1
 8000d12:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8000d16:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000d1a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d3ea      	bcc.n	8000cf8 <GUI_ReadBmp+0x1b0>
    }
    if(bmprgbquad[0].rgbBlue == 0xff && bmprgbquad[0].rgbGreen == 0xff && bmprgbquad[0].rgbRed == 0xff) {
 8000d22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	2bff      	cmp	r3, #255	; 0xff
 8000d28:	d10e      	bne.n	8000d48 <GUI_ReadBmp+0x200>
 8000d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d2c:	785b      	ldrb	r3, [r3, #1]
 8000d2e:	2bff      	cmp	r3, #255	; 0xff
 8000d30:	d10a      	bne.n	8000d48 <GUI_ReadBmp+0x200>
 8000d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	2bff      	cmp	r3, #255	; 0xff
 8000d38:	d106      	bne.n	8000d48 <GUI_ReadBmp+0x200>
        Bcolor = BLACK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        Wcolor = WHITE;
 8000d40:	23ff      	movs	r3, #255	; 0xff
 8000d42:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8000d46:	e005      	b.n	8000d54 <GUI_ReadBmp+0x20c>
    } else {
        Bcolor = WHITE;
 8000d48:	23ff      	movs	r3, #255	; 0xff
 8000d4a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
        Wcolor = BLACK;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
    }

    // Read image data into the cache
    UWORD x, y;
    UBYTE Rdata;
    fseek(fp, bmpFileHeader.bOffset, SEEK_SET);
 8000d54:	f8d7 3046 	ldr.w	r3, [r7, #70]	; 0x46
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000d5e:	f007 fad5 	bl	800830c <fseek>
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {//Total display column
 8000d62:	2300      	movs	r3, #0
 8000d64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8000d68:	e037      	b.n	8000dda <GUI_ReadBmp+0x292>
        for(x = 0; x < Bmp_Width_Byte; x++) {//Show a line in the line
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000d70:	e028      	b.n	8000dc4 <GUI_ReadBmp+0x27c>
            if(fread((char *)&Rdata, 1, readbyte, fp) != readbyte) {
 8000d72:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000d74:	f107 0013 	add.w	r0, r7, #19
 8000d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	f007 fab6 	bl	80082ec <fread>
 8000d80:	4602      	mov	r2, r0
 8000d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d003      	beq.n	8000d90 <GUI_ReadBmp+0x248>
                perror("get bmpdata:\r\n");
 8000d88:	4839      	ldr	r0, [pc, #228]	; (8000e70 <GUI_ReadBmp+0x328>)
 8000d8a:	f007 fdf1 	bl	8008970 <perror>
                break;
 8000d8e:	e01f      	b.n	8000dd0 <GUI_ReadBmp+0x288>
            }
            if(x < Image_Width_Byte) { //bmp
 8000d90:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000d94:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d20e      	bcs.n	8000dba <GUI_ReadBmp+0x272>
                Image[x + (bmpInfoHeader.biHeight - y - 1) * Image_Width_Byte] =  Rdata;
 8000d9c:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000da0:	69f9      	ldr	r1, [r7, #28]
 8000da2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000da6:	1acb      	subs	r3, r1, r3
 8000da8:	3b01      	subs	r3, #1
 8000daa:	f8b7 1066 	ldrh.w	r1, [r7, #102]	; 0x66
 8000dae:	fb01 f303 	mul.w	r3, r1, r3
 8000db2:	4413      	add	r3, r2
 8000db4:	7cf9      	ldrb	r1, [r7, #19]
 8000db6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000db8:	54d1      	strb	r1, [r2, r3]
        for(x = 0; x < Bmp_Width_Byte; x++) {//Show a line in the line
 8000dba:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000dc4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000dc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d3d0      	bcc.n	8000d72 <GUI_ReadBmp+0x22a>
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {//Total display column
 8000dd0:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8000dda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3c2      	bcc.n	8000d6a <GUI_ReadBmp+0x222>
                // printf("rdata = %d\r\n", Rdata);
            }
        }
    }
    fclose(fp);
 8000de4:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8000de6:	f006 ffff 	bl	8007de8 <fclose>

    // Refresh the image to the display buffer based on the displayed orientation
    UBYTE color, temp;
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {
 8000dea:	2300      	movs	r3, #0
 8000dec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8000df0:	e066      	b.n	8000ec0 <GUI_ReadBmp+0x378>
        for(x = 0; x < bmpInfoHeader.biWidth; x++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000df8:	e058      	b.n	8000eac <GUI_ReadBmp+0x364>
            if(x > Paint.Width || y > Paint.Height) {
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <GUI_ReadBmp+0x32c>)
 8000dfc:	889b      	ldrh	r3, [r3, #4]
 8000dfe:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d857      	bhi.n	8000eb6 <GUI_ReadBmp+0x36e>
 8000e06:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <GUI_ReadBmp+0x32c>)
 8000e08:	88db      	ldrh	r3, [r3, #6]
 8000e0a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d851      	bhi.n	8000eb6 <GUI_ReadBmp+0x36e>
                break;
            }
            temp = Image[(x / 8) + (y * Image_Width_Byte)];
 8000e12:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e16:	08db      	lsrs	r3, r3, #3
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000e20:	f8b7 2066 	ldrh.w	r2, [r7, #102]	; 0x66
 8000e24:	fb02 f303 	mul.w	r3, r2, r3
 8000e28:	440b      	add	r3, r1
 8000e2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e2c:	5cd3      	ldrb	r3, [r2, r3]
 8000e2e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            color = (((temp << (x%8)) & 0x80) == 0x80) ?Bcolor:Wcolor;
 8000e32:	f897 204b 	ldrb.w	r2, [r7, #75]	; 0x4b
 8000e36:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d016      	beq.n	8000e78 <GUI_ReadBmp+0x330>
 8000e4a:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	e015      	b.n	8000e7e <GUI_ReadBmp+0x336>
 8000e52:	bf00      	nop
 8000e54:	f3af 8000 	nop.w
 8000e58:	00000000 	.word	0x00000000
 8000e5c:	40000000 	.word	0x40000000
 8000e60:	0800a7b8 	.word	0x0800a7b8
 8000e64:	0800a7bc 	.word	0x0800a7bc
 8000e68:	0800a7dc 	.word	0x0800a7dc
 8000e6c:	0800a7f0 	.word	0x0800a7f0
 8000e70:	0800a824 	.word	0x0800a824
 8000e74:	200000b4 	.word	0x200000b4
 8000e78:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
            Paint_SetPixel(Xstart + x, Ystart + y, color);
 8000e82:	897a      	ldrh	r2, [r7, #10]
 8000e84:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000e88:	4413      	add	r3, r2
 8000e8a:	b298      	uxth	r0, r3
 8000e8c:	893a      	ldrh	r2, [r7, #8]
 8000e8e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000e92:	4413      	add	r3, r2
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8000e9a:	b292      	uxth	r2, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f000 f881 	bl	8000fa4 <Paint_SetPixel>
        for(x = 0; x < bmpInfoHeader.biWidth; x++) {
 8000ea2:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8000eac:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3a1      	bcc.n	8000dfa <GUI_ReadBmp+0x2b2>
    for(y = 0; y < bmpInfoHeader.biHeight; y++) {
 8000eb6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000eba:	3301      	adds	r3, #1
 8000ebc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8000ec0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d393      	bcc.n	8000df2 <GUI_ReadBmp+0x2aa>
        }
    }
    return 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	46b5      	mov	sp, r6
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	377c      	adds	r7, #124	; 0x7c
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ed8 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	4608      	mov	r0, r1
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	817b      	strh	r3, [r7, #10]
 8000eea:	460b      	mov	r3, r1
 8000eec:	813b      	strh	r3, [r7, #8]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <Paint_NewImage+0xa8>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 8000ef8:	4a21      	ldr	r2, [pc, #132]	; (8000f80 <Paint_NewImage+0xa8>)
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 8000efe:	4a20      	ldr	r2, [pc, #128]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f00:	897b      	ldrh	r3, [r7, #10]
 8000f02:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 8000f04:	4a1e      	ldr	r2, [pc, #120]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f06:	893b      	ldrh	r3, [r7, #8]
 8000f08:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f0c:	8b3b      	ldrh	r3, [r7, #24]
 8000f0e:	8193      	strh	r3, [r2, #12]
    Paint.Scale = 2;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f12:	2202      	movs	r2, #2
 8000f14:	82da      	strh	r2, [r3, #22]
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 8000f16:	897b      	ldrh	r3, [r7, #10]
 8000f18:	f003 0307 	and.w	r3, r3, #7
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d103      	bne.n	8000f2a <Paint_NewImage+0x52>
 8000f22:	897b      	ldrh	r3, [r7, #10]
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	e004      	b.n	8000f34 <Paint_NewImage+0x5c>
 8000f2a:	897b      	ldrh	r3, [r7, #10]
 8000f2c:	08db      	lsrs	r3, r3, #3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	4a12      	ldr	r2, [pc, #72]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f36:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 8000f38:	4a11      	ldr	r2, [pc, #68]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f3a:	893b      	ldrh	r3, [r7, #8]
 8000f3c:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 8000f3e:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f40:	88fb      	ldrh	r3, [r7, #6]
 8000f42:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 8000f4a:	88fb      	ldrh	r3, [r7, #6]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <Paint_NewImage+0x7e>
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	2bb4      	cmp	r3, #180	; 0xb4
 8000f54:	d106      	bne.n	8000f64 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 8000f56:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f58:	897b      	ldrh	r3, [r7, #10]
 8000f5a:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 8000f5c:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f5e:	893b      	ldrh	r3, [r7, #8]
 8000f60:	80d3      	strh	r3, [r2, #6]
 8000f62:	e006      	b.n	8000f72 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f66:	893b      	ldrh	r3, [r7, #8]
 8000f68:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 8000f6a:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <Paint_NewImage+0xa8>)
 8000f6c:	897b      	ldrh	r3, [r7, #10]
 8000f6e:	80d3      	strh	r3, [r2, #6]
    }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	200000b4 	.word	0x200000b4

08000f84 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 8000f8c:	4a04      	ldr	r2, [pc, #16]	; (8000fa0 <Paint_SelectImage+0x1c>)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6013      	str	r3, [r2, #0]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200000b4 	.word	0x200000b4

08000fa4 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
 8000fae:	460b      	mov	r3, r1
 8000fb0:	80bb      	strh	r3, [r7, #4]
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 8000fb6:	4b9f      	ldr	r3, [pc, #636]	; (8001234 <Paint_SetPixel+0x290>)
 8000fb8:	889b      	ldrh	r3, [r3, #4]
 8000fba:	88fa      	ldrh	r2, [r7, #6]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f200 8131 	bhi.w	8001224 <Paint_SetPixel+0x280>
 8000fc2:	4b9c      	ldr	r3, [pc, #624]	; (8001234 <Paint_SetPixel+0x290>)
 8000fc4:	88db      	ldrh	r3, [r3, #6]
 8000fc6:	88ba      	ldrh	r2, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	f200 812b 	bhi.w	8001224 <Paint_SetPixel+0x280>
        //Debug("Exceeding display boundaries\r\n");
        return;
    }      
    UWORD X, Y;
    switch(Paint.Rotate) {
 8000fce:	4b99      	ldr	r3, [pc, #612]	; (8001234 <Paint_SetPixel+0x290>)
 8000fd0:	89db      	ldrh	r3, [r3, #14]
 8000fd2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000fd6:	d02b      	beq.n	8001030 <Paint_SetPixel+0x8c>
 8000fd8:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8000fdc:	f300 8124 	bgt.w	8001228 <Paint_SetPixel+0x284>
 8000fe0:	2bb4      	cmp	r3, #180	; 0xb4
 8000fe2:	d016      	beq.n	8001012 <Paint_SetPixel+0x6e>
 8000fe4:	2bb4      	cmp	r3, #180	; 0xb4
 8000fe6:	f300 811f 	bgt.w	8001228 <Paint_SetPixel+0x284>
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <Paint_SetPixel+0x50>
 8000fee:	2b5a      	cmp	r3, #90	; 0x5a
 8000ff0:	d005      	beq.n	8000ffe <Paint_SetPixel+0x5a>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 8000ff2:	e119      	b.n	8001228 <Paint_SetPixel+0x284>
        X = Xpoint;
 8000ff4:	88fb      	ldrh	r3, [r7, #6]
 8000ff6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 8000ff8:	88bb      	ldrh	r3, [r7, #4]
 8000ffa:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8000ffc:	e022      	b.n	8001044 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Ypoint - 1;
 8000ffe:	4b8d      	ldr	r3, [pc, #564]	; (8001234 <Paint_SetPixel+0x290>)
 8001000:	891a      	ldrh	r2, [r3, #8]
 8001002:	88bb      	ldrh	r3, [r7, #4]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	b29b      	uxth	r3, r3
 8001008:	3b01      	subs	r3, #1
 800100a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001010:	e018      	b.n	8001044 <Paint_SetPixel+0xa0>
        X = Paint.WidthMemory - Xpoint - 1;
 8001012:	4b88      	ldr	r3, [pc, #544]	; (8001234 <Paint_SetPixel+0x290>)
 8001014:	891a      	ldrh	r2, [r3, #8]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	b29b      	uxth	r3, r3
 800101c:	3b01      	subs	r3, #1
 800101e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 8001020:	4b84      	ldr	r3, [pc, #528]	; (8001234 <Paint_SetPixel+0x290>)
 8001022:	895a      	ldrh	r2, [r3, #10]
 8001024:	88bb      	ldrh	r3, [r7, #4]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	b29b      	uxth	r3, r3
 800102a:	3b01      	subs	r3, #1
 800102c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800102e:	e009      	b.n	8001044 <Paint_SetPixel+0xa0>
        X = Ypoint;
 8001030:	88bb      	ldrh	r3, [r7, #4]
 8001032:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 8001034:	4b7f      	ldr	r3, [pc, #508]	; (8001234 <Paint_SetPixel+0x290>)
 8001036:	895a      	ldrh	r2, [r3, #10]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	1ad3      	subs	r3, r2, r3
 800103c:	b29b      	uxth	r3, r3
 800103e:	3b01      	subs	r3, #1
 8001040:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001042:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 8001044:	4b7b      	ldr	r3, [pc, #492]	; (8001234 <Paint_SetPixel+0x290>)
 8001046:	8a1b      	ldrh	r3, [r3, #16]
 8001048:	2b03      	cmp	r3, #3
 800104a:	f200 80ef 	bhi.w	800122c <Paint_SetPixel+0x288>
 800104e:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <Paint_SetPixel+0xb0>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	080010a3 	.word	0x080010a3
 8001058:	08001065 	.word	0x08001065
 800105c:	08001075 	.word	0x08001075
 8001060:	08001085 	.word	0x08001085
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 8001064:	4b73      	ldr	r3, [pc, #460]	; (8001234 <Paint_SetPixel+0x290>)
 8001066:	891a      	ldrh	r2, [r3, #8]
 8001068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	3b01      	subs	r3, #1
 8001070:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 8001072:	e017      	b.n	80010a4 <Paint_SetPixel+0x100>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 8001074:	4b6f      	ldr	r3, [pc, #444]	; (8001234 <Paint_SetPixel+0x290>)
 8001076:	895a      	ldrh	r2, [r3, #10]
 8001078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	b29b      	uxth	r3, r3
 800107e:	3b01      	subs	r3, #1
 8001080:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 8001082:	e00f      	b.n	80010a4 <Paint_SetPixel+0x100>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 8001084:	4b6b      	ldr	r3, [pc, #428]	; (8001234 <Paint_SetPixel+0x290>)
 8001086:	891a      	ldrh	r2, [r3, #8]
 8001088:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b29b      	uxth	r3, r3
 800108e:	3b01      	subs	r3, #1
 8001090:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 8001092:	4b68      	ldr	r3, [pc, #416]	; (8001234 <Paint_SetPixel+0x290>)
 8001094:	895a      	ldrh	r2, [r3, #10]
 8001096:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	3b01      	subs	r3, #1
 800109e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 80010a0:	e000      	b.n	80010a4 <Paint_SetPixel+0x100>
        break;
 80010a2:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 80010a4:	4b63      	ldr	r3, [pc, #396]	; (8001234 <Paint_SetPixel+0x290>)
 80010a6:	891b      	ldrh	r3, [r3, #8]
 80010a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d804      	bhi.n	80010b8 <Paint_SetPixel+0x114>
 80010ae:	4b61      	ldr	r3, [pc, #388]	; (8001234 <Paint_SetPixel+0x290>)
 80010b0:	895b      	ldrh	r3, [r3, #10]
 80010b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d903      	bls.n	80010c0 <Paint_SetPixel+0x11c>
        Debug("Exceeding display boundaries\r\n");
 80010b8:	485f      	ldr	r0, [pc, #380]	; (8001238 <Paint_SetPixel+0x294>)
 80010ba:	f007 fce7 	bl	8008a8c <puts>
        return;
 80010be:	e0b6      	b.n	800122e <Paint_SetPixel+0x28a>
    }
    
    if(Paint.Scale == 2){
 80010c0:	4b5c      	ldr	r3, [pc, #368]	; (8001234 <Paint_SetPixel+0x290>)
 80010c2:	8adb      	ldrh	r3, [r3, #22]
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d139      	bne.n	800113c <Paint_SetPixel+0x198>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 80010c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ca:	08db      	lsrs	r3, r3, #3
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4619      	mov	r1, r3
 80010d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010d2:	4a58      	ldr	r2, [pc, #352]	; (8001234 <Paint_SetPixel+0x290>)
 80010d4:	8a52      	ldrh	r2, [r2, #18]
 80010d6:	fb02 f303 	mul.w	r3, r2, r3
 80010da:	440b      	add	r3, r1
 80010dc:	613b      	str	r3, [r7, #16]
        UBYTE Rdata = Paint.Image[Addr];
 80010de:	4b55      	ldr	r3, [pc, #340]	; (8001234 <Paint_SetPixel+0x290>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4413      	add	r3, r2
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	73fb      	strb	r3, [r7, #15]
        if(Color == BLACK)
 80010ea:	887b      	ldrh	r3, [r7, #2]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d113      	bne.n	8001118 <Paint_SetPixel+0x174>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 80010f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	fa42 f303 	asr.w	r3, r2, r3
 80010fc:	b25b      	sxtb	r3, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	b25a      	sxtb	r2, r3
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4013      	ands	r3, r2
 8001108:	b259      	sxtb	r1, r3
 800110a:	4b4a      	ldr	r3, [pc, #296]	; (8001234 <Paint_SetPixel+0x290>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4413      	add	r3, r2
 8001112:	b2ca      	uxtb	r2, r1
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e08a      	b.n	800122e <Paint_SetPixel+0x28a>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 8001118:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	2280      	movs	r2, #128	; 0x80
 8001120:	fa42 f303 	asr.w	r3, r2, r3
 8001124:	b25a      	sxtb	r2, r3
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4313      	orrs	r3, r2
 800112c:	b259      	sxtb	r1, r3
 800112e:	4b41      	ldr	r3, [pc, #260]	; (8001234 <Paint_SetPixel+0x290>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4413      	add	r3, r2
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e078      	b.n	800122e <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 4){
 800113c:	4b3d      	ldr	r3, [pc, #244]	; (8001234 <Paint_SetPixel+0x290>)
 800113e:	8adb      	ldrh	r3, [r3, #22]
 8001140:	2b04      	cmp	r3, #4
 8001142:	d137      	bne.n	80011b4 <Paint_SetPixel+0x210>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 8001144:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	b29b      	uxth	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800114e:	4a39      	ldr	r2, [pc, #228]	; (8001234 <Paint_SetPixel+0x290>)
 8001150:	8a52      	ldrh	r2, [r2, #18]
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	440b      	add	r3, r1
 8001158:	61bb      	str	r3, [r7, #24]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800115a:	887b      	ldrh	r3, [r7, #2]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 8001162:	4b34      	ldr	r3, [pc, #208]	; (8001234 <Paint_SetPixel+0x290>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	4413      	add	r3, r2
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	75fb      	strb	r3, [r7, #23]
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));//Clear first, then set value
 800116e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	22c0      	movs	r2, #192	; 0xc0
 8001178:	fa42 f303 	asr.w	r3, r2, r3
 800117c:	b25b      	sxtb	r3, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001186:	4013      	ands	r3, r2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	75fb      	strb	r3, [r7, #23]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	019a      	lsls	r2, r3, #6
 8001190:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	fa42 f303 	asr.w	r3, r2, r3
 800119c:	b25a      	sxtb	r2, r3
 800119e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b259      	sxtb	r1, r3
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <Paint_SetPixel+0x290>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4413      	add	r3, r2
 80011ae:	b2ca      	uxtb	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e03c      	b.n	800122e <Paint_SetPixel+0x28a>
    }else if(Paint.Scale == 7){
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <Paint_SetPixel+0x290>)
 80011b6:	8adb      	ldrh	r3, [r3, #22]
 80011b8:	2b07      	cmp	r3, #7
 80011ba:	d138      	bne.n	800122e <Paint_SetPixel+0x28a>
		UDOUBLE Addr = X / 2  + Y * Paint.WidthByte;
 80011bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4619      	mov	r1, r3
 80011c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80011c6:	4a1b      	ldr	r2, [pc, #108]	; (8001234 <Paint_SetPixel+0x290>)
 80011c8:	8a52      	ldrh	r2, [r2, #18]
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	440b      	add	r3, r1
 80011d0:	623b      	str	r3, [r7, #32]
		UBYTE Rdata = Paint.Image[Addr];
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <Paint_SetPixel+0x290>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
 80011d8:	4413      	add	r3, r2
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	77fb      	strb	r3, [r7, #31]
		Rdata = Rdata & (~(0xF0 >> ((X % 2)*4)));//Clear first, then set value
 80011de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	22f0      	movs	r2, #240	; 0xf0
 80011e8:	fa42 f303 	asr.w	r3, r2, r3
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80011f6:	4013      	ands	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	77fb      	strb	r3, [r7, #31]
		Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 80011fc:	887b      	ldrh	r3, [r7, #2]
 80011fe:	011a      	lsls	r2, r3, #4
 8001200:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	fa42 f303 	asr.w	r3, r2, r3
 800120c:	b25a      	sxtb	r2, r3
 800120e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001212:	4313      	orrs	r3, r2
 8001214:	b259      	sxtb	r1, r3
 8001216:	4b07      	ldr	r3, [pc, #28]	; (8001234 <Paint_SetPixel+0x290>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	4413      	add	r3, r2
 800121e:	b2ca      	uxtb	r2, r1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e004      	b.n	800122e <Paint_SetPixel+0x28a>
        return;
 8001224:	bf00      	nop
 8001226:	e002      	b.n	800122e <Paint_SetPixel+0x28a>
        return;
 8001228:	bf00      	nop
 800122a:	e000      	b.n	800122e <Paint_SetPixel+0x28a>
        return;
 800122c:	bf00      	nop
		// printf("Add =  %d ,data = %d\r\n",Addr,Rdata);
	}
}
 800122e:	3728      	adds	r7, #40	; 0x28
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	200000b4 	.word	0x200000b4
 8001238:	0800aa00 	.word	0x0800aa00

0800123c <EpdDigitalWriteCallback>:
		EPD_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10e      	bne.n	800126a <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 800124c:	4a10      	ldr	r2, [pc, #64]	; (8001290 <EpdDigitalWriteCallback+0x54>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <EpdDigitalWriteCallback+0x54>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	b29b      	uxth	r3, r3
 8001260:	2201      	movs	r2, #1
 8001262:	4619      	mov	r1, r3
 8001264:	f002 fd58 	bl	8003d18 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8001268:	e00d      	b.n	8001286 <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 800126a:	4a09      	ldr	r2, [pc, #36]	; (8001290 <EpdDigitalWriteCallback+0x54>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <EpdDigitalWriteCallback+0x54>)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	4413      	add	r3, r2
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	b29b      	uxth	r3, r3
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	f002 fd49 	bl	8003d18 <HAL_GPIO_WritePin>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	200000cc 	.word	0x200000cc

08001294 <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 800129c:	4a0b      	ldr	r2, [pc, #44]	; (80012cc <EpdDigitalReadCallback+0x38>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80012a4:	4909      	ldr	r1, [pc, #36]	; (80012cc <EpdDigitalReadCallback+0x38>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	440b      	add	r3, r1
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	b29b      	uxth	r3, r3
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f002 fd18 	bl	8003ce8 <HAL_GPIO_ReadPin>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d101      	bne.n	80012c2 <EpdDigitalReadCallback+0x2e>
    return HIGH;
 80012be:	2301      	movs	r3, #1
 80012c0:	e000      	b.n	80012c4 <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 80012c2:	2300      	movs	r3, #0
  }
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000cc 	.word	0x200000cc

080012d0 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 f9c1 	bl	8001660 <HAL_Delay>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <EpdSpiTransferCallback+0x44>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a0d      	ldr	r2, [pc, #52]	; (800132c <EpdSpiTransferCallback+0x44>)
 80012f8:	6852      	ldr	r2, [r2, #4]
 80012fa:	b291      	uxth	r1, r2
 80012fc:	2200      	movs	r2, #0
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 fd0a 	bl	8003d18 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 8001304:	1df9      	adds	r1, r7, #7
 8001306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130a:	2201      	movs	r2, #1
 800130c:	4808      	ldr	r0, [pc, #32]	; (8001330 <EpdSpiTransferCallback+0x48>)
 800130e:	f004 fdac 	bl	8005e6a <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <EpdSpiTransferCallback+0x44>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <EpdSpiTransferCallback+0x44>)
 8001318:	6852      	ldr	r2, [r2, #4]
 800131a:	b291      	uxth	r1, r2
 800131c:	2201      	movs	r2, #1
 800131e:	4618      	mov	r0, r3
 8001320:	f002 fcfa 	bl	8003d18 <HAL_GPIO_WritePin>
}
 8001324:	bf00      	nop
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200000cc 	.word	0x200000cc
 8001330:	200001f0 	.word	0x200001f0

08001334 <EpdInitCallback>:

int EpdInitCallback(void) {
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8001338:	4b10      	ldr	r3, [pc, #64]	; (800137c <EpdInitCallback+0x48>)
 800133a:	4a11      	ldr	r2, [pc, #68]	; (8001380 <EpdInitCallback+0x4c>)
 800133c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001340:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 8001344:	4b0d      	ldr	r3, [pc, #52]	; (800137c <EpdInitCallback+0x48>)
 8001346:	4a0f      	ldr	r2, [pc, #60]	; (8001384 <EpdInitCallback+0x50>)
 8001348:	3308      	adds	r3, #8
 800134a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800134e:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 8001352:	4b0a      	ldr	r3, [pc, #40]	; (800137c <EpdInitCallback+0x48>)
 8001354:	4a0c      	ldr	r2, [pc, #48]	; (8001388 <EpdInitCallback+0x54>)
 8001356:	3310      	adds	r3, #16
 8001358:	e892 0003 	ldmia.w	r2, {r0, r1}
 800135c:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <EpdInitCallback+0x48>)
 8001362:	4a0a      	ldr	r2, [pc, #40]	; (800138c <EpdInitCallback+0x58>)
 8001364:	3318      	adds	r3, #24
 8001366:	e892 0003 	ldmia.w	r2, {r0, r1}
 800136a:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200000cc 	.word	0x200000cc
 8001380:	20000008 	.word	0x20000008
 8001384:	20000010 	.word	0x20000010
 8001388:	20000018 	.word	0x20000018
 800138c:	20000020 	.word	0x20000020

08001390 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	460b      	mov	r3, r1
 800139a:	607a      	str	r2, [r7, #4]
 800139c:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800139e:	897a      	ldrh	r2, [r7, #10]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68f9      	ldr	r1, [r7, #12]
 80013a4:	2000      	movs	r0, #0
 80013a6:	f001 f92d 	bl	8002604 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80013aa:	bf00      	nop
}
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80013bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c0:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80013c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80013c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ce:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	021b      	lsls	r3, r3, #8
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013da:	4313      	orrs	r3, r2
 80013dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	cafecafe 	.word	0xcafecafe

080013f0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800141e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001422:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001440:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001448:	d101      	bne.n	800144e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800146e:	d101      	bne.n	8001474 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800148e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4313      	orrs	r3, r2
 8001496:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4013      	ands	r3, r2
 80014a2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a4:	68fb      	ldr	r3, [r7, #12]
}
 80014a6:	bf00      	nop
 80014a8:	3714      	adds	r7, #20
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014b2:	b480      	push	{r7}
 80014b4:	b083      	sub	sp, #12
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	041b      	lsls	r3, r3, #16
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	605a      	str	r2, [r3, #4]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]
 80014de:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	605a      	str	r2, [r3, #4]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	041b      	lsls	r3, r3, #16
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	615a      	str	r2, [r3, #20]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	431a      	orrs	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	615a      	str	r2, [r3, #20]
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800153e:	b480      	push	{r7}
 8001540:	b083      	sub	sp, #12
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	609a      	str	r2, [r3, #8]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	619a      	str	r2, [r3, #24]
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800157c:	4b05      	ldr	r3, [pc, #20]	; (8001594 <LL_LPM_EnableSleep+0x1c>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <LL_LPM_EnableSleep+0x1c>)
 8001582:	f023 0304 	bic.w	r3, r3, #4
 8001586:	6113      	str	r3, [r2, #16]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <MX_APPE_Config+0x18>)
 800159e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015a2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80015a4:	f000 f806 	bl	80015b4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80015a8:	f000 f846 	bl	8001638 <Config_HSE>

  return;
 80015ac:	bf00      	nop
}
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	58004000 	.word	0x58004000

080015b4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80015b8:	f000 f804 	bl	80015c4 <Reset_BackupDomain>

  Reset_IPCC();
 80015bc:	f000 f81a 	bl	80015f4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80015c0:	bf00      	nop
}
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80015c8:	f7ff ff34 	bl	8001434 <LL_RCC_IsActiveFlag_PINRST>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00d      	beq.n	80015ee <Reset_BackupDomain+0x2a>
 80015d2:	f7ff ff42 	bl	800145a <LL_RCC_IsActiveFlag_SFTRST>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d108      	bne.n	80015ee <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80015dc:	f002 fc5e 	bl	8003e9c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80015e0:	f002 fc5c 	bl	8003e9c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80015e4:	f7ff ff04 	bl	80013f0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80015e8:	f7ff ff13 	bl	8001412 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
}
 80015f0:	bd80      	pop	{r7, pc}
	...

080015f4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80015f8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80015fc:	f7ff ff40 	bl	8001480 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001600:	213f      	movs	r1, #63	; 0x3f
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <Reset_IPCC+0x40>)
 8001604:	f7ff ff9b 	bl	800153e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001608:	213f      	movs	r1, #63	; 0x3f
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <Reset_IPCC+0x40>)
 800160c:	f7ff ffa5 	bl	800155a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001610:	213f      	movs	r1, #63	; 0x3f
 8001612:	4808      	ldr	r0, [pc, #32]	; (8001634 <Reset_IPCC+0x40>)
 8001614:	f7ff ff4d 	bl	80014b2 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001618:	213f      	movs	r1, #63	; 0x3f
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <Reset_IPCC+0x40>)
 800161c:	f7ff ff6c 	bl	80014f8 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001620:	213f      	movs	r1, #63	; 0x3f
 8001622:	4804      	ldr	r0, [pc, #16]	; (8001634 <Reset_IPCC+0x40>)
 8001624:	f7ff ff57 	bl	80014d6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001628:	213f      	movs	r1, #63	; 0x3f
 800162a:	4802      	ldr	r0, [pc, #8]	; (8001634 <Reset_IPCC+0x40>)
 800162c:	f7ff ff76 	bl	800151c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001630:	bf00      	nop
}
 8001632:	bd80      	pop	{r7, pc}
 8001634:	58000c00 	.word	0x58000c00

08001638 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800163e:	2000      	movs	r0, #0
 8001640:	f005 fdd8 	bl	80071f4 <OTP_Read>
 8001644:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	799b      	ldrb	r3, [r3, #6]
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff feaf 	bl	80013b4 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001656:	bf00      	nop
 8001658:	bf00      	nop
}
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f001 fdea 	bl	8003240 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001678:	d00a      	beq.n	8001690 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800167a:	f001 fdf9 	bl	8003270 <HAL_GetTickFreq>
 800167e:	4603      	mov	r3, r0
 8001680:	461a      	mov	r2, r3
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4413      	add	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001688:	e002      	b.n	8001690 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800168a:	f7ff ff75 	bl	8001578 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800168e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001690:	f001 fdd6 	bl	8003240 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f4      	bhi.n	800168a <HAL_Delay+0x2a>
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <EPD_Init>:
#include <stdlib.h>
#include "epd2in9.h"
#include "main.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af02      	add	r7, sp, #8
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	epd->reset_pin = RST_PIN;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
	epd->dc_pin = DC_PIN;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2202      	movs	r2, #2
 80016be:	605a      	str	r2, [r3, #4]
	epd->cs_pin = CS_PIN;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
	epd->busy_pin = BUSY_PIN;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2203      	movs	r2, #3
 80016ca:	60da      	str	r2, [r3, #12]
	epd->width = EPD_WIDTH;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	611a      	str	r2, [r3, #16]
	epd->height = EPD_HEIGHT;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f44f 7294 	mov.w	r2, #296	; 0x128
 80016d8:	615a      	str	r2, [r3, #20]
	/* this calls the peripheral hardware interface, see epdif */
	if (EpdInitCallback() != 0) {
 80016da:	f7ff fe2b 	bl	8001334 <EpdInitCallback>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <EPD_Init+0x40>
		return -1;
 80016e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016e8:	e073      	b.n	80017d2 <EPD_Init+0x128>
	}

	epd->lut = lut;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	619a      	str	r2, [r3, #24]

	EPD_Reset(epd);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8f6 	bl	80018e2 <EPD_Reset>

	EPD_WaitUntilIdle(epd);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f8dc 	bl	80018b4 <EPD_WaitUntilIdle>
	EPD_SendCommand(epd,SW_RESET); // soft reset
 80016fc:	2112      	movs	r1, #18
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f892 	bl	8001828 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 f8d5 	bl	80018b4 <EPD_WaitUntilIdle>

	EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 800170a:	2101      	movs	r1, #1
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f000 f88b 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x27);
 8001712:	2127      	movs	r1, #39	; 0x27
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f8aa 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, 0x01);
 800171a:	2101      	movs	r1, #1
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f000 f8a6 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, 0x00);
 8001722:	2100      	movs	r1, #0
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f8a2 	bl	800186e <EPD_SendData>

	// Entrymode
	EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 800172a:	2111      	movs	r1, #17
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f000 f87b 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x03);
 8001732:	2103      	movs	r1, #3
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 f89a 	bl	800186e <EPD_SendData>

	// Curseur de mémoire
	EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 800173a:	f240 1327 	movw	r3, #295	; 0x127
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	237f      	movs	r3, #127	; 0x7f
 8001742:	2200      	movs	r2, #0
 8001744:	2100      	movs	r1, #0
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 f9f2 	bl	8001b30 <EPD_SetMemoryArea>

	// Update mode
	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_1);
 800174c:	2121      	movs	r1, #33	; 0x21
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f000 f86a 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x00);
 8001754:	2100      	movs	r1, #0
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f889 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, 0x80);
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f885 	bl	800186e <EPD_SendData>

	// Set the cursor
	EPD_SetMemoryPointer(epd,0,0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fa1c 	bl	8001ba6 <EPD_SetMemoryPointer>
	EPD_WaitUntilIdle(epd);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8a0 	bl	80018b4 <EPD_WaitUntilIdle>

	// Set lut
	EPD_SetLut(epd,epd->lut);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f000 f9b3 	bl	8001ae6 <EPD_SetLut>


	EPD_SendCommand(epd, LUT_INIT_RESERVED);
 8001780:	213f      	movs	r1, #63	; 0x3f
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f000 f850 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x22); // TBC
 8001788:	2122      	movs	r1, #34	; 0x22
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f86f 	bl	800186e <EPD_SendData>

	EPD_SendCommand(epd, GATE_VOLTAGE);
 8001790:	2103      	movs	r1, #3
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f848 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x17); // TBC
 8001798:	2117      	movs	r1, #23
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f000 f867 	bl	800186e <EPD_SendData>

	EPD_SendCommand(epd, SOURCE_VOLTAGE);
 80017a0:	2104      	movs	r1, #4
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f840 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x41); // TBC
 80017a8:	2141      	movs	r1, #65	; 0x41
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f85f 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, 0x00); // TBC
 80017b0:	2100      	movs	r1, #0
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f85b 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, 0x32); // TBC
 80017b8:	2132      	movs	r1, #50	; 0x32
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f857 	bl	800186e <EPD_SendData>

	EPD_SendCommand(epd, WRITE_VCOM_REGISTER);
 80017c0:	212c      	movs	r1, #44	; 0x2c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f830 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0x36); // TBC
 80017c8:	2136      	movs	r1, #54	; 0x36
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f84f 	bl	800186e <EPD_SendData>


	/* EPD hardware init end */
	return 0;
 80017d0:	2300      	movs	r3, #0



}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	60f8      	str	r0, [r7, #12]
 80017e2:	60b9      	str	r1, [r7, #8]
 80017e4:	607a      	str	r2, [r7, #4]
	EpdDigitalWriteCallback(pin, value);
 80017e6:	6879      	ldr	r1, [r7, #4]
 80017e8:	68b8      	ldr	r0, [r7, #8]
 80017ea:	f7ff fd27 	bl	800123c <EpdDigitalWriteCallback>
}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
 80017fe:	6039      	str	r1, [r7, #0]
	return EpdDigitalReadCallback(pin);
 8001800:	6838      	ldr	r0, [r7, #0]
 8001802:	f7ff fd47 	bl	8001294 <EpdDigitalReadCallback>
 8001806:	4603      	mov	r3, r0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3708      	adds	r7, #8
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	EpdDelayMsCallback(delaytime);
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	f7ff fd58 	bl	80012d0 <EpdDelayMsCallback>
}
 8001820:	bf00      	nop
 8001822:	3708      	adds	r7, #8
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	70fb      	strb	r3, [r7, #3]
	EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffcc 	bl	80017da <EPD_DigitalWrite>
	EPD_DigitalWrite(epd, epd->cs_pin, LOW);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2200      	movs	r2, #0
 8001848:	4619      	mov	r1, r3
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f7ff ffc5 	bl	80017da <EPD_DigitalWrite>
	EpdSpiTransferCallback(command);
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fd48 	bl	80012e8 <EpdSpiTransferCallback>
	EPD_DigitalWrite(epd, epd->cs_pin, HIGH);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2201      	movs	r2, #1
 800185e:	4619      	mov	r1, r3
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffba 	bl	80017da <EPD_DigitalWrite>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
	EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2201      	movs	r2, #1
 8001880:	4619      	mov	r1, r3
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ffa9 	bl	80017da <EPD_DigitalWrite>
	EPD_DigitalWrite(epd, epd->cs_pin, LOW);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffa2 	bl	80017da <EPD_DigitalWrite>
	EpdSpiTransferCallback(data);
 8001896:	78fb      	ldrb	r3, [r7, #3]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff fd25 	bl	80012e8 <EpdSpiTransferCallback>
	EPD_DigitalWrite(epd, epd->cs_pin, HIGH);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2201      	movs	r2, #1
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff97 	bl	80017da <EPD_DigitalWrite>
}
 80018ac:	bf00      	nop
 80018ae:	3708      	adds	r7, #8
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes LOW
 */
void EPD_WaitUntilIdle(EPD* epd) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 80018bc:	e003      	b.n	80018c6 <EPD_WaitUntilIdle+0x12>
		EPD_DelayMs(epd, 100);
 80018be:	2164      	movs	r1, #100	; 0x64
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffa5 	bl	8001810 <EPD_DelayMs>
	while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff ff92 	bl	80017f6 <EPD_DigitalRead>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d0f2      	beq.n	80018be <EPD_WaitUntilIdle+0xa>
	}
}
 80018d8:	bf00      	nop
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
	EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	4619      	mov	r1, r3
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ff71 	bl	80017da <EPD_DigitalWrite>
	EPD_DelayMs(epd, 1);
 80018f8:	2101      	movs	r1, #1
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ff88 	bl	8001810 <EPD_DelayMs>
	EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	4619      	mov	r1, r3
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff66 	bl	80017da <EPD_DigitalWrite>
	EPD_DelayMs(epd, 2);
 800190e:	2102      	movs	r1, #2
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ff7d 	bl	8001810 <EPD_DelayMs>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <EPD_SetFrameMemory>:
		const unsigned char* image_buffer,
		int x,
		int y,
		int image_width,
		int image_height
) {
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
	//EPD_SetMemoryArea(epd, x, y, x_end, y_end);
	//EPD_SetMemoryPointer(epd, x, y);

	int i;

	EPD_SendCommand(epd, WRITE_RAM);
 800192c:	2124      	movs	r1, #36	; 0x24
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f7ff ff7a 	bl	8001828 <EPD_SendCommand>
	for(i=0;i<4736;i++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e00a      	b.n	8001950 <EPD_SetFrameMemory+0x32>
	{
		EPD_SendData(epd,image_buffer[i]);
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	68ba      	ldr	r2, [r7, #8]
 800193e:	4413      	add	r3, r2
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4619      	mov	r1, r3
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f7ff ff92 	bl	800186e <EPD_SendData>
	for(i=0;i<4736;i++)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	3301      	adds	r3, #1
 800194e:	617b      	str	r3, [r7, #20]
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001956:	dbf0      	blt.n	800193a <EPD_SetFrameMemory+0x1c>
	}

	EPD_SendCommand(epd, WRITE_RAM_BASE);
 8001958:	2126      	movs	r1, #38	; 0x26
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f7ff ff64 	bl	8001828 <EPD_SendCommand>
	for(i=0;i<4736;i++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e00a      	b.n	800197c <EPD_SetFrameMemory+0x5e>
	{
		EPD_SendData(epd,image_buffer[i]);
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	68f8      	ldr	r0, [r7, #12]
 8001972:	f7ff ff7c 	bl	800186e <EPD_SendData>
	for(i=0;i<4736;i++)
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001982:	dbf0      	blt.n	8001966 <EPD_SetFrameMemory+0x48>
	}

	EPD_DisplayFrame(epd);
 8001984:	68f8      	ldr	r0, [r7, #12]
 8001986:	f000 f884 	bl	8001a92 <EPD_DisplayFrame>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <EPD_Clear_Full>:

/**
 *  @brief: clear the screen for init
 */

void EPD_Clear_Full(EPD* epd){
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af02      	add	r7, sp, #8
 8001998:	6078      	str	r0, [r7, #4]

	// Reset
	EPD_Reset(epd);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f7ff ffa1 	bl	80018e2 <EPD_Reset>

	// On met les luts
	EPD_SetLut(epd,epd->lut);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4619      	mov	r1, r3
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f89d 	bl	8001ae6 <EPD_SetLut>

	//
	EPD_SendCommand(epd, OTP_SELECTION);
 80019ac:	2137      	movs	r1, #55	; 0x37
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff3a 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd,0x00);
 80019b4:	2100      	movs	r1, #0
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ff59 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019bc:	2100      	movs	r1, #0
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff55 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019c4:	2100      	movs	r1, #0
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff ff51 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019cc:	2100      	movs	r1, #0
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff4d 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019d4:	2100      	movs	r1, #0
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff49 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x40);
 80019dc:	2140      	movs	r1, #64	; 0x40
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff45 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019e4:	2100      	movs	r1, #0
 80019e6:	6878      	ldr	r0, [r7, #4]
 80019e8:	f7ff ff41 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019ec:	2100      	movs	r1, #0
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff3d 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019f4:	2100      	movs	r1, #0
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ff39 	bl	800186e <EPD_SendData>
	EPD_SendData(epd,0x00);
 80019fc:	2100      	movs	r1, #0
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ff35 	bl	800186e <EPD_SendData>

	// Border waveform
	EPD_SendCommand(epd, BORDER_WAVEFORM_CONTROL);
 8001a04:	213c      	movs	r1, #60	; 0x3c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff ff0e 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd,0x80);
 8001a0c:	2180      	movs	r1, #128	; 0x80
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff2d 	bl	800186e <EPD_SendData>

	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8001a14:	2122      	movs	r1, #34	; 0x22
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f7ff ff06 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd,0xC0);
 8001a1c:	21c0      	movs	r1, #192	; 0xc0
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f7ff ff25 	bl	800186e <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8001a24:	2120      	movs	r1, #32
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff fefe 	bl	8001828 <EPD_SendCommand>

	// Mémoire
	EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8001a2c:	f240 1327 	movw	r3, #295	; 0x127
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	237f      	movs	r3, #127	; 0x7f
 8001a34:	2200      	movs	r2, #0
 8001a36:	2100      	movs	r1, #0
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f879 	bl	8001b30 <EPD_SetMemoryArea>
	EPD_SetMemoryPointer(epd,0,0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f8af 	bl	8001ba6 <EPD_SetMemoryPointer>

	EPD_SendCommand(epd, WRITE_RAM);   //Write Black and White image to RAM
 8001a48:	2124      	movs	r1, #36	; 0x24
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff feec 	bl	8001828 <EPD_SendCommand>
	for(int i=0;i<4736;++i)
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	e006      	b.n	8001a64 <EPD_Clear_Full+0xd2>
	{
		EPD_SendData(epd,0xFF);
 8001a56:	21ff      	movs	r1, #255	; 0xff
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7ff ff08 	bl	800186e <EPD_SendData>
	for(int i=0;i<4736;++i)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3301      	adds	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8001a6a:	dbf4      	blt.n	8001a56 <EPD_Clear_Full+0xc4>
	}

	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8001a6c:	2122      	movs	r1, #34	; 0x22
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff feda 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd,0xF7);
 8001a74:	21f7      	movs	r1, #247	; 0xf7
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fef9 	bl	800186e <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8001a7c:	2120      	movs	r1, #32
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fed2 	bl	8001828 <EPD_SendCommand>

	EPD_WaitUntilIdle(epd);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f7ff ff15 	bl	80018b4 <EPD_WaitUntilIdle>

}
 8001a8a:	bf00      	nop
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <EPD_DisplayFrame>:
 *          there are 2 memory areas embedded in the e-paper display
 *          but once this function is called,
 *          the the next action of SetFrameMemory or ClearFrame will
 *          set the other memory area.
 */
void EPD_DisplayFrame(EPD* epd) {
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
	EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8001a9a:	2122      	movs	r1, #34	; 0x22
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff fec3 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, 0xC7);
 8001aa2:	21c7      	movs	r1, #199	; 0xc7
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fee2 	bl	800186e <EPD_SendData>
	EPD_SendCommand(epd, MASTER_ACTIVATION);
 8001aaa:	2120      	movs	r1, #32
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff febb 	bl	8001828 <EPD_SendCommand>
	EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
 8001ab2:	21ff      	movs	r1, #255	; 0xff
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff feb7 	bl	8001828 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fefa 	bl	80018b4 <EPD_WaitUntilIdle>
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <EPD_Sleep>:
 *  @brief: After this command is transmitted, the chip would enter the 
 *          deep-sleep mode to save power. 
 *          The deep sleep mode would return to standby by hardware reset. 
 *          You can use EPD_Init() to awaken
 */
void EPD_Sleep(EPD* epd) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	EPD_SendCommand(epd, DEEP_SLEEP_MODE);
 8001ad0:	2110      	movs	r1, #16
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff fea8 	bl	8001828 <EPD_SendCommand>
	EPD_WaitUntilIdle(epd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff feeb 	bl	80018b4 <EPD_WaitUntilIdle>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <EPD_SetLut>:

/**
 *  @brief: set the look-up tables
 */
static void EPD_SetLut(EPD* epd, const unsigned char* lut) {
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b084      	sub	sp, #16
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	6039      	str	r1, [r7, #0]
	epd->lut = lut;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	619a      	str	r2, [r3, #24]
	EPD_SendCommand(epd, WRITE_LUT_REGISTER);
 8001af6:	2132      	movs	r1, #50	; 0x32
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fe95 	bl	8001828 <EPD_SendCommand>
	/* the length of look-up table is 30 bytes */
	for (int i = 0; i < 153; i++) {
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	e00b      	b.n	8001b1c <EPD_SetLut+0x36>
		EPD_SendData(epd, epd->lut[i]);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699a      	ldr	r2, [r3, #24]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff feac 	bl	800186e <EPD_SendData>
	for (int i = 0; i < 153; i++) {
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b98      	cmp	r3, #152	; 0x98
 8001b20:	ddf0      	ble.n	8001b04 <EPD_SetLut+0x1e>
	}
	EPD_WaitUntilIdle(epd);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fec6 	bl	80018b4 <EPD_WaitUntilIdle>
}
 8001b28:	bf00      	nop
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <EPD_SetMemoryArea>:

/**
 *  @brief: private function to specify the memory area for data R/W
 */
static void EPD_SetMemoryArea(EPD* epd, int x_start, int y_start, int x_end, int y_end) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	603b      	str	r3, [r7, #0]
	EPD_SendCommand(epd, SET_RAM_X_ADDRESS_START_END_POSITION);
 8001b3e:	2144      	movs	r1, #68	; 0x44
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f7ff fe71 	bl	8001828 <EPD_SendCommand>
	/* x point must be the multiple of 8 or the last 3 bits will be ignored */
	EPD_SendData(epd, (x_start >> 3) & 0xFF);
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	10db      	asrs	r3, r3, #3
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	68f8      	ldr	r0, [r7, #12]
 8001b50:	f7ff fe8d 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, (x_end >> 3) & 0xFF);
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	10db      	asrs	r3, r3, #3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fe86 	bl	800186e <EPD_SendData>
	EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_START_END_POSITION);
 8001b62:	2145      	movs	r1, #69	; 0x45
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f7ff fe5f 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, y_start & 0xFF);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fe7c 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, (y_start >> 8) & 0xFF);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	121b      	asrs	r3, r3, #8
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff fe75 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, y_end & 0xFF);
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	4619      	mov	r1, r3
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff fe6f 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, (y_end >> 8) & 0xFF);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	121b      	asrs	r3, r3, #8
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fe68 	bl	800186e <EPD_SendData>
}
 8001b9e:	bf00      	nop
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <EPD_SetMemoryPointer>:

/**
 *  @brief: private function to specify the start point for data R/W
 */
static void EPD_SetMemoryPointer(EPD* epd, int x, int y) {
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b084      	sub	sp, #16
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	60f8      	str	r0, [r7, #12]
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
	EPD_SendCommand(epd, SET_RAM_X_ADDRESS_COUNTER);
 8001bb2:	214e      	movs	r1, #78	; 0x4e
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f7ff fe37 	bl	8001828 <EPD_SendCommand>
	/* x point must be the multiple of 8 or the last 3 bits will be ignored */
	EPD_SendData(epd, (x >> 3) & 0xFF);
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	10db      	asrs	r3, r3, #3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f7ff fe53 	bl	800186e <EPD_SendData>
	EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_COUNTER);
 8001bc8:	214f      	movs	r1, #79	; 0x4f
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff fe2c 	bl	8001828 <EPD_SendCommand>
	EPD_SendData(epd, y & 0xFF);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f7ff fe49 	bl	800186e <EPD_SendData>
	EPD_SendData(epd, (y >> 8) & 0xFF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	121b      	asrs	r3, r3, #8
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	4619      	mov	r1, r3
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f7ff fe42 	bl	800186e <EPD_SendData>
	EPD_WaitUntilIdle(epd);
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff fe62 	bl	80018b4 <EPD_WaitUntilIdle>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <ReadRtcSsrValue+0x3c>)
 8001c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <ReadRtcSsrValue+0x3c>)
 8001c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001c0e:	e005      	b.n	8001c1c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <ReadRtcSsrValue+0x3c>)
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1f5      	bne.n	8001c10 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001c24:	683b      	ldr	r3, [r7, #0]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40002800 	.word	0x40002800

08001c38 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	460a      	mov	r2, r1
 8001c42:	71fb      	strb	r3, [r7, #7]
 8001c44:	4613      	mov	r3, r2
 8001c46:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001c48:	79ba      	ldrb	r2, [r7, #6]
 8001c4a:	491d      	ldr	r1, [pc, #116]	; (8001cc0 <LinkTimerAfter+0x88>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	3315      	adds	r3, #21
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d009      	beq.n	8001c76 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001c62:	7bfa      	ldrb	r2, [r7, #15]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <LinkTimerAfter+0x88>)
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	440b      	add	r3, r1
 8001c70:	3314      	adds	r3, #20
 8001c72:	79fa      	ldrb	r2, [r7, #7]
 8001c74:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001c76:	79fa      	ldrb	r2, [r7, #7]
 8001c78:	4911      	ldr	r1, [pc, #68]	; (8001cc0 <LinkTimerAfter+0x88>)
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	4413      	add	r3, r2
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	440b      	add	r3, r1
 8001c84:	3315      	adds	r3, #21
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001c8a:	79fa      	ldrb	r2, [r7, #7]
 8001c8c:	490c      	ldr	r1, [pc, #48]	; (8001cc0 <LinkTimerAfter+0x88>)
 8001c8e:	4613      	mov	r3, r2
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	4413      	add	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	440b      	add	r3, r1
 8001c98:	3314      	adds	r3, #20
 8001c9a:	79ba      	ldrb	r2, [r7, #6]
 8001c9c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001c9e:	79ba      	ldrb	r2, [r7, #6]
 8001ca0:	4907      	ldr	r1, [pc, #28]	; (8001cc0 <LinkTimerAfter+0x88>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	3315      	adds	r3, #21
 8001cae:	79fa      	ldrb	r2, [r7, #7]
 8001cb0:	701a      	strb	r2, [r3, #0]

  return;
 8001cb2:	bf00      	nop
}
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	200000ec 	.word	0x200000ec

08001cc4 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001cd4:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <LinkTimerBefore+0xb8>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	79ba      	ldrb	r2, [r7, #6]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d032      	beq.n	8001d46 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001ce0:	79ba      	ldrb	r2, [r7, #6]
 8001ce2:	4927      	ldr	r1, [pc, #156]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	440b      	add	r3, r1
 8001cee:	3314      	adds	r3, #20
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	4922      	ldr	r1, [pc, #136]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	440b      	add	r3, r1
 8001d02:	3315      	adds	r3, #21
 8001d04:	79fa      	ldrb	r2, [r7, #7]
 8001d06:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d08:	79fa      	ldrb	r2, [r7, #7]
 8001d0a:	491d      	ldr	r1, [pc, #116]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4413      	add	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	440b      	add	r3, r1
 8001d16:	3315      	adds	r3, #21
 8001d18:	79ba      	ldrb	r2, [r7, #6]
 8001d1a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001d1c:	79fa      	ldrb	r2, [r7, #7]
 8001d1e:	4918      	ldr	r1, [pc, #96]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	440b      	add	r3, r1
 8001d2a:	3314      	adds	r3, #20
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d30:	79ba      	ldrb	r2, [r7, #6]
 8001d32:	4913      	ldr	r1, [pc, #76]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3314      	adds	r3, #20
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001d44:	e014      	b.n	8001d70 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001d46:	79fa      	ldrb	r2, [r7, #7]
 8001d48:	490d      	ldr	r1, [pc, #52]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	440b      	add	r3, r1
 8001d54:	3315      	adds	r3, #21
 8001d56:	79ba      	ldrb	r2, [r7, #6]
 8001d58:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001d5a:	79ba      	ldrb	r2, [r7, #6]
 8001d5c:	4908      	ldr	r1, [pc, #32]	; (8001d80 <LinkTimerBefore+0xbc>)
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	440b      	add	r3, r1
 8001d68:	3314      	adds	r3, #20
 8001d6a:	79fa      	ldrb	r2, [r7, #7]
 8001d6c:	701a      	strb	r2, [r3, #0]
  return;
 8001d6e:	bf00      	nop
}
 8001d70:	3714      	adds	r7, #20
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	2000017c 	.word	0x2000017c
 8001d80:	200000ec 	.word	0x200000ec

08001d84 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d8e:	4b4e      	ldr	r3, [pc, #312]	; (8001ec8 <linkTimer+0x144>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	2b06      	cmp	r3, #6
 8001d96:	d118      	bne.n	8001dca <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001d98:	4b4b      	ldr	r3, [pc, #300]	; (8001ec8 <linkTimer+0x144>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4b4b      	ldr	r3, [pc, #300]	; (8001ecc <linkTimer+0x148>)
 8001da0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001da2:	4a49      	ldr	r2, [pc, #292]	; (8001ec8 <linkTimer+0x144>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001da8:	79fa      	ldrb	r2, [r7, #7]
 8001daa:	4949      	ldr	r1, [pc, #292]	; (8001ed0 <linkTimer+0x14c>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4413      	add	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	440b      	add	r3, r1
 8001db6:	3315      	adds	r3, #21
 8001db8:	2206      	movs	r2, #6
 8001dba:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001dbc:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <linkTimer+0x150>)
 8001dbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dc2:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	81fb      	strh	r3, [r7, #14]
 8001dc8:	e078      	b.n	8001ebc <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001dca:	f000 f909 	bl	8001fe0 <ReturnTimeElapsed>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001dd2:	79fa      	ldrb	r2, [r7, #7]
 8001dd4:	493e      	ldr	r1, [pc, #248]	; (8001ed0 <linkTimer+0x14c>)
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	00db      	lsls	r3, r3, #3
 8001dde:	440b      	add	r3, r1
 8001de0:	3308      	adds	r3, #8
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	89fb      	ldrh	r3, [r7, #14]
 8001de6:	79fa      	ldrb	r2, [r7, #7]
 8001de8:	4419      	add	r1, r3
 8001dea:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <linkTimer+0x14c>)
 8001dec:	4613      	mov	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4403      	add	r3, r0
 8001df6:	3308      	adds	r3, #8
 8001df8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	4934      	ldr	r1, [pc, #208]	; (8001ed0 <linkTimer+0x14c>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	3308      	adds	r3, #8
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <linkTimer+0x144>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	4a2e      	ldr	r2, [pc, #184]	; (8001ed0 <linkTimer+0x14c>)
 8001e18:	460b      	mov	r3, r1
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	440b      	add	r3, r1
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	3308      	adds	r3, #8
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d337      	bcc.n	8001e9c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001e2c:	4b26      	ldr	r3, [pc, #152]	; (8001ec8 <linkTimer+0x144>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001e32:	7b7a      	ldrb	r2, [r7, #13]
 8001e34:	4926      	ldr	r1, [pc, #152]	; (8001ed0 <linkTimer+0x14c>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	3315      	adds	r3, #21
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e46:	e013      	b.n	8001e70 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001e48:	7b7a      	ldrb	r2, [r7, #13]
 8001e4a:	4921      	ldr	r1, [pc, #132]	; (8001ed0 <linkTimer+0x14c>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	3315      	adds	r3, #21
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001e5c:	7b7a      	ldrb	r2, [r7, #13]
 8001e5e:	491c      	ldr	r1, [pc, #112]	; (8001ed0 <linkTimer+0x14c>)
 8001e60:	4613      	mov	r3, r2
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	4413      	add	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	440b      	add	r3, r1
 8001e6a:	3315      	adds	r3, #21
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001e70:	7b3b      	ldrb	r3, [r7, #12]
 8001e72:	2b06      	cmp	r3, #6
 8001e74:	d00b      	beq.n	8001e8e <linkTimer+0x10a>
 8001e76:	7b3a      	ldrb	r2, [r7, #12]
 8001e78:	4915      	ldr	r1, [pc, #84]	; (8001ed0 <linkTimer+0x14c>)
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	440b      	add	r3, r1
 8001e84:	3308      	adds	r3, #8
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d2dc      	bcs.n	8001e48 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001e8e:	7b7a      	ldrb	r2, [r7, #13]
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	4611      	mov	r1, r2
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fecf 	bl	8001c38 <LinkTimerAfter>
 8001e9a:	e00f      	b.n	8001ebc <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001e9c:	4b0a      	ldr	r3, [pc, #40]	; (8001ec8 <linkTimer+0x144>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff ff0c 	bl	8001cc4 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <linkTimer+0x144>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <linkTimer+0x148>)
 8001eb4:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001eb6:	4a04      	ldr	r2, [pc, #16]	; (8001ec8 <linkTimer+0x144>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	2000017c 	.word	0x2000017c
 8001ecc:	2000017d 	.word	0x2000017d
 8001ed0:	200000ec 	.word	0x200000ec
 8001ed4:	20000180 	.word	0x20000180

08001ed8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	71fb      	strb	r3, [r7, #7]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001ee8:	4b39      	ldr	r3, [pc, #228]	; (8001fd0 <UnlinkTimer+0xf8>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	79fa      	ldrb	r2, [r7, #7]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d111      	bne.n	8001f18 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001ef4:	4b36      	ldr	r3, [pc, #216]	; (8001fd0 <UnlinkTimer+0xf8>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <UnlinkTimer+0xfc>)
 8001efc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001efe:	79fa      	ldrb	r2, [r7, #7]
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3315      	adds	r3, #21
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <UnlinkTimer+0xf8>)
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e03e      	b.n	8001f96 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001f18:	79fa      	ldrb	r2, [r7, #7]
 8001f1a:	492f      	ldr	r1, [pc, #188]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	440b      	add	r3, r1
 8001f26:	3314      	adds	r3, #20
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	492a      	ldr	r1, [pc, #168]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f30:	4613      	mov	r3, r2
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4413      	add	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	440b      	add	r3, r1
 8001f3a:	3315      	adds	r3, #21
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001f40:	79f9      	ldrb	r1, [r7, #7]
 8001f42:	7bfa      	ldrb	r2, [r7, #15]
 8001f44:	4824      	ldr	r0, [pc, #144]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f46:	460b      	mov	r3, r1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	440b      	add	r3, r1
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4403      	add	r3, r0
 8001f50:	3315      	adds	r3, #21
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2d8      	uxtb	r0, r3
 8001f56:	4920      	ldr	r1, [pc, #128]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	440b      	add	r3, r1
 8001f62:	3315      	adds	r3, #21
 8001f64:	4602      	mov	r2, r0
 8001f66:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f68:	7bbb      	ldrb	r3, [r7, #14]
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d013      	beq.n	8001f96 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001f6e:	79f9      	ldrb	r1, [r7, #7]
 8001f70:	7bba      	ldrb	r2, [r7, #14]
 8001f72:	4819      	ldr	r0, [pc, #100]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f74:	460b      	mov	r3, r1
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	440b      	add	r3, r1
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4403      	add	r3, r0
 8001f7e:	3314      	adds	r3, #20
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2d8      	uxtb	r0, r3
 8001f84:	4914      	ldr	r1, [pc, #80]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f86:	4613      	mov	r3, r2
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4413      	add	r3, r2
 8001f8c:	00db      	lsls	r3, r3, #3
 8001f8e:	440b      	add	r3, r1
 8001f90:	3314      	adds	r3, #20
 8001f92:	4602      	mov	r2, r0
 8001f94:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001f96:	79fa      	ldrb	r2, [r7, #7]
 8001f98:	490f      	ldr	r1, [pc, #60]	; (8001fd8 <UnlinkTimer+0x100>)
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	4413      	add	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	440b      	add	r3, r1
 8001fa4:	330c      	adds	r3, #12
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <UnlinkTimer+0xf8>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b06      	cmp	r3, #6
 8001fb2:	d107      	bne.n	8001fc4 <UnlinkTimer+0xec>
 8001fb4:	79bb      	ldrb	r3, [r7, #6]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d104      	bne.n	8001fc4 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <UnlinkTimer+0x104>)
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  return;
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
}
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	2000017c 	.word	0x2000017c
 8001fd4:	2000017d 	.word	0x2000017d
 8001fd8:	200000ec 	.word	0x200000ec
 8001fdc:	20000180 	.word	0x20000180

08001fe0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001fe6:	4b1a      	ldr	r3, [pc, #104]	; (8002050 <ReturnTimeElapsed+0x70>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fee:	d026      	beq.n	800203e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001ff0:	f7ff fe02 	bl	8001bf8 <ReadRtcSsrValue>
 8001ff4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <ReturnTimeElapsed+0x70>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d805      	bhi.n	800200c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <ReturnTimeElapsed+0x70>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	607b      	str	r3, [r7, #4]
 800200a:	e00a      	b.n	8002022 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <ReturnTimeElapsed+0x74>)
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002018:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <ReturnTimeElapsed+0x70>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	4413      	add	r3, r2
 8002020:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <ReturnTimeElapsed+0x78>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	fb02 f303 	mul.w	r3, r2, r3
 800202e:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002030:	4b0a      	ldr	r3, [pc, #40]	; (800205c <ReturnTimeElapsed+0x7c>)
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	461a      	mov	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	40d3      	lsrs	r3, r2
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	b29b      	uxth	r3, r3
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000180 	.word	0x20000180
 8002054:	20000188 	.word	0x20000188
 8002058:	20000186 	.word	0x20000186
 800205c:	20000185 	.word	0x20000185

08002060 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	4603      	mov	r3, r0
 8002068:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d108      	bne.n	8002082 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002070:	f7ff fdc2 	bl	8001bf8 <ReadRtcSsrValue>
 8002074:	4603      	mov	r3, r0
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <RestartWakeupCounter+0x9c>)
 8002078:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800207a:	2003      	movs	r0, #3
 800207c:	f001 fa81 	bl	8003582 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002080:	e039      	b.n	80020f6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d803      	bhi.n	8002090 <RestartWakeupCounter+0x30>
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <RestartWakeupCounter+0xa0>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d002      	beq.n	8002096 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	3b01      	subs	r3, #1
 8002094:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002096:	bf00      	nop
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <RestartWakeupCounter+0xa4>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d0f8      	beq.n	8002098 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <RestartWakeupCounter+0xa4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <RestartWakeupCounter+0xa4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80020b6:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <RestartWakeupCounter+0xa8>)
 80020ba:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80020be:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80020c0:	2003      	movs	r0, #3
 80020c2:	f001 fa6c 	bl	800359e <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80020c6:	4b11      	ldr	r3, [pc, #68]	; (800210c <RestartWakeupCounter+0xac>)
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	0c1b      	lsrs	r3, r3, #16
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	88fa      	ldrh	r2, [r7, #6]
 80020d0:	490e      	ldr	r1, [pc, #56]	; (800210c <RestartWakeupCounter+0xac>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80020d6:	f7ff fd8f 	bl	8001bf8 <ReadRtcSsrValue>
 80020da:	4603      	mov	r3, r0
 80020dc:	4a07      	ldr	r2, [pc, #28]	; (80020fc <RestartWakeupCounter+0x9c>)
 80020de:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80020e0:	4b08      	ldr	r3, [pc, #32]	; (8002104 <RestartWakeupCounter+0xa4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	4b07      	ldr	r3, [pc, #28]	; (8002104 <RestartWakeupCounter+0xa4>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020ee:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80020f0:	f3af 8000 	nop.w
  return ;
 80020f4:	bf00      	nop
}
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000180 	.word	0x20000180
 8002100:	20000185 	.word	0x20000185
 8002104:	200001cc 	.word	0x200001cc
 8002108:	58000800 	.word	0x58000800
 800210c:	40002800 	.word	0x40002800

08002110 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002116:	4b45      	ldr	r3, [pc, #276]	; (800222c <RescheduleTimerList+0x11c>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002122:	d107      	bne.n	8002134 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002124:	bf00      	nop
 8002126:	4b42      	ldr	r3, [pc, #264]	; (8002230 <RescheduleTimerList+0x120>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1f8      	bne.n	8002126 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002134:	4b3e      	ldr	r3, [pc, #248]	; (8002230 <RescheduleTimerList+0x120>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <RescheduleTimerList+0x120>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002142:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002144:	4b3b      	ldr	r3, [pc, #236]	; (8002234 <RescheduleTimerList+0x124>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	493a      	ldr	r1, [pc, #232]	; (8002238 <RescheduleTimerList+0x128>)
 800214e:	4613      	mov	r3, r2
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	440b      	add	r3, r1
 8002158:	3308      	adds	r3, #8
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800215e:	f7ff ff3f 	bl	8001fe0 <ReturnTimeElapsed>
 8002162:	4603      	mov	r3, r0
 8002164:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	429a      	cmp	r2, r3
 800216c:	d205      	bcs.n	800217a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002172:	4b32      	ldr	r3, [pc, #200]	; (800223c <RescheduleTimerList+0x12c>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
 8002178:	e04d      	b.n	8002216 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	4a30      	ldr	r2, [pc, #192]	; (8002240 <RescheduleTimerList+0x130>)
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	b292      	uxth	r2, r2
 8002182:	4413      	add	r3, r2
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	4293      	cmp	r3, r2
 800218a:	d906      	bls.n	800219a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800218c:	4b2c      	ldr	r3, [pc, #176]	; (8002240 <RescheduleTimerList+0x130>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <RescheduleTimerList+0x12c>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]
 8002198:	e03d      	b.n	8002216 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	b29a      	uxth	r2, r3
 800219e:	88fb      	ldrh	r3, [r7, #6]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80021a4:	4b25      	ldr	r3, [pc, #148]	; (800223c <RescheduleTimerList+0x12c>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80021aa:	e034      	b.n	8002216 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80021ac:	7bfa      	ldrb	r2, [r7, #15]
 80021ae:	4922      	ldr	r1, [pc, #136]	; (8002238 <RescheduleTimerList+0x128>)
 80021b0:	4613      	mov	r3, r2
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	3308      	adds	r3, #8
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d20a      	bcs.n	80021da <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	491c      	ldr	r1, [pc, #112]	; (8002238 <RescheduleTimerList+0x128>)
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	440b      	add	r3, r1
 80021d2:	3308      	adds	r3, #8
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e013      	b.n	8002202 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	4916      	ldr	r1, [pc, #88]	; (8002238 <RescheduleTimerList+0x128>)
 80021de:	4613      	mov	r3, r2
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4413      	add	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	440b      	add	r3, r1
 80021e8:	3308      	adds	r3, #8
 80021ea:	6819      	ldr	r1, [r3, #0]
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	7bfa      	ldrb	r2, [r7, #15]
 80021f0:	1ac9      	subs	r1, r1, r3
 80021f2:	4811      	ldr	r0, [pc, #68]	; (8002238 <RescheduleTimerList+0x128>)
 80021f4:	4613      	mov	r3, r2
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4413      	add	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4403      	add	r3, r0
 80021fe:	3308      	adds	r3, #8
 8002200:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002202:	7bfa      	ldrb	r2, [r7, #15]
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <RescheduleTimerList+0x128>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	440b      	add	r3, r1
 8002210:	3315      	adds	r3, #21
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d1c7      	bne.n	80021ac <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800221c:	89bb      	ldrh	r3, [r7, #12]
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff ff1e 	bl	8002060 <RestartWakeupCounter>

  return ;
 8002224:	bf00      	nop
}
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40002800 	.word	0x40002800
 8002230:	200001cc 	.word	0x200001cc
 8002234:	2000017c 	.word	0x2000017c
 8002238:	200000ec 	.word	0x200000ec
 800223c:	20000184 	.word	0x20000184
 8002240:	2000018a 	.word	0x2000018a

08002244 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b08a      	sub	sp, #40	; 0x28
 8002248:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800224a:	f3ef 8310 	mrs	r3, PRIMASK
 800224e:	617b      	str	r3, [r7, #20]
  return(result);
 8002250:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002254:	b672      	cpsid	i
}
 8002256:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002258:	4b59      	ldr	r3, [pc, #356]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	22ca      	movs	r2, #202	; 0xca
 800225e:	625a      	str	r2, [r3, #36]	; 0x24
 8002260:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2253      	movs	r2, #83	; 0x53
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002268:	4b55      	ldr	r3, [pc, #340]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	4b54      	ldr	r3, [pc, #336]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002276:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002278:	4b52      	ldr	r3, [pc, #328]	; (80023c4 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002280:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002284:	4950      	ldr	r1, [pc, #320]	; (80023c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002286:	4613      	mov	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4413      	add	r3, r2
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	440b      	add	r3, r1
 8002290:	330c      	adds	r3, #12
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d16e      	bne.n	8002378 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800229a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800229e:	494a      	ldr	r1, [pc, #296]	; (80023c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80022ae:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022b2:	4945      	ldr	r1, [pc, #276]	; (80023c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	440b      	add	r3, r1
 80022be:	3310      	adds	r3, #16
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80022c4:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HW_TS_RTC_Wakeup_Handler+0x188>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d04c      	beq.n	8002368 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80022ce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80022d2:	493d      	ldr	r1, [pc, #244]	; (80023c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	440b      	add	r3, r1
 80022de:	330d      	adds	r3, #13
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d124      	bne.n	8002332 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80022e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80022ec:	2101      	movs	r1, #1
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff fdf2 	bl	8001ed8 <UnlinkTimer>
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	f383 8810 	msr	PRIMASK, r3
}
 80022fe:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002300:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002304:	4930      	ldr	r1, [pc, #192]	; (80023c8 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	440b      	add	r3, r1
 8002310:	3304      	adds	r3, #4
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f8de 	bl	80024dc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002320:	4b27      	ldr	r3, [pc, #156]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	22ca      	movs	r2, #202	; 0xca
 8002326:	625a      	str	r2, [r3, #36]	; 0x24
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2253      	movs	r2, #83	; 0x53
 800232e:	625a      	str	r2, [r3, #36]	; 0x24
 8002330:	e012      	b.n	8002358 <HW_TS_RTC_Wakeup_Handler+0x114>
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f383 8810 	msr	PRIMASK, r3
}
 800233c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800233e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f846 	bl	80023d4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	22ca      	movs	r2, #202	; 0xca
 800234e:	625a      	str	r2, [r3, #36]	; 0x24
 8002350:	4b1b      	ldr	r3, [pc, #108]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2253      	movs	r2, #83	; 0x53
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002358:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	4619      	mov	r1, r3
 8002360:	69b8      	ldr	r0, [r7, #24]
 8002362:	f000 f941 	bl	80025e8 <HW_TS_RTC_Int_AppNot>
 8002366:	e022      	b.n	80023ae <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002368:	f7ff fed2 	bl	8002110 <RescheduleTimerList>
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	f383 8810 	msr	PRIMASK, r3
}
 8002376:	e01a      	b.n	80023ae <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002378:	bf00      	nop
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0f8      	beq.n	800237a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002388:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	4b0b      	ldr	r3, [pc, #44]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002398:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800239c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f383 8810 	msr	PRIMASK, r3
}
 80023ac:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023ae:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80023b6:	bf00      	nop
}
 80023b8:	3728      	adds	r7, #40	; 0x28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	200001cc 	.word	0x200001cc
 80023c4:	2000017c 	.word	0x2000017c
 80023c8:	200000ec 	.word	0x200000ec
 80023cc:	20000184 	.word	0x20000184
 80023d0:	58000800 	.word	0x58000800

080023d4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023de:	f3ef 8310 	mrs	r3, PRIMASK
 80023e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80023e4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80023ec:	2003      	movs	r0, #3
 80023ee:	f001 f8ae 	bl	800354e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023f2:	4b34      	ldr	r3, [pc, #208]	; (80024c4 <HW_TS_Stop+0xf0>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	22ca      	movs	r2, #202	; 0xca
 80023f8:	625a      	str	r2, [r3, #36]	; 0x24
 80023fa:	4b32      	ldr	r3, [pc, #200]	; (80024c4 <HW_TS_Stop+0xf0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2253      	movs	r2, #83	; 0x53
 8002400:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002402:	79fa      	ldrb	r2, [r7, #7]
 8002404:	4930      	ldr	r1, [pc, #192]	; (80024c8 <HW_TS_Stop+0xf4>)
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	330c      	adds	r3, #12
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d142      	bne.n	80024a0 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	2100      	movs	r1, #0
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff fd5a 	bl	8001ed8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002424:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HW_TS_Stop+0xf8>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800242a:	7cfb      	ldrb	r3, [r7, #19]
 800242c:	2b06      	cmp	r3, #6
 800242e:	d12f      	bne.n	8002490 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HW_TS_Stop+0xfc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002438:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800243c:	d107      	bne.n	800244e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800243e:	bf00      	nop
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <HW_TS_Stop+0xf0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1f8      	bne.n	8002440 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800244e:	4b1d      	ldr	r3, [pc, #116]	; (80024c4 <HW_TS_Stop+0xf0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	4b1b      	ldr	r3, [pc, #108]	; (80024c4 <HW_TS_Stop+0xf0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800245e:	bf00      	nop
 8002460:	4b18      	ldr	r3, [pc, #96]	; (80024c4 <HW_TS_Stop+0xf0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f8      	beq.n	8002460 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800246e:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HW_TS_Stop+0xf0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HW_TS_Stop+0xf0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800247e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002480:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <HW_TS_Stop+0x100>)
 8002482:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002486:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002488:	2003      	movs	r0, #3
 800248a:	f001 f888 	bl	800359e <HAL_NVIC_ClearPendingIRQ>
 800248e:	e007      	b.n	80024a0 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <HW_TS_Stop+0x104>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	7cfa      	ldrb	r2, [r7, #19]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800249c:	f7ff fe38 	bl	8002110 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <HW_TS_Stop+0xf0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	22ff      	movs	r2, #255	; 0xff
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80024a8:	2003      	movs	r0, #3
 80024aa:	f001 f842 	bl	8003532 <HAL_NVIC_EnableIRQ>
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f383 8810 	msr	PRIMASK, r3
}
 80024b8:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80024ba:	bf00      	nop
}
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	200001cc 	.word	0x200001cc
 80024c8:	200000ec 	.word	0x200000ec
 80024cc:	2000017c 	.word	0x2000017c
 80024d0:	40002800 	.word	0x40002800
 80024d4:	58000800 	.word	0x58000800
 80024d8:	2000017d 	.word	0x2000017d

080024dc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	6039      	str	r1, [r7, #0]
 80024e6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80024e8:	79fa      	ldrb	r2, [r7, #7]
 80024ea:	493b      	ldr	r1, [pc, #236]	; (80025d8 <HW_TS_Start+0xfc>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	330c      	adds	r3, #12
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d103      	bne.n	8002508 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	4618      	mov	r0, r3
 8002504:	f7ff ff66 	bl	80023d4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002508:	f3ef 8310 	mrs	r3, PRIMASK
 800250c:	60fb      	str	r3, [r7, #12]
  return(result);
 800250e:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002510:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002512:	b672      	cpsid	i
}
 8002514:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002516:	2003      	movs	r0, #3
 8002518:	f001 f819 	bl	800354e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800251c:	4b2f      	ldr	r3, [pc, #188]	; (80025dc <HW_TS_Start+0x100>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	22ca      	movs	r2, #202	; 0xca
 8002522:	625a      	str	r2, [r3, #36]	; 0x24
 8002524:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <HW_TS_Start+0x100>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2253      	movs	r2, #83	; 0x53
 800252a:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	492a      	ldr	r1, [pc, #168]	; (80025d8 <HW_TS_Start+0xfc>)
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	440b      	add	r3, r1
 800253a:	330c      	adds	r3, #12
 800253c:	2202      	movs	r2, #2
 800253e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	4925      	ldr	r1, [pc, #148]	; (80025d8 <HW_TS_Start+0xfc>)
 8002544:	4613      	mov	r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	3308      	adds	r3, #8
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002554:	79fa      	ldrb	r2, [r7, #7]
 8002556:	4920      	ldr	r1, [pc, #128]	; (80025d8 <HW_TS_Start+0xfc>)
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	440b      	add	r3, r1
 8002562:	3304      	adds	r3, #4
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff fc0a 	bl	8001d84 <linkTimer>
 8002570:	4603      	mov	r3, r0
 8002572:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002574:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HW_TS_Start+0x104>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <HW_TS_Start+0x108>)
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	7c7a      	ldrb	r2, [r7, #17]
 8002582:	429a      	cmp	r2, r3
 8002584:	d002      	beq.n	800258c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002586:	f7ff fdc3 	bl	8002110 <RescheduleTimerList>
 800258a:	e013      	b.n	80025b4 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 800258c:	79fa      	ldrb	r2, [r7, #7]
 800258e:	4912      	ldr	r1, [pc, #72]	; (80025d8 <HW_TS_Start+0xfc>)
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	440b      	add	r3, r1
 800259a:	3308      	adds	r3, #8
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	8a7b      	ldrh	r3, [r7, #18]
 80025a0:	79fa      	ldrb	r2, [r7, #7]
 80025a2:	1ac9      	subs	r1, r1, r3
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <HW_TS_Start+0xfc>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	4403      	add	r3, r0
 80025b0:	3308      	adds	r3, #8
 80025b2:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HW_TS_Start+0x100>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	22ff      	movs	r2, #255	; 0xff
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80025bc:	2003      	movs	r0, #3
 80025be:	f000 ffb8 	bl	8003532 <HAL_NVIC_EnableIRQ>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f383 8810 	msr	PRIMASK, r3
}
 80025cc:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80025ce:	bf00      	nop
}
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200000ec 	.word	0x200000ec
 80025dc:	200001cc 	.word	0x200001cc
 80025e0:	2000017c 	.word	0x2000017c
 80025e4:	2000017d 	.word	0x2000017d

080025e8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	460b      	mov	r3, r1
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4798      	blx	r3

  return;
 80025fa:	bf00      	nop
}
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
	...

08002604 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	4613      	mov	r3, r2
 8002614:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800261a:	2300      	movs	r3, #0
 800261c:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10e      	bne.n	8002642 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002624:	4a17      	ldr	r2, [pc, #92]	; (8002684 <HW_UART_Transmit_DMA+0x80>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 800262a:	4b17      	ldr	r3, [pc, #92]	; (8002688 <HW_UART_Transmit_DMA+0x84>)
 800262c:	4a17      	ldr	r2, [pc, #92]	; (800268c <HW_UART_Transmit_DMA+0x88>)
 800262e:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002630:	89bb      	ldrh	r3, [r7, #12]
 8002632:	461a      	mov	r2, r3
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	4814      	ldr	r0, [pc, #80]	; (8002688 <HW_UART_Transmit_DMA+0x84>)
 8002638:	f003 feea 	bl	8006410 <HAL_UART_Transmit_DMA>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
            break;
 8002640:	e000      	b.n	8002644 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002642:	bf00      	nop
    }

    switch (hal_status)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b03      	cmp	r3, #3
 8002648:	d816      	bhi.n	8002678 <HW_UART_Transmit_DMA+0x74>
 800264a:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <HW_UART_Transmit_DMA+0x4c>)
 800264c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002650:	08002661 	.word	0x08002661
 8002654:	08002667 	.word	0x08002667
 8002658:	0800266d 	.word	0x0800266d
 800265c:	08002673 	.word	0x08002673
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002660:	2300      	movs	r3, #0
 8002662:	75bb      	strb	r3, [r7, #22]
            break;
 8002664:	e009      	b.n	800267a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002666:	2301      	movs	r3, #1
 8002668:	75bb      	strb	r3, [r7, #22]
            break;
 800266a:	e006      	b.n	800267a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 800266c:	2302      	movs	r3, #2
 800266e:	75bb      	strb	r3, [r7, #22]
            break;
 8002670:	e003      	b.n	800267a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002672:	2303      	movs	r3, #3
 8002674:	75bb      	strb	r3, [r7, #22]
            break;
 8002676:	e000      	b.n	800267a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002678:	bf00      	nop
    }

    return hw_status;
 800267a:	7dbb      	ldrb	r3, [r7, #22]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000018c 	.word	0x2000018c
 8002688:	20000254 	.word	0x20000254
 800268c:	40013800 	.word	0x40013800

08002690 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b09      	ldr	r3, [pc, #36]	; (80026c4 <HAL_UART_TxCpltCallback+0x34>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d107      	bne.n	80026b4 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_UART_TxCpltCallback+0x38>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_UART_TxCpltCallback+0x38>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4798      	blx	r3
            }
            break;
 80026b2:	e001      	b.n	80026b8 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80026b4:	bf00      	nop
 80026b6:	e000      	b.n	80026ba <HAL_UART_TxCpltCallback+0x2a>
            break;
 80026b8:	bf00      	nop
    }

    return;
 80026ba:	bf00      	nop
}
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40013800 	.word	0x40013800
 80026c8:	2000018c 	.word	0x2000018c

080026cc <LL_AHB1_GRP1_EnableClock>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80026d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80026e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4013      	ands	r3, r2
 80026ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	bf00      	nop
 80026f4:	3714      	adds	r7, #20
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <LL_AHB2_GRP1_EnableClock>:
{
 80026fe:	b480      	push	{r7}
 8002700:	b085      	sub	sp, #20
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800270c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4313      	orrs	r3, r2
 8002714:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002722:	68fb      	ldr	r3, [r7, #12]
}
 8002724:	bf00      	nop
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08e      	sub	sp, #56	; 0x38
 8002734:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 8002736:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 800273a:	f005 ff6f 	bl	800861c <malloc>
 800273e:	4603      	mov	r3, r0
 8002740:	62fb      	str	r3, [r7, #44]	; 0x2c
	char time_string[] = {'0', '0', ':', '0', '0', '\0'};
 8002742:	4a5a      	ldr	r2, [pc, #360]	; (80028ac <main+0x17c>)
 8002744:	f107 031c 	add.w	r3, r7, #28
 8002748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800274c:	6018      	str	r0, [r3, #0]
 800274e:	3304      	adds	r3, #4
 8002750:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002752:	f000 fd07 	bl	8003164 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002756:	f7fe ff1f 	bl	8001598 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800275a:	f000 f8c5 	bl	80028e8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800275e:	f000 f929 	bl	80029b4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002762:	f000 f947 	bl	80029f4 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002766:	f000 f9e5 	bl	8002b34 <MX_GPIO_Init>
  MX_DMA_Init();
 800276a:	f000 f9d1 	bl	8002b10 <MX_DMA_Init>
  MX_SPI2_Init();
 800276e:	f000 f991 	bl	8002a94 <MX_SPI2_Init>
  MX_RF_Init();
 8002772:	f000 f953 	bl	8002a1c <MX_RF_Init>
  MX_RTC_Init();
 8002776:	f000 f959 	bl	8002a2c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

	// DEBUG Attente téléversage
	HAL_Delay(3000);
 800277a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800277e:	f7fe ff6f 	bl	8001660 <HAL_Delay>
	// Fin Attente téléversage

	printf("\n\r ** LuniOne v1.0.3 ** \n\r");
 8002782:	484b      	ldr	r0, [pc, #300]	; (80028b0 <main+0x180>)
 8002784:	f006 f8fc 	bl	8008980 <iprintf>


	printf("DEBUT de l'initialisation \n\r");
 8002788:	484a      	ldr	r0, [pc, #296]	; (80028b4 <main+0x184>)
 800278a:	f006 f8f9 	bl	8008980 <iprintf>
	EPD epd;
	if (EPD_Init(&epd, lut_full_update) != 0) {
 800278e:	463b      	mov	r3, r7
 8002790:	4949      	ldr	r1, [pc, #292]	; (80028b8 <main+0x188>)
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe ff89 	bl	80016aa <EPD_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d005      	beq.n	80027aa <main+0x7a>
		printf("e-Paper init failed \n\r");
 800279e:	4847      	ldr	r0, [pc, #284]	; (80028bc <main+0x18c>)
 80027a0:	f006 f8ee 	bl	8008980 <iprintf>
		return -1;
 80027a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a8:	e07b      	b.n	80028a2 <main+0x172>
	}
	else{
		printf("e-Paper init done \n\r");
 80027aa:	4845      	ldr	r0, [pc, #276]	; (80028c0 <main+0x190>)
 80027ac:	f006 f8e8 	bl	8008980 <iprintf>
	}

	printf("Debut du clear...\r\n");
 80027b0:	4844      	ldr	r0, [pc, #272]	; (80028c4 <main+0x194>)
 80027b2:	f006 f96b 	bl	8008a8c <puts>
	EPD_Clear_Full(&epd);
 80027b6:	463b      	mov	r3, r7
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f8ea 	bl	8001992 <EPD_Clear_Full>
	printf("Fin du clear...\r\n");
 80027be:	4842      	ldr	r0, [pc, #264]	; (80028c8 <main+0x198>)
 80027c0:	f006 f964 	bl	8008a8c <puts>


	// Nouvel init après
	if (EPD_Init(&epd, lut_full_update) != 0) {
 80027c4:	463b      	mov	r3, r7
 80027c6:	493c      	ldr	r1, [pc, #240]	; (80028b8 <main+0x188>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe ff6e 	bl	80016aa <EPD_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <main+0xb0>
		printf("e-Paper init failed \n\r");
 80027d4:	4839      	ldr	r0, [pc, #228]	; (80028bc <main+0x18c>)
 80027d6:	f006 f8d3 	bl	8008980 <iprintf>
		return -1;
 80027da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027de:	e060      	b.n	80028a2 <main+0x172>
	}
	else{
		printf("e-Paper init done \n\r");
 80027e0:	4837      	ldr	r0, [pc, #220]	; (80028c0 <main+0x190>)
 80027e2:	f006 f8cd 	bl	8008980 <iprintf>
	}

	// Pause
	EPD_DelayMs(&epd,1000);
 80027e6:	463b      	mov	r3, r7
 80027e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff f80f 	bl	8001810 <EPD_DelayMs>

	printf("Debut affichage photo...\r\n");
 80027f2:	4836      	ldr	r0, [pc, #216]	; (80028cc <main+0x19c>)
 80027f4:	f006 f94a 	bl	8008a8c <puts>

    //Create a new image cache
    UBYTE *BlackImage;
    UWORD Imagesize = ((epd.width % 8 == 0)? (epd.width / 8 ): (epd.width / 8 + 1)) * epd.height;
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	f003 0307 	and.w	r3, r3, #7
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d106      	bne.n	8002810 <main+0xe0>
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	da00      	bge.n	800280a <main+0xda>
 8002808:	3307      	adds	r3, #7
 800280a:	10db      	asrs	r3, r3, #3
 800280c:	b29b      	uxth	r3, r3
 800280e:	e006      	b.n	800281e <main+0xee>
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	da00      	bge.n	8002818 <main+0xe8>
 8002816:	3307      	adds	r3, #7
 8002818:	10db      	asrs	r3, r3, #3
 800281a:	3301      	adds	r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	697a      	ldr	r2, [r7, #20]
 8002820:	b292      	uxth	r2, r2
 8002822:	fb13 f302 	smulbb	r3, r3, r2
 8002826:	857b      	strh	r3, [r7, #42]	; 0x2a
    if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 8002828:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800282a:	4618      	mov	r0, r3
 800282c:	f005 fef6 	bl	800861c <malloc>
 8002830:	4603      	mov	r3, r0
 8002832:	627b      	str	r3, [r7, #36]	; 0x24
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <main+0x116>
        printf("Failed to apply for black memory...\r\n");
 800283a:	4825      	ldr	r0, [pc, #148]	; (80028d0 <main+0x1a0>)
 800283c:	f006 f926 	bl	8008a8c <puts>
        return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002844:	e02d      	b.n	80028a2 <main+0x172>
    }
    printf("Paint_NewImage\r\n");
 8002846:	4823      	ldr	r0, [pc, #140]	; (80028d4 <main+0x1a4>)
 8002848:	f006 f920 	bl	8008a8c <puts>

    Paint_NewImage(BlackImage, epd.width, epd.height, 0, WHITE);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	b299      	uxth	r1, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	b29a      	uxth	r2, r3
 8002854:	23ff      	movs	r3, #255	; 0xff
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800285c:	f7fe fb3c 	bl	8000ed8 <Paint_NewImage>
	Paint_SelectImage(BlackImage);
 8002860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002862:	f7fe fb8f 	bl	8000f84 <Paint_SelectImage>
	GUI_ReadBmp("./res/luniwave.bmp", 0, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	2100      	movs	r1, #0
 800286a:	481b      	ldr	r0, [pc, #108]	; (80028d8 <main+0x1a8>)
 800286c:	f7fe f96c 	bl	8000b48 <GUI_ReadBmp>

	EPD_SetFrameMemory(&epd, BlackImage, 0, 0, epd.width, epd.height);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	4638      	mov	r0, r7
 8002876:	9201      	str	r2, [sp, #4]
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2300      	movs	r3, #0
 800287c:	2200      	movs	r2, #0
 800287e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002880:	f7ff f84d 	bl	800191e <EPD_SetFrameMemory>
	//EPD_SetFrameMemory(&epd, LUNIWAVE_DATA, 0, 0, epd.width, epd.height);

	printf("Fin affichage photo...\r\n");
 8002884:	4815      	ldr	r0, [pc, #84]	; (80028dc <main+0x1ac>)
 8002886:	f006 f901 	bl	8008a8c <puts>

	printf("Debut mise en veille ...\r\n");
 800288a:	4815      	ldr	r0, [pc, #84]	; (80028e0 <main+0x1b0>)
 800288c:	f006 f8fe 	bl	8008a8c <puts>
	EPD_Sleep(&epd);
 8002890:	463b      	mov	r3, r7
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff f918 	bl	8001ac8 <EPD_Sleep>
	printf("Fin de mise en veille ...\r\n");
 8002898:	4812      	ldr	r0, [pc, #72]	; (80028e4 <main+0x1b4>)
 800289a:	f006 f8f7 	bl	8008a8c <puts>

	return -1;
 800289e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff

    /* USER CODE BEGIN 3 */

	}
  /* USER CODE END 3 */
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3730      	adds	r7, #48	; 0x30
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	0800ad30 	.word	0x0800ad30
 80028b0:	0800abe4 	.word	0x0800abe4
 80028b4:	0800ac00 	.word	0x0800ac00
 80028b8:	0800ad64 	.word	0x0800ad64
 80028bc:	0800ac20 	.word	0x0800ac20
 80028c0:	0800ac38 	.word	0x0800ac38
 80028c4:	0800ac50 	.word	0x0800ac50
 80028c8:	0800ac64 	.word	0x0800ac64
 80028cc:	0800ac78 	.word	0x0800ac78
 80028d0:	0800ac94 	.word	0x0800ac94
 80028d4:	0800acbc 	.word	0x0800acbc
 80028d8:	0800accc 	.word	0x0800accc
 80028dc:	0800ace0 	.word	0x0800ace0
 80028e0:	0800acf8 	.word	0x0800acf8
 80028e4:	0800ad14 	.word	0x0800ad14

080028e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b09a      	sub	sp, #104	; 0x68
 80028ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ee:	f107 0320 	add.w	r3, r7, #32
 80028f2:	2248      	movs	r2, #72	; 0x48
 80028f4:	2100      	movs	r1, #0
 80028f6:	4618      	mov	r0, r3
 80028f8:	f005 fea6 	bl	8008648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028fc:	1d3b      	adds	r3, r7, #4
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]
 800290a:	615a      	str	r2, [r3, #20]
 800290c:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <SystemClock_Config+0xc8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002916:	4a26      	ldr	r2, [pc, #152]	; (80029b0 <SystemClock_Config+0xc8>)
 8002918:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800291c:	6013      	str	r3, [r2, #0]
 800291e:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <SystemClock_Config+0xc8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 800292a:	230b      	movs	r3, #11
 800292c:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800292e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002938:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800293a:	2340      	movs	r3, #64	; 0x40
 800293c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800293e:	2305      	movs	r3, #5
 8002940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002942:	2302      	movs	r3, #2
 8002944:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002946:	2303      	movs	r3, #3
 8002948:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800294a:	2310      	movs	r3, #16
 800294c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800294e:	2308      	movs	r3, #8
 8002950:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002952:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002956:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002958:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800295c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002964:	f107 0320 	add.w	r3, r7, #32
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fe13 	bl	8004594 <HAL_RCC_OscConfig>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002974:	f000 f96e 	bl	8002c54 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002978:	236f      	movs	r3, #111	; 0x6f
 800297a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800297c:	2303      	movs	r3, #3
 800297e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV4;
 8002990:	2390      	movs	r3, #144	; 0x90
 8002992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f002 f96f 	bl	8004c7c <HAL_RCC_ClockConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80029a4:	f000 f956 	bl	8002c54 <Error_Handler>
  }
}
 80029a8:	bf00      	nop
 80029aa:	3768      	adds	r7, #104	; 0x68
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	58000400 	.word	0x58000400

080029b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b094      	sub	sp, #80	; 0x50
 80029b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029ba:	463b      	mov	r3, r7
 80029bc:	2250      	movs	r2, #80	; 0x50
 80029be:	2100      	movs	r1, #0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f005 fe41 	bl	8008648 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80029c6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80029ca:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 80029cc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80029d2:	2300      	movs	r3, #0
 80029d4:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029da:	463b      	mov	r3, r7
 80029dc:	4618      	mov	r0, r3
 80029de:	f002 fd5e 	bl	800549e <HAL_RCCEx_PeriphCLKConfig>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80029e8:	f000 f934 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80029ec:	bf00      	nop
 80029ee:	3750      	adds	r7, #80	; 0x50
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_IPCC_Init+0x20>)
 80029fa:	4a07      	ldr	r2, [pc, #28]	; (8002a18 <MX_IPCC_Init+0x24>)
 80029fc:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80029fe:	4805      	ldr	r0, [pc, #20]	; (8002a14 <MX_IPCC_Init+0x20>)
 8002a00:	f001 f9c6 	bl	8003d90 <HAL_IPCC_Init>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002a0a:	f000 f923 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000190 	.word	0x20000190
 8002a18:	58000c00 	.word	0x58000c00

08002a1c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002a30:	4b16      	ldr	r3, [pc, #88]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a32:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <MX_RTC_Init+0x64>)
 8002a34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002a3c:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a3e:	220f      	movs	r2, #15
 8002a40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002a42:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002a48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002a50:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002a5c:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002a62:	480a      	ldr	r0, [pc, #40]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a64:	f002 ffa2 	bl	80059ac <HAL_RTC_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002a6e:	f000 f8f1 	bl	8002c54 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_RTC_Init+0x60>)
 8002a78:	f003 f898 	bl	8005bac <HAL_RTCEx_SetWakeUpTimer_IT>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002a82:	f000 f8e7 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	200001cc 	.word	0x200001cc
 8002a90:	40002800 	.word	0x40002800

08002a94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002a9a:	4a1c      	ldr	r2, [pc, #112]	; (8002b0c <MX_SPI2_Init+0x78>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8002aa6:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aa8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002aac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aae:	4b16      	ldr	r3, [pc, #88]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ab0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ab4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002abc:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ac2:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ac8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002aca:	4b0f      	ldr	r3, [pc, #60]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002acc:	2208      	movs	r2, #8
 8002ace:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad6:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002adc:	4b0a      	ldr	r3, [pc, #40]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002ae2:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002ae4:	2207      	movs	r2, #7
 8002ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ae8:	4b07      	ldr	r3, [pc, #28]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aee:	4b06      	ldr	r3, [pc, #24]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002af0:	2208      	movs	r2, #8
 8002af2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002af4:	4804      	ldr	r0, [pc, #16]	; (8002b08 <MX_SPI2_Init+0x74>)
 8002af6:	f003 f915 	bl	8005d24 <HAL_SPI_Init>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8002b00:	f000 f8a8 	bl	8002c54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200001f0 	.word	0x200001f0
 8002b0c:	40003800 	.word	0x40003800

08002b10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002b14:	2004      	movs	r0, #4
 8002b16:	f7ff fdd9 	bl	80026cc <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b1a:	2001      	movs	r0, #1
 8002b1c:	f7ff fdd6 	bl	80026cc <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	200b      	movs	r0, #11
 8002b26:	f000 fcea 	bl	80034fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002b2a:	200b      	movs	r0, #11
 8002b2c:	f000 fd01 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 8002b30:	bf00      	nop
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3a:	1d3b      	adds	r3, r7, #4
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
 8002b46:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b48:	2004      	movs	r0, #4
 8002b4a:	f7ff fdd8 	bl	80026fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7ff fdd5 	bl	80026fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	2002      	movs	r0, #2
 8002b56:	f7ff fdd2 	bl	80026fe <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b5a:	2008      	movs	r0, #8
 8002b5c:	f7ff fdcf 	bl	80026fe <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002b60:	2200      	movs	r2, #0
 8002b62:	2123      	movs	r1, #35	; 0x23
 8002b64:	4838      	ldr	r0, [pc, #224]	; (8002c48 <MX_GPIO_Init+0x114>)
 8002b66:	f001 f8d7 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8002b70:	4836      	ldr	r0, [pc, #216]	; (8002c4c <MX_GPIO_Init+0x118>)
 8002b72:	f001 f8d1 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b80:	f001 f8ca 	bl	8003d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b84:	2310      	movs	r3, #16
 8002b86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	4619      	mov	r1, r3
 8002b94:	482d      	ldr	r0, [pc, #180]	; (8002c4c <MX_GPIO_Init+0x118>)
 8002b96:	f000 ff37 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002b9a:	2323      	movs	r3, #35	; 0x23
 8002b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002baa:	1d3b      	adds	r3, r7, #4
 8002bac:	4619      	mov	r1, r3
 8002bae:	4826      	ldr	r0, [pc, #152]	; (8002c48 <MX_GPIO_Init+0x114>)
 8002bb0:	f000 ff2a 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8002bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	1d3b      	adds	r3, r7, #4
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4820      	ldr	r0, [pc, #128]	; (8002c48 <MX_GPIO_Init+0x114>)
 8002bc8:	f000 ff1e 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DC_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin;
 8002bcc:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8002bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bde:	1d3b      	adds	r3, r7, #4
 8002be0:	4619      	mov	r1, r3
 8002be2:	481a      	ldr	r0, [pc, #104]	; (8002c4c <MX_GPIO_Init+0x118>)
 8002be4:	f000 ff10 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002be8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002bec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002bfa:	230a      	movs	r3, #10
 8002bfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bfe:	1d3b      	adds	r3, r7, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c06:	f000 feff 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_RST_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8002c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c10:	2301      	movs	r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8002c1c:	1d3b      	adds	r3, r7, #4
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c24:	f000 fef0 	bl	8003a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c34:	1d3b      	adds	r3, r7, #4
 8002c36:	4619      	mov	r1, r3
 8002c38:	4805      	ldr	r0, [pc, #20]	; (8002c50 <MX_GPIO_Init+0x11c>)
 8002c3a:	f000 fee5 	bl	8003a08 <HAL_GPIO_Init>

}
 8002c3e:	bf00      	nop
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48000800 	.word	0x48000800
 8002c50:	48000c00 	.word	0x48000c00

08002c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c58:	b672      	cpsid	i
}
 8002c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002c5c:	e7fe      	b.n	8002c5c <Error_Handler+0x8>

08002c5e <LL_RCC_EnableRTC>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002c62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002c76:	bf00      	nop
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <LL_AHB2_GRP1_EnableClock>:
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002c88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
}
 8002ca6:	bf00      	nop
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_AHB3_GRP1_EnableClock>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002cca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4013      	ands	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d08:	68fb      	ldr	r3, [r7, #12]
}
 8002d0a:	bf00      	nop
 8002d0c:	3714      	adds	r7, #20
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002d1a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002d1e:	f7ff ffc8 	bl	8002cb2 <LL_AHB3_GRP1_EnableClock>

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d22:	2007      	movs	r0, #7
 8002d24:	f000 fbe0 	bl	80034e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	202e      	movs	r0, #46	; 0x2e
 8002d2e:	f000 fbe6 	bl	80034fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002d32:	202e      	movs	r0, #46	; 0x2e
 8002d34:	f000 fbfd 	bl	8003532 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_IPCC_MspInit+0x44>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d113      	bne.n	8002d76 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002d4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002d52:	f7ff ffae 	bl	8002cb2 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002d56:	2200      	movs	r2, #0
 8002d58:	2100      	movs	r1, #0
 8002d5a:	202c      	movs	r0, #44	; 0x2c
 8002d5c:	f000 fbcf 	bl	80034fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002d60:	202c      	movs	r0, #44	; 0x2c
 8002d62:	f000 fbe6 	bl	8003532 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002d66:	2200      	movs	r2, #0
 8002d68:	2100      	movs	r1, #0
 8002d6a:	202d      	movs	r0, #45	; 0x2d
 8002d6c:	f000 fbc7 	bl	80034fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002d70:	202d      	movs	r0, #45	; 0x2d
 8002d72:	f000 fbde 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	58000c00 	.word	0x58000c00

08002d84 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b096      	sub	sp, #88	; 0x58
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d8c:	f107 0308 	add.w	r3, r7, #8
 8002d90:	2250      	movs	r2, #80	; 0x50
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f005 fc57 	bl	8008648 <memset>
  if(hrtc->Instance==RTC)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <HAL_RTC_MspInit+0x64>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d11d      	bne.n	8002de0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002da4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002da8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002daa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dae:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002db0:	f107 0308 	add.w	r3, r7, #8
 8002db4:	4618      	mov	r0, r3
 8002db6:	f002 fb72 	bl	800549e <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002dc0:	f7ff ff48 	bl	8002c54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002dc4:	f7ff ff4b 	bl	8002c5e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002dc8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002dcc:	f7ff ff8a 	bl	8002ce4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	2003      	movs	r0, #3
 8002dd6:	f000 fb92 	bl	80034fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002dda:	2003      	movs	r0, #3
 8002ddc:	f000 fba9 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002de0:	bf00      	nop
 8002de2:	3758      	adds	r7, #88	; 0x58
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40002800 	.word	0x40002800

08002dec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df4:	f107 030c 	add.w	r3, r7, #12
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
 8002dfc:	605a      	str	r2, [r3, #4]
 8002dfe:	609a      	str	r2, [r3, #8]
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <HAL_SPI_MspInit+0x84>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d12b      	bne.n	8002e66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002e0e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e12:	f7ff ff67 	bl	8002ce4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e16:	2004      	movs	r0, #4
 8002e18:	f7ff ff32 	bl	8002c80 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	f7ff ff2f 	bl	8002c80 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e22:	2302      	movs	r3, #2
 8002e24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e26:	2302      	movs	r3, #2
 8002e28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8002e32:	2303      	movs	r3, #3
 8002e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e36:	f107 030c 	add.w	r3, r7, #12
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	480d      	ldr	r0, [pc, #52]	; (8002e74 <HAL_SPI_MspInit+0x88>)
 8002e3e:	f000 fde3 	bl	8003a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e46:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e48:	2302      	movs	r3, #2
 8002e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e50:	2302      	movs	r3, #2
 8002e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002e54:	2305      	movs	r3, #5
 8002e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e58:	f107 030c 	add.w	r3, r7, #12
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e62:	f000 fdd1 	bl	8003a08 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40003800 	.word	0x40003800
 8002e74:	48000800 	.word	0x48000800

08002e78 <PendSV_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e8a:	f000 f9c5 	bl	8003218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002e96:	f7ff f9d5 	bl	8002244 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ea4:	4802      	ldr	r0, [pc, #8]	; (8002eb0 <DMA1_Channel1_IRQHandler+0x10>)
 8002ea6:	f000 fcc1 	bl	800382c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200002e8 	.word	0x200002e8

08002eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	; (8002ec4 <USART1_IRQHandler+0x10>)
 8002eba:	f003 fb29 	bl	8006510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000254 	.word	0x20000254

08002ec8 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8002ecc:	f004 fe44 	bl	8007b58 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002ed0:	bf00      	nop
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002ed8:	f004 fe76 	bl	8007bc8 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002ee4:	f000 ff30 	bl	8003d48 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002ee8:	bf00      	nop
 8002eea:	bd80      	pop	{r7, pc}

08002eec <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ef6:	f004 fef1 	bl	8007cdc <__errno>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2216      	movs	r2, #22
 8002efe:	601a      	str	r2, [r3, #0]
  return -1;
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <_exit>:

void _exit (int status)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ffe7 	bl	8002eec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f1e:	e7fe      	b.n	8002f1e <_exit+0x12>

08002f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e00a      	b.n	8002f48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f32:	f3af 8000 	nop.w
 8002f36:	4601      	mov	r1, r0
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	60ba      	str	r2, [r7, #8]
 8002f3e:	b2ca      	uxtb	r2, r1
 8002f40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	3301      	adds	r3, #1
 8002f46:	617b      	str	r3, [r7, #20]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	dbf0      	blt.n	8002f32 <_read+0x12>
  }

  return len;
 8002f50:	687b      	ldr	r3, [r7, #4]
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3718      	adds	r7, #24
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <_close>:
  }
  return len;
}

int _close(int file)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f82:	605a      	str	r2, [r3, #4]
  return 0;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr

08002f92 <_isatty>:

int _isatty(int file)
{
 8002f92:	b480      	push	{r7}
 8002f94:	b083      	sub	sp, #12
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f9a:	2301      	movs	r3, #1
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <_open>:

int _open(char *path, int flags, ...)
{
 8002fc2:	b40e      	push	{r1, r2, r3}
 8002fc4:	b480      	push	{r7}
 8002fc6:	b082      	sub	sp, #8
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  (void)path;
  (void)flags;
  /* Pretend like we always fail */
  return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	b003      	add	sp, #12
 8002fdc:	4770      	bx	lr
	...

08002fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fe8:	4a14      	ldr	r2, [pc, #80]	; (800303c <_sbrk+0x5c>)
 8002fea:	4b15      	ldr	r3, [pc, #84]	; (8003040 <_sbrk+0x60>)
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <_sbrk+0x64>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <_sbrk+0x64>)
 8002ffe:	4a12      	ldr	r2, [pc, #72]	; (8003048 <_sbrk+0x68>)
 8003000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <_sbrk+0x64>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	429a      	cmp	r2, r3
 800300e:	d207      	bcs.n	8003020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003010:	f004 fe64 	bl	8007cdc <__errno>
 8003014:	4603      	mov	r3, r0
 8003016:	220c      	movs	r2, #12
 8003018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800301a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800301e:	e009      	b.n	8003034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <_sbrk+0x64>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003026:	4b07      	ldr	r3, [pc, #28]	; (8003044 <_sbrk+0x64>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	4a05      	ldr	r2, [pc, #20]	; (8003044 <_sbrk+0x64>)
 8003030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20030000 	.word	0x20030000
 8003040:	00000400 	.word	0x00000400
 8003044:	20000348 	.word	0x20000348
 8003048:	20000398 	.word	0x20000398

0800304c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003050:	4b24      	ldr	r3, [pc, #144]	; (80030e4 <SystemInit+0x98>)
 8003052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003056:	4a23      	ldr	r2, [pc, #140]	; (80030e4 <SystemInit+0x98>)
 8003058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800305c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003074:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8003078:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800307a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003084:	4b18      	ldr	r3, [pc, #96]	; (80030e8 <SystemInit+0x9c>)
 8003086:	4013      	ands	r3, r2
 8003088:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800308a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003096:	f023 0305 	bic.w	r3, r3, #5
 800309a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800309e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80030a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030aa:	f023 0301 	bic.w	r3, r3, #1
 80030ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80030b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030b6:	4a0d      	ldr	r2, [pc, #52]	; (80030ec <SystemInit+0xa0>)
 80030b8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80030ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030be:	4a0b      	ldr	r2, [pc, #44]	; (80030ec <SystemInit+0xa0>)
 80030c0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80030d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030d6:	2200      	movs	r2, #0
 80030d8:	619a      	str	r2, [r3, #24]
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00
 80030e8:	faf6fefb 	.word	0xfaf6fefb
 80030ec:	22041000 	.word	0x22041000

080030f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80030f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030f4:	3304      	adds	r3, #4

080030f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80030fa:	d3f9      	bcc.n	80030f0 <CopyDataInit>
  bx lr
 80030fc:	4770      	bx	lr

080030fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80030fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003100:	3004      	adds	r0, #4

08003102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003102:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003104:	d3fb      	bcc.n	80030fe <FillZerobss>
  bx lr
 8003106:	4770      	bx	lr

08003108 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003108:	480c      	ldr	r0, [pc, #48]	; (800313c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800310a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800310c:	f7ff ff9e 	bl	800304c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003110:	480b      	ldr	r0, [pc, #44]	; (8003140 <LoopForever+0x6>)
 8003112:	490c      	ldr	r1, [pc, #48]	; (8003144 <LoopForever+0xa>)
 8003114:	4a0c      	ldr	r2, [pc, #48]	; (8003148 <LoopForever+0xe>)
 8003116:	2300      	movs	r3, #0
 8003118:	f7ff ffed 	bl	80030f6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800311c:	480b      	ldr	r0, [pc, #44]	; (800314c <LoopForever+0x12>)
 800311e:	490c      	ldr	r1, [pc, #48]	; (8003150 <LoopForever+0x16>)
 8003120:	4a0c      	ldr	r2, [pc, #48]	; (8003154 <LoopForever+0x1a>)
 8003122:	2300      	movs	r3, #0
 8003124:	f7ff ffe7 	bl	80030f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003128:	480b      	ldr	r0, [pc, #44]	; (8003158 <LoopForever+0x1e>)
 800312a:	490c      	ldr	r1, [pc, #48]	; (800315c <LoopForever+0x22>)
 800312c:	2300      	movs	r3, #0
 800312e:	f7ff ffe8 	bl	8003102 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003132:	f005 f9e5 	bl	8008500 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003136:	f7ff fafb 	bl	8002730 <main>

0800313a <LoopForever>:

LoopForever:
  b LoopForever
 800313a:	e7fe      	b.n	800313a <LoopForever>
  ldr   r0, =_estack
 800313c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003140:	20000008 	.word	0x20000008
 8003144:	20000098 	.word	0x20000098
 8003148:	0800b5f0 	.word	0x0800b5f0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800314c:	200300d8 	.word	0x200300d8
 8003150:	200300d8 	.word	0x200300d8
 8003154:	0800b680 	.word	0x0800b680
  INIT_BSS _sbss, _ebss
 8003158:	20000098 	.word	0x20000098
 800315c:	20000394 	.word	0x20000394

08003160 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003160:	e7fe      	b.n	8003160 <ADC1_IRQHandler>
	...

08003164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800316e:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_Init+0x3c>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0b      	ldr	r2, [pc, #44]	; (80031a0 <HAL_Init+0x3c>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003178:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800317a:	2003      	movs	r0, #3
 800317c:	f000 f9b4 	bl	80034e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003180:	2000      	movs	r0, #0
 8003182:	f000 f80f 	bl	80031a4 <HAL_InitTick>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d002      	beq.n	8003192 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	71fb      	strb	r3, [r7, #7]
 8003190:	e001      	b.n	8003196 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003192:	f7ff fdc0 	bl	8002d16 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003196:	79fb      	ldrb	r3, [r7, #7]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	58004000 	.word	0x58004000

080031a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <HAL_InitTick+0x6c>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d024      	beq.n	8003202 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80031b8:	f001 ff0c 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_InitTick+0x6c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	4619      	mov	r1, r3
 80031c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f9ca 	bl	800356a <HAL_SYSTICK_Config>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	d809      	bhi.n	80031f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031e2:	2200      	movs	r2, #0
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ea:	f000 f988 	bl	80034fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80031ee:	4a09      	ldr	r2, [pc, #36]	; (8003214 <HAL_InitTick+0x70>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	e007      	b.n	8003206 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
 80031fa:	e004      	b.n	8003206 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
 8003200:	e001      	b.n	8003206 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20000030 	.word	0x20000030
 8003214:	2000002c 	.word	0x2000002c

08003218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_IncTick+0x20>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_IncTick+0x24>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4413      	add	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_IncTick+0x24>)
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000030 	.word	0x20000030
 800323c:	2000034c 	.word	0x2000034c

08003240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return uwTick;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_GetTick+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	2000034c 	.word	0x2000034c

08003258 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800325c:	4b03      	ldr	r3, [pc, #12]	; (800326c <HAL_GetTickPrio+0x14>)
 800325e:	681b      	ldr	r3, [r3, #0]
}
 8003260:	4618      	mov	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	2000002c 	.word	0x2000002c

08003270 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HAL_GetTickFreq+0x14>)
 8003276:	781b      	ldrb	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000030 	.word	0x20000030

08003288 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003298:	4b0c      	ldr	r3, [pc, #48]	; (80032cc <__NVIC_SetPriorityGrouping+0x44>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800329e:	68ba      	ldr	r2, [r7, #8]
 80032a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032a4:	4013      	ands	r3, r2
 80032a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <__NVIC_SetPriorityGrouping+0x44>)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	60d3      	str	r3, [r2, #12]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032d4:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <__NVIC_GetPriorityGrouping+0x18>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	f003 0307 	and.w	r3, r3, #7
}
 80032de:	4618      	mov	r0, r3
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	db0b      	blt.n	8003316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 021f 	and.w	r2, r3, #31
 8003304:	4907      	ldr	r1, [pc, #28]	; (8003324 <__NVIC_EnableIRQ+0x38>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2001      	movs	r0, #1
 800330e:	fa00 f202 	lsl.w	r2, r0, r2
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000e100 	.word	0xe000e100

08003328 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	2b00      	cmp	r3, #0
 8003338:	db12      	blt.n	8003360 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	490a      	ldr	r1, [pc, #40]	; (800336c <__NVIC_DisableIRQ+0x44>)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	095b      	lsrs	r3, r3, #5
 8003348:	2001      	movs	r0, #1
 800334a:	fa00 f202 	lsl.w	r2, r0, r2
 800334e:	3320      	adds	r3, #32
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003354:	f3bf 8f4f 	dsb	sy
}
 8003358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800335a:	f3bf 8f6f 	isb	sy
}
 800335e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	e000e100 	.word	0xe000e100

08003370 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	4603      	mov	r3, r0
 8003378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	2b00      	cmp	r3, #0
 8003380:	db0c      	blt.n	800339c <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003382:	79fb      	ldrb	r3, [r7, #7]
 8003384:	f003 021f 	and.w	r2, r3, #31
 8003388:	4907      	ldr	r1, [pc, #28]	; (80033a8 <__NVIC_SetPendingIRQ+0x38>)
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2001      	movs	r0, #1
 8003392:	fa00 f202 	lsl.w	r2, r0, r2
 8003396:	3340      	adds	r3, #64	; 0x40
 8003398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	e000e100 	.word	0xe000e100

080033ac <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	4603      	mov	r3, r0
 80033b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	db0c      	blt.n	80033d8 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033be:	79fb      	ldrb	r3, [r7, #7]
 80033c0:	f003 021f 	and.w	r2, r3, #31
 80033c4:	4907      	ldr	r1, [pc, #28]	; (80033e4 <__NVIC_ClearPendingIRQ+0x38>)
 80033c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ca:	095b      	lsrs	r3, r3, #5
 80033cc:	2001      	movs	r0, #1
 80033ce:	fa00 f202 	lsl.w	r2, r0, r2
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e100 	.word	0xe000e100

080033e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	6039      	str	r1, [r7, #0]
 80033f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	db0a      	blt.n	8003412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	490c      	ldr	r1, [pc, #48]	; (8003434 <__NVIC_SetPriority+0x4c>)
 8003402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003406:	0112      	lsls	r2, r2, #4
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	440b      	add	r3, r1
 800340c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003410:	e00a      	b.n	8003428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4908      	ldr	r1, [pc, #32]	; (8003438 <__NVIC_SetPriority+0x50>)
 8003418:	79fb      	ldrb	r3, [r7, #7]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	3b04      	subs	r3, #4
 8003420:	0112      	lsls	r2, r2, #4
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	440b      	add	r3, r1
 8003426:	761a      	strb	r2, [r3, #24]
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	e000e100 	.word	0xe000e100
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800343c:	b480      	push	{r7}
 800343e:	b089      	sub	sp, #36	; 0x24
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	bf28      	it	cs
 800345a:	2304      	movcs	r3, #4
 800345c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3304      	adds	r3, #4
 8003462:	2b06      	cmp	r3, #6
 8003464:	d902      	bls.n	800346c <NVIC_EncodePriority+0x30>
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	3b03      	subs	r3, #3
 800346a:	e000      	b.n	800346e <NVIC_EncodePriority+0x32>
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	43da      	mvns	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	401a      	ands	r2, r3
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	fa01 f303 	lsl.w	r3, r1, r3
 800348e:	43d9      	mvns	r1, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003494:	4313      	orrs	r3, r2
         );
}
 8003496:	4618      	mov	r0, r3
 8003498:	3724      	adds	r7, #36	; 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
	...

080034a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3b01      	subs	r3, #1
 80034b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b4:	d301      	bcc.n	80034ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00f      	b.n	80034da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ba:	4a0a      	ldr	r2, [pc, #40]	; (80034e4 <SysTick_Config+0x40>)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3b01      	subs	r3, #1
 80034c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034c2:	210f      	movs	r1, #15
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80034c8:	f7ff ff8e 	bl	80033e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <SysTick_Config+0x40>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034d2:	4b04      	ldr	r3, [pc, #16]	; (80034e4 <SysTick_Config+0x40>)
 80034d4:	2207      	movs	r2, #7
 80034d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	e000e010 	.word	0xe000e010

080034e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff fec9 	bl	8003288 <__NVIC_SetPriorityGrouping>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	4603      	mov	r3, r0
 8003506:	60b9      	str	r1, [r7, #8]
 8003508:	607a      	str	r2, [r7, #4]
 800350a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff fee0 	bl	80032d0 <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff90 	bl	800343c <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5f 	bl	80033e8 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff fed3 	bl	80032ec <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355c:	4618      	mov	r0, r3
 800355e:	f7ff fee3 	bl	8003328 <__NVIC_DisableIRQ>
}
 8003562:	bf00      	nop
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b082      	sub	sp, #8
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7ff ff96 	bl	80034a4 <SysTick_Config>
 8003578:	4603      	mov	r3, r0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b082      	sub	sp, #8
 8003586:	af00      	add	r7, sp, #0
 8003588:	4603      	mov	r3, r0
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800358c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003590:	4618      	mov	r0, r3
 8003592:	f7ff feed 	bl	8003370 <__NVIC_SetPendingIRQ>
}
 8003596:	bf00      	nop
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	4603      	mov	r3, r0
 80035a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80035a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fefd 	bl	80033ac <__NVIC_ClearPendingIRQ>
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b086      	sub	sp, #24
 80035be:	af00      	add	r7, sp, #0
 80035c0:	60f8      	str	r0, [r7, #12]
 80035c2:	60b9      	str	r1, [r7, #8]
 80035c4:	607a      	str	r2, [r7, #4]
 80035c6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d101      	bne.n	80035da <HAL_DMA_Start_IT+0x20>
 80035d6:	2302      	movs	r3, #2
 80035d8:	e066      	b.n	80036a8 <HAL_DMA_Start_IT+0xee>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d155      	bne.n	800369a <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2202      	movs	r2, #2
 80035f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 f9b9 	bl	800398a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	2b00      	cmp	r3, #0
 800361e:	d008      	beq.n	8003632 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 020e 	orr.w	r2, r2, #14
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	e00f      	b.n	8003652 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0204 	bic.w	r2, r2, #4
 8003640:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 020a 	orr.w	r2, r2, #10
 8003650:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800366a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800366e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	2b00      	cmp	r3, #0
 8003676:	d007      	beq.n	8003688 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003686:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e005      	b.n	80036a6 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80036a2:	2302      	movs	r3, #2
 80036a4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80036a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3718      	adds	r7, #24
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e04f      	b.n	8003762 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d008      	beq.n	80036e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2204      	movs	r2, #4
 80036d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e040      	b.n	8003762 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 020e 	bic.w	r2, r2, #14
 80036ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003714:	f003 021c 	and.w	r2, r3, #28
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371c:	2101      	movs	r1, #1
 800371e:	fa01 f202 	lsl.w	r2, r1, r2
 8003722:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800372c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003744:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800374e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003776:	2300      	movs	r3, #0
 8003778:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b02      	cmp	r3, #2
 8003784:	d005      	beq.n	8003792 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2204      	movs	r2, #4
 800378a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	73fb      	strb	r3, [r7, #15]
 8003790:	e047      	b.n	8003822 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 020e 	bic.w	r2, r2, #14
 80037a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f003 021c 	and.w	r2, r3, #28
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	2101      	movs	r1, #1
 80037d0:	fa01 f202 	lsl.w	r2, r1, r2
 80037d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80037de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d00c      	beq.n	8003802 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80037f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003800:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
    }
  }
  return status;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003848:	f003 031c 	and.w	r3, r3, #28
 800384c:	2204      	movs	r2, #4
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d026      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x7a>
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0304 	and.w	r3, r3, #4
 800385e:	2b00      	cmp	r3, #0
 8003860:	d021      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0204 	bic.w	r2, r2, #4
 800387e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	f003 021c 	and.w	r2, r3, #28
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	2104      	movs	r1, #4
 800388e:	fa01 f202 	lsl.w	r2, r1, r2
 8003892:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	2b00      	cmp	r3, #0
 800389a:	d071      	beq.n	8003980 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038a4:	e06c      	b.n	8003980 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f003 031c 	and.w	r3, r3, #28
 80038ae:	2202      	movs	r2, #2
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02e      	beq.n	8003918 <HAL_DMA_IRQHandler+0xec>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d029      	beq.n	8003918 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0320 	and.w	r3, r3, #32
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10b      	bne.n	80038ea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 020a 	bic.w	r2, r2, #10
 80038e0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2201      	movs	r2, #1
 80038e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ee:	f003 021c 	and.w	r2, r3, #28
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	2102      	movs	r1, #2
 80038f8:	fa01 f202 	lsl.w	r2, r1, r2
 80038fc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d038      	beq.n	8003980 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003916:	e033      	b.n	8003980 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391c:	f003 031c 	and.w	r3, r3, #28
 8003920:	2208      	movs	r2, #8
 8003922:	409a      	lsls	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	4013      	ands	r3, r2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d02a      	beq.n	8003982 <HAL_DMA_IRQHandler+0x156>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d025      	beq.n	8003982 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f022 020e 	bic.w	r2, r2, #14
 8003944:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f003 021c 	and.w	r2, r3, #28
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	2101      	movs	r1, #1
 8003954:	fa01 f202 	lsl.w	r2, r1, r2
 8003958:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003980:	bf00      	nop
 8003982:	bf00      	nop
}
 8003984:	3710      	adds	r7, #16
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}

0800398a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800398a:	b480      	push	{r7}
 800398c:	b085      	sub	sp, #20
 800398e:	af00      	add	r7, sp, #0
 8003990:	60f8      	str	r0, [r7, #12]
 8003992:	60b9      	str	r1, [r7, #8]
 8003994:	607a      	str	r2, [r7, #4]
 8003996:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039a0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d004      	beq.n	80039b4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80039b2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b8:	f003 021c 	and.w	r2, r3, #28
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	2101      	movs	r1, #1
 80039c2:	fa01 f202 	lsl.w	r2, r1, r2
 80039c6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d108      	bne.n	80039ea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039e8:	e007      	b.n	80039fa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	60da      	str	r2, [r3, #12]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
	...

08003a08 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a12:	2300      	movs	r3, #0
 8003a14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a16:	e14c      	b.n	8003cb2 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	fa01 f303 	lsl.w	r3, r1, r3
 8003a24:	4013      	ands	r3, r2
 8003a26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 813e 	beq.w	8003cac <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d005      	beq.n	8003a48 <HAL_GPIO_Init+0x40>
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f003 0303 	and.w	r3, r3, #3
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d130      	bne.n	8003aaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	2203      	movs	r2, #3
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68da      	ldr	r2, [r3, #12]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a7e:	2201      	movs	r2, #1
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	fa02 f303 	lsl.w	r3, r2, r3
 8003a86:	43db      	mvns	r3, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	f003 0201 	and.w	r2, r3, #1
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	d017      	beq.n	8003ae6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	2203      	movs	r2, #3
 8003ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac6:	43db      	mvns	r3, r3
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	4013      	ands	r3, r2
 8003acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	689a      	ldr	r2, [r3, #8]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d123      	bne.n	8003b3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	08da      	lsrs	r2, r3, #3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3208      	adds	r2, #8
 8003afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003afe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	220f      	movs	r2, #15
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	f003 0307 	and.w	r3, r3, #7
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	08da      	lsrs	r2, r3, #3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	3208      	adds	r2, #8
 8003b34:	6939      	ldr	r1, [r7, #16]
 8003b36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	2203      	movs	r2, #3
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43db      	mvns	r3, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4013      	ands	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0203 	and.w	r2, r3, #3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8098 	beq.w	8003cac <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003b7c:	4a54      	ldr	r2, [pc, #336]	; (8003cd0 <HAL_GPIO_Init+0x2c8>)
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	089b      	lsrs	r3, r3, #2
 8003b82:	3302      	adds	r3, #2
 8003b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f003 0303 	and.w	r3, r3, #3
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ba6:	d019      	beq.n	8003bdc <HAL_GPIO_Init+0x1d4>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a4a      	ldr	r2, [pc, #296]	; (8003cd4 <HAL_GPIO_Init+0x2cc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d013      	beq.n	8003bd8 <HAL_GPIO_Init+0x1d0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a49      	ldr	r2, [pc, #292]	; (8003cd8 <HAL_GPIO_Init+0x2d0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_GPIO_Init+0x1cc>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a48      	ldr	r2, [pc, #288]	; (8003cdc <HAL_GPIO_Init+0x2d4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d007      	beq.n	8003bd0 <HAL_GPIO_Init+0x1c8>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a47      	ldr	r2, [pc, #284]	; (8003ce0 <HAL_GPIO_Init+0x2d8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d101      	bne.n	8003bcc <HAL_GPIO_Init+0x1c4>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	e008      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bcc:	2307      	movs	r3, #7
 8003bce:	e006      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e004      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bd4:	2302      	movs	r3, #2
 8003bd6:	e002      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_GPIO_Init+0x1d6>
 8003bdc:	2300      	movs	r3, #0
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	f002 0203 	and.w	r2, r2, #3
 8003be4:	0092      	lsls	r2, r2, #2
 8003be6:	4093      	lsls	r3, r2
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bee:	4938      	ldr	r1, [pc, #224]	; (8003cd0 <HAL_GPIO_Init+0x2c8>)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	089b      	lsrs	r3, r3, #2
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c20:	4a30      	ldr	r2, [pc, #192]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003c26:	4b2f      	ldr	r3, [pc, #188]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4013      	ands	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c4a:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c50:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c76:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8003c7e:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003c80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <HAL_GPIO_Init+0x2dc>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f47f aeab 	bne.w	8003a18 <HAL_GPIO_Init+0x10>
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	bf00      	nop
 8003cc6:	371c      	adds	r7, #28
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	40010000 	.word	0x40010000
 8003cd4:	48000400 	.word	0x48000400
 8003cd8:	48000800 	.word	0x48000800
 8003cdc:	48000c00 	.word	0x48000c00
 8003ce0:	48001000 	.word	0x48001000
 8003ce4:	58000800 	.word	0x58000800

08003ce8 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d00:	2301      	movs	r3, #1
 8003d02:	73fb      	strb	r3, [r7, #15]
 8003d04:	e001      	b.n	8003d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	807b      	strh	r3, [r7, #2]
 8003d24:	4613      	mov	r3, r2
 8003d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d28:	787b      	ldrb	r3, [r7, #1]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d2e:	887a      	ldrh	r2, [r7, #2]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d34:	e002      	b.n	8003d3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d36:	887a      	ldrh	r2, [r7, #2]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	4906      	ldr	r1, [pc, #24]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d5e:	4013      	ands	r3, r2
 8003d60:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_HSEM_IRQHandler+0x30>)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f807 	bl	8003d7c <HAL_HSEM_FreeCallback>
}
 8003d6e:	bf00      	nop
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	58001500 	.word	0x58001500

08003d7c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d01e      	beq.n	8003de0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8003da2:	4b13      	ldr	r3, [pc, #76]	; (8003df0 <HAL_IPCC_Init+0x60>)
 8003da4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f7fe ffc2 	bl	8002d3c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8003db8:	68b8      	ldr	r0, [r7, #8]
 8003dba:	f000 f85b 	bl	8003e74 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f82c 	bl	8003e28 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8003dde:	e001      	b.n	8003de4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	58000c00 	.word	0x58000c00

08003df4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e00f      	b.n	8003e56 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <IPCC_SetDefaultCallbacks+0x44>)
 8003e40:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3306      	adds	r3, #6
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	4a08      	ldr	r2, [pc, #32]	; (8003e70 <IPCC_SetDefaultCallbacks+0x48>)
 8003e4e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	3301      	adds	r3, #1
 8003e54:	60fb      	str	r3, [r7, #12]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d9ec      	bls.n	8003e36 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	08003df5 	.word	0x08003df5
 8003e70:	08003e0f 	.word	0x08003e0f

08003e74 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8003e88:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	223f      	movs	r2, #63	; 0x3f
 8003e8e:	609a      	str	r2, [r3, #8]
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ea0:	4b05      	ldr	r3, [pc, #20]	; (8003eb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eaa:	6013      	str	r3, [r2, #0]
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	58000400 	.word	0x58000400

08003ebc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	58000400 	.word	0x58000400

08003ed8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003edc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ee6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eea:	d101      	bne.n	8003ef0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003eec:	2301      	movs	r3, #1
 8003eee:	e000      	b.n	8003ef2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <LL_RCC_HSE_Enable>:
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0e:	6013      	str	r3, [r2, #0]
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_RCC_HSE_Disable>:
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2c:	6013      	str	r3, [r2, #0]
}
 8003f2e:	bf00      	nop
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <LL_RCC_HSE_IsReady>:
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f4a:	d101      	bne.n	8003f50 <LL_RCC_HSE_IsReady+0x18>
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e000      	b.n	8003f52 <LL_RCC_HSE_IsReady+0x1a>
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <LL_RCC_HSI_Enable>:
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003f60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6e:	6013      	str	r3, [r2, #0]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <LL_RCC_HSI_Disable>:
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8c:	6013      	str	r3, [r2, #0]
}
 8003f8e:	bf00      	nop
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <LL_RCC_HSI_IsReady>:
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003faa:	d101      	bne.n	8003fb0 <LL_RCC_HSI_IsReady+0x18>
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <LL_RCC_HSI_IsReady+0x1a>
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <LL_RCC_HSI_SetCalibTrimming>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	061b      	lsls	r3, r3, #24
 8003fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	604b      	str	r3, [r1, #4]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <LL_RCC_HSI48_Enable>:
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003fea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_RCC_HSI48_Disable>:
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800400c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004010:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004014:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004018:	f023 0301 	bic.w	r3, r3, #1
 800401c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <LL_RCC_HSI48_IsReady>:
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b02      	cmp	r3, #2
 800403c:	d101      	bne.n	8004042 <LL_RCC_HSI48_IsReady+0x18>
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <LL_RCC_HSI48_IsReady+0x1a>
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <LL_RCC_LSE_Enable>:
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004052:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004066:	bf00      	nop
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <LL_RCC_LSE_Disable>:
{
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004074:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <LL_RCC_LSE_EnableBypass>:
{
 8004092:	b480      	push	{r7}
 8004094:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <LL_RCC_LSE_DisableBypass>:
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <LL_RCC_LSE_IsReady>:
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80040da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d101      	bne.n	80040ee <LL_RCC_LSE_IsReady+0x18>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e000      	b.n	80040f0 <LL_RCC_LSE_IsReady+0x1a>
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <LL_RCC_LSI1_Enable>:
{
 80040fa:	b480      	push	{r7}
 80040fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80040fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004106:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800410a:	f043 0301 	orr.w	r3, r3, #1
 800410e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_RCC_LSI1_Disable>:
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004124:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <LL_RCC_LSI1_IsReady>:
{
 800413e:	b480      	push	{r7}
 8004140:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8004142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b02      	cmp	r3, #2
 8004150:	d101      	bne.n	8004156 <LL_RCC_LSI1_IsReady+0x18>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_RCC_LSI1_IsReady+0x1a>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <LL_RCC_LSI2_Enable>:
{
 8004162:	b480      	push	{r7}
 8004164:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800416a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004172:	f043 0304 	orr.w	r3, r3, #4
 8004176:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800417a:	bf00      	nop
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <LL_RCC_LSI2_Disable>:
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004190:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004194:	f023 0304 	bic.w	r3, r3, #4
 8004198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr

080041a6 <LL_RCC_LSI2_IsReady>:
{
 80041a6:	b480      	push	{r7}
 80041a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d101      	bne.n	80041be <LL_RCC_LSI2_IsReady+0x18>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <LL_RCC_LSI2_IsReady+0x1a>
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <LL_RCC_LSI2_SetTrimming>:
{
 80041ca:	b480      	push	{r7}
 80041cc:	b083      	sub	sp, #12
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	021b      	lsls	r3, r3, #8
 80041e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_RCC_MSI_Enable>:
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80041fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	6013      	str	r3, [r2, #0]
}
 800420c:	bf00      	nop
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <LL_RCC_MSI_Disable>:
{
 8004216:	b480      	push	{r7}
 8004218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800421a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6013      	str	r3, [r2, #0]
}
 800422a:	bf00      	nop
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_RCC_MSI_IsReady>:
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b02      	cmp	r3, #2
 8004244:	d101      	bne.n	800424a <LL_RCC_MSI_IsReady+0x16>
 8004246:	2301      	movs	r3, #1
 8004248:	e000      	b.n	800424c <LL_RCC_MSI_IsReady+0x18>
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <LL_RCC_MSI_SetRange>:
{
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800425e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr

0800427e <LL_RCC_MSI_GetRange>:
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2bb0      	cmp	r3, #176	; 0xb0
 8004294:	d901      	bls.n	800429a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004296:	23b0      	movs	r3, #176	; 0xb0
 8004298:	607b      	str	r3, [r7, #4]
  return msiRange;
 800429a:	687b      	ldr	r3, [r7, #4]
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80042b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_RCC_SetSysClkSource>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80042da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f023 0203 	bic.w	r2, r3, #3
 80042e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	608b      	str	r3, [r1, #8]
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_RCC_GetSysClkSource>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
}
 8004308:	4618      	mov	r0, r3
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr

08004312 <LL_RCC_SetAHBPrescaler>:
{
 8004312:	b480      	push	{r7}
 8004314:	b083      	sub	sp, #12
 8004316:	af00      	add	r7, sp, #0
 8004318:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800431a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004324:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4313      	orrs	r3, r2
 800432c:	608b      	str	r3, [r1, #8]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr

0800433a <LL_C2_RCC_SetAHBPrescaler>:
{
 800433a:	b480      	push	{r7}
 800433c:	b083      	sub	sp, #12
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004346:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800434a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <LL_RCC_SetAHB4Prescaler>:
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800436e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004372:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004376:	f023 020f 	bic.w	r2, r3, #15
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <LL_RCC_SetAPB1Prescaler>:
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800439c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	608b      	str	r3, [r1, #8]
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <LL_RCC_SetAPB2Prescaler>:
{
 80043bc:	b480      	push	{r7}
 80043be:	b083      	sub	sp, #12
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80043c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	608b      	str	r3, [r1, #8]
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <LL_RCC_GetAHBPrescaler>:
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80043e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <LL_RCC_GetAHB4Prescaler>:
{
 80043fc:	b480      	push	{r7}
 80043fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004400:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004404:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800440e:	4618      	mov	r0, r3
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <LL_RCC_PLL_Enable>:
{
 8004418:	b480      	push	{r7}
 800441a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800441c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <LL_RCC_PLL_Disable>:
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800443a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004444:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004448:	6013      	str	r3, [r2, #0]
}
 800444a:	bf00      	nop
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <LL_RCC_PLL_IsReady>:
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004458:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004466:	d101      	bne.n	800446c <LL_RCC_PLL_IsReady+0x18>
 8004468:	2301      	movs	r3, #1
 800446a:	e000      	b.n	800446e <LL_RCC_PLL_IsReady+0x1a>
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <LL_RCC_PLL_GetN>:
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800447c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004488:	4618      	mov	r0, r3
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <LL_RCC_PLL_GetR>:
{
 8004492:	b480      	push	{r7}
 8004494:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <LL_RCC_PLL_GetDivider>:
{
 80044aa:	b480      	push	{r7}
 80044ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80044ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <LL_RCC_PLL_GetMainSource>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80044c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_RCC_IsActiveFlag_HPRE>:
{
 80044da:	b480      	push	{r7}
 80044dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80044de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044ec:	d101      	bne.n	80044f2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80044fe:	b480      	push	{r7}
 8004500:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004506:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004512:	d101      	bne.n	8004518 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800452c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004538:	d101      	bne.n	800453e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800454a:	b480      	push	{r7}
 800454c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800454e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004558:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800455c:	d101      	bne.n	8004562 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800455e:	2301      	movs	r3, #1
 8004560:	e000      	b.n	8004564 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800456e:	b480      	push	{r7}
 8004570:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004572:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800457c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004580:	d101      	bne.n	8004586 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
	...

08004594 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b08d      	sub	sp, #52	; 0x34
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e363      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 808d 	beq.w	80046ce <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045b4:	f7ff fea1 	bl	80042fa <LL_RCC_GetSysClkSource>
 80045b8:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045ba:	f7ff ff82 	bl	80044c2 <LL_RCC_PLL_GetMainSource>
 80045be:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80045c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d005      	beq.n	80045d2 <HAL_RCC_OscConfig+0x3e>
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2b0c      	cmp	r3, #12
 80045ca:	d147      	bne.n	800465c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d144      	bne.n	800465c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e347      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80045e2:	f7ff fe4c 	bl	800427e <LL_RCC_MSI_GetRange>
 80045e6:	4603      	mov	r3, r0
 80045e8:	429c      	cmp	r4, r3
 80045ea:	d914      	bls.n	8004616 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fd03 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e336      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fe26 	bl	8004256 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fe4a 	bl	80042a8 <LL_RCC_MSI_SetCalibTrimming>
 8004614:	e013      	b.n	800463e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	4618      	mov	r0, r3
 800461c:	f7ff fe1b 	bl	8004256 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fe3f 	bl	80042a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fce4 	bl	8004ffc <RCC_SetFlashLatencyFromMSIRange>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e317      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800463e:	f000 fcc9 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8004642:	4603      	mov	r3, r0
 8004644:	4aa4      	ldr	r2, [pc, #656]	; (80048d8 <HAL_RCC_OscConfig+0x344>)
 8004646:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004648:	4ba4      	ldr	r3, [pc, #656]	; (80048dc <HAL_RCC_OscConfig+0x348>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe fda9 	bl	80031a4 <HAL_InitTick>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d039      	beq.n	80046cc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e308      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01e      	beq.n	80046a2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004664:	f7ff fdc8 	bl	80041f8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004668:	f7fe fdea 	bl	8003240 <HAL_GetTick>
 800466c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004670:	f7fe fde6 	bl	8003240 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e2f5      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004682:	f7ff fdd7 	bl	8004234 <LL_RCC_MSI_IsReady>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f1      	beq.n	8004670 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff fde0 	bl	8004256 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fe04 	bl	80042a8 <LL_RCC_MSI_SetCalibTrimming>
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046a2:	f7ff fdb8 	bl	8004216 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046a6:	f7fe fdcb 	bl	8003240 <HAL_GetTick>
 80046aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80046ac:	e008      	b.n	80046c0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046ae:	f7fe fdc7 	bl	8003240 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d901      	bls.n	80046c0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e2d6      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80046c0:	f7ff fdb8 	bl	8004234 <LL_RCC_MSI_IsReady>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f1      	bne.n	80046ae <HAL_RCC_OscConfig+0x11a>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80046cc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d047      	beq.n	800476a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046da:	f7ff fe0e 	bl	80042fa <LL_RCC_GetSysClkSource>
 80046de:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046e0:	f7ff feef 	bl	80044c2 <LL_RCC_PLL_GetMainSource>
 80046e4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80046e6:	6a3b      	ldr	r3, [r7, #32]
 80046e8:	2b08      	cmp	r3, #8
 80046ea:	d005      	beq.n	80046f8 <HAL_RCC_OscConfig+0x164>
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b0c      	cmp	r3, #12
 80046f0:	d108      	bne.n	8004704 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	2b03      	cmp	r3, #3
 80046f6:	d105      	bne.n	8004704 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d134      	bne.n	800476a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e2b4      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800470c:	d102      	bne.n	8004714 <HAL_RCC_OscConfig+0x180>
 800470e:	f7ff fbf5 	bl	8003efc <LL_RCC_HSE_Enable>
 8004712:	e001      	b.n	8004718 <HAL_RCC_OscConfig+0x184>
 8004714:	f7ff fc01 	bl	8003f1a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004720:	f7fe fd8e 	bl	8003240 <HAL_GetTick>
 8004724:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004728:	f7fe fd8a 	bl	8003240 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b64      	cmp	r3, #100	; 0x64
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e299      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800473a:	f7ff fbfd 	bl	8003f38 <LL_RCC_HSE_IsReady>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f1      	beq.n	8004728 <HAL_RCC_OscConfig+0x194>
 8004744:	e011      	b.n	800476a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fe fd7b 	bl	8003240 <HAL_GetTick>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800474c:	e008      	b.n	8004760 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800474e:	f7fe fd77 	bl	8003240 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	2b64      	cmp	r3, #100	; 0x64
 800475a:	d901      	bls.n	8004760 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e286      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8004760:	f7ff fbea 	bl	8003f38 <LL_RCC_HSE_IsReady>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f1      	bne.n	800474e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d04c      	beq.n	8004810 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004776:	f7ff fdc0 	bl	80042fa <LL_RCC_GetSysClkSource>
 800477a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800477c:	f7ff fea1 	bl	80044c2 <LL_RCC_PLL_GetMainSource>
 8004780:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d005      	beq.n	8004794 <HAL_RCC_OscConfig+0x200>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	2b0c      	cmp	r3, #12
 800478c:	d10e      	bne.n	80047ac <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d10b      	bne.n	80047ac <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e266      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff fc09 	bl	8003fbc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80047aa:	e031      	b.n	8004810 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d019      	beq.n	80047e8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b4:	f7ff fbd2 	bl	8003f5c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe fd42 	bl	8003240 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c0:	f7fe fd3e 	bl	8003240 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e24d      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80047d2:	f7ff fbe1 	bl	8003f98 <LL_RCC_HSI_IsReady>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d0f1      	beq.n	80047c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7ff fbeb 	bl	8003fbc <LL_RCC_HSI_SetCalibTrimming>
 80047e6:	e013      	b.n	8004810 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e8:	f7ff fbc7 	bl	8003f7a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fe fd28 	bl	8003240 <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f4:	f7fe fd24 	bl	8003240 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e233      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8004806:	f7ff fbc7 	bl	8003f98 <LL_RCC_HSI_IsReady>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1f1      	bne.n	80047f4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0308 	and.w	r3, r3, #8
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80a3 	beq.w	8004970 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d076      	beq.n	8004920 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b00      	cmp	r3, #0
 800483c:	d046      	beq.n	80048cc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800483e:	f7ff fc7e 	bl	800413e <LL_RCC_LSI1_IsReady>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d113      	bne.n	8004870 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004848:	f7ff fc57 	bl	80040fa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800484c:	f7fe fcf8 	bl	8003240 <HAL_GetTick>
 8004850:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004854:	f7fe fcf4 	bl	8003240 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e203      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8004866:	f7ff fc6a 	bl	800413e <LL_RCC_LSI1_IsReady>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f1      	beq.n	8004854 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004870:	f7ff fc77 	bl	8004162 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004874:	f7fe fce4 	bl	8003240 <HAL_GetTick>
 8004878:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800487a:	e008      	b.n	800488e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800487c:	f7fe fce0 	bl	8003240 <HAL_GetTick>
 8004880:	4602      	mov	r2, r0
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b03      	cmp	r3, #3
 8004888:	d901      	bls.n	800488e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e1ef      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800488e:	f7ff fc8a 	bl	80041a6 <LL_RCC_LSI2_IsReady>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f1      	beq.n	800487c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fc94 	bl	80041ca <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80048a2:	f7ff fc3b 	bl	800411c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a6:	f7fe fccb 	bl	8003240 <HAL_GetTick>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048ac:	e008      	b.n	80048c0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048ae:	f7fe fcc7 	bl	8003240 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d901      	bls.n	80048c0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e1d6      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80048c0:	f7ff fc3d 	bl	800413e <LL_RCC_LSI1_IsReady>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f1      	bne.n	80048ae <HAL_RCC_OscConfig+0x31a>
 80048ca:	e051      	b.n	8004970 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80048cc:	f7ff fc15 	bl	80040fa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d0:	f7fe fcb6 	bl	8003240 <HAL_GetTick>
 80048d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048d6:	e00c      	b.n	80048f2 <HAL_RCC_OscConfig+0x35e>
 80048d8:	20000028 	.word	0x20000028
 80048dc:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80048e0:	f7fe fcae 	bl	8003240 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e1bd      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80048f2:	f7ff fc24 	bl	800413e <LL_RCC_LSI1_IsReady>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d0f1      	beq.n	80048e0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80048fc:	f7ff fc42 	bl	8004184 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004900:	e008      	b.n	8004914 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004902:	f7fe fc9d 	bl	8003240 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b03      	cmp	r3, #3
 800490e:	d901      	bls.n	8004914 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e1ac      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004914:	f7ff fc47 	bl	80041a6 <LL_RCC_LSI2_IsReady>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f1      	bne.n	8004902 <HAL_RCC_OscConfig+0x36e>
 800491e:	e027      	b.n	8004970 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004920:	f7ff fc30 	bl	8004184 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004924:	f7fe fc8c 	bl	8003240 <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800492c:	f7fe fc88 	bl	8003240 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b03      	cmp	r3, #3
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e197      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800493e:	f7ff fc32 	bl	80041a6 <LL_RCC_LSI2_IsReady>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1f1      	bne.n	800492c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8004948:	f7ff fbe8 	bl	800411c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fe fc78 	bl	8003240 <HAL_GetTick>
 8004950:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004954:	f7fe fc74 	bl	8003240 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b02      	cmp	r3, #2
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e183      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004966:	f7ff fbea 	bl	800413e <LL_RCC_LSI1_IsReady>
 800496a:	4603      	mov	r3, r0
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f1      	bne.n	8004954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0304 	and.w	r3, r3, #4
 8004978:	2b00      	cmp	r3, #0
 800497a:	d05b      	beq.n	8004a34 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800497c:	4ba7      	ldr	r3, [pc, #668]	; (8004c1c <HAL_RCC_OscConfig+0x688>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004984:	2b00      	cmp	r3, #0
 8004986:	d114      	bne.n	80049b2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004988:	f7ff fa88 	bl	8003e9c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800498c:	f7fe fc58 	bl	8003240 <HAL_GetTick>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004994:	f7fe fc54 	bl	8003240 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e163      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a6:	4b9d      	ldr	r3, [pc, #628]	; (8004c1c <HAL_RCC_OscConfig+0x688>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0f0      	beq.n	8004994 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d102      	bne.n	80049c0 <HAL_RCC_OscConfig+0x42c>
 80049ba:	f7ff fb48 	bl	800404e <LL_RCC_LSE_Enable>
 80049be:	e00c      	b.n	80049da <HAL_RCC_OscConfig+0x446>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	2b05      	cmp	r3, #5
 80049c6:	d104      	bne.n	80049d2 <HAL_RCC_OscConfig+0x43e>
 80049c8:	f7ff fb63 	bl	8004092 <LL_RCC_LSE_EnableBypass>
 80049cc:	f7ff fb3f 	bl	800404e <LL_RCC_LSE_Enable>
 80049d0:	e003      	b.n	80049da <HAL_RCC_OscConfig+0x446>
 80049d2:	f7ff fb4d 	bl	8004070 <LL_RCC_LSE_Disable>
 80049d6:	f7ff fb6d 	bl	80040b4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d014      	beq.n	8004a0c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e2:	f7fe fc2d 	bl	8003240 <HAL_GetTick>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80049e8:	e00a      	b.n	8004a00 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ea:	f7fe fc29 	bl	8003240 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e136      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004a00:	f7ff fb69 	bl	80040d6 <LL_RCC_LSE_IsReady>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0ef      	beq.n	80049ea <HAL_RCC_OscConfig+0x456>
 8004a0a:	e013      	b.n	8004a34 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a0c:	f7fe fc18 	bl	8003240 <HAL_GetTick>
 8004a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a12:	e00a      	b.n	8004a2a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a14:	f7fe fc14 	bl	8003240 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e121      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004a2a:	f7ff fb54 	bl	80040d6 <LL_RCC_LSE_IsReady>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1ef      	bne.n	8004a14 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02c      	beq.n	8004a9a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d014      	beq.n	8004a72 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a48:	f7ff facd 	bl	8003fe6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fe fbf8 	bl	8003240 <HAL_GetTick>
 8004a50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a54:	f7fe fbf4 	bl	8003240 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e103      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004a66:	f7ff fae0 	bl	800402a <LL_RCC_HSI48_IsReady>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f1      	beq.n	8004a54 <HAL_RCC_OscConfig+0x4c0>
 8004a70:	e013      	b.n	8004a9a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a72:	f7ff fac9 	bl	8004008 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a76:	f7fe fbe3 	bl	8003240 <HAL_GetTick>
 8004a7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a7c:	e008      	b.n	8004a90 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a7e:	f7fe fbdf 	bl	8003240 <HAL_GetTick>
 8004a82:	4602      	mov	r2, r0
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	1ad3      	subs	r3, r2, r3
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d901      	bls.n	8004a90 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e0ee      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004a90:	f7ff facb 	bl	800402a <LL_RCC_HSI48_IsReady>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1f1      	bne.n	8004a7e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 80e4 	beq.w	8004c6c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aa4:	f7ff fc29 	bl	80042fa <LL_RCC_GetSysClkSource>
 8004aa8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8004aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	f040 80b4 	bne.w	8004c24 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0203 	and.w	r2, r3, #3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d123      	bne.n	8004b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d11c      	bne.n	8004b12 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d114      	bne.n	8004b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d10d      	bne.n	8004b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d106      	bne.n	8004b12 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d05d      	beq.n	8004bce <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b0c      	cmp	r3, #12
 8004b16:	d058      	beq.n	8004bca <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e0a1      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b2a:	f7ff fc84 	bl	8004436 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b2e:	f7fe fb87 	bl	8003240 <HAL_GetTick>
 8004b32:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b34:	e008      	b.n	8004b48 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b36:	f7fe fb83 	bl	8003240 <HAL_GetTick>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	2b02      	cmp	r3, #2
 8004b42:	d901      	bls.n	8004b48 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e092      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1ef      	bne.n	8004b36 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	4b30      	ldr	r3, [pc, #192]	; (8004c20 <HAL_RCC_OscConfig+0x68c>)
 8004b5e:	4013      	ands	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004b68:	4311      	orrs	r1, r2
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b6e:	0212      	lsls	r2, r2, #8
 8004b70:	4311      	orrs	r1, r2
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004b76:	4311      	orrs	r1, r2
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004b7c:	4311      	orrs	r1, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004b82:	430a      	orrs	r2, r1
 8004b84:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004b8c:	f7ff fc44 	bl	8004418 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004ba0:	f7fe fb4e 	bl	8003240 <HAL_GetTick>
 8004ba4:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba8:	f7fe fb4a 	bl	8003240 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e059      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0ef      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc8:	e050      	b.n	8004c6c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e04f      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d147      	bne.n	8004c6c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004bdc:	f7ff fc1c 	bl	8004418 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004bf0:	f7fe fb26 	bl	8003240 <HAL_GetTick>
 8004bf4:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fe fb22 	bl	8003240 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e031      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ef      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x664>
 8004c18:	e028      	b.n	8004c6c <HAL_RCC_OscConfig+0x6d8>
 8004c1a:	bf00      	nop
 8004c1c:	58000400 	.word	0x58000400
 8004c20:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b0c      	cmp	r3, #12
 8004c28:	d01e      	beq.n	8004c68 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c2a:	f7ff fc04 	bl	8004436 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2e:	f7fe fb07 	bl	8003240 <HAL_GetTick>
 8004c32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c36:	f7fe fb03 	bl	8003240 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e012      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ef      	bne.n	8004c36 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004c56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_RCC_OscConfig+0x6e4>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	60cb      	str	r3, [r1, #12]
 8004c66:	e001      	b.n	8004c6c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3734      	adds	r7, #52	; 0x34
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd90      	pop	{r4, r7, pc}
 8004c76:	bf00      	nop
 8004c78:	eefefffc 	.word	0xeefefffc

08004c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d101      	bne.n	8004c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	e12d      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c90:	4b98      	ldr	r3, [pc, #608]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d91b      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b95      	ldr	r3, [pc, #596]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4993      	ldr	r1, [pc, #588]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cae:	f7fe fac7 	bl	8003240 <HAL_GetTick>
 8004cb2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004cb6:	f7fe fac3 	bl	8003240 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e111      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cc8:	4b8a      	ldr	r3, [pc, #552]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0307 	and.w	r3, r3, #7
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d1ef      	bne.n	8004cb6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7ff fb13 	bl	8004312 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004cec:	f7fe faa8 	bl	8003240 <HAL_GetTick>
 8004cf0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004cf4:	f7fe faa4 	bl	8003240 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0f2      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004d06:	f7ff fbe8 	bl	80044da <LL_RCC_IsActiveFlag_HPRE>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d0f1      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0320 	and.w	r3, r3, #32
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d016      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f7ff fb0a 	bl	800433a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d26:	f7fe fa8b 	bl	8003240 <HAL_GetTick>
 8004d2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d2e:	f7fe fa87 	bl	8003240 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0d5      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004d40:	f7ff fbdd 	bl	80044fe <LL_RCC_IsActiveFlag_C2HPRE>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f1      	beq.n	8004d2e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7ff fb03 	bl	8004366 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d60:	f7fe fa6e 	bl	8003240 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d66:	e008      	b.n	8004d7a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004d68:	f7fe fa6a 	bl	8003240 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d901      	bls.n	8004d7a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e0b8      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004d7a:	f7ff fbd3 	bl	8004524 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f1      	beq.n	8004d68 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d016      	beq.n	8004dbe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fafd 	bl	8004394 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004d9a:	f7fe fa51 	bl	8003240 <HAL_GetTick>
 8004d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004da2:	f7fe fa4d 	bl	8003240 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e09b      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004db4:	f7ff fbc9 	bl	800454a <LL_RCC_IsActiveFlag_PPRE1>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0f1      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0308 	and.w	r3, r3, #8
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d017      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff faf3 	bl	80043bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004dd6:	f7fe fa33 	bl	8003240 <HAL_GetTick>
 8004dda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004ddc:	e008      	b.n	8004df0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004dde:	f7fe fa2f 	bl	8003240 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e07d      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004df0:	f7ff fbbd 	bl	800456e <LL_RCC_IsActiveFlag_PPRE2>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f1      	beq.n	8004dde <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d043      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d106      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004e0e:	f7ff f893 	bl	8003f38 <LL_RCC_HSE_IsReady>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d11e      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e067      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004e24:	f7ff fb16 	bl	8004454 <LL_RCC_PLL_IsReady>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d113      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e05c      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004e3a:	f7ff f9fb 	bl	8004234 <LL_RCC_MSI_IsReady>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d108      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e051      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004e48:	f7ff f8a6 	bl	8003f98 <LL_RCC_HSI_IsReady>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e04a      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7ff fa39 	bl	80042d2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fe f9ee 	bl	8003240 <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fe f9ea 	bl	8003240 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e036      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	f7ff fa3c 	bl	80042fa <LL_RCC_GetSysClkSource>
 8004e82:	4602      	mov	r2, r0
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d1ec      	bne.n	8004e68 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e8e:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d21b      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9c:	4b15      	ldr	r3, [pc, #84]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f023 0207 	bic.w	r2, r3, #7
 8004ea4:	4913      	ldr	r1, [pc, #76]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eac:	f7fe f9c8 	bl	8003240 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004eb4:	f7fe f9c4 	bl	8003240 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e012      	b.n	8004eec <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_ClockConfig+0x278>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d1ef      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004ed4:	f000 f87e 	bl	8004fd4 <HAL_RCC_GetHCLKFreq>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a07      	ldr	r2, [pc, #28]	; (8004ef8 <HAL_RCC_ClockConfig+0x27c>)
 8004edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004ede:	f7fe f9bb 	bl	8003258 <HAL_GetTickPrio>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7fe f95d 	bl	80031a4 <HAL_InitTick>
 8004eea:	4603      	mov	r3, r0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	58004000 	.word	0x58004000
 8004ef8:	20000028 	.word	0x20000028

08004efc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004efc:	b590      	push	{r4, r7, lr}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f02:	f7ff f9fa 	bl	80042fa <LL_RCC_GetSysClkSource>
 8004f06:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f0e:	f7ff f9b6 	bl	800427e <LL_RCC_MSI_GetRange>
 8004f12:	4603      	mov	r3, r0
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f20:	60fb      	str	r3, [r7, #12]
 8004f22:	e04b      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d102      	bne.n	8004f30 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f2a:	4b28      	ldr	r3, [pc, #160]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e045      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b08      	cmp	r3, #8
 8004f34:	d10a      	bne.n	8004f4c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f36:	f7fe ffcf 	bl	8003ed8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d102      	bne.n	8004f46 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004f40:	4b22      	ldr	r3, [pc, #136]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e03a      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004f46:	4b22      	ldr	r3, [pc, #136]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e037      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004f4c:	f7ff fab9 	bl	80044c2 <LL_RCC_PLL_GetMainSource>
 8004f50:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d003      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x64>
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCC_GetSysClockFreq+0x6a>
 8004f5e:	e00d      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004f60:	4b1a      	ldr	r3, [pc, #104]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f62:	60bb      	str	r3, [r7, #8]
        break;
 8004f64:	e015      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004f66:	f7fe ffb7 	bl	8003ed8 <LL_RCC_HSE_IsEnabledDiv2>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d102      	bne.n	8004f76 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004f70:	4b16      	ldr	r3, [pc, #88]	; (8004fcc <HAL_RCC_GetSysClockFreq+0xd0>)
 8004f72:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004f74:	e00d      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004f76:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004f78:	60bb      	str	r3, [r7, #8]
        break;
 8004f7a:	e00a      	b.n	8004f92 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004f7c:	f7ff f97f 	bl	800427e <LL_RCC_MSI_GetRange>
 8004f80:	4603      	mov	r3, r0
 8004f82:	091b      	lsrs	r3, r3, #4
 8004f84:	f003 030f 	and.w	r3, r3, #15
 8004f88:	4a0f      	ldr	r2, [pc, #60]	; (8004fc8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004f8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f8e:	60bb      	str	r3, [r7, #8]
        break;
 8004f90:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8004f92:	f7ff fa71 	bl	8004478 <LL_RCC_PLL_GetN>
 8004f96:	4602      	mov	r2, r0
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	fb03 f402 	mul.w	r4, r3, r2
 8004f9e:	f7ff fa84 	bl	80044aa <LL_RCC_PLL_GetDivider>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	091b      	lsrs	r3, r3, #4
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	fbb4 f4f3 	udiv	r4, r4, r3
 8004fac:	f7ff fa71 	bl	8004492 <LL_RCC_PLL_GetR>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	0f5b      	lsrs	r3, r3, #29
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004fba:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd90      	pop	{r4, r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	0800ae44 	.word	0x0800ae44
 8004fcc:	00f42400 	.word	0x00f42400
 8004fd0:	01e84800 	.word	0x01e84800

08004fd4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd4:	b598      	push	{r3, r4, r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004fd8:	f7ff ff90 	bl	8004efc <HAL_RCC_GetSysClockFreq>
 8004fdc:	4604      	mov	r4, r0
 8004fde:	f7ff fa01 	bl	80043e4 <LL_RCC_GetAHBPrescaler>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	091b      	lsrs	r3, r3, #4
 8004fe6:	f003 030f 	and.w	r3, r3, #15
 8004fea:	4a03      	ldr	r2, [pc, #12]	; (8004ff8 <HAL_RCC_GetHCLKFreq+0x24>)
 8004fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ff0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	bd98      	pop	{r3, r4, r7, pc}
 8004ff8:	0800ae04 	.word	0x0800ae04

08004ffc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004ffc:	b590      	push	{r4, r7, lr}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2bb0      	cmp	r3, #176	; 0xb0
 8005008:	d903      	bls.n	8005012 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800500a:	4b15      	ldr	r3, [pc, #84]	; (8005060 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	60fb      	str	r3, [r7, #12]
 8005010:	e007      	b.n	8005022 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	4a11      	ldr	r2, [pc, #68]	; (8005060 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800501c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005020:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8005022:	f7ff f9eb 	bl	80043fc <LL_RCC_GetAHB4Prescaler>
 8005026:	4603      	mov	r3, r0
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 030f 	and.w	r3, r3, #15
 800502e:	4a0d      	ldr	r2, [pc, #52]	; (8005064 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005034:	68fa      	ldr	r2, [r7, #12]
 8005036:	fbb2 f3f3 	udiv	r3, r2, r3
 800503a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4a0a      	ldr	r2, [pc, #40]	; (8005068 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	0c9c      	lsrs	r4, r3, #18
 8005046:	f7fe ff39 	bl	8003ebc <HAL_PWREx_GetVoltageRange>
 800504a:	4603      	mov	r3, r0
 800504c:	4619      	mov	r1, r3
 800504e:	4620      	mov	r0, r4
 8005050:	f000 f80c 	bl	800506c <RCC_SetFlashLatency>
 8005054:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	bd90      	pop	{r4, r7, pc}
 800505e:	bf00      	nop
 8005060:	0800ae44 	.word	0x0800ae44
 8005064:	0800ae04 	.word	0x0800ae04
 8005068:	431bde83 	.word	0x431bde83

0800506c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b093      	sub	sp, #76	; 0x4c
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8005076:	4b37      	ldr	r3, [pc, #220]	; (8005154 <RCC_SetFlashLatency+0xe8>)
 8005078:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800507c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800507e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8005082:	4a35      	ldr	r2, [pc, #212]	; (8005158 <RCC_SetFlashLatency+0xec>)
 8005084:	f107 031c 	add.w	r3, r7, #28
 8005088:	ca07      	ldmia	r2, {r0, r1, r2}
 800508a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800508e:	4b33      	ldr	r3, [pc, #204]	; (800515c <RCC_SetFlashLatency+0xf0>)
 8005090:	f107 040c 	add.w	r4, r7, #12
 8005094:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005096:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800509a:	2300      	movs	r3, #0
 800509c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a4:	d11a      	bne.n	80050dc <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050a6:	2300      	movs	r3, #0
 80050a8:	643b      	str	r3, [r7, #64]	; 0x40
 80050aa:	e013      	b.n	80050d4 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	3348      	adds	r3, #72	; 0x48
 80050b2:	443b      	add	r3, r7
 80050b4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80050b8:	687a      	ldr	r2, [r7, #4]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d807      	bhi.n	80050ce <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	3348      	adds	r3, #72	; 0x48
 80050c4:	443b      	add	r3, r7
 80050c6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80050ca:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80050cc:	e020      	b.n	8005110 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80050ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d0:	3301      	adds	r3, #1
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40
 80050d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d9e8      	bls.n	80050ac <RCC_SetFlashLatency+0x40>
 80050da:	e019      	b.n	8005110 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e0:	e013      	b.n	800510a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80050e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	3348      	adds	r3, #72	; 0x48
 80050e8:	443b      	add	r3, r7
 80050ea:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d807      	bhi.n	8005104 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80050f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	3348      	adds	r3, #72	; 0x48
 80050fa:	443b      	add	r3, r7
 80050fc:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005100:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005102:	e005      	b.n	8005110 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005106:	3301      	adds	r3, #1
 8005108:	63fb      	str	r3, [r7, #60]	; 0x3c
 800510a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510c:	2b02      	cmp	r3, #2
 800510e:	d9e8      	bls.n	80050e2 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8005110:	4b13      	ldr	r3, [pc, #76]	; (8005160 <RCC_SetFlashLatency+0xf4>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f023 0207 	bic.w	r2, r3, #7
 8005118:	4911      	ldr	r1, [pc, #68]	; (8005160 <RCC_SetFlashLatency+0xf4>)
 800511a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800511c:	4313      	orrs	r3, r2
 800511e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005120:	f7fe f88e 	bl	8003240 <HAL_GetTick>
 8005124:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005126:	e008      	b.n	800513a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005128:	f7fe f88a 	bl	8003240 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e007      	b.n	800514a <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800513a:	4b09      	ldr	r3, [pc, #36]	; (8005160 <RCC_SetFlashLatency+0xf4>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005144:	429a      	cmp	r2, r3
 8005146:	d1ef      	bne.n	8005128 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	374c      	adds	r7, #76	; 0x4c
 800514e:	46bd      	mov	sp, r7
 8005150:	bd90      	pop	{r4, r7, pc}
 8005152:	bf00      	nop
 8005154:	0800ad38 	.word	0x0800ad38
 8005158:	0800ad48 	.word	0x0800ad48
 800515c:	0800ad54 	.word	0x0800ad54
 8005160:	58004000 	.word	0x58004000

08005164 <LL_RCC_LSE_IsEnabled>:
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <LL_RCC_LSE_IsEnabled+0x18>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <LL_RCC_LSE_IsEnabled+0x1a>
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <LL_RCC_LSE_IsReady>:
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800518c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d101      	bne.n	80051a0 <LL_RCC_LSE_IsReady+0x18>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <LL_RCC_LSE_IsReady+0x1a>
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <LL_RCC_SetRFWKPClockSource>:
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80051b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_SetSMPSClockSource>:
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80051e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f023 0203 	bic.w	r2, r3, #3
 80051ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <LL_RCC_SetSMPSPrescaler>:
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005212:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4313      	orrs	r3, r2
 800521a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <LL_RCC_SetUSARTClockSource>:
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005238:	f023 0203 	bic.w	r2, r3, #3
 800523c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <LL_RCC_SetLPUARTClockSource>:
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800525c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005268:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <LL_RCC_SetI2CClockSource>:
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	091b      	lsrs	r3, r3, #4
 8005294:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005298:	43db      	mvns	r3, r3
 800529a:	401a      	ands	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80052a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr

080052ba <LL_RCC_SetLPTIMClockSource>:
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80052c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	041b      	lsls	r3, r3, #16
 80052d0:	43db      	mvns	r3, r3
 80052d2:	401a      	ands	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	041b      	lsls	r3, r3, #16
 80052d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80052e2:	bf00      	nop
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_SetSAIClockSource>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80052f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <LL_RCC_SetRNGClockSource>:
{
 800531a:	b480      	push	{r7}
 800531c:	b083      	sub	sp, #12
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800532e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4313      	orrs	r3, r2
 8005336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <LL_RCC_SetCLK48ClockSource>:
{
 8005346:	b480      	push	{r7}
 8005348:	b083      	sub	sp, #12
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800535a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <LL_RCC_SetUSBClockSource>:
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff ffe3 	bl	8005346 <LL_RCC_SetCLK48ClockSource>
}
 8005380:	bf00      	nop
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <LL_RCC_SetADCClockSource>:
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005398:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800539c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <LL_RCC_SetRTCClockSource>:
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <LL_RCC_GetRTCClockSource>:
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <LL_RCC_ForceBackupDomainReset>:
{
 80053fa:	b480      	push	{r7}
 80053fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005406:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800540a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005412:	bf00      	nop
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <LL_RCC_ReleaseBackupDomainReset>:
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005420:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800542c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <LL_RCC_PLLSAI1_Enable>:
{
 800543e:	b480      	push	{r7}
 8005440:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800544c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005450:	6013      	str	r3, [r2, #0]
}
 8005452:	bf00      	nop
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <LL_RCC_PLLSAI1_Disable>:
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800546a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800546e:	6013      	str	r3, [r2, #0]
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <LL_RCC_PLLSAI1_IsReady>:
{
 800547a:	b480      	push	{r7}
 800547c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800547e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005488:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548c:	d101      	bne.n	8005492 <LL_RCC_PLLSAI1_IsReady+0x18>
 800548e:	2301      	movs	r3, #1
 8005490:	e000      	b.n	8005494 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b088      	sub	sp, #32
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80054a6:	2300      	movs	r3, #0
 80054a8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80054aa:	2300      	movs	r3, #0
 80054ac:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d034      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054c2:	d021      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80054c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054c8:	d81b      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ce:	d01d      	beq.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80054d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054d4:	d815      	bhi.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00b      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80054da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054de:	d110      	bne.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80054e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ee:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80054f0:	e00d      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f947 	bl	800578a <RCCEx_PLLSAI1_ConfigNP>
 80054fc:	4603      	mov	r3, r0
 80054fe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005500:	e005      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	77fb      	strb	r3, [r7, #31]
        break;
 8005506:	e002      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8005508:	bf00      	nop
 800550a:	e000      	b.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800550c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800550e:	7ffb      	ldrb	r3, [r7, #31]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005518:	4618      	mov	r0, r3
 800551a:	f7ff fee8 	bl	80052ee <LL_RCC_SetSAIClockSource>
 800551e:	e001      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005520:	7ffb      	ldrb	r3, [r7, #31]
 8005522:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800552c:	2b00      	cmp	r3, #0
 800552e:	d046      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005530:	f7ff ff56 	bl	80053e0 <LL_RCC_GetRTCClockSource>
 8005534:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	429a      	cmp	r2, r3
 800553e:	d03c      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005540:	f7fe fcac 	bl	8003e9c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	4618      	mov	r0, r3
 8005550:	f7ff ff30 	bl	80053b4 <LL_RCC_SetRTCClockSource>
 8005554:	e02e      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005560:	f7ff ff4b 	bl	80053fa <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005564:	f7ff ff5a 	bl	800541c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005580:	f7ff fdf0 	bl	8005164 <LL_RCC_LSE_IsEnabled>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d114      	bne.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800558a:	f7fd fe59 	bl	8003240 <HAL_GetTick>
 800558e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005590:	e00b      	b.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005592:	f7fd fe55 	bl	8003240 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d902      	bls.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	77fb      	strb	r3, [r7, #31]
              break;
 80055a8:	e004      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80055aa:	f7ff fded 	bl	8005188 <LL_RCC_LSE_IsReady>
 80055ae:	4603      	mov	r3, r0
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d1ee      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80055b4:	7ffb      	ldrb	r3, [r7, #31]
 80055b6:	77bb      	strb	r3, [r7, #30]
 80055b8:	e001      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ba:	7ffb      	ldrb	r3, [r7, #31]
 80055bc:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d004      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff fe2a 	bl	8005228 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fe35 	bl	8005254 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0310 	and.w	r3, r3, #16
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	4618      	mov	r0, r3
 80055fc:	f7ff fe5d 	bl	80052ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0320 	and.w	r3, r3, #32
 8005608:	2b00      	cmp	r3, #0
 800560a:	d004      	beq.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005610:	4618      	mov	r0, r3
 8005612:	f7ff fe52 	bl	80052ba <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 0304 	and.w	r3, r3, #4
 800561e:	2b00      	cmp	r3, #0
 8005620:	d004      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	4618      	mov	r0, r3
 8005628:	f7ff fe2a 	bl	8005280 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff fe1f 	bl	8005280 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800564a:	2b00      	cmp	r3, #0
 800564c:	d022      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005652:	4618      	mov	r0, r3
 8005654:	f7ff fe8d 	bl	8005372 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005660:	d107      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800566c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005670:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005676:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800567a:	d10b      	bne.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3304      	adds	r3, #4
 8005680:	4618      	mov	r0, r3
 8005682:	f000 f8dd 	bl	8005840 <RCCEx_PLLSAI1_ConfigNQ>
 8005686:	4603      	mov	r3, r0
 8005688:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800568a:	7ffb      	ldrb	r3, [r7, #31]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8005690:	7ffb      	ldrb	r3, [r7, #31]
 8005692:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02b      	beq.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a8:	d008      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056b2:	d003      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d105      	bne.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fe2a 	bl	800531a <LL_RCC_SetRNGClockSource>
 80056c6:	e00a      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x240>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d0:	60fb      	str	r3, [r7, #12]
 80056d2:	2000      	movs	r0, #0
 80056d4:	f7ff fe21 	bl	800531a <LL_RCC_SetRNGClockSource>
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff fe34 	bl	8005346 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e2:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80056e6:	d107      	bne.n	80056f8 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80056e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80056f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005700:	2b00      	cmp	r3, #0
 8005702:	d022      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fe3d 	bl	8005388 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005712:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005716:	d107      	bne.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800572c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005730:	d10b      	bne.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	4618      	mov	r0, r3
 8005738:	f000 f8dd 	bl	80058f6 <RCCEx_PLLSAI1_ConfigNR>
 800573c:	4603      	mov	r3, r0
 800573e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005740:	7ffb      	ldrb	r3, [r7, #31]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8005746:	7ffb      	ldrb	r3, [r7, #31]
 8005748:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d004      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fd26 	bl	80051ac <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d009      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fd45 	bl	8005200 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800577a:	4618      	mov	r0, r3
 800577c:	f7ff fd2c 	bl	80051d8 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8005780:	7fbb      	ldrb	r3, [r7, #30]
}
 8005782:	4618      	mov	r0, r3
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005796:	f7ff fe61 	bl	800545c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800579a:	f7fd fd51 	bl	8003240 <HAL_GetTick>
 800579e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057a0:	e009      	b.n	80057b6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057a2:	f7fd fd4d 	bl	8003240 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	2b02      	cmp	r3, #2
 80057ae:	d902      	bls.n	80057b6 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	73fb      	strb	r3, [r7, #15]
      break;
 80057b4:	e004      	b.n	80057c0 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80057b6:	f7ff fe60 	bl	800547a <LL_RCC_PLLSAI1_IsReady>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1f0      	bne.n	80057a2 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d137      	bne.n	8005836 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80057c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057da:	4313      	orrs	r3, r2
 80057dc:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80057de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057f0:	4313      	orrs	r3, r2
 80057f2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80057f4:	f7ff fe23 	bl	800543e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f8:	f7fd fd22 	bl	8003240 <HAL_GetTick>
 80057fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80057fe:	e009      	b.n	8005814 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005800:	f7fd fd1e 	bl	8003240 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d902      	bls.n	8005814 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	73fb      	strb	r3, [r7, #15]
        break;
 8005812:	e004      	b.n	800581e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005814:	f7ff fe31 	bl	800547a <LL_RCC_PLLSAI1_IsReady>
 8005818:	4603      	mov	r3, r0
 800581a:	2b01      	cmp	r3, #1
 800581c:	d1f0      	bne.n	8005800 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800581e:	7bfb      	ldrb	r3, [r7, #15]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005828:	691a      	ldr	r2, [r3, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005832:	4313      	orrs	r3, r2
 8005834:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005836:	7bfb      	ldrb	r3, [r7, #15]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005848:	2300      	movs	r3, #0
 800584a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800584c:	f7ff fe06 	bl	800545c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005850:	f7fd fcf6 	bl	8003240 <HAL_GetTick>
 8005854:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005856:	e009      	b.n	800586c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005858:	f7fd fcf2 	bl	8003240 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d902      	bls.n	800586c <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	73fb      	strb	r3, [r7, #15]
      break;
 800586a:	e004      	b.n	8005876 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800586c:	f7ff fe05 	bl	800547a <LL_RCC_PLLSAI1_IsReady>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1f0      	bne.n	8005858 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d137      	bne.n	80058ec <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	021b      	lsls	r3, r3, #8
 800588c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005890:	4313      	orrs	r3, r2
 8005892:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8005894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058a6:	4313      	orrs	r3, r2
 80058a8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80058aa:	f7ff fdc8 	bl	800543e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ae:	f7fd fcc7 	bl	8003240 <HAL_GetTick>
 80058b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058b4:	e009      	b.n	80058ca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058b6:	f7fd fcc3 	bl	8003240 <HAL_GetTick>
 80058ba:	4602      	mov	r2, r0
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d902      	bls.n	80058ca <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	73fb      	strb	r3, [r7, #15]
        break;
 80058c8:	e004      	b.n	80058d4 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80058ca:	f7ff fdd6 	bl	800547a <LL_RCC_PLLSAI1_IsReady>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d1f0      	bne.n	80058b6 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d108      	bne.n	80058ec <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80058da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80058e8:	4313      	orrs	r3, r2
 80058ea:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b084      	sub	sp, #16
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8005902:	f7ff fdab 	bl	800545c <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005906:	f7fd fc9b 	bl	8003240 <HAL_GetTick>
 800590a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800590c:	e009      	b.n	8005922 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800590e:	f7fd fc97 	bl	8003240 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	2b02      	cmp	r3, #2
 800591a:	d902      	bls.n	8005922 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800591c:	2303      	movs	r3, #3
 800591e:	73fb      	strb	r3, [r7, #15]
      break;
 8005920:	e004      	b.n	800592c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8005922:	f7ff fdaa 	bl	800547a <LL_RCC_PLLSAI1_IsReady>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1f0      	bne.n	800590e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d137      	bne.n	80059a2 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005932:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005946:	4313      	orrs	r3, r2
 8005948:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800594a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800595c:	4313      	orrs	r3, r2
 800595e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005960:	f7ff fd6d 	bl	800543e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005964:	f7fd fc6c 	bl	8003240 <HAL_GetTick>
 8005968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800596a:	e009      	b.n	8005980 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800596c:	f7fd fc68 	bl	8003240 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d902      	bls.n	8005980 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	73fb      	strb	r3, [r7, #15]
        break;
 800597e:	e004      	b.n	800598a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005980:	f7ff fd7b 	bl	800547a <LL_RCC_PLLSAI1_IsReady>
 8005984:	4603      	mov	r3, r0
 8005986:	2b01      	cmp	r3, #1
 8005988:	d1f0      	bne.n	800596c <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800598a:	7bfb      	ldrb	r3, [r7, #15]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d108      	bne.n	80059a2 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005990:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005994:	691a      	ldr	r2, [r3, #16]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800599e:	4313      	orrs	r3, r2
 80059a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80059a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3710      	adds	r7, #16
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e09f      	b.n	8005afe <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d106      	bne.n	80059d8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f7fd f9d6 	bl	8002d84 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059e0:	4b49      	ldr	r3, [pc, #292]	; (8005b08 <HAL_RTC_Init+0x15c>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	2b10      	cmp	r3, #16
 80059ea:	d07e      	beq.n	8005aea <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	22ca      	movs	r2, #202	; 0xca
 80059f2:	625a      	str	r2, [r3, #36]	; 0x24
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2253      	movs	r2, #83	; 0x53
 80059fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8ab 	bl	8005b58 <RTC_EnterInitMode>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	22ff      	movs	r2, #255	; 0xff
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2204      	movs	r2, #4
 8005a14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	73fb      	strb	r3, [r7, #15]
 8005a1c:	e067      	b.n	8005aee <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6812      	ldr	r2, [r2, #0]
 8005a28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a30:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6899      	ldr	r1, [r3, #8]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699b      	ldr	r3, [r3, #24]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	68d2      	ldr	r2, [r2, #12]
 8005a58:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6919      	ldr	r1, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	041a      	lsls	r2, r3, #16
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a7c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0203 	bic.w	r2, r2, #3
 8005a8c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69da      	ldr	r2, [r3, #28]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0320 	and.w	r3, r3, #32
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d113      	bne.n	8005adc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f829 	bl	8005b0c <HAL_RTC_WaitForSynchro>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	22ff      	movs	r2, #255	; 0xff
 8005ac6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2204      	movs	r2, #4
 8005acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e010      	b.n	8005afe <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	22ff      	movs	r2, #255	; 0xff
 8005ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	73fb      	strb	r3, [r7, #15]
 8005ae8:	e001      	b.n	8005aee <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d103      	bne.n	8005afc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	40002800 	.word	0x40002800

08005b0c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b22:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005b24:	f7fd fb8c 	bl	8003240 <HAL_GetTick>
 8005b28:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b2a:	e009      	b.n	8005b40 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b2c:	f7fd fb88 	bl	8003240 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b3a:	d901      	bls.n	8005b40 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e007      	b.n	8005b50 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0ee      	beq.n	8005b2c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3710      	adds	r7, #16
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d119      	bne.n	8005ba2 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b76:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005b78:	f7fd fb62 	bl	8003240 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b7e:	e009      	b.n	8005b94 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005b80:	f7fd fb5e 	bl	8003240 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b8e:	d901      	bls.n	8005b94 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e007      	b.n	8005ba4 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0ee      	beq.n	8005b80 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d101      	bne.n	8005bc6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	e0a8      	b.n	8005d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	22ca      	movs	r2, #202	; 0xca
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2253      	movs	r2, #83	; 0x53
 8005be4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8005bf4:	f7fd fb24 	bl	8003240 <HAL_GetTick>
 8005bf8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005bfa:	e015      	b.n	8005c28 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005bfc:	f7fd fb20 	bl	8003240 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c0a:	d90d      	bls.n	8005c28 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	22ff      	movs	r2, #255	; 0xff
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2203      	movs	r2, #3
 8005c18:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e077      	b.n	8005d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f003 0304 	and.w	r3, r3, #4
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e2      	bne.n	8005bfc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c44:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8005c56:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005c58:	f7fd faf2 	bl	8003240 <HAL_GetTick>
 8005c5c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c5e:	e015      	b.n	8005c8c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005c60:	f7fd faee 	bl	8003240 <HAL_GetTick>
 8005c64:	4602      	mov	r2, r0
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	1ad3      	subs	r3, r2, r3
 8005c6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c6e:	d90d      	bls.n	8005c8c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	22ff      	movs	r2, #255	; 0xff
 8005c76:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2203      	movs	r2, #3
 8005c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e045      	b.n	8005d18 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68db      	ldr	r3, [r3, #12]
 8005c92:	f003 0304 	and.w	r3, r3, #4
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0e2      	beq.n	8005c60 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0207 	bic.w	r2, r2, #7
 8005cb0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6899      	ldr	r1, [r3, #8]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005cc2:	4b17      	ldr	r3, [pc, #92]	; (8005d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cc8:	4a15      	ldr	r2, [pc, #84]	; (8005d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005cd2:	4b13      	ldr	r3, [pc, #76]	; (8005d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8005cd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cdc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cec:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cfc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	22ff      	movs	r2, #255	; 0xff
 8005d04:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3718      	adds	r7, #24
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	58000800 	.word	0x58000800

08005d24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e095      	b.n	8005e62 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d46:	d009      	beq.n	8005d5c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	61da      	str	r2, [r3, #28]
 8005d4e:	e005      	b.n	8005d5c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fd f838 	bl	8002dec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2202      	movs	r2, #2
 8005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	681a      	ldr	r2, [r3, #0]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d92:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d9c:	d902      	bls.n	8005da4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e002      	b.n	8005daa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005db2:	d007      	beq.n	8005dc4 <HAL_SPI_Init+0xa0>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	ea42 0103 	orr.w	r1, r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e0e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	0c1b      	lsrs	r3, r3, #16
 8005e20:	f003 0204 	and.w	r2, r3, #4
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e28:	f003 0310 	and.w	r3, r3, #16
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e32:	f003 0308 	and.w	r3, r3, #8
 8005e36:	431a      	orrs	r2, r3
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e40:	ea42 0103 	orr.w	r1, r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b088      	sub	sp, #32
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	60f8      	str	r0, [r7, #12]
 8005e72:	60b9      	str	r1, [r7, #8]
 8005e74:	603b      	str	r3, [r7, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_SPI_Transmit+0x22>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e158      	b.n	800613e <HAL_SPI_Transmit+0x2d4>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e94:	f7fd f9d4 	bl	8003240 <HAL_GetTick>
 8005e98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d002      	beq.n	8005eb0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005eaa:	2302      	movs	r3, #2
 8005eac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005eae:	e13d      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_SPI_Transmit+0x52>
 8005eb6:	88fb      	ldrh	r3, [r7, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d102      	bne.n	8005ec2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ec0:	e134      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0c:	d10f      	bne.n	8005f2e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f38:	2b40      	cmp	r3, #64	; 0x40
 8005f3a:	d007      	beq.n	8005f4c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f54:	d94b      	bls.n	8005fee <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0xfa>
 8005f5e:	8afb      	ldrh	r3, [r7, #22]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d13e      	bne.n	8005fe2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f74:	1c9a      	adds	r2, r3, #2
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f88:	e02b      	b.n	8005fe2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d112      	bne.n	8005fbe <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9c:	881a      	ldrh	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa8:	1c9a      	adds	r2, r3, #2
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fbc:	e011      	b.n	8005fe2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fbe:	f7fd f93f 	bl	8003240 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d803      	bhi.n	8005fd6 <HAL_SPI_Transmit+0x16c>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Transmit+0x172>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d102      	bne.n	8005fe2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fe0:	e0a4      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1ce      	bne.n	8005f8a <HAL_SPI_Transmit+0x120>
 8005fec:	e07c      	b.n	80060e8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <HAL_SPI_Transmit+0x192>
 8005ff6:	8afb      	ldrh	r3, [r7, #22]
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d170      	bne.n	80060de <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d912      	bls.n	800602c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	881a      	ldrh	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	1c9a      	adds	r2, r3, #2
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006020:	b29b      	uxth	r3, r3
 8006022:	3b02      	subs	r3, #2
 8006024:	b29a      	uxth	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	87da      	strh	r2, [r3, #62]	; 0x3e
 800602a:	e058      	b.n	80060de <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	330c      	adds	r3, #12
 8006036:	7812      	ldrb	r2, [r2, #0]
 8006038:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006048:	b29b      	uxth	r3, r3
 800604a:	3b01      	subs	r3, #1
 800604c:	b29a      	uxth	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006052:	e044      	b.n	80060de <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b02      	cmp	r3, #2
 8006060:	d12b      	bne.n	80060ba <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006066:	b29b      	uxth	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d912      	bls.n	8006092 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006070:	881a      	ldrh	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607c:	1c9a      	adds	r2, r3, #2
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b02      	subs	r3, #2
 800608a:	b29a      	uxth	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006090:	e025      	b.n	80060de <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	7812      	ldrb	r2, [r2, #0]
 800609e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29a      	uxth	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80060b8:	e011      	b.n	80060de <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060ba:	f7fd f8c1 	bl	8003240 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	683a      	ldr	r2, [r7, #0]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d803      	bhi.n	80060d2 <HAL_SPI_Transmit+0x268>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060d0:	d102      	bne.n	80060d8 <HAL_SPI_Transmit+0x26e>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060dc:	e026      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1b5      	bne.n	8006054 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f949 	bl	8006384 <SPI_EndRxTxTransaction>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2220      	movs	r2, #32
 80060fc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10a      	bne.n	800611c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006106:	2300      	movs	r3, #0
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	613b      	str	r3, [r7, #16]
 800611a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006120:	2b00      	cmp	r3, #0
 8006122:	d002      	beq.n	800612a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	77fb      	strb	r3, [r7, #31]
 8006128:	e000      	b.n	800612c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800612a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800613c:	7ffb      	ldrb	r3, [r7, #31]
}
 800613e:	4618      	mov	r0, r3
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b088      	sub	sp, #32
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	603b      	str	r3, [r7, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006158:	f7fd f872 	bl	8003240 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006160:	1a9b      	subs	r3, r3, r2
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	4413      	add	r3, r2
 8006166:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006168:	f7fd f86a 	bl	8003240 <HAL_GetTick>
 800616c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800616e:	4b39      	ldr	r3, [pc, #228]	; (8006254 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	015b      	lsls	r3, r3, #5
 8006174:	0d1b      	lsrs	r3, r3, #20
 8006176:	69fa      	ldr	r2, [r7, #28]
 8006178:	fb02 f303 	mul.w	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800617e:	e054      	b.n	800622a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006186:	d050      	beq.n	800622a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006188:	f7fd f85a 	bl	8003240 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	69bb      	ldr	r3, [r7, #24]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	69fa      	ldr	r2, [r7, #28]
 8006194:	429a      	cmp	r2, r3
 8006196:	d902      	bls.n	800619e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d13d      	bne.n	800621a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685a      	ldr	r2, [r3, #4]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061b6:	d111      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061c0:	d004      	beq.n	80061cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061ca:	d107      	bne.n	80061dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e4:	d10f      	bne.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006204:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e017      	b.n	800624a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	3b01      	subs	r3, #1
 8006228:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	429a      	cmp	r2, r3
 8006238:	bf0c      	ite	eq
 800623a:	2301      	moveq	r3, #1
 800623c:	2300      	movne	r3, #0
 800623e:	b2db      	uxtb	r3, r3
 8006240:	461a      	mov	r2, r3
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	429a      	cmp	r2, r3
 8006246:	d19b      	bne.n	8006180 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3720      	adds	r7, #32
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	20000028 	.word	0x20000028

08006258 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b08a      	sub	sp, #40	; 0x28
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
 8006264:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800626a:	f7fc ffe9 	bl	8003240 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	4413      	add	r3, r2
 8006278:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800627a:	f7fc ffe1 	bl	8003240 <HAL_GetTick>
 800627e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	330c      	adds	r3, #12
 8006286:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006288:	4b3d      	ldr	r3, [pc, #244]	; (8006380 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	4413      	add	r3, r2
 8006292:	00da      	lsls	r2, r3, #3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	0d1b      	lsrs	r3, r3, #20
 8006298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800629a:	fb02 f303 	mul.w	r3, r2, r3
 800629e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062a0:	e060      	b.n	8006364 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062a8:	d107      	bne.n	80062ba <SPI_WaitFifoStateUntilTimeout+0x62>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d104      	bne.n	80062ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062c0:	d050      	beq.n	8006364 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062c2:	f7fc ffbd 	bl	8003240 <HAL_GetTick>
 80062c6:	4602      	mov	r2, r0
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	1ad3      	subs	r3, r2, r3
 80062cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d902      	bls.n	80062d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d13d      	bne.n	8006354 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	685a      	ldr	r2, [r3, #4]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80062e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f0:	d111      	bne.n	8006316 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fa:	d004      	beq.n	8006306 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006304:	d107      	bne.n	8006316 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006314:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800631e:	d10f      	bne.n	8006340 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800632e:	601a      	str	r2, [r3, #0]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800633e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2200      	movs	r2, #0
 800634c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e010      	b.n	8006376 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d101      	bne.n	800635e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800635a:	2300      	movs	r3, #0
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	3b01      	subs	r3, #1
 8006362:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	4013      	ands	r3, r2
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	429a      	cmp	r2, r3
 8006372:	d196      	bne.n	80062a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3728      	adds	r7, #40	; 0x28
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000028 	.word	0x20000028

08006384 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af02      	add	r7, sp, #8
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff ff5b 	bl	8006258 <SPI_WaitFifoStateUntilTimeout>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d007      	beq.n	80063b8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ac:	f043 0220 	orr.w	r2, r3, #32
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e027      	b.n	8006408 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2200      	movs	r2, #0
 80063c0:	2180      	movs	r1, #128	; 0x80
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fec0 	bl	8006148 <SPI_WaitFlagStateUntilTimeout>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d007      	beq.n	80063de <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e014      	b.n	8006408 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	9300      	str	r3, [sp, #0]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	2200      	movs	r2, #0
 80063e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f7ff ff34 	bl	8006258 <SPI_WaitFifoStateUntilTimeout>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d007      	beq.n	8006406 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fa:	f043 0220 	orr.w	r2, r3, #32
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e000      	b.n	8006408 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08a      	sub	sp, #40	; 0x28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006424:	2b20      	cmp	r3, #32
 8006426:	d167      	bne.n	80064f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <HAL_UART_Transmit_DMA+0x24>
 800642e:	88fb      	ldrh	r3, [r7, #6]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	e060      	b.n	80064fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	88fa      	ldrh	r2, [r7, #6]
 8006442:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	88fa      	ldrh	r2, [r7, #6]
 800644a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2221      	movs	r2, #33	; 0x21
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d028      	beq.n	80064b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800646a:	4a26      	ldr	r2, [pc, #152]	; (8006504 <HAL_UART_Transmit_DMA+0xf4>)
 800646c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006472:	4a25      	ldr	r2, [pc, #148]	; (8006508 <HAL_UART_Transmit_DMA+0xf8>)
 8006474:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647a:	4a24      	ldr	r2, [pc, #144]	; (800650c <HAL_UART_Transmit_DMA+0xfc>)
 800647c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006482:	2200      	movs	r2, #0
 8006484:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800648e:	4619      	mov	r1, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	3328      	adds	r3, #40	; 0x28
 8006496:	461a      	mov	r2, r3
 8006498:	88fb      	ldrh	r3, [r7, #6]
 800649a:	f7fd f88e 	bl	80035ba <HAL_DMA_Start_IT>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2210      	movs	r2, #16
 80064a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2220      	movs	r2, #32
 80064b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e020      	b.n	80064fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2240      	movs	r2, #64	; 0x40
 80064be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	3308      	adds	r3, #8
 80064c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	e853 3f00 	ldrex	r3, [r3]
 80064ce:	613b      	str	r3, [r7, #16]
   return(result);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064d6:	627b      	str	r3, [r7, #36]	; 0x24
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e0:	623a      	str	r2, [r7, #32]
 80064e2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	6a3a      	ldr	r2, [r7, #32]
 80064e8:	e841 2300 	strex	r3, r2, [r1]
 80064ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d1e5      	bne.n	80064c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3728      	adds	r7, #40	; 0x28
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	08006ce7 	.word	0x08006ce7
 8006508:	08006d81 	.word	0x08006d81
 800650c:	08006d9d 	.word	0x08006d9d

08006510 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b0ba      	sub	sp, #232	; 0xe8
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006536:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800653a:	f640 030f 	movw	r3, #2063	; 0x80f
 800653e:	4013      	ands	r3, r2
 8006540:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d11b      	bne.n	8006584 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800654c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006550:	f003 0320 	and.w	r3, r3, #32
 8006554:	2b00      	cmp	r3, #0
 8006556:	d015      	beq.n	8006584 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	d105      	bne.n	8006570 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d009      	beq.n	8006584 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 82e3 	beq.w	8006b40 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	4798      	blx	r3
      }
      return;
 8006582:	e2dd      	b.n	8006b40 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 8123 	beq.w	80067d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800658e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006592:	4b8d      	ldr	r3, [pc, #564]	; (80067c8 <HAL_UART_IRQHandler+0x2b8>)
 8006594:	4013      	ands	r3, r2
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800659a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800659e:	4b8b      	ldr	r3, [pc, #556]	; (80067cc <HAL_UART_IRQHandler+0x2bc>)
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8116 	beq.w	80067d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d011      	beq.n	80065d8 <HAL_UART_IRQHandler+0xc8>
 80065b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2201      	movs	r2, #1
 80065c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ce:	f043 0201 	orr.w	r2, r3, #1
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065dc:	f003 0302 	and.w	r3, r3, #2
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d011      	beq.n	8006608 <HAL_UART_IRQHandler+0xf8>
 80065e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2202      	movs	r2, #2
 80065f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d011      	beq.n	8006638 <HAL_UART_IRQHandler+0x128>
 8006614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2204      	movs	r2, #4
 8006626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800662e:	f043 0202 	orr.w	r2, r3, #2
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d017      	beq.n	8006674 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006648:	f003 0320 	and.w	r3, r3, #32
 800664c:	2b00      	cmp	r3, #0
 800664e:	d105      	bne.n	800665c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006650:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006654:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <HAL_UART_IRQHandler+0x2b8>)
 8006656:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00b      	beq.n	8006674 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2208      	movs	r2, #8
 8006662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666a:	f043 0208 	orr.w	r2, r3, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006678:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800667c:	2b00      	cmp	r3, #0
 800667e:	d012      	beq.n	80066a6 <HAL_UART_IRQHandler+0x196>
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00c      	beq.n	80066a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006694:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800669c:	f043 0220 	orr.w	r2, r3, #32
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8249 	beq.w	8006b44 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	f003 0320 	and.w	r3, r3, #32
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d013      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d105      	bne.n	80066d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d007      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006702:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006706:	2b00      	cmp	r3, #0
 8006708:	d054      	beq.n	80067b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa85 	bl	8006c1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671a:	2b40      	cmp	r3, #64	; 0x40
 800671c:	d146      	bne.n	80067ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800672c:	e853 3f00 	ldrex	r3, [r3]
 8006730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	3308      	adds	r3, #8
 8006746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800674a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800674e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800675a:	e841 2300 	strex	r3, r2, [r1]
 800675e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1d9      	bne.n	800671e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006770:	2b00      	cmp	r3, #0
 8006772:	d017      	beq.n	80067a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800677a:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <HAL_UART_IRQHandler+0x2c0>)
 800677c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006784:	4618      	mov	r0, r3
 8006786:	f7fc fff2 	bl	800376e <HAL_DMA_Abort_IT>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d019      	beq.n	80067c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800679e:	4610      	mov	r0, r2
 80067a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a2:	e00f      	b.n	80067c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 f9e1 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067aa:	e00b      	b.n	80067c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f9dd 	bl	8006b6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	e007      	b.n	80067c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f9d9 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80067c2:	e1bf      	b.n	8006b44 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c4:	bf00      	nop
    return;
 80067c6:	e1bd      	b.n	8006b44 <HAL_UART_IRQHandler+0x634>
 80067c8:	10000001 	.word	0x10000001
 80067cc:	04000120 	.word	0x04000120
 80067d0:	08006e1d 	.word	0x08006e1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d8:	2b01      	cmp	r3, #1
 80067da:	f040 8153 	bne.w	8006a84 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 814c 	beq.w	8006a84 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8145 	beq.w	8006a84 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2210      	movs	r2, #16
 8006800:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680c:	2b40      	cmp	r3, #64	; 0x40
 800680e:	f040 80bb 	bne.w	8006988 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 818f 	beq.w	8006b48 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006830:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006834:	429a      	cmp	r2, r3
 8006836:	f080 8187 	bcs.w	8006b48 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006840:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	f040 8087 	bne.w	8006966 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006864:	e853 3f00 	ldrex	r3, [r3]
 8006868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800686c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	461a      	mov	r2, r3
 800687e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006882:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006886:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800688e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800689a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1da      	bne.n	8006858 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068b4:	f023 0301 	bic.w	r3, r3, #1
 80068b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e1      	bne.n	80068a2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	3308      	adds	r3, #8
 80068e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068e8:	e853 3f00 	ldrex	r3, [r3]
 80068ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	3308      	adds	r3, #8
 80068fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006902:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006904:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006906:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006908:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800690a:	e841 2300 	strex	r3, r2, [r1]
 800690e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006910:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1e3      	bne.n	80068de <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006934:	f023 0310 	bic.w	r3, r3, #16
 8006938:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	461a      	mov	r2, r3
 8006942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006946:	65bb      	str	r3, [r7, #88]	; 0x58
 8006948:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800694c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e4      	bne.n	8006924 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006960:	4618      	mov	r0, r3
 8006962:	f7fc fea5 	bl	80036b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2202      	movs	r2, #2
 800696a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006978:	b29b      	uxth	r3, r3
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	b29b      	uxth	r3, r3
 800697e:	4619      	mov	r1, r3
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f8fd 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006986:	e0df      	b.n	8006b48 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006994:	b29b      	uxth	r3, r3
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 80d1 	beq.w	8006b4c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80069aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f000 80cc 	beq.w	8006b4c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069d6:	647b      	str	r3, [r7, #68]	; 0x44
 80069d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e4      	bne.n	80069b4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	623b      	str	r3, [r7, #32]
   return(result);
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a00:	f023 0301 	bic.w	r3, r3, #1
 8006a04:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a12:	633a      	str	r2, [r7, #48]	; 0x30
 8006a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a1a:	e841 2300 	strex	r3, r2, [r1]
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1e1      	bne.n	80069ea <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2200      	movs	r2, #0
 8006a32:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f023 0310 	bic.w	r3, r3, #16
 8006a4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a60:	69b9      	ldr	r1, [r7, #24]
 8006a62:	69fa      	ldr	r2, [r7, #28]
 8006a64:	e841 2300 	strex	r3, r2, [r1]
 8006a68:	617b      	str	r3, [r7, #20]
   return(result);
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d1e4      	bne.n	8006a3a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f87f 	bl	8006b80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a82:	e063      	b.n	8006b4c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d00e      	beq.n	8006aae <HAL_UART_IRQHandler+0x59e>
 8006a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d008      	beq.n	8006aae <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f9f9 	bl	8006e9e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aac:	e051      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d014      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d008      	beq.n	8006ae4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d03a      	beq.n	8006b50 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
    }
    return;
 8006ae2:	e035      	b.n	8006b50 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d009      	beq.n	8006b04 <HAL_UART_IRQHandler+0x5f4>
 8006af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 f9a3 	bl	8006e48 <UART_EndTransmit_IT>
    return;
 8006b02:	e026      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d009      	beq.n	8006b24 <HAL_UART_IRQHandler+0x614>
 8006b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f9d2 	bl	8006ec6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b22:	e016      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d010      	beq.n	8006b52 <HAL_UART_IRQHandler+0x642>
 8006b30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	da0c      	bge.n	8006b52 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f9ba 	bl	8006eb2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b3e:	e008      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
      return;
 8006b40:	bf00      	nop
 8006b42:	e006      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
    return;
 8006b44:	bf00      	nop
 8006b46:	e004      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
      return;
 8006b48:	bf00      	nop
 8006b4a:	e002      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
      return;
 8006b4c:	bf00      	nop
 8006b4e:	e000      	b.n	8006b52 <HAL_UART_IRQHandler+0x642>
    return;
 8006b50:	bf00      	nop
  }
}
 8006b52:	37e8      	adds	r7, #232	; 0xe8
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	460b      	mov	r3, r1
 8006b8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b08f      	sub	sp, #60	; 0x3c
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba6:	6a3b      	ldr	r3, [r7, #32]
 8006ba8:	e853 3f00 	ldrex	r3, [r3]
 8006bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bc0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1e6      	bne.n	8006ba0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	e853 3f00 	ldrex	r3, [r3]
 8006be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006be8:	633b      	str	r3, [r7, #48]	; 0x30
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3308      	adds	r3, #8
 8006bf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bf2:	61ba      	str	r2, [r7, #24]
 8006bf4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf6:	6979      	ldr	r1, [r7, #20]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	e841 2300 	strex	r3, r2, [r1]
 8006bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1e5      	bne.n	8006bd2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8006c0e:	bf00      	nop
 8006c10:	373c      	adds	r7, #60	; 0x3c
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b095      	sub	sp, #84	; 0x54
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c2a:	e853 3f00 	ldrex	r3, [r3]
 8006c2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c40:	643b      	str	r3, [r7, #64]	; 0x40
 8006c42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c48:	e841 2300 	strex	r3, r2, [r1]
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1e6      	bne.n	8006c22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	3308      	adds	r3, #8
 8006c5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	e853 3f00 	ldrex	r3, [r3]
 8006c62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c6a:	f023 0301 	bic.w	r3, r3, #1
 8006c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3308      	adds	r3, #8
 8006c76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c80:	e841 2300 	strex	r3, r2, [r1]
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1e3      	bne.n	8006c54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d118      	bne.n	8006cc6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	e853 3f00 	ldrex	r3, [r3]
 8006ca0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	f023 0310 	bic.w	r3, r3, #16
 8006ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cb2:	61bb      	str	r3, [r7, #24]
 8006cb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb6:	6979      	ldr	r1, [r7, #20]
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	e841 2300 	strex	r3, r2, [r1]
 8006cbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1e6      	bne.n	8006c94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2220      	movs	r2, #32
 8006cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006cda:	bf00      	nop
 8006cdc:	3754      	adds	r7, #84	; 0x54
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b090      	sub	sp, #64	; 0x40
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0320 	and.w	r3, r3, #32
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d137      	bne.n	8006d72 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	623b      	str	r3, [r7, #32]
   return(result);
 8006d1a:	6a3b      	ldr	r3, [r7, #32]
 8006d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d2a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	e853 3f00 	ldrex	r3, [r3]
 8006d4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d52:	637b      	str	r3, [r7, #52]	; 0x34
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	461a      	mov	r2, r3
 8006d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d5c:	61fb      	str	r3, [r7, #28]
 8006d5e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d60:	69b9      	ldr	r1, [r7, #24]
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	e841 2300 	strex	r3, r2, [r1]
 8006d68:	617b      	str	r3, [r7, #20]
   return(result);
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1e6      	bne.n	8006d3e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d70:	e002      	b.n	8006d78 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006d72:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006d74:	f7fb fc8c 	bl	8002690 <HAL_UART_TxCpltCallback>
}
 8006d78:	bf00      	nop
 8006d7a:	3740      	adds	r7, #64	; 0x40
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fee2 	bl	8006b58 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b086      	sub	sp, #24
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006db0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d109      	bne.n	8006ddc <UART_DMAError+0x40>
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2b21      	cmp	r3, #33	; 0x21
 8006dcc:	d106      	bne.n	8006ddc <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006dd6:	6978      	ldr	r0, [r7, #20]
 8006dd8:	f7ff fede 	bl	8006b98 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d109      	bne.n	8006dfe <UART_DMAError+0x62>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b22      	cmp	r3, #34	; 0x22
 8006dee:	d106      	bne.n	8006dfe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006df8:	6978      	ldr	r0, [r7, #20]
 8006dfa:	f7ff ff0e 	bl	8006c1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e04:	f043 0210 	orr.w	r2, r3, #16
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e0e:	6978      	ldr	r0, [r7, #20]
 8006e10:	f7ff feac 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e14:	bf00      	nop
 8006e16:	3718      	adds	r7, #24
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fe96 	bl	8006b6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b088      	sub	sp, #32
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	61bb      	str	r3, [r7, #24]
 8006e70:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6979      	ldr	r1, [r7, #20]
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e6      	bne.n	8006e50 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7fb fbfd 	bl	8002690 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e96:	bf00      	nop
 8006e98:	3720      	adds	r7, #32
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b083      	sub	sp, #12
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006ea6:	bf00      	nop
 8006ea8:	370c      	adds	r7, #12
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006eba:	bf00      	nop
 8006ebc:	370c      	adds	r7, #12
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ec6:	b480      	push	{r7}
 8006ec8:	b083      	sub	sp, #12
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8006ee2:	e01c      	b.n	8006f1e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8006ee4:	1d3b      	adds	r3, r7, #4
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	4812      	ldr	r0, [pc, #72]	; (8006f34 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006eea:	f000 f9ee 	bl	80072ca <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	7a5b      	ldrb	r3, [r3, #9]
 8006ef2:	2b0f      	cmp	r3, #15
 8006ef4:	d003      	beq.n	8006efe <HW_IPCC_BLE_RxEvtNot+0x22>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7a5b      	ldrb	r3, [r3, #9]
 8006efa:	2b0e      	cmp	r3, #14
 8006efc:	d105      	bne.n	8006f0a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4619      	mov	r1, r3
 8006f02:	2002      	movs	r0, #2
 8006f04:	f000 f880 	bl	8007008 <OutputDbgTrace>
 8006f08:	e004      	b.n	8006f14 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	2003      	movs	r0, #3
 8006f10:	f000 f87a 	bl	8007008 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8006f14:	4b08      	ldr	r3, [pc, #32]	; (8006f38 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	4610      	mov	r0, r2
 8006f1c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8006f1e:	4805      	ldr	r0, [pc, #20]	; (8006f34 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8006f20:	f000 f990 	bl	8007244 <LST_is_empty>
 8006f24:	4603      	mov	r3, r0
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0dc      	beq.n	8006ee4 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8006f2a:	bf00      	nop
}
 8006f2c:	3708      	adds	r7, #8
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	200300c8 	.word	0x200300c8
 8006f38:	20000350 	.word	0x20000350

08006f3c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8006f40:	4b02      	ldr	r3, [pc, #8]	; (8006f4c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4798      	blx	r3

  return;
 8006f46:	bf00      	nop
}
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20000354 	.word	0x20000354

08006f50 <HW_IPCC_SYS_CmdEvtNot>:

  return 0;
}

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f54:	4b07      	ldr	r3, [pc, #28]	; (8006f74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	2005      	movs	r0, #5
 8006f5e:	f000 f853 	bl	8007008 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8006f62:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a03      	ldr	r2, [pc, #12]	; (8006f74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8006f68:	68d2      	ldr	r2, [r2, #12]
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4798      	blx	r3

  return;
 8006f70:	bf00      	nop
}
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20030000 	.word	0x20030000
 8006f78:	20000358 	.word	0x20000358

08006f7c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006f82:	e00e      	b.n	8006fa2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8006f84:	1d3b      	adds	r3, r7, #4
 8006f86:	4619      	mov	r1, r3
 8006f88:	480b      	ldr	r0, [pc, #44]	; (8006fb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006f8a:	f000 f99e 	bl	80072ca <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4619      	mov	r1, r3
 8006f92:	2006      	movs	r0, #6
 8006f94:	f000 f838 	bl	8007008 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8006f98:	4b08      	ldr	r3, [pc, #32]	; (8006fbc <HW_IPCC_SYS_EvtNot+0x40>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	4610      	mov	r0, r2
 8006fa0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8006fa2:	4805      	ldr	r0, [pc, #20]	; (8006fb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 8006fa4:	f000 f94e 	bl	8007244 <LST_is_empty>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0ea      	beq.n	8006f84 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8006fae:	bf00      	nop
}
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	200300d0 	.word	0x200300d0
 8006fbc:	2000035c 	.word	0x2000035c

08006fc0 <HW_IPCC_TRACES_EvtNot>:

  return;
}

void HW_IPCC_TRACES_EvtNot(void)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006fc6:	e008      	b.n	8006fda <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8006fc8:	1d3b      	adds	r3, r7, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4808      	ldr	r0, [pc, #32]	; (8006ff0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006fce:	f000 f97c 	bl	80072ca <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 f80d 	bl	8006ff4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8006fda:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8006fdc:	f000 f932 	bl	8007244 <LST_is_empty>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f0      	beq.n	8006fc8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8006fe6:	bf00      	nop
}
 8006fe8:	3708      	adds	r7, #8
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	200300c0 	.word	0x200300c0

08006ff4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8006ffc:	bf00      	nop
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8007008:	b480      	push	{r7}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	2b06      	cmp	r3, #6
 8007018:	d845      	bhi.n	80070a6 <OutputDbgTrace+0x9e>
 800701a:	a201      	add	r2, pc, #4	; (adr r2, 8007020 <OutputDbgTrace+0x18>)
 800701c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007020:	0800703d 	.word	0x0800703d
 8007024:	08007061 	.word	0x08007061
 8007028:	08007067 	.word	0x08007067
 800702c:	0800707b 	.word	0x0800707b
 8007030:	08007087 	.word	0x08007087
 8007034:	0800708d 	.word	0x0800708d
 8007038:	0800709b 	.word	0x0800709b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	7a5b      	ldrb	r3, [r3, #9]
 8007044:	2bff      	cmp	r3, #255	; 0xff
 8007046:	d005      	beq.n	8007054 <OutputDbgTrace+0x4c>
 8007048:	2bff      	cmp	r3, #255	; 0xff
 800704a:	dc05      	bgt.n	8007058 <OutputDbgTrace+0x50>
 800704c:	2b0e      	cmp	r3, #14
 800704e:	d005      	beq.n	800705c <OutputDbgTrace+0x54>
 8007050:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8007052:	e001      	b.n	8007058 <OutputDbgTrace+0x50>
          break;
 8007054:	bf00      	nop
 8007056:	e027      	b.n	80070a8 <OutputDbgTrace+0xa0>
          break;
 8007058:	bf00      	nop
 800705a:	e025      	b.n	80070a8 <OutputDbgTrace+0xa0>
          break;
 800705c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800705e:	e023      	b.n	80070a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8007064:	e020      	b.n	80070a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	7a5b      	ldrb	r3, [r3, #9]
 800706e:	2b0e      	cmp	r3, #14
 8007070:	d001      	beq.n	8007076 <OutputDbgTrace+0x6e>
 8007072:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007074:	e000      	b.n	8007078 <OutputDbgTrace+0x70>
          break;
 8007076:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007078:	e016      	b.n	80070a8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	7a5b      	ldrb	r3, [r3, #9]
 8007082:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007084:	e010      	b.n	80070a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800708a:	e00d      	b.n	80070a8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7a5b      	ldrb	r3, [r3, #9]
 8007094:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8007096:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8007098:	e006      	b.n	80070a8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	7a5b      	ldrb	r3, [r3, #9]
 80070a2:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80070a4:	e000      	b.n	80070a8 <OutputDbgTrace+0xa0>

    default:
      break;
 80070a6:	bf00      	nop
  }

  return;
 80070a8:	bf00      	nop
}
 80070aa:	3714      	adds	r7, #20
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ba:	f3ef 8310 	mrs	r3, PRIMASK
 80070be:	60fb      	str	r3, [r7, #12]
  return(result);
 80070c0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80070c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80070c4:	b672      	cpsid	i
}
 80070c6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80070c8:	1cbb      	adds	r3, r7, #2
 80070ca:	4619      	mov	r1, r3
 80070cc:	4812      	ldr	r0, [pc, #72]	; (8007118 <DbgTrace_TxCpltCallback+0x64>)
 80070ce:	f000 fb42 	bl	8007756 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80070d2:	1cbb      	adds	r3, r7, #2
 80070d4:	4619      	mov	r1, r3
 80070d6:	4810      	ldr	r0, [pc, #64]	; (8007118 <DbgTrace_TxCpltCallback+0x64>)
 80070d8:	f000 fc2e 	bl	8007938 <CircularQueue_Sense>
 80070dc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00c      	beq.n	80070fe <DbgTrace_TxCpltCallback+0x4a>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f383 8810 	msr	PRIMASK, r3
}
 80070ee:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 80070f0:	887b      	ldrh	r3, [r7, #2]
 80070f2:	4a0a      	ldr	r2, [pc, #40]	; (800711c <DbgTrace_TxCpltCallback+0x68>)
 80070f4:	4619      	mov	r1, r3
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f7fa f94a 	bl	8001390 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80070fc:	e008      	b.n	8007110 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80070fe:	4b08      	ldr	r3, [pc, #32]	; (8007120 <DbgTrace_TxCpltCallback+0x6c>)
 8007100:	2201      	movs	r2, #1
 8007102:	701a      	strb	r2, [r3, #0]
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f383 8810 	msr	PRIMASK, r3
}
 800710e:	bf00      	nop
}
 8007110:	bf00      	nop
 8007112:	3718      	adds	r7, #24
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}
 8007118:	20000360 	.word	0x20000360
 800711c:	080070b5 	.word	0x080070b5
 8007120:	20000031 	.word	0x20000031

08007124 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	68b9      	ldr	r1, [r7, #8]
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 f805 	bl	8007144 <DbgTraceWrite>
 800713a:	4603      	mov	r3, r0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b08a      	sub	sp, #40	; 0x28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007154:	f3ef 8310 	mrs	r3, PRIMASK
 8007158:	61bb      	str	r3, [r7, #24]
  return(result);
 800715a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800715c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007164:	d102      	bne.n	800716c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8007166:	2300      	movs	r3, #0
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
 800716a:	e037      	b.n	80071dc <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d006      	beq.n	8007180 <DbgTraceWrite+0x3c>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2b02      	cmp	r3, #2
 8007176:	d003      	beq.n	8007180 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8007178:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
 800717e:	e02d      	b.n	80071dc <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d02a      	beq.n	80071dc <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800718a:	b672      	cpsid	i
}
 800718c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	b29a      	uxth	r2, r3
 8007192:	2301      	movs	r3, #1
 8007194:	68b9      	ldr	r1, [r7, #8]
 8007196:	4814      	ldr	r0, [pc, #80]	; (80071e8 <DbgTraceWrite+0xa4>)
 8007198:	f000 f8b6 	bl	8007308 <CircularQueue_Add>
 800719c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d015      	beq.n	80071d0 <DbgTraceWrite+0x8c>
 80071a4:	4b11      	ldr	r3, [pc, #68]	; (80071ec <DbgTraceWrite+0xa8>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d010      	beq.n	80071d0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <DbgTraceWrite+0xa8>)
 80071b0:	2200      	movs	r2, #0
 80071b2:	701a      	strb	r2, [r3, #0]
 80071b4:	6a3b      	ldr	r3, [r7, #32]
 80071b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f383 8810 	msr	PRIMASK, r3
}
 80071be:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4a0a      	ldr	r2, [pc, #40]	; (80071f0 <DbgTraceWrite+0xac>)
 80071c6:	4619      	mov	r1, r3
 80071c8:	69f8      	ldr	r0, [r7, #28]
 80071ca:	f7fa f8e1 	bl	8001390 <DbgOutputTraces>
 80071ce:	e005      	b.n	80071dc <DbgTraceWrite+0x98>
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f383 8810 	msr	PRIMASK, r3
}
 80071da:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3728      	adds	r7, #40	; 0x28
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	20000360 	.word	0x20000360
 80071ec:	20000031 	.word	0x20000031
 80071f0:	080070b5 	.word	0x080070b5

080071f4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <OTP_Read+0x48>)
 8007200:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8007202:	e002      	b.n	800720a <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	3b08      	subs	r3, #8
 8007208:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	3307      	adds	r3, #7
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	79fa      	ldrb	r2, [r7, #7]
 8007212:	429a      	cmp	r2, r3
 8007214:	d003      	beq.n	800721e <OTP_Read+0x2a>
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <OTP_Read+0x4c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d1f2      	bne.n	8007204 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3307      	adds	r3, #7
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	79fa      	ldrb	r2, [r7, #7]
 8007226:	429a      	cmp	r2, r3
 8007228:	d001      	beq.n	800722e <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800722a:	2300      	movs	r3, #0
 800722c:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800722e:	68fb      	ldr	r3, [r7, #12]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	1fff73f8 	.word	0x1fff73f8
 8007240:	1fff7000 	.word	0x1fff7000

08007244 <LST_is_empty>:
  listHead->next = listHead;
  listHead->prev = listHead;
}

uint8_t LST_is_empty (tListNode * listHead)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800724c:	f3ef 8310 	mrs	r3, PRIMASK
 8007250:	60fb      	str	r3, [r7, #12]
  return(result);
 8007252:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007256:	b672      	cpsid	i
}
 8007258:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	429a      	cmp	r2, r3
 8007262:	d102      	bne.n	800726a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8007264:	2301      	movs	r3, #1
 8007266:	75fb      	strb	r3, [r7, #23]
 8007268:	e001      	b.n	800726e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800726a:	2300      	movs	r3, #0
 800726c:	75fb      	strb	r3, [r7, #23]
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	f383 8810 	msr	PRIMASK, r3
}
 8007278:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
}
 800727c:	4618      	mov	r0, r3
 800727e:	371c      	adds	r7, #28
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <LST_remove_node>:
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}


void LST_remove_node (tListNode * node)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007290:	f3ef 8310 	mrs	r3, PRIMASK
 8007294:	60fb      	str	r3, [r7, #12]
  return(result);
 8007296:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007298:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800729a:	b672      	cpsid	i
}
 800729c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	6812      	ldr	r2, [r2, #0]
 80072a6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6852      	ldr	r2, [r2, #4]
 80072b0:	605a      	str	r2, [r3, #4]
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f383 8810 	msr	PRIMASK, r3
}
 80072bc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80072be:	bf00      	nop
 80072c0:	371c      	adds	r7, #28
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
 80072d2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d4:	f3ef 8310 	mrs	r3, PRIMASK
 80072d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80072da:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80072dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80072de:	b672      	cpsid	i
}
 80072e0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7ff ffca 	bl	8007288 <LST_remove_node>
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	f383 8810 	msr	PRIMASK, r3
}
 80072fe:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8007300:	bf00      	nop
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b08e      	sub	sp, #56	; 0x38
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	4613      	mov	r3, r2
 8007316:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8007318:	2300      	movs	r3, #0
 800731a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800731c:	2300      	movs	r3, #0
 800731e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8007320:	2300      	movs	r3, #0
 8007322:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8007324:	2300      	movs	r3, #0
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28
 8007328:	2300      	movs	r3, #0
 800732a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800732c:	2300      	movs	r3, #0
 800732e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8007330:	2300      	movs	r3, #0
 8007332:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	891b      	ldrh	r3, [r3, #8]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <CircularQueue_Add+0x38>
 800733c:	2302      	movs	r3, #2
 800733e:	e000      	b.n	8007342 <CircularQueue_Add+0x3a>
 8007340:	2300      	movs	r3, #0
 8007342:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d02a      	beq.n	80073a2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	891b      	ldrh	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d123      	bne.n	800739c <CircularQueue_Add+0x94>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	4413      	add	r3, r2
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6819      	ldr	r1, [r3, #0]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	1c58      	adds	r0, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	4298      	cmp	r0, r3
 8007372:	d306      	bcc.n	8007382 <CircularQueue_Add+0x7a>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6918      	ldr	r0, [r3, #16]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	1ac3      	subs	r3, r0, r3
 800737e:	3301      	adds	r3, #1
 8007380:	e002      	b.n	8007388 <CircularQueue_Add+0x80>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	3301      	adds	r3, #1
 8007388:	440b      	add	r3, r1
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b29b      	uxth	r3, r3
 800738e:	021b      	lsls	r3, r3, #8
 8007390:	b29b      	uxth	r3, r3
 8007392:	4413      	add	r3, r2
 8007394:	b29b      	uxth	r3, r3
 8007396:	3302      	adds	r3, #2
 8007398:	b29b      	uxth	r3, r3
 800739a:	e001      	b.n	80073a0 <CircularQueue_Add+0x98>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	891b      	ldrh	r3, [r3, #8]
 80073a0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	891b      	ldrh	r3, [r3, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d002      	beq.n	80073b0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	891b      	ldrh	r3, [r3, #8]
 80073ae:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	691a      	ldr	r2, [r3, #16]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d307      	bcc.n	80073cc <CircularQueue_Add+0xc4>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6919      	ldr	r1, [r3, #16]
 80073c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80073c6:	440b      	add	r3, r1
 80073c8:	1ad3      	subs	r3, r2, r3
 80073ca:	e000      	b.n	80073ce <CircularQueue_Add+0xc6>
 80073cc:	2300      	movs	r3, #0
 80073ce:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80073d0:	88fa      	ldrh	r2, [r7, #6]
 80073d2:	7ffb      	ldrb	r3, [r7, #31]
 80073d4:	4413      	add	r3, r2
 80073d6:	461a      	mov	r2, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	fb02 f303 	mul.w	r3, r2, r3
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d80b      	bhi.n	80073fc <CircularQueue_Add+0xf4>
 80073e4:	88fa      	ldrh	r2, [r7, #6]
 80073e6:	7ffb      	ldrb	r3, [r7, #31]
 80073e8:	4413      	add	r3, r2
 80073ea:	461a      	mov	r2, r3
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	fbb3 f1f2 	udiv	r1, r3, r2
 80073f2:	fb01 f202 	mul.w	r2, r1, r2
 80073f6:	1a9b      	subs	r3, r3, r2
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	e000      	b.n	80073fe <CircularQueue_Add+0xf6>
 80073fc:	2300      	movs	r3, #0
 80073fe:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8007400:	7dfa      	ldrb	r2, [r7, #23]
 8007402:	7ffb      	ldrb	r3, [r7, #31]
 8007404:	429a      	cmp	r2, r3
 8007406:	bf8c      	ite	hi
 8007408:	2301      	movhi	r3, #1
 800740a:	2300      	movls	r3, #0
 800740c:	b2db      	uxtb	r3, r3
 800740e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8007410:	7fbb      	ldrb	r3, [r7, #30]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d008      	beq.n	8007428 <CircularQueue_Add+0x120>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	7f1b      	ldrb	r3, [r3, #28]
 800741a:	f003 0301 	and.w	r3, r3, #1
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <CircularQueue_Add+0x120>
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	b29b      	uxth	r3, r3
 8007426:	e000      	b.n	800742a <CircularQueue_Add+0x122>
 8007428:	8bbb      	ldrh	r3, [r7, #28]
 800742a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800742c:	7fbb      	ldrb	r3, [r7, #30]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d008      	beq.n	8007444 <CircularQueue_Add+0x13c>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	7f1b      	ldrb	r3, [r3, #28]
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <CircularQueue_Add+0x13c>
 800743e:	7ffb      	ldrb	r3, [r7, #31]
 8007440:	b29b      	uxth	r3, r3
 8007442:	e000      	b.n	8007446 <CircularQueue_Add+0x13e>
 8007444:	8bbb      	ldrh	r3, [r7, #28]
 8007446:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8007448:	88fb      	ldrh	r3, [r7, #6]
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 817e 	beq.w	800774c <CircularQueue_Add+0x444>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	695a      	ldr	r2, [r3, #20]
 8007454:	88f9      	ldrh	r1, [r7, #6]
 8007456:	7ffb      	ldrb	r3, [r7, #31]
 8007458:	440b      	add	r3, r1
 800745a:	4619      	mov	r1, r3
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	441a      	add	r2, r3
 8007464:	8bbb      	ldrh	r3, [r7, #28]
 8007466:	441a      	add	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	429a      	cmp	r2, r3
 800746e:	f200 816d 	bhi.w	800774c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007476:	e14a      	b.n	800770e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	429a      	cmp	r2, r3
 8007486:	d307      	bcc.n	8007498 <CircularQueue_Add+0x190>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800748e:	441a      	add	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	e003      	b.n	80074a0 <CircularQueue_Add+0x198>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800749e:	4413      	add	r3, r2
 80074a0:	68fa      	ldr	r2, [r7, #12]
 80074a2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	891b      	ldrh	r3, [r3, #8]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d130      	bne.n	8007514 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	1c59      	adds	r1, r3, #1
 80074ba:	6339      	str	r1, [r7, #48]	; 0x30
 80074bc:	4413      	add	r3, r2
 80074be:	88fa      	ldrh	r2, [r7, #6]
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d304      	bcc.n	80074d8 <CircularQueue_Add+0x1d0>
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	e000      	b.n	80074da <CircularQueue_Add+0x1d2>
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 80074dc:	88fb      	ldrh	r3, [r7, #6]
 80074de:	0a1b      	lsrs	r3, r3, #8
 80074e0:	b298      	uxth	r0, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	1c59      	adds	r1, r3, #1
 80074ea:	6339      	str	r1, [r7, #48]	; 0x30
 80074ec:	4413      	add	r3, r2
 80074ee:	b2c2      	uxtb	r2, r0
 80074f0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d304      	bcc.n	8007506 <CircularQueue_Add+0x1fe>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007502:	1ad3      	subs	r3, r2, r3
 8007504:	e000      	b.n	8007508 <CircularQueue_Add+0x200>
 8007506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007508:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	1c9a      	adds	r2, r3, #2
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8007514:	88fa      	ldrh	r2, [r7, #6]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6859      	ldr	r1, [r3, #4]
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	1acb      	subs	r3, r1, r3
 800751e:	4293      	cmp	r3, r2
 8007520:	bf28      	it	cs
 8007522:	4613      	movcs	r3, r2
 8007524:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8007526:	88fb      	ldrh	r3, [r7, #6]
 8007528:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800752a:	429a      	cmp	r2, r3
 800752c:	d007      	beq.n	800753e <CircularQueue_Add+0x236>
 800752e:	88fb      	ldrh	r3, [r7, #6]
 8007530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007532:	429a      	cmp	r2, r3
 8007534:	d225      	bcs.n	8007582 <CircularQueue_Add+0x27a>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	7f1b      	ldrb	r3, [r3, #28]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d121      	bne.n	8007582 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	18d0      	adds	r0, r2, r3
 8007546:	88fb      	ldrh	r3, [r7, #6]
 8007548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754a:	fb02 f303 	mul.w	r3, r2, r3
 800754e:	68ba      	ldr	r2, [r7, #8]
 8007550:	4413      	add	r3, r2
 8007552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007554:	4619      	mov	r1, r3
 8007556:	f001 f869 	bl	800862c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	441a      	add	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8007566:	2300      	movs	r3, #0
 8007568:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8007576:	7ffb      	ldrb	r3, [r7, #31]
 8007578:	b29a      	uxth	r2, r3
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	4413      	add	r3, r2
 800757e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007580:	e0a4      	b.n	80076cc <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8007582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80a1 	beq.w	80076cc <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	7f1b      	ldrb	r3, [r3, #28]
 800758e:	f003 0301 	and.w	r3, r3, #1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d03a      	beq.n	800760c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	891b      	ldrh	r3, [r3, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10d      	bne.n	80075ba <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	3b02      	subs	r3, #2
 80075a6:	4413      	add	r3, r2
 80075a8:	22ff      	movs	r2, #255	; 0xff
 80075aa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4413      	add	r3, r2
 80075b6:	22ff      	movs	r2, #255	; 0xff
 80075b8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c0:	441a      	add	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 80075ca:	88fb      	ldrh	r3, [r7, #6]
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 80075ce:	2300      	movs	r3, #0
 80075d0:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	891b      	ldrh	r3, [r3, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d16f      	bne.n	80076ba <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e0:	1c59      	adds	r1, r3, #1
 80075e2:	6339      	str	r1, [r7, #48]	; 0x30
 80075e4:	4413      	add	r3, r2
 80075e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	0a18      	lsrs	r0, r3, #8
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	1c59      	adds	r1, r3, #1
 80075f8:	6339      	str	r1, [r7, #48]	; 0x30
 80075fa:	4413      	add	r3, r2
 80075fc:	b2c2      	uxtb	r2, r0
 80075fe:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	695b      	ldr	r3, [r3, #20]
 8007604:	1c9a      	adds	r2, r3, #2
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	615a      	str	r2, [r3, #20]
 800760a:	e056      	b.n	80076ba <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	7f1b      	ldrb	r3, [r3, #28]
 8007610:	f003 0302 	and.w	r3, r3, #2
 8007614:	2b00      	cmp	r3, #0
 8007616:	d050      	beq.n	80076ba <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	891b      	ldrh	r3, [r3, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d14a      	bne.n	80076b6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007626:	3b02      	subs	r3, #2
 8007628:	4413      	add	r3, r2
 800762a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007632:	0a19      	lsrs	r1, r3, #8
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800763a:	3b01      	subs	r3, #1
 800763c:	4413      	add	r3, r2
 800763e:	b2ca      	uxtb	r2, r1
 8007640:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	18d0      	adds	r0, r2, r3
 800764a:	88fb      	ldrh	r3, [r7, #6]
 800764c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764e:	fb02 f303 	mul.w	r3, r2, r3
 8007652:	68ba      	ldr	r2, [r7, #8]
 8007654:	4413      	add	r3, r2
 8007656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007658:	4619      	mov	r1, r3
 800765a:	f000 ffe7 	bl	800862c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	695a      	ldr	r2, [r3, #20]
 8007662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007664:	441a      	add	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800766e:	88fa      	ldrh	r2, [r7, #6]
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	1ad3      	subs	r3, r2, r3
 8007674:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	699b      	ldr	r3, [r3, #24]
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8007680:	2300      	movs	r3, #0
 8007682:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768a:	1c59      	adds	r1, r3, #1
 800768c:	6339      	str	r1, [r7, #48]	; 0x30
 800768e:	4413      	add	r3, r2
 8007690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007692:	b2d2      	uxtb	r2, r2
 8007694:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	0a18      	lsrs	r0, r3, #8
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	1c59      	adds	r1, r3, #1
 80076a2:	6339      	str	r1, [r7, #48]	; 0x30
 80076a4:	4413      	add	r3, r2
 80076a6:	b2c2      	uxtb	r2, r0
 80076a8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	1c9a      	adds	r2, r3, #2
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	615a      	str	r2, [r3, #20]
 80076b4:	e001      	b.n	80076ba <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e049      	b.n	800774e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 80076ba:	7ffb      	ldrb	r3, [r7, #31]
 80076bc:	b29a      	uxth	r2, r3
 80076be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4413      	add	r3, r2
 80076c4:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2200      	movs	r2, #0
 80076ca:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 80076cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d015      	beq.n	80076fe <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	18d0      	adds	r0, r2, r3
 80076da:	88fb      	ldrh	r3, [r7, #6]
 80076dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076de:	fb03 f202 	mul.w	r2, r3, r2
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	4413      	add	r3, r2
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ec:	4619      	mov	r1, r3
 80076ee:	f000 ff9d 	bl	800862c <memcpy>
        q->byteCount += NbBytesToCopy;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	695a      	ldr	r2, [r3, #20]
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	441a      	add	r2, r3
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	1c5a      	adds	r2, r3, #1
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8007708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770a:	3301      	adds	r3, #1
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800770e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	429a      	cmp	r2, r3
 8007714:	f4ff aeb0 	bcc.w	8007478 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6919      	ldr	r1, [r3, #16]
 8007720:	7ffb      	ldrb	r3, [r7, #31]
 8007722:	4419      	add	r1, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	4299      	cmp	r1, r3
 800772a:	d307      	bcc.n	800773c <CircularQueue_Add+0x434>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6919      	ldr	r1, [r3, #16]
 8007730:	7ffb      	ldrb	r3, [r7, #31]
 8007732:	4419      	add	r1, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	1acb      	subs	r3, r1, r3
 800773a:	e003      	b.n	8007744 <CircularQueue_Add+0x43c>
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6919      	ldr	r1, [r3, #16]
 8007740:	7ffb      	ldrb	r3, [r7, #31]
 8007742:	440b      	add	r3, r1
 8007744:	4413      	add	r3, r2
 8007746:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	e000      	b.n	800774e <CircularQueue_Add+0x446>
    return NULL;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3738      	adds	r7, #56	; 0x38
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8007756:	b480      	push	{r7}
 8007758:	b085      	sub	sp, #20
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
 800775e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8007764:	2300      	movs	r3, #0
 8007766:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	891b      	ldrh	r3, [r3, #8]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <CircularQueue_Remove+0x1e>
 8007770:	2302      	movs	r3, #2
 8007772:	e000      	b.n	8007776 <CircularQueue_Remove+0x20>
 8007774:	2300      	movs	r3, #0
 8007776:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 80cc 	beq.w	800791e <CircularQueue_Remove+0x1c8>
  {
    /* retreive element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	891b      	ldrh	r3, [r3, #8]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d121      	bne.n	80077d2 <CircularQueue_Remove+0x7c>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	4413      	add	r3, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b29a      	uxth	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6819      	ldr	r1, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	1c58      	adds	r0, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	4298      	cmp	r0, r3
 80077ac:	d306      	bcc.n	80077bc <CircularQueue_Remove+0x66>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	68d8      	ldr	r0, [r3, #12]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	1ac3      	subs	r3, r0, r3
 80077b8:	3301      	adds	r3, #1
 80077ba:	e002      	b.n	80077c2 <CircularQueue_Remove+0x6c>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	3301      	adds	r3, #1
 80077c2:	440b      	add	r3, r1
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	4413      	add	r3, r2
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	e001      	b.n	80077d6 <CircularQueue_Remove+0x80>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	891b      	ldrh	r3, [r3, #8]
 80077d6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7f1b      	ldrb	r3, [r3, #28]
 80077dc:	f003 0301 	and.w	r3, r3, #1
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d057      	beq.n	8007894 <CircularQueue_Remove+0x13e>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7f1b      	ldrb	r3, [r3, #28]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d151      	bne.n	8007894 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80077f0:	897b      	ldrh	r3, [r7, #10]
 80077f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d103      	bne.n	8007802 <CircularQueue_Remove+0xac>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	891b      	ldrh	r3, [r3, #8]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d012      	beq.n	8007828 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800780a:	429a      	cmp	r2, r3
 800780c:	d942      	bls.n	8007894 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	891b      	ldrh	r3, [r3, #8]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d03e      	beq.n	8007894 <CircularQueue_Remove+0x13e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	8912      	ldrh	r2, [r2, #8]
 8007824:	4293      	cmp	r3, r2
 8007826:	d235      	bcs.n	8007894 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	695a      	ldr	r2, [r3, #20]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	68d9      	ldr	r1, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	1acb      	subs	r3, r1, r3
 8007836:	441a      	add	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	891b      	ldrh	r3, [r3, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d121      	bne.n	800788e <CircularQueue_Remove+0x138>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	4413      	add	r3, r2
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b29a      	uxth	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6819      	ldr	r1, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	1c58      	adds	r0, r3, #1
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	4298      	cmp	r0, r3
 8007868:	d306      	bcc.n	8007878 <CircularQueue_Remove+0x122>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	68d8      	ldr	r0, [r3, #12]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	1ac3      	subs	r3, r0, r3
 8007874:	3301      	adds	r3, #1
 8007876:	e002      	b.n	800787e <CircularQueue_Remove+0x128>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	3301      	adds	r3, #1
 800787e:	440b      	add	r3, r1
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	021b      	lsls	r3, r3, #8
 8007886:	b29b      	uxth	r3, r3
 8007888:	4413      	add	r3, r2
 800788a:	b29b      	uxth	r3, r3
 800788c:	e001      	b.n	8007892 <CircularQueue_Remove+0x13c>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	891b      	ldrh	r3, [r3, #8]
 8007892:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681a      	ldr	r2, [r3, #0]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	68d9      	ldr	r1, [r3, #12]
 800789c:	7a7b      	ldrb	r3, [r7, #9]
 800789e:	4419      	add	r1, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	4299      	cmp	r1, r3
 80078a6:	d307      	bcc.n	80078b8 <CircularQueue_Remove+0x162>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	68d9      	ldr	r1, [r3, #12]
 80078ac:	7a7b      	ldrb	r3, [r7, #9]
 80078ae:	4419      	add	r1, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	1acb      	subs	r3, r1, r3
 80078b6:	e003      	b.n	80078c0 <CircularQueue_Remove+0x16a>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	68d9      	ldr	r1, [r3, #12]
 80078bc:	7a7b      	ldrb	r3, [r7, #9]
 80078be:	440b      	add	r3, r1
 80078c0:	4413      	add	r3, r2
 80078c2:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	695b      	ldr	r3, [r3, #20]
 80078c8:	8979      	ldrh	r1, [r7, #10]
 80078ca:	7a7a      	ldrb	r2, [r7, #9]
 80078cc:	440a      	add	r2, r1
 80078ce:	1a9a      	subs	r2, r3, r2
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	695b      	ldr	r3, [r3, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d01b      	beq.n	8007914 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	897b      	ldrh	r3, [r7, #10]
 80078e2:	441a      	add	r2, r3
 80078e4:	7a7b      	ldrb	r3, [r7, #9]
 80078e6:	441a      	add	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d309      	bcc.n	8007904 <CircularQueue_Remove+0x1ae>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	897b      	ldrh	r3, [r7, #10]
 80078f6:	441a      	add	r2, r3
 80078f8:	7a7b      	ldrb	r3, [r7, #9]
 80078fa:	441a      	add	r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	1ad3      	subs	r3, r2, r3
 8007902:	e005      	b.n	8007910 <CircularQueue_Remove+0x1ba>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	897b      	ldrh	r3, [r7, #10]
 800790a:	441a      	add	r2, r3
 800790c:	7a7b      	ldrb	r3, [r7, #9]
 800790e:	4413      	add	r3, r2
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	1e5a      	subs	r2, r3, #1
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	897a      	ldrh	r2, [r7, #10]
 8007928:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8007938:	b480      	push	{r7}
 800793a:	b087      	sub	sp, #28
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8007942:	2300      	movs	r3, #0
 8007944:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	891b      	ldrh	r3, [r3, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <CircularQueue_Sense+0x1e>
 8007952:	2302      	movs	r3, #2
 8007954:	e000      	b.n	8007958 <CircularQueue_Sense+0x20>
 8007956:	2300      	movs	r3, #0
 8007958:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	695b      	ldr	r3, [r3, #20]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8090 	beq.w	8007a8c <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	891b      	ldrh	r3, [r3, #8]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d121      	bne.n	80079be <CircularQueue_Sense+0x86>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	4413      	add	r3, r2
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6819      	ldr	r1, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	1c58      	adds	r0, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	4298      	cmp	r0, r3
 8007998:	d306      	bcc.n	80079a8 <CircularQueue_Sense+0x70>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68d8      	ldr	r0, [r3, #12]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	1ac3      	subs	r3, r0, r3
 80079a4:	3301      	adds	r3, #1
 80079a6:	e002      	b.n	80079ae <CircularQueue_Sense+0x76>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	3301      	adds	r3, #1
 80079ae:	440b      	add	r3, r1
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	4413      	add	r3, r2
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	e001      	b.n	80079c2 <CircularQueue_Sense+0x8a>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	891b      	ldrh	r3, [r3, #8]
 80079c2:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	7f1b      	ldrb	r3, [r3, #28]
 80079c8:	f003 0301 	and.w	r3, r3, #1
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d048      	beq.n	8007a62 <CircularQueue_Sense+0x12a>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	7f1b      	ldrb	r3, [r3, #28]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d142      	bne.n	8007a62 <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80079dc:	8a7b      	ldrh	r3, [r7, #18]
 80079de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d103      	bne.n	80079ee <CircularQueue_Sense+0xb6>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	891b      	ldrh	r3, [r3, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d012      	beq.n	8007a14 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68da      	ldr	r2, [r3, #12]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d933      	bls.n	8007a62 <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	891b      	ldrh	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d02f      	beq.n	8007a62 <CircularQueue_Sense+0x12a>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685a      	ldr	r2, [r3, #4]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	1ad3      	subs	r3, r2, r3
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	8912      	ldrh	r2, [r2, #8]
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d226      	bcs.n	8007a62 <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8007a14:	2300      	movs	r3, #0
 8007a16:	60fb      	str	r3, [r7, #12]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	891b      	ldrh	r3, [r3, #8]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d11d      	bne.n	8007a5c <CircularQueue_Sense+0x124>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	4413      	add	r3, r2
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6819      	ldr	r1, [r3, #0]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	1c58      	adds	r0, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	4298      	cmp	r0, r3
 8007a3a:	d305      	bcc.n	8007a48 <CircularQueue_Sense+0x110>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	68f8      	ldr	r0, [r7, #12]
 8007a42:	1ac3      	subs	r3, r0, r3
 8007a44:	3301      	adds	r3, #1
 8007a46:	e001      	b.n	8007a4c <CircularQueue_Sense+0x114>
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	440b      	add	r3, r1
 8007a4e:	781b      	ldrb	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	021b      	lsls	r3, r3, #8
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	4413      	add	r3, r2
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	e001      	b.n	8007a60 <CircularQueue_Sense+0x128>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	891b      	ldrh	r3, [r3, #8]
 8007a60:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	7af9      	ldrb	r1, [r7, #11]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4419      	add	r1, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	4299      	cmp	r1, r3
 8007a72:	d306      	bcc.n	8007a82 <CircularQueue_Sense+0x14a>
 8007a74:	7af9      	ldrb	r1, [r7, #11]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4419      	add	r1, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	1acb      	subs	r3, r1, r3
 8007a80:	e002      	b.n	8007a88 <CircularQueue_Sense+0x150>
 8007a82:	7af9      	ldrb	r1, [r7, #11]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	440b      	add	r3, r1
 8007a88:	4413      	add	r3, r2
 8007a8a:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	8a7a      	ldrh	r2, [r7, #18]
 8007a96:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8007a98:	697b      	ldr	r3, [r7, #20]
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685a      	ldr	r2, [r3, #4]
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	041b      	lsls	r3, r3, #16
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	605a      	str	r2, [r3, #4]
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <LL_C1_IPCC_ClearFlag_CHx>:
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	609a      	str	r2, [r3, #8]
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <LL_C1_IPCC_SetFlag_CHx>:
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	041a      	lsls	r2, r3, #16
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	609a      	str	r2, [r3, #8]
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8007b04:	b480      	push	{r7}
 8007b06:	b083      	sub	sp, #12
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	4013      	ands	r3, r2
 8007b16:	683a      	ldr	r2, [r7, #0]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d101      	bne.n	8007b20 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e000      	b.n	8007b22 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	370c      	adds	r7, #12
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
 8007b36:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	69da      	ldr	r2, [r3, #28]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d101      	bne.n	8007b4a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8007b46:	2301      	movs	r3, #1
 8007b48:	e000      	b.n	8007b4c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b56:	4770      	bx	lr

08007b58 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007b5c:	2102      	movs	r1, #2
 8007b5e:	4819      	ldr	r0, [pc, #100]	; (8007bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8007b60:	f7ff ffe5 	bl	8007b2e <LL_C2_IPCC_IsActiveFlag_CHx>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d009      	beq.n	8007b7e <HW_IPCC_Rx_Handler+0x26>
 8007b6a:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	43db      	mvns	r3, r3
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8007b78:	f000 f884 	bl	8007c84 <HW_IPCC_SYS_EvtHandler>
 8007b7c:	e01f      	b.n	8007bbe <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8007b7e:	2101      	movs	r1, #1
 8007b80:	4810      	ldr	r0, [pc, #64]	; (8007bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8007b82:	f7ff ffd4 	bl	8007b2e <LL_C2_IPCC_IsActiveFlag_CHx>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HW_IPCC_Rx_Handler+0x46>
 8007b8c:	4b0d      	ldr	r3, [pc, #52]	; (8007bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d102      	bne.n	8007b9e <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8007b98:	f000 f850 	bl	8007c3c <HW_IPCC_BLE_EvtHandler>
 8007b9c:	e00f      	b.n	8007bbe <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8007b9e:	2108      	movs	r1, #8
 8007ba0:	4808      	ldr	r0, [pc, #32]	; (8007bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8007ba2:	f7ff ffc4 	bl	8007b2e <LL_C2_IPCC_IsActiveFlag_CHx>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d009      	beq.n	8007bc0 <HW_IPCC_Rx_Handler+0x68>
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <HW_IPCC_Rx_Handler+0x6c>)
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	43db      	mvns	r3, r3
 8007bb2:	f003 0308 	and.w	r3, r3, #8
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8007bba:	f000 f883 	bl	8007cc4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8007bbe:	bf00      	nop
 8007bc0:	bf00      	nop
}
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	58000c00 	.word	0x58000c00

08007bc8 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007bcc:	2102      	movs	r1, #2
 8007bce:	481a      	ldr	r0, [pc, #104]	; (8007c38 <HW_IPCC_Tx_Handler+0x70>)
 8007bd0:	f7ff ff98 	bl	8007b04 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d109      	bne.n	8007bee <HW_IPCC_Tx_Handler+0x26>
 8007bda:	4b17      	ldr	r3, [pc, #92]	; (8007c38 <HW_IPCC_Tx_Handler+0x70>)
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	43db      	mvns	r3, r3
 8007be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d002      	beq.n	8007bee <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8007be8:	f000 f840 	bl	8007c6c <HW_IPCC_SYS_CmdEvtHandler>
 8007bec:	e020      	b.n	8007c30 <HW_IPCC_Tx_Handler+0x68>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007bee:	2108      	movs	r1, #8
 8007bf0:	4811      	ldr	r0, [pc, #68]	; (8007c38 <HW_IPCC_Tx_Handler+0x70>)
 8007bf2:	f7ff ff87 	bl	8007b04 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d109      	bne.n	8007c10 <HW_IPCC_Tx_Handler+0x48>
 8007bfc:	4b0e      	ldr	r3, [pc, #56]	; (8007c38 <HW_IPCC_Tx_Handler+0x70>)
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	43db      	mvns	r3, r3
 8007c02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d002      	beq.n	8007c10 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_MM_FreeBufHandler();
 8007c0a:	f000 f847 	bl	8007c9c <HW_IPCC_MM_FreeBufHandler>
 8007c0e:	e00f      	b.n	8007c30 <HW_IPCC_Tx_Handler+0x68>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007c10:	2120      	movs	r1, #32
 8007c12:	4809      	ldr	r0, [pc, #36]	; (8007c38 <HW_IPCC_Tx_Handler+0x70>)
 8007c14:	f7ff ff76 	bl	8007b04 <LL_C1_IPCC_IsActiveFlag_CHx>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d109      	bne.n	8007c32 <HW_IPCC_Tx_Handler+0x6a>
 8007c1e:	4b06      	ldr	r3, [pc, #24]	; (8007c38 <HW_IPCC_Tx_Handler+0x70>)
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	43db      	mvns	r3, r3
 8007c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8007c2c:	f000 f812 	bl	8007c54 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
}
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	58000c00 	.word	0x58000c00

08007c3c <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8007c40:	f7ff f94c 	bl	8006edc <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8007c44:	2101      	movs	r1, #1
 8007c46:	4802      	ldr	r0, [pc, #8]	; (8007c50 <HW_IPCC_BLE_EvtHandler+0x14>)
 8007c48:	f7ff ff3f 	bl	8007aca <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007c4c:	bf00      	nop
}
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	58000c00 	.word	0x58000c00

08007c54 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007c58:	2120      	movs	r1, #32
 8007c5a:	4803      	ldr	r0, [pc, #12]	; (8007c68 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007c5c:	f7ff ff23 	bl	8007aa6 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007c60:	f7ff f96c 	bl	8006f3c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8007c64:	bf00      	nop
}
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	58000c00 	.word	0x58000c00

08007c6c <HW_IPCC_SYS_CmdEvtHandler>:

  return;
}

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007c70:	2102      	movs	r1, #2
 8007c72:	4803      	ldr	r0, [pc, #12]	; (8007c80 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8007c74:	f7ff ff17 	bl	8007aa6 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007c78:	f7ff f96a 	bl	8006f50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007c7c:	bf00      	nop
}
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	58000c00 	.word	0x58000c00

08007c84 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007c88:	f7ff f978 	bl	8006f7c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007c8c:	2102      	movs	r1, #2
 8007c8e:	4802      	ldr	r0, [pc, #8]	; (8007c98 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007c90:	f7ff ff1b 	bl	8007aca <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007c94:	bf00      	nop
}
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	58000c00 	.word	0x58000c00

08007c9c <HW_IPCC_MM_FreeBufHandler>:

  return;
}

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007ca0:	2108      	movs	r1, #8
 8007ca2:	4806      	ldr	r0, [pc, #24]	; (8007cbc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007ca4:	f7ff feff 	bl	8007aa6 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007cae:	2108      	movs	r1, #8
 8007cb0:	4802      	ldr	r0, [pc, #8]	; (8007cbc <HW_IPCC_MM_FreeBufHandler+0x20>)
 8007cb2:	f7ff ff18 	bl	8007ae6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8007cb6:	bf00      	nop
}
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	58000c00 	.word	0x58000c00
 8007cc0:	20000380 	.word	0x20000380

08007cc4 <HW_IPCC_TRACES_EvtHandler>:

  return;
}

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8007cc8:	f7ff f97a 	bl	8006fc0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8007ccc:	2108      	movs	r1, #8
 8007cce:	4802      	ldr	r0, [pc, #8]	; (8007cd8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007cd0:	f7ff fefb 	bl	8007aca <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007cd4:	bf00      	nop
}
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	58000c00 	.word	0x58000c00

08007cdc <__errno>:
 8007cdc:	4b01      	ldr	r3, [pc, #4]	; (8007ce4 <__errno+0x8>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	4770      	bx	lr
 8007ce2:	bf00      	nop
 8007ce4:	20000034 	.word	0x20000034

08007ce8 <exit>:
 8007ce8:	b508      	push	{r3, lr}
 8007cea:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <exit+0x20>)
 8007cec:	4604      	mov	r4, r0
 8007cee:	b113      	cbz	r3, 8007cf6 <exit+0xe>
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	f3af 8000 	nop.w
 8007cf6:	4b05      	ldr	r3, [pc, #20]	; (8007d0c <exit+0x24>)
 8007cf8:	6818      	ldr	r0, [r3, #0]
 8007cfa:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007cfc:	b103      	cbz	r3, 8007d00 <exit+0x18>
 8007cfe:	4798      	blx	r3
 8007d00:	4620      	mov	r0, r4
 8007d02:	f7fb f903 	bl	8002f0c <_exit>
 8007d06:	bf00      	nop
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	0800aee4 	.word	0x0800aee4

08007d10 <_fclose_r>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	4605      	mov	r5, r0
 8007d14:	460c      	mov	r4, r1
 8007d16:	b911      	cbnz	r1, 8007d1e <_fclose_r+0xe>
 8007d18:	2600      	movs	r6, #0
 8007d1a:	4630      	mov	r0, r6
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
 8007d1e:	b118      	cbz	r0, 8007d28 <_fclose_r+0x18>
 8007d20:	6983      	ldr	r3, [r0, #24]
 8007d22:	b90b      	cbnz	r3, 8007d28 <_fclose_r+0x18>
 8007d24:	f000 f994 	bl	8008050 <__sinit>
 8007d28:	4b2c      	ldr	r3, [pc, #176]	; (8007ddc <_fclose_r+0xcc>)
 8007d2a:	429c      	cmp	r4, r3
 8007d2c:	d114      	bne.n	8007d58 <_fclose_r+0x48>
 8007d2e:	686c      	ldr	r4, [r5, #4]
 8007d30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d32:	07d8      	lsls	r0, r3, #31
 8007d34:	d405      	bmi.n	8007d42 <_fclose_r+0x32>
 8007d36:	89a3      	ldrh	r3, [r4, #12]
 8007d38:	0599      	lsls	r1, r3, #22
 8007d3a:	d402      	bmi.n	8007d42 <_fclose_r+0x32>
 8007d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d3e:	f000 fc05 	bl	800854c <__retarget_lock_acquire_recursive>
 8007d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d46:	b98b      	cbnz	r3, 8007d6c <_fclose_r+0x5c>
 8007d48:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8007d4a:	f016 0601 	ands.w	r6, r6, #1
 8007d4e:	d1e3      	bne.n	8007d18 <_fclose_r+0x8>
 8007d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d52:	f000 fbfc 	bl	800854e <__retarget_lock_release_recursive>
 8007d56:	e7e0      	b.n	8007d1a <_fclose_r+0xa>
 8007d58:	4b21      	ldr	r3, [pc, #132]	; (8007de0 <_fclose_r+0xd0>)
 8007d5a:	429c      	cmp	r4, r3
 8007d5c:	d101      	bne.n	8007d62 <_fclose_r+0x52>
 8007d5e:	68ac      	ldr	r4, [r5, #8]
 8007d60:	e7e6      	b.n	8007d30 <_fclose_r+0x20>
 8007d62:	4b20      	ldr	r3, [pc, #128]	; (8007de4 <_fclose_r+0xd4>)
 8007d64:	429c      	cmp	r4, r3
 8007d66:	bf08      	it	eq
 8007d68:	68ec      	ldreq	r4, [r5, #12]
 8007d6a:	e7e1      	b.n	8007d30 <_fclose_r+0x20>
 8007d6c:	4621      	mov	r1, r4
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f000 f842 	bl	8007df8 <__sflush_r>
 8007d74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d76:	4606      	mov	r6, r0
 8007d78:	b133      	cbz	r3, 8007d88 <_fclose_r+0x78>
 8007d7a:	6a21      	ldr	r1, [r4, #32]
 8007d7c:	4628      	mov	r0, r5
 8007d7e:	4798      	blx	r3
 8007d80:	2800      	cmp	r0, #0
 8007d82:	bfb8      	it	lt
 8007d84:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 8007d88:	89a3      	ldrh	r3, [r4, #12]
 8007d8a:	061a      	lsls	r2, r3, #24
 8007d8c:	d503      	bpl.n	8007d96 <_fclose_r+0x86>
 8007d8e:	6921      	ldr	r1, [r4, #16]
 8007d90:	4628      	mov	r0, r5
 8007d92:	f000 fc61 	bl	8008658 <_free_r>
 8007d96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d98:	b141      	cbz	r1, 8007dac <_fclose_r+0x9c>
 8007d9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d9e:	4299      	cmp	r1, r3
 8007da0:	d002      	beq.n	8007da8 <_fclose_r+0x98>
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 fc58 	bl	8008658 <_free_r>
 8007da8:	2300      	movs	r3, #0
 8007daa:	6363      	str	r3, [r4, #52]	; 0x34
 8007dac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007dae:	b121      	cbz	r1, 8007dba <_fclose_r+0xaa>
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 fc51 	bl	8008658 <_free_r>
 8007db6:	2300      	movs	r3, #0
 8007db8:	64a3      	str	r3, [r4, #72]	; 0x48
 8007dba:	f000 f931 	bl	8008020 <__sfp_lock_acquire>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	81a3      	strh	r3, [r4, #12]
 8007dc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dc4:	07db      	lsls	r3, r3, #31
 8007dc6:	d402      	bmi.n	8007dce <_fclose_r+0xbe>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dca:	f000 fbc0 	bl	800854e <__retarget_lock_release_recursive>
 8007dce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dd0:	f000 fbbb 	bl	800854a <__retarget_lock_close_recursive>
 8007dd4:	f000 f92a 	bl	800802c <__sfp_lock_release>
 8007dd8:	e79f      	b.n	8007d1a <_fclose_r+0xa>
 8007dda:	bf00      	nop
 8007ddc:	0800aea4 	.word	0x0800aea4
 8007de0:	0800aec4 	.word	0x0800aec4
 8007de4:	0800ae84 	.word	0x0800ae84

08007de8 <fclose>:
 8007de8:	4b02      	ldr	r3, [pc, #8]	; (8007df4 <fclose+0xc>)
 8007dea:	4601      	mov	r1, r0
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	f7ff bf8f 	b.w	8007d10 <_fclose_r>
 8007df2:	bf00      	nop
 8007df4:	20000034 	.word	0x20000034

08007df8 <__sflush_r>:
 8007df8:	898a      	ldrh	r2, [r1, #12]
 8007dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dfe:	4605      	mov	r5, r0
 8007e00:	0710      	lsls	r0, r2, #28
 8007e02:	460c      	mov	r4, r1
 8007e04:	d458      	bmi.n	8007eb8 <__sflush_r+0xc0>
 8007e06:	684b      	ldr	r3, [r1, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc05      	bgt.n	8007e18 <__sflush_r+0x20>
 8007e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dc02      	bgt.n	8007e18 <__sflush_r+0x20>
 8007e12:	2000      	movs	r0, #0
 8007e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d0f9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e24:	682f      	ldr	r7, [r5, #0]
 8007e26:	602b      	str	r3, [r5, #0]
 8007e28:	d032      	beq.n	8007e90 <__sflush_r+0x98>
 8007e2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e2c:	89a3      	ldrh	r3, [r4, #12]
 8007e2e:	075a      	lsls	r2, r3, #29
 8007e30:	d505      	bpl.n	8007e3e <__sflush_r+0x46>
 8007e32:	6863      	ldr	r3, [r4, #4]
 8007e34:	1ac0      	subs	r0, r0, r3
 8007e36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e38:	b10b      	cbz	r3, 8007e3e <__sflush_r+0x46>
 8007e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e3c:	1ac0      	subs	r0, r0, r3
 8007e3e:	2300      	movs	r3, #0
 8007e40:	4602      	mov	r2, r0
 8007e42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b0      	blx	r6
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	d106      	bne.n	8007e5e <__sflush_r+0x66>
 8007e50:	6829      	ldr	r1, [r5, #0]
 8007e52:	291d      	cmp	r1, #29
 8007e54:	d82c      	bhi.n	8007eb0 <__sflush_r+0xb8>
 8007e56:	4a2a      	ldr	r2, [pc, #168]	; (8007f00 <__sflush_r+0x108>)
 8007e58:	40ca      	lsrs	r2, r1
 8007e5a:	07d6      	lsls	r6, r2, #31
 8007e5c:	d528      	bpl.n	8007eb0 <__sflush_r+0xb8>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6062      	str	r2, [r4, #4]
 8007e62:	04d9      	lsls	r1, r3, #19
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	d504      	bpl.n	8007e74 <__sflush_r+0x7c>
 8007e6a:	1c42      	adds	r2, r0, #1
 8007e6c:	d101      	bne.n	8007e72 <__sflush_r+0x7a>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	b903      	cbnz	r3, 8007e74 <__sflush_r+0x7c>
 8007e72:	6560      	str	r0, [r4, #84]	; 0x54
 8007e74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e76:	602f      	str	r7, [r5, #0]
 8007e78:	2900      	cmp	r1, #0
 8007e7a:	d0ca      	beq.n	8007e12 <__sflush_r+0x1a>
 8007e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e80:	4299      	cmp	r1, r3
 8007e82:	d002      	beq.n	8007e8a <__sflush_r+0x92>
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 fbe7 	bl	8008658 <_free_r>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e8e:	e7c1      	b.n	8007e14 <__sflush_r+0x1c>
 8007e90:	6a21      	ldr	r1, [r4, #32]
 8007e92:	2301      	movs	r3, #1
 8007e94:	4628      	mov	r0, r5
 8007e96:	47b0      	blx	r6
 8007e98:	1c41      	adds	r1, r0, #1
 8007e9a:	d1c7      	bne.n	8007e2c <__sflush_r+0x34>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0c4      	beq.n	8007e2c <__sflush_r+0x34>
 8007ea2:	2b1d      	cmp	r3, #29
 8007ea4:	d001      	beq.n	8007eaa <__sflush_r+0xb2>
 8007ea6:	2b16      	cmp	r3, #22
 8007ea8:	d101      	bne.n	8007eae <__sflush_r+0xb6>
 8007eaa:	602f      	str	r7, [r5, #0]
 8007eac:	e7b1      	b.n	8007e12 <__sflush_r+0x1a>
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	e7ad      	b.n	8007e14 <__sflush_r+0x1c>
 8007eb8:	690f      	ldr	r7, [r1, #16]
 8007eba:	2f00      	cmp	r7, #0
 8007ebc:	d0a9      	beq.n	8007e12 <__sflush_r+0x1a>
 8007ebe:	0793      	lsls	r3, r2, #30
 8007ec0:	680e      	ldr	r6, [r1, #0]
 8007ec2:	bf08      	it	eq
 8007ec4:	694b      	ldreq	r3, [r1, #20]
 8007ec6:	600f      	str	r7, [r1, #0]
 8007ec8:	bf18      	it	ne
 8007eca:	2300      	movne	r3, #0
 8007ecc:	eba6 0807 	sub.w	r8, r6, r7
 8007ed0:	608b      	str	r3, [r1, #8]
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	dd9c      	ble.n	8007e12 <__sflush_r+0x1a>
 8007ed8:	6a21      	ldr	r1, [r4, #32]
 8007eda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007edc:	4643      	mov	r3, r8
 8007ede:	463a      	mov	r2, r7
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	47b0      	blx	r6
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	dc06      	bgt.n	8007ef6 <__sflush_r+0xfe>
 8007ee8:	89a3      	ldrh	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ef4:	e78e      	b.n	8007e14 <__sflush_r+0x1c>
 8007ef6:	4407      	add	r7, r0
 8007ef8:	eba8 0800 	sub.w	r8, r8, r0
 8007efc:	e7e9      	b.n	8007ed2 <__sflush_r+0xda>
 8007efe:	bf00      	nop
 8007f00:	20400001 	.word	0x20400001

08007f04 <_fflush_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	b913      	cbnz	r3, 8007f14 <_fflush_r+0x10>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	4628      	mov	r0, r5
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	b118      	cbz	r0, 8007f1e <_fflush_r+0x1a>
 8007f16:	6983      	ldr	r3, [r0, #24]
 8007f18:	b90b      	cbnz	r3, 8007f1e <_fflush_r+0x1a>
 8007f1a:	f000 f899 	bl	8008050 <__sinit>
 8007f1e:	4b14      	ldr	r3, [pc, #80]	; (8007f70 <_fflush_r+0x6c>)
 8007f20:	429c      	cmp	r4, r3
 8007f22:	d11b      	bne.n	8007f5c <_fflush_r+0x58>
 8007f24:	686c      	ldr	r4, [r5, #4]
 8007f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d0ef      	beq.n	8007f0e <_fflush_r+0xa>
 8007f2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f30:	07d0      	lsls	r0, r2, #31
 8007f32:	d404      	bmi.n	8007f3e <_fflush_r+0x3a>
 8007f34:	0599      	lsls	r1, r3, #22
 8007f36:	d402      	bmi.n	8007f3e <_fflush_r+0x3a>
 8007f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f3a:	f000 fb07 	bl	800854c <__retarget_lock_acquire_recursive>
 8007f3e:	4628      	mov	r0, r5
 8007f40:	4621      	mov	r1, r4
 8007f42:	f7ff ff59 	bl	8007df8 <__sflush_r>
 8007f46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f48:	07da      	lsls	r2, r3, #31
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	d4e0      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f4e:	89a3      	ldrh	r3, [r4, #12]
 8007f50:	059b      	lsls	r3, r3, #22
 8007f52:	d4dd      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f56:	f000 fafa 	bl	800854e <__retarget_lock_release_recursive>
 8007f5a:	e7d9      	b.n	8007f10 <_fflush_r+0xc>
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <_fflush_r+0x70>)
 8007f5e:	429c      	cmp	r4, r3
 8007f60:	d101      	bne.n	8007f66 <_fflush_r+0x62>
 8007f62:	68ac      	ldr	r4, [r5, #8]
 8007f64:	e7df      	b.n	8007f26 <_fflush_r+0x22>
 8007f66:	4b04      	ldr	r3, [pc, #16]	; (8007f78 <_fflush_r+0x74>)
 8007f68:	429c      	cmp	r4, r3
 8007f6a:	bf08      	it	eq
 8007f6c:	68ec      	ldreq	r4, [r5, #12]
 8007f6e:	e7da      	b.n	8007f26 <_fflush_r+0x22>
 8007f70:	0800aea4 	.word	0x0800aea4
 8007f74:	0800aec4 	.word	0x0800aec4
 8007f78:	0800ae84 	.word	0x0800ae84

08007f7c <fflush>:
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	b920      	cbnz	r0, 8007f8a <fflush+0xe>
 8007f80:	4b04      	ldr	r3, [pc, #16]	; (8007f94 <fflush+0x18>)
 8007f82:	4905      	ldr	r1, [pc, #20]	; (8007f98 <fflush+0x1c>)
 8007f84:	6818      	ldr	r0, [r3, #0]
 8007f86:	f000 ba9c 	b.w	80084c2 <_fwalk_reent>
 8007f8a:	4b04      	ldr	r3, [pc, #16]	; (8007f9c <fflush+0x20>)
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	f7ff bfb9 	b.w	8007f04 <_fflush_r>
 8007f92:	bf00      	nop
 8007f94:	0800aee4 	.word	0x0800aee4
 8007f98:	08007f05 	.word	0x08007f05
 8007f9c:	20000034 	.word	0x20000034

08007fa0 <std>:
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	b510      	push	{r4, lr}
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	e9c0 3300 	strd	r3, r3, [r0]
 8007faa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fae:	6083      	str	r3, [r0, #8]
 8007fb0:	8181      	strh	r1, [r0, #12]
 8007fb2:	6643      	str	r3, [r0, #100]	; 0x64
 8007fb4:	81c2      	strh	r2, [r0, #14]
 8007fb6:	6183      	str	r3, [r0, #24]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	2208      	movs	r2, #8
 8007fbc:	305c      	adds	r0, #92	; 0x5c
 8007fbe:	f000 fb43 	bl	8008648 <memset>
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <std+0x38>)
 8007fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <std+0x3c>)
 8007fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fca:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <std+0x40>)
 8007fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fce:	4b05      	ldr	r3, [pc, #20]	; (8007fe4 <std+0x44>)
 8007fd0:	6224      	str	r4, [r4, #32]
 8007fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8007fd4:	bd10      	pop	{r4, pc}
 8007fd6:	bf00      	nop
 8007fd8:	08008be5 	.word	0x08008be5
 8007fdc:	08008c07 	.word	0x08008c07
 8007fe0:	08008c3f 	.word	0x08008c3f
 8007fe4:	08008c63 	.word	0x08008c63

08007fe8 <_cleanup_r>:
 8007fe8:	4901      	ldr	r1, [pc, #4]	; (8007ff0 <_cleanup_r+0x8>)
 8007fea:	f000 ba6a 	b.w	80084c2 <_fwalk_reent>
 8007fee:	bf00      	nop
 8007ff0:	08007f05 	.word	0x08007f05

08007ff4 <__sfmoreglue>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	2268      	movs	r2, #104	; 0x68
 8007ff8:	1e4d      	subs	r5, r1, #1
 8007ffa:	4355      	muls	r5, r2
 8007ffc:	460e      	mov	r6, r1
 8007ffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008002:	f000 fb95 	bl	8008730 <_malloc_r>
 8008006:	4604      	mov	r4, r0
 8008008:	b140      	cbz	r0, 800801c <__sfmoreglue+0x28>
 800800a:	2100      	movs	r1, #0
 800800c:	e9c0 1600 	strd	r1, r6, [r0]
 8008010:	300c      	adds	r0, #12
 8008012:	60a0      	str	r0, [r4, #8]
 8008014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008018:	f000 fb16 	bl	8008648 <memset>
 800801c:	4620      	mov	r0, r4
 800801e:	bd70      	pop	{r4, r5, r6, pc}

08008020 <__sfp_lock_acquire>:
 8008020:	4801      	ldr	r0, [pc, #4]	; (8008028 <__sfp_lock_acquire+0x8>)
 8008022:	f000 ba93 	b.w	800854c <__retarget_lock_acquire_recursive>
 8008026:	bf00      	nop
 8008028:	20000385 	.word	0x20000385

0800802c <__sfp_lock_release>:
 800802c:	4801      	ldr	r0, [pc, #4]	; (8008034 <__sfp_lock_release+0x8>)
 800802e:	f000 ba8e 	b.w	800854e <__retarget_lock_release_recursive>
 8008032:	bf00      	nop
 8008034:	20000385 	.word	0x20000385

08008038 <__sinit_lock_acquire>:
 8008038:	4801      	ldr	r0, [pc, #4]	; (8008040 <__sinit_lock_acquire+0x8>)
 800803a:	f000 ba87 	b.w	800854c <__retarget_lock_acquire_recursive>
 800803e:	bf00      	nop
 8008040:	20000386 	.word	0x20000386

08008044 <__sinit_lock_release>:
 8008044:	4801      	ldr	r0, [pc, #4]	; (800804c <__sinit_lock_release+0x8>)
 8008046:	f000 ba82 	b.w	800854e <__retarget_lock_release_recursive>
 800804a:	bf00      	nop
 800804c:	20000386 	.word	0x20000386

08008050 <__sinit>:
 8008050:	b510      	push	{r4, lr}
 8008052:	4604      	mov	r4, r0
 8008054:	f7ff fff0 	bl	8008038 <__sinit_lock_acquire>
 8008058:	69a3      	ldr	r3, [r4, #24]
 800805a:	b11b      	cbz	r3, 8008064 <__sinit+0x14>
 800805c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008060:	f7ff bff0 	b.w	8008044 <__sinit_lock_release>
 8008064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008068:	6523      	str	r3, [r4, #80]	; 0x50
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <__sinit+0x68>)
 800806c:	4a13      	ldr	r2, [pc, #76]	; (80080bc <__sinit+0x6c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	62a2      	str	r2, [r4, #40]	; 0x28
 8008072:	42a3      	cmp	r3, r4
 8008074:	bf04      	itt	eq
 8008076:	2301      	moveq	r3, #1
 8008078:	61a3      	streq	r3, [r4, #24]
 800807a:	4620      	mov	r0, r4
 800807c:	f000 f820 	bl	80080c0 <__sfp>
 8008080:	6060      	str	r0, [r4, #4]
 8008082:	4620      	mov	r0, r4
 8008084:	f000 f81c 	bl	80080c0 <__sfp>
 8008088:	60a0      	str	r0, [r4, #8]
 800808a:	4620      	mov	r0, r4
 800808c:	f000 f818 	bl	80080c0 <__sfp>
 8008090:	2200      	movs	r2, #0
 8008092:	60e0      	str	r0, [r4, #12]
 8008094:	2104      	movs	r1, #4
 8008096:	6860      	ldr	r0, [r4, #4]
 8008098:	f7ff ff82 	bl	8007fa0 <std>
 800809c:	68a0      	ldr	r0, [r4, #8]
 800809e:	2201      	movs	r2, #1
 80080a0:	2109      	movs	r1, #9
 80080a2:	f7ff ff7d 	bl	8007fa0 <std>
 80080a6:	68e0      	ldr	r0, [r4, #12]
 80080a8:	2202      	movs	r2, #2
 80080aa:	2112      	movs	r1, #18
 80080ac:	f7ff ff78 	bl	8007fa0 <std>
 80080b0:	2301      	movs	r3, #1
 80080b2:	61a3      	str	r3, [r4, #24]
 80080b4:	e7d2      	b.n	800805c <__sinit+0xc>
 80080b6:	bf00      	nop
 80080b8:	0800aee4 	.word	0x0800aee4
 80080bc:	08007fe9 	.word	0x08007fe9

080080c0 <__sfp>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	4607      	mov	r7, r0
 80080c4:	f7ff ffac 	bl	8008020 <__sfp_lock_acquire>
 80080c8:	4b1e      	ldr	r3, [pc, #120]	; (8008144 <__sfp+0x84>)
 80080ca:	681e      	ldr	r6, [r3, #0]
 80080cc:	69b3      	ldr	r3, [r6, #24]
 80080ce:	b913      	cbnz	r3, 80080d6 <__sfp+0x16>
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7ff ffbd 	bl	8008050 <__sinit>
 80080d6:	3648      	adds	r6, #72	; 0x48
 80080d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080dc:	3b01      	subs	r3, #1
 80080de:	d503      	bpl.n	80080e8 <__sfp+0x28>
 80080e0:	6833      	ldr	r3, [r6, #0]
 80080e2:	b30b      	cbz	r3, 8008128 <__sfp+0x68>
 80080e4:	6836      	ldr	r6, [r6, #0]
 80080e6:	e7f7      	b.n	80080d8 <__sfp+0x18>
 80080e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080ec:	b9d5      	cbnz	r5, 8008124 <__sfp+0x64>
 80080ee:	4b16      	ldr	r3, [pc, #88]	; (8008148 <__sfp+0x88>)
 80080f0:	60e3      	str	r3, [r4, #12]
 80080f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080f6:	6665      	str	r5, [r4, #100]	; 0x64
 80080f8:	f000 fa26 	bl	8008548 <__retarget_lock_init_recursive>
 80080fc:	f7ff ff96 	bl	800802c <__sfp_lock_release>
 8008100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008108:	6025      	str	r5, [r4, #0]
 800810a:	61a5      	str	r5, [r4, #24]
 800810c:	2208      	movs	r2, #8
 800810e:	4629      	mov	r1, r5
 8008110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008114:	f000 fa98 	bl	8008648 <memset>
 8008118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800811c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008120:	4620      	mov	r0, r4
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008124:	3468      	adds	r4, #104	; 0x68
 8008126:	e7d9      	b.n	80080dc <__sfp+0x1c>
 8008128:	2104      	movs	r1, #4
 800812a:	4638      	mov	r0, r7
 800812c:	f7ff ff62 	bl	8007ff4 <__sfmoreglue>
 8008130:	4604      	mov	r4, r0
 8008132:	6030      	str	r0, [r6, #0]
 8008134:	2800      	cmp	r0, #0
 8008136:	d1d5      	bne.n	80080e4 <__sfp+0x24>
 8008138:	f7ff ff78 	bl	800802c <__sfp_lock_release>
 800813c:	230c      	movs	r3, #12
 800813e:	603b      	str	r3, [r7, #0]
 8008140:	e7ee      	b.n	8008120 <__sfp+0x60>
 8008142:	bf00      	nop
 8008144:	0800aee4 	.word	0x0800aee4
 8008148:	ffff0001 	.word	0xffff0001

0800814c <_fopen_r>:
 800814c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800814e:	460f      	mov	r7, r1
 8008150:	4611      	mov	r1, r2
 8008152:	aa01      	add	r2, sp, #4
 8008154:	4605      	mov	r5, r0
 8008156:	f001 f891 	bl	800927c <__sflags>
 800815a:	4606      	mov	r6, r0
 800815c:	b918      	cbnz	r0, 8008166 <_fopen_r+0x1a>
 800815e:	2400      	movs	r4, #0
 8008160:	4620      	mov	r0, r4
 8008162:	b003      	add	sp, #12
 8008164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008166:	4628      	mov	r0, r5
 8008168:	f7ff ffaa 	bl	80080c0 <__sfp>
 800816c:	4604      	mov	r4, r0
 800816e:	2800      	cmp	r0, #0
 8008170:	d0f5      	beq.n	800815e <_fopen_r+0x12>
 8008172:	4639      	mov	r1, r7
 8008174:	9a01      	ldr	r2, [sp, #4]
 8008176:	f44f 73db 	mov.w	r3, #438	; 0x1b6
 800817a:	4628      	mov	r0, r5
 800817c:	f000 fb4c 	bl	8008818 <_open_r>
 8008180:	1e07      	subs	r7, r0, #0
 8008182:	da09      	bge.n	8008198 <_fopen_r+0x4c>
 8008184:	2500      	movs	r5, #0
 8008186:	f7ff ff4b 	bl	8008020 <__sfp_lock_acquire>
 800818a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800818c:	81a5      	strh	r5, [r4, #12]
 800818e:	f000 f9dc 	bl	800854a <__retarget_lock_close_recursive>
 8008192:	f7ff ff4b 	bl	800802c <__sfp_lock_release>
 8008196:	e7e2      	b.n	800815e <_fopen_r+0x12>
 8008198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800819a:	07db      	lsls	r3, r3, #31
 800819c:	d405      	bmi.n	80081aa <_fopen_r+0x5e>
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	0598      	lsls	r0, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_fopen_r+0x5e>
 80081a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a6:	f000 f9d1 	bl	800854c <__retarget_lock_acquire_recursive>
 80081aa:	4b0e      	ldr	r3, [pc, #56]	; (80081e4 <_fopen_r+0x98>)
 80081ac:	6263      	str	r3, [r4, #36]	; 0x24
 80081ae:	4b0e      	ldr	r3, [pc, #56]	; (80081e8 <_fopen_r+0x9c>)
 80081b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80081b2:	4b0e      	ldr	r3, [pc, #56]	; (80081ec <_fopen_r+0xa0>)
 80081b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081b6:	05f1      	lsls	r1, r6, #23
 80081b8:	4b0d      	ldr	r3, [pc, #52]	; (80081f0 <_fopen_r+0xa4>)
 80081ba:	81e7      	strh	r7, [r4, #14]
 80081bc:	81a6      	strh	r6, [r4, #12]
 80081be:	6224      	str	r4, [r4, #32]
 80081c0:	6323      	str	r3, [r4, #48]	; 0x30
 80081c2:	d505      	bpl.n	80081d0 <_fopen_r+0x84>
 80081c4:	2302      	movs	r3, #2
 80081c6:	2200      	movs	r2, #0
 80081c8:	4621      	mov	r1, r4
 80081ca:	4628      	mov	r0, r5
 80081cc:	f000 f89c 	bl	8008308 <_fseek_r>
 80081d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d2:	07da      	lsls	r2, r3, #31
 80081d4:	d4c4      	bmi.n	8008160 <_fopen_r+0x14>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	059b      	lsls	r3, r3, #22
 80081da:	d4c1      	bmi.n	8008160 <_fopen_r+0x14>
 80081dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081de:	f000 f9b6 	bl	800854e <__retarget_lock_release_recursive>
 80081e2:	e7bd      	b.n	8008160 <_fopen_r+0x14>
 80081e4:	08008be5 	.word	0x08008be5
 80081e8:	08008c07 	.word	0x08008c07
 80081ec:	08008c3f 	.word	0x08008c3f
 80081f0:	08008c63 	.word	0x08008c63

080081f4 <fopen>:
 80081f4:	4b02      	ldr	r3, [pc, #8]	; (8008200 <fopen+0xc>)
 80081f6:	460a      	mov	r2, r1
 80081f8:	4601      	mov	r1, r0
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	f7ff bfa6 	b.w	800814c <_fopen_r>
 8008200:	20000034 	.word	0x20000034

08008204 <_fread_r>:
 8008204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008208:	461f      	mov	r7, r3
 800820a:	4613      	mov	r3, r2
 800820c:	437b      	muls	r3, r7
 800820e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008210:	4606      	mov	r6, r0
 8008212:	468a      	mov	sl, r1
 8008214:	4691      	mov	r9, r2
 8008216:	469b      	mov	fp, r3
 8008218:	d05f      	beq.n	80082da <_fread_r+0xd6>
 800821a:	b118      	cbz	r0, 8008224 <_fread_r+0x20>
 800821c:	6983      	ldr	r3, [r0, #24]
 800821e:	b90b      	cbnz	r3, 8008224 <_fread_r+0x20>
 8008220:	f7ff ff16 	bl	8008050 <__sinit>
 8008224:	4b2e      	ldr	r3, [pc, #184]	; (80082e0 <_fread_r+0xdc>)
 8008226:	429c      	cmp	r4, r3
 8008228:	d128      	bne.n	800827c <_fread_r+0x78>
 800822a:	6874      	ldr	r4, [r6, #4]
 800822c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800822e:	07db      	lsls	r3, r3, #31
 8008230:	d405      	bmi.n	800823e <_fread_r+0x3a>
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	059d      	lsls	r5, r3, #22
 8008236:	d402      	bmi.n	800823e <_fread_r+0x3a>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f000 f987 	bl	800854c <__retarget_lock_acquire_recursive>
 800823e:	6863      	ldr	r3, [r4, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	da01      	bge.n	8008248 <_fread_r+0x44>
 8008244:	2300      	movs	r3, #0
 8008246:	6063      	str	r3, [r4, #4]
 8008248:	46d8      	mov	r8, fp
 800824a:	e9d4 1500 	ldrd	r1, r5, [r4]
 800824e:	4545      	cmp	r5, r8
 8008250:	d31e      	bcc.n	8008290 <_fread_r+0x8c>
 8008252:	4642      	mov	r2, r8
 8008254:	4650      	mov	r0, sl
 8008256:	f000 f9e9 	bl	800862c <memcpy>
 800825a:	6862      	ldr	r2, [r4, #4]
 800825c:	6821      	ldr	r1, [r4, #0]
 800825e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008260:	eba2 0208 	sub.w	r2, r2, r8
 8008264:	6062      	str	r2, [r4, #4]
 8008266:	4441      	add	r1, r8
 8008268:	07da      	lsls	r2, r3, #31
 800826a:	6021      	str	r1, [r4, #0]
 800826c:	d42f      	bmi.n	80082ce <_fread_r+0xca>
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	059b      	lsls	r3, r3, #22
 8008272:	d42c      	bmi.n	80082ce <_fread_r+0xca>
 8008274:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008276:	f000 f96a 	bl	800854e <__retarget_lock_release_recursive>
 800827a:	e028      	b.n	80082ce <_fread_r+0xca>
 800827c:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <_fread_r+0xe0>)
 800827e:	429c      	cmp	r4, r3
 8008280:	d101      	bne.n	8008286 <_fread_r+0x82>
 8008282:	68b4      	ldr	r4, [r6, #8]
 8008284:	e7d2      	b.n	800822c <_fread_r+0x28>
 8008286:	4b18      	ldr	r3, [pc, #96]	; (80082e8 <_fread_r+0xe4>)
 8008288:	429c      	cmp	r4, r3
 800828a:	bf08      	it	eq
 800828c:	68f4      	ldreq	r4, [r6, #12]
 800828e:	e7cd      	b.n	800822c <_fread_r+0x28>
 8008290:	462a      	mov	r2, r5
 8008292:	4650      	mov	r0, sl
 8008294:	f000 f9ca 	bl	800862c <memcpy>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	442b      	add	r3, r5
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	4621      	mov	r1, r4
 80082a0:	eba8 0305 	sub.w	r3, r8, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	f000 fc02 	bl	8008ab0 <__srefill_r>
 80082ac:	44aa      	add	sl, r5
 80082ae:	9b01      	ldr	r3, [sp, #4]
 80082b0:	b188      	cbz	r0, 80082d6 <_fread_r+0xd2>
 80082b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082b4:	07d8      	lsls	r0, r3, #31
 80082b6:	d405      	bmi.n	80082c4 <_fread_r+0xc0>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	0599      	lsls	r1, r3, #22
 80082bc:	d402      	bmi.n	80082c4 <_fread_r+0xc0>
 80082be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082c0:	f000 f945 	bl	800854e <__retarget_lock_release_recursive>
 80082c4:	445d      	add	r5, fp
 80082c6:	eba5 0308 	sub.w	r3, r5, r8
 80082ca:	fbb3 f7f9 	udiv	r7, r3, r9
 80082ce:	4638      	mov	r0, r7
 80082d0:	b003      	add	sp, #12
 80082d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d6:	4698      	mov	r8, r3
 80082d8:	e7b7      	b.n	800824a <_fread_r+0x46>
 80082da:	461f      	mov	r7, r3
 80082dc:	e7f7      	b.n	80082ce <_fread_r+0xca>
 80082de:	bf00      	nop
 80082e0:	0800aea4 	.word	0x0800aea4
 80082e4:	0800aec4 	.word	0x0800aec4
 80082e8:	0800ae84 	.word	0x0800ae84

080082ec <fread>:
 80082ec:	b507      	push	{r0, r1, r2, lr}
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	4613      	mov	r3, r2
 80082f2:	460a      	mov	r2, r1
 80082f4:	4601      	mov	r1, r0
 80082f6:	4803      	ldr	r0, [pc, #12]	; (8008304 <fread+0x18>)
 80082f8:	6800      	ldr	r0, [r0, #0]
 80082fa:	f7ff ff83 	bl	8008204 <_fread_r>
 80082fe:	b003      	add	sp, #12
 8008300:	f85d fb04 	ldr.w	pc, [sp], #4
 8008304:	20000034 	.word	0x20000034

08008308 <_fseek_r>:
 8008308:	f000 b80a 	b.w	8008320 <_fseeko_r>

0800830c <fseek>:
 800830c:	4613      	mov	r3, r2
 800830e:	460a      	mov	r2, r1
 8008310:	4601      	mov	r1, r0
 8008312:	4802      	ldr	r0, [pc, #8]	; (800831c <fseek+0x10>)
 8008314:	6800      	ldr	r0, [r0, #0]
 8008316:	f000 b803 	b.w	8008320 <_fseeko_r>
 800831a:	bf00      	nop
 800831c:	20000034 	.word	0x20000034

08008320 <_fseeko_r>:
 8008320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008324:	460c      	mov	r4, r1
 8008326:	4617      	mov	r7, r2
 8008328:	461d      	mov	r5, r3
 800832a:	4606      	mov	r6, r0
 800832c:	b118      	cbz	r0, 8008336 <_fseeko_r+0x16>
 800832e:	6983      	ldr	r3, [r0, #24]
 8008330:	b90b      	cbnz	r3, 8008336 <_fseeko_r+0x16>
 8008332:	f7ff fe8d 	bl	8008050 <__sinit>
 8008336:	4b51      	ldr	r3, [pc, #324]	; (800847c <_fseeko_r+0x15c>)
 8008338:	429c      	cmp	r4, r3
 800833a:	d122      	bne.n	8008382 <_fseeko_r+0x62>
 800833c:	6874      	ldr	r4, [r6, #4]
 800833e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008340:	07d9      	lsls	r1, r3, #31
 8008342:	d405      	bmi.n	8008350 <_fseeko_r+0x30>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	059a      	lsls	r2, r3, #22
 8008348:	d402      	bmi.n	8008350 <_fseeko_r+0x30>
 800834a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800834c:	f000 f8fe 	bl	800854c <__retarget_lock_acquire_recursive>
 8008350:	89a3      	ldrh	r3, [r4, #12]
 8008352:	f403 7384 	and.w	r3, r3, #264	; 0x108
 8008356:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 800835a:	d103      	bne.n	8008364 <_fseeko_r+0x44>
 800835c:	4621      	mov	r1, r4
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff fdd0 	bl	8007f04 <_fflush_r>
 8008364:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8008368:	f1b8 0f00 	cmp.w	r8, #0
 800836c:	d113      	bne.n	8008396 <_fseeko_r+0x76>
 800836e:	231d      	movs	r3, #29
 8008370:	6033      	str	r3, [r6, #0]
 8008372:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008374:	07d9      	lsls	r1, r3, #31
 8008376:	d578      	bpl.n	800846a <_fseeko_r+0x14a>
 8008378:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800837c:	4628      	mov	r0, r5
 800837e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008382:	4b3f      	ldr	r3, [pc, #252]	; (8008480 <_fseeko_r+0x160>)
 8008384:	429c      	cmp	r4, r3
 8008386:	d101      	bne.n	800838c <_fseeko_r+0x6c>
 8008388:	68b4      	ldr	r4, [r6, #8]
 800838a:	e7d8      	b.n	800833e <_fseeko_r+0x1e>
 800838c:	4b3d      	ldr	r3, [pc, #244]	; (8008484 <_fseeko_r+0x164>)
 800838e:	429c      	cmp	r4, r3
 8008390:	bf08      	it	eq
 8008392:	68f4      	ldreq	r4, [r6, #12]
 8008394:	e7d3      	b.n	800833e <_fseeko_r+0x1e>
 8008396:	2d01      	cmp	r5, #1
 8008398:	d036      	beq.n	8008408 <_fseeko_r+0xe8>
 800839a:	f035 0302 	bics.w	r3, r5, #2
 800839e:	d162      	bne.n	8008466 <_fseeko_r+0x146>
 80083a0:	6923      	ldr	r3, [r4, #16]
 80083a2:	b91b      	cbnz	r3, 80083ac <_fseeko_r+0x8c>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4630      	mov	r0, r6
 80083a8:	f000 f8f8 	bl	800859c <__smakebuf_r>
 80083ac:	4621      	mov	r1, r4
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7ff fda8 	bl	8007f04 <_fflush_r>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	d1dc      	bne.n	8008372 <_fseeko_r+0x52>
 80083b8:	6a21      	ldr	r1, [r4, #32]
 80083ba:	462b      	mov	r3, r5
 80083bc:	463a      	mov	r2, r7
 80083be:	4630      	mov	r0, r6
 80083c0:	47c0      	blx	r8
 80083c2:	3001      	adds	r0, #1
 80083c4:	d0d5      	beq.n	8008372 <_fseeko_r+0x52>
 80083c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083c8:	b141      	cbz	r1, 80083dc <_fseeko_r+0xbc>
 80083ca:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083ce:	4299      	cmp	r1, r3
 80083d0:	d002      	beq.n	80083d8 <_fseeko_r+0xb8>
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 f940 	bl	8008658 <_free_r>
 80083d8:	2300      	movs	r3, #0
 80083da:	6363      	str	r3, [r4, #52]	; 0x34
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	6023      	str	r3, [r4, #0]
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	2600      	movs	r6, #0
 80083e4:	f423 6302 	bic.w	r3, r3, #2080	; 0x820
 80083e8:	6066      	str	r6, [r4, #4]
 80083ea:	81a3      	strh	r3, [r4, #12]
 80083ec:	2208      	movs	r2, #8
 80083ee:	4631      	mov	r1, r6
 80083f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083f4:	f000 f928 	bl	8008648 <memset>
 80083f8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80083fa:	f015 0501 	ands.w	r5, r5, #1
 80083fe:	d13b      	bne.n	8008478 <_fseeko_r+0x158>
 8008400:	89a3      	ldrh	r3, [r4, #12]
 8008402:	059b      	lsls	r3, r3, #22
 8008404:	d4ba      	bmi.n	800837c <_fseeko_r+0x5c>
 8008406:	e021      	b.n	800844c <_fseeko_r+0x12c>
 8008408:	4621      	mov	r1, r4
 800840a:	4630      	mov	r0, r6
 800840c:	f7ff fd7a 	bl	8007f04 <_fflush_r>
 8008410:	89a2      	ldrh	r2, [r4, #12]
 8008412:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008416:	d00c      	beq.n	8008432 <_fseeko_r+0x112>
 8008418:	6d65      	ldr	r5, [r4, #84]	; 0x54
 800841a:	89a3      	ldrh	r3, [r4, #12]
 800841c:	075a      	lsls	r2, r3, #29
 800841e:	d519      	bpl.n	8008454 <_fseeko_r+0x134>
 8008420:	6863      	ldr	r3, [r4, #4]
 8008422:	1aed      	subs	r5, r5, r3
 8008424:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008426:	b10b      	cbz	r3, 800842c <_fseeko_r+0x10c>
 8008428:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800842a:	1aed      	subs	r5, r5, r3
 800842c:	442f      	add	r7, r5
 800842e:	2500      	movs	r5, #0
 8008430:	e7b6      	b.n	80083a0 <_fseeko_r+0x80>
 8008432:	462b      	mov	r3, r5
 8008434:	6a21      	ldr	r1, [r4, #32]
 8008436:	4630      	mov	r0, r6
 8008438:	47c0      	blx	r8
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	4605      	mov	r5, r0
 800843e:	d1ec      	bne.n	800841a <_fseeko_r+0xfa>
 8008440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008442:	07d8      	lsls	r0, r3, #31
 8008444:	d498      	bmi.n	8008378 <_fseeko_r+0x58>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	0599      	lsls	r1, r3, #22
 800844a:	d495      	bmi.n	8008378 <_fseeko_r+0x58>
 800844c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844e:	f000 f87e 	bl	800854e <__retarget_lock_release_recursive>
 8008452:	e793      	b.n	800837c <_fseeko_r+0x5c>
 8008454:	0718      	lsls	r0, r3, #28
 8008456:	d5e9      	bpl.n	800842c <_fseeko_r+0x10c>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	6922      	ldr	r2, [r4, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0e5      	beq.n	800842c <_fseeko_r+0x10c>
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	441d      	add	r5, r3
 8008464:	e7e2      	b.n	800842c <_fseeko_r+0x10c>
 8008466:	2316      	movs	r3, #22
 8008468:	e782      	b.n	8008370 <_fseeko_r+0x50>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	059a      	lsls	r2, r3, #22
 800846e:	d483      	bmi.n	8008378 <_fseeko_r+0x58>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f000 f86c 	bl	800854e <__retarget_lock_release_recursive>
 8008476:	e77f      	b.n	8008378 <_fseeko_r+0x58>
 8008478:	4635      	mov	r5, r6
 800847a:	e77f      	b.n	800837c <_fseeko_r+0x5c>
 800847c:	0800aea4 	.word	0x0800aea4
 8008480:	0800aec4 	.word	0x0800aec4
 8008484:	0800ae84 	.word	0x0800ae84

08008488 <_fwalk>:
 8008488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800848c:	460f      	mov	r7, r1
 800848e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008492:	2600      	movs	r6, #0
 8008494:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 8008498:	f1b8 0801 	subs.w	r8, r8, #1
 800849c:	d505      	bpl.n	80084aa <_fwalk+0x22>
 800849e:	6824      	ldr	r4, [r4, #0]
 80084a0:	2c00      	cmp	r4, #0
 80084a2:	d1f7      	bne.n	8008494 <_fwalk+0xc>
 80084a4:	4630      	mov	r0, r6
 80084a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084aa:	89ab      	ldrh	r3, [r5, #12]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d906      	bls.n	80084be <_fwalk+0x36>
 80084b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b4:	3301      	adds	r3, #1
 80084b6:	d002      	beq.n	80084be <_fwalk+0x36>
 80084b8:	4628      	mov	r0, r5
 80084ba:	47b8      	blx	r7
 80084bc:	4306      	orrs	r6, r0
 80084be:	3568      	adds	r5, #104	; 0x68
 80084c0:	e7ea      	b.n	8008498 <_fwalk+0x10>

080084c2 <_fwalk_reent>:
 80084c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c6:	4606      	mov	r6, r0
 80084c8:	4688      	mov	r8, r1
 80084ca:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80084ce:	2700      	movs	r7, #0
 80084d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084d4:	f1b9 0901 	subs.w	r9, r9, #1
 80084d8:	d505      	bpl.n	80084e6 <_fwalk_reent+0x24>
 80084da:	6824      	ldr	r4, [r4, #0]
 80084dc:	2c00      	cmp	r4, #0
 80084de:	d1f7      	bne.n	80084d0 <_fwalk_reent+0xe>
 80084e0:	4638      	mov	r0, r7
 80084e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d907      	bls.n	80084fc <_fwalk_reent+0x3a>
 80084ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084f0:	3301      	adds	r3, #1
 80084f2:	d003      	beq.n	80084fc <_fwalk_reent+0x3a>
 80084f4:	4629      	mov	r1, r5
 80084f6:	4630      	mov	r0, r6
 80084f8:	47c0      	blx	r8
 80084fa:	4307      	orrs	r7, r0
 80084fc:	3568      	adds	r5, #104	; 0x68
 80084fe:	e7e9      	b.n	80084d4 <_fwalk_reent+0x12>

08008500 <__libc_init_array>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	4d0d      	ldr	r5, [pc, #52]	; (8008538 <__libc_init_array+0x38>)
 8008504:	4c0d      	ldr	r4, [pc, #52]	; (800853c <__libc_init_array+0x3c>)
 8008506:	1b64      	subs	r4, r4, r5
 8008508:	10a4      	asrs	r4, r4, #2
 800850a:	2600      	movs	r6, #0
 800850c:	42a6      	cmp	r6, r4
 800850e:	d109      	bne.n	8008524 <__libc_init_array+0x24>
 8008510:	4d0b      	ldr	r5, [pc, #44]	; (8008540 <__libc_init_array+0x40>)
 8008512:	4c0c      	ldr	r4, [pc, #48]	; (8008544 <__libc_init_array+0x44>)
 8008514:	f002 f942 	bl	800a79c <_init>
 8008518:	1b64      	subs	r4, r4, r5
 800851a:	10a4      	asrs	r4, r4, #2
 800851c:	2600      	movs	r6, #0
 800851e:	42a6      	cmp	r6, r4
 8008520:	d105      	bne.n	800852e <__libc_init_array+0x2e>
 8008522:	bd70      	pop	{r4, r5, r6, pc}
 8008524:	f855 3b04 	ldr.w	r3, [r5], #4
 8008528:	4798      	blx	r3
 800852a:	3601      	adds	r6, #1
 800852c:	e7ee      	b.n	800850c <__libc_init_array+0xc>
 800852e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008532:	4798      	blx	r3
 8008534:	3601      	adds	r6, #1
 8008536:	e7f2      	b.n	800851e <__libc_init_array+0x1e>
 8008538:	0800b5e8 	.word	0x0800b5e8
 800853c:	0800b5e8 	.word	0x0800b5e8
 8008540:	0800b5e8 	.word	0x0800b5e8
 8008544:	0800b5ec 	.word	0x0800b5ec

08008548 <__retarget_lock_init_recursive>:
 8008548:	4770      	bx	lr

0800854a <__retarget_lock_close_recursive>:
 800854a:	4770      	bx	lr

0800854c <__retarget_lock_acquire_recursive>:
 800854c:	4770      	bx	lr

0800854e <__retarget_lock_release_recursive>:
 800854e:	4770      	bx	lr

08008550 <__swhatbuf_r>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	460e      	mov	r6, r1
 8008554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008558:	2900      	cmp	r1, #0
 800855a:	b096      	sub	sp, #88	; 0x58
 800855c:	4614      	mov	r4, r2
 800855e:	461d      	mov	r5, r3
 8008560:	da08      	bge.n	8008574 <__swhatbuf_r+0x24>
 8008562:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	061a      	lsls	r2, r3, #24
 800856c:	d410      	bmi.n	8008590 <__swhatbuf_r+0x40>
 800856e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008572:	e00e      	b.n	8008592 <__swhatbuf_r+0x42>
 8008574:	466a      	mov	r2, sp
 8008576:	f000 feb7 	bl	80092e8 <_fstat_r>
 800857a:	2800      	cmp	r0, #0
 800857c:	dbf1      	blt.n	8008562 <__swhatbuf_r+0x12>
 800857e:	9a01      	ldr	r2, [sp, #4]
 8008580:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008584:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008588:	425a      	negs	r2, r3
 800858a:	415a      	adcs	r2, r3
 800858c:	602a      	str	r2, [r5, #0]
 800858e:	e7ee      	b.n	800856e <__swhatbuf_r+0x1e>
 8008590:	2340      	movs	r3, #64	; 0x40
 8008592:	2000      	movs	r0, #0
 8008594:	6023      	str	r3, [r4, #0]
 8008596:	b016      	add	sp, #88	; 0x58
 8008598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800859c <__smakebuf_r>:
 800859c:	898b      	ldrh	r3, [r1, #12]
 800859e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80085a0:	079d      	lsls	r5, r3, #30
 80085a2:	4606      	mov	r6, r0
 80085a4:	460c      	mov	r4, r1
 80085a6:	d507      	bpl.n	80085b8 <__smakebuf_r+0x1c>
 80085a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	2301      	movs	r3, #1
 80085b2:	6163      	str	r3, [r4, #20]
 80085b4:	b002      	add	sp, #8
 80085b6:	bd70      	pop	{r4, r5, r6, pc}
 80085b8:	ab01      	add	r3, sp, #4
 80085ba:	466a      	mov	r2, sp
 80085bc:	f7ff ffc8 	bl	8008550 <__swhatbuf_r>
 80085c0:	9900      	ldr	r1, [sp, #0]
 80085c2:	4605      	mov	r5, r0
 80085c4:	4630      	mov	r0, r6
 80085c6:	f000 f8b3 	bl	8008730 <_malloc_r>
 80085ca:	b948      	cbnz	r0, 80085e0 <__smakebuf_r+0x44>
 80085cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d0:	059a      	lsls	r2, r3, #22
 80085d2:	d4ef      	bmi.n	80085b4 <__smakebuf_r+0x18>
 80085d4:	f023 0303 	bic.w	r3, r3, #3
 80085d8:	f043 0302 	orr.w	r3, r3, #2
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	e7e3      	b.n	80085a8 <__smakebuf_r+0xc>
 80085e0:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <__smakebuf_r+0x7c>)
 80085e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	6020      	str	r0, [r4, #0]
 80085e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	9b00      	ldr	r3, [sp, #0]
 80085f0:	6163      	str	r3, [r4, #20]
 80085f2:	9b01      	ldr	r3, [sp, #4]
 80085f4:	6120      	str	r0, [r4, #16]
 80085f6:	b15b      	cbz	r3, 8008610 <__smakebuf_r+0x74>
 80085f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085fc:	4630      	mov	r0, r6
 80085fe:	f000 fe85 	bl	800930c <_isatty_r>
 8008602:	b128      	cbz	r0, 8008610 <__smakebuf_r+0x74>
 8008604:	89a3      	ldrh	r3, [r4, #12]
 8008606:	f023 0303 	bic.w	r3, r3, #3
 800860a:	f043 0301 	orr.w	r3, r3, #1
 800860e:	81a3      	strh	r3, [r4, #12]
 8008610:	89a0      	ldrh	r0, [r4, #12]
 8008612:	4305      	orrs	r5, r0
 8008614:	81a5      	strh	r5, [r4, #12]
 8008616:	e7cd      	b.n	80085b4 <__smakebuf_r+0x18>
 8008618:	08007fe9 	.word	0x08007fe9

0800861c <malloc>:
 800861c:	4b02      	ldr	r3, [pc, #8]	; (8008628 <malloc+0xc>)
 800861e:	4601      	mov	r1, r0
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	f000 b885 	b.w	8008730 <_malloc_r>
 8008626:	bf00      	nop
 8008628:	20000034 	.word	0x20000034

0800862c <memcpy>:
 800862c:	440a      	add	r2, r1
 800862e:	4291      	cmp	r1, r2
 8008630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008634:	d100      	bne.n	8008638 <memcpy+0xc>
 8008636:	4770      	bx	lr
 8008638:	b510      	push	{r4, lr}
 800863a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800863e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008642:	4291      	cmp	r1, r2
 8008644:	d1f9      	bne.n	800863a <memcpy+0xe>
 8008646:	bd10      	pop	{r4, pc}

08008648 <memset>:
 8008648:	4402      	add	r2, r0
 800864a:	4603      	mov	r3, r0
 800864c:	4293      	cmp	r3, r2
 800864e:	d100      	bne.n	8008652 <memset+0xa>
 8008650:	4770      	bx	lr
 8008652:	f803 1b01 	strb.w	r1, [r3], #1
 8008656:	e7f9      	b.n	800864c <memset+0x4>

08008658 <_free_r>:
 8008658:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800865a:	2900      	cmp	r1, #0
 800865c:	d044      	beq.n	80086e8 <_free_r+0x90>
 800865e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008662:	9001      	str	r0, [sp, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f1a1 0404 	sub.w	r4, r1, #4
 800866a:	bfb8      	it	lt
 800866c:	18e4      	addlt	r4, r4, r3
 800866e:	f000 fe6f 	bl	8009350 <__malloc_lock>
 8008672:	4a1e      	ldr	r2, [pc, #120]	; (80086ec <_free_r+0x94>)
 8008674:	9801      	ldr	r0, [sp, #4]
 8008676:	6813      	ldr	r3, [r2, #0]
 8008678:	b933      	cbnz	r3, 8008688 <_free_r+0x30>
 800867a:	6063      	str	r3, [r4, #4]
 800867c:	6014      	str	r4, [r2, #0]
 800867e:	b003      	add	sp, #12
 8008680:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008684:	f000 be6a 	b.w	800935c <__malloc_unlock>
 8008688:	42a3      	cmp	r3, r4
 800868a:	d908      	bls.n	800869e <_free_r+0x46>
 800868c:	6825      	ldr	r5, [r4, #0]
 800868e:	1961      	adds	r1, r4, r5
 8008690:	428b      	cmp	r3, r1
 8008692:	bf01      	itttt	eq
 8008694:	6819      	ldreq	r1, [r3, #0]
 8008696:	685b      	ldreq	r3, [r3, #4]
 8008698:	1949      	addeq	r1, r1, r5
 800869a:	6021      	streq	r1, [r4, #0]
 800869c:	e7ed      	b.n	800867a <_free_r+0x22>
 800869e:	461a      	mov	r2, r3
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	b10b      	cbz	r3, 80086a8 <_free_r+0x50>
 80086a4:	42a3      	cmp	r3, r4
 80086a6:	d9fa      	bls.n	800869e <_free_r+0x46>
 80086a8:	6811      	ldr	r1, [r2, #0]
 80086aa:	1855      	adds	r5, r2, r1
 80086ac:	42a5      	cmp	r5, r4
 80086ae:	d10b      	bne.n	80086c8 <_free_r+0x70>
 80086b0:	6824      	ldr	r4, [r4, #0]
 80086b2:	4421      	add	r1, r4
 80086b4:	1854      	adds	r4, r2, r1
 80086b6:	42a3      	cmp	r3, r4
 80086b8:	6011      	str	r1, [r2, #0]
 80086ba:	d1e0      	bne.n	800867e <_free_r+0x26>
 80086bc:	681c      	ldr	r4, [r3, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	6053      	str	r3, [r2, #4]
 80086c2:	4421      	add	r1, r4
 80086c4:	6011      	str	r1, [r2, #0]
 80086c6:	e7da      	b.n	800867e <_free_r+0x26>
 80086c8:	d902      	bls.n	80086d0 <_free_r+0x78>
 80086ca:	230c      	movs	r3, #12
 80086cc:	6003      	str	r3, [r0, #0]
 80086ce:	e7d6      	b.n	800867e <_free_r+0x26>
 80086d0:	6825      	ldr	r5, [r4, #0]
 80086d2:	1961      	adds	r1, r4, r5
 80086d4:	428b      	cmp	r3, r1
 80086d6:	bf04      	itt	eq
 80086d8:	6819      	ldreq	r1, [r3, #0]
 80086da:	685b      	ldreq	r3, [r3, #4]
 80086dc:	6063      	str	r3, [r4, #4]
 80086de:	bf04      	itt	eq
 80086e0:	1949      	addeq	r1, r1, r5
 80086e2:	6021      	streq	r1, [r4, #0]
 80086e4:	6054      	str	r4, [r2, #4]
 80086e6:	e7ca      	b.n	800867e <_free_r+0x26>
 80086e8:	b003      	add	sp, #12
 80086ea:	bd30      	pop	{r4, r5, pc}
 80086ec:	20000388 	.word	0x20000388

080086f0 <sbrk_aligned>:
 80086f0:	b570      	push	{r4, r5, r6, lr}
 80086f2:	4e0e      	ldr	r6, [pc, #56]	; (800872c <sbrk_aligned+0x3c>)
 80086f4:	460c      	mov	r4, r1
 80086f6:	6831      	ldr	r1, [r6, #0]
 80086f8:	4605      	mov	r5, r0
 80086fa:	b911      	cbnz	r1, 8008702 <sbrk_aligned+0x12>
 80086fc:	f000 fa62 	bl	8008bc4 <_sbrk_r>
 8008700:	6030      	str	r0, [r6, #0]
 8008702:	4621      	mov	r1, r4
 8008704:	4628      	mov	r0, r5
 8008706:	f000 fa5d 	bl	8008bc4 <_sbrk_r>
 800870a:	1c43      	adds	r3, r0, #1
 800870c:	d00a      	beq.n	8008724 <sbrk_aligned+0x34>
 800870e:	1cc4      	adds	r4, r0, #3
 8008710:	f024 0403 	bic.w	r4, r4, #3
 8008714:	42a0      	cmp	r0, r4
 8008716:	d007      	beq.n	8008728 <sbrk_aligned+0x38>
 8008718:	1a21      	subs	r1, r4, r0
 800871a:	4628      	mov	r0, r5
 800871c:	f000 fa52 	bl	8008bc4 <_sbrk_r>
 8008720:	3001      	adds	r0, #1
 8008722:	d101      	bne.n	8008728 <sbrk_aligned+0x38>
 8008724:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008728:	4620      	mov	r0, r4
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	2000038c 	.word	0x2000038c

08008730 <_malloc_r>:
 8008730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008734:	1ccd      	adds	r5, r1, #3
 8008736:	f025 0503 	bic.w	r5, r5, #3
 800873a:	3508      	adds	r5, #8
 800873c:	2d0c      	cmp	r5, #12
 800873e:	bf38      	it	cc
 8008740:	250c      	movcc	r5, #12
 8008742:	2d00      	cmp	r5, #0
 8008744:	4607      	mov	r7, r0
 8008746:	db01      	blt.n	800874c <_malloc_r+0x1c>
 8008748:	42a9      	cmp	r1, r5
 800874a:	d905      	bls.n	8008758 <_malloc_r+0x28>
 800874c:	230c      	movs	r3, #12
 800874e:	603b      	str	r3, [r7, #0]
 8008750:	2600      	movs	r6, #0
 8008752:	4630      	mov	r0, r6
 8008754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008758:	4e2e      	ldr	r6, [pc, #184]	; (8008814 <_malloc_r+0xe4>)
 800875a:	f000 fdf9 	bl	8009350 <__malloc_lock>
 800875e:	6833      	ldr	r3, [r6, #0]
 8008760:	461c      	mov	r4, r3
 8008762:	bb34      	cbnz	r4, 80087b2 <_malloc_r+0x82>
 8008764:	4629      	mov	r1, r5
 8008766:	4638      	mov	r0, r7
 8008768:	f7ff ffc2 	bl	80086f0 <sbrk_aligned>
 800876c:	1c43      	adds	r3, r0, #1
 800876e:	4604      	mov	r4, r0
 8008770:	d14d      	bne.n	800880e <_malloc_r+0xde>
 8008772:	6834      	ldr	r4, [r6, #0]
 8008774:	4626      	mov	r6, r4
 8008776:	2e00      	cmp	r6, #0
 8008778:	d140      	bne.n	80087fc <_malloc_r+0xcc>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	4631      	mov	r1, r6
 800877e:	4638      	mov	r0, r7
 8008780:	eb04 0803 	add.w	r8, r4, r3
 8008784:	f000 fa1e 	bl	8008bc4 <_sbrk_r>
 8008788:	4580      	cmp	r8, r0
 800878a:	d13a      	bne.n	8008802 <_malloc_r+0xd2>
 800878c:	6821      	ldr	r1, [r4, #0]
 800878e:	3503      	adds	r5, #3
 8008790:	1a6d      	subs	r5, r5, r1
 8008792:	f025 0503 	bic.w	r5, r5, #3
 8008796:	3508      	adds	r5, #8
 8008798:	2d0c      	cmp	r5, #12
 800879a:	bf38      	it	cc
 800879c:	250c      	movcc	r5, #12
 800879e:	4629      	mov	r1, r5
 80087a0:	4638      	mov	r0, r7
 80087a2:	f7ff ffa5 	bl	80086f0 <sbrk_aligned>
 80087a6:	3001      	adds	r0, #1
 80087a8:	d02b      	beq.n	8008802 <_malloc_r+0xd2>
 80087aa:	6823      	ldr	r3, [r4, #0]
 80087ac:	442b      	add	r3, r5
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	e00e      	b.n	80087d0 <_malloc_r+0xa0>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	1b52      	subs	r2, r2, r5
 80087b6:	d41e      	bmi.n	80087f6 <_malloc_r+0xc6>
 80087b8:	2a0b      	cmp	r2, #11
 80087ba:	d916      	bls.n	80087ea <_malloc_r+0xba>
 80087bc:	1961      	adds	r1, r4, r5
 80087be:	42a3      	cmp	r3, r4
 80087c0:	6025      	str	r5, [r4, #0]
 80087c2:	bf18      	it	ne
 80087c4:	6059      	strne	r1, [r3, #4]
 80087c6:	6863      	ldr	r3, [r4, #4]
 80087c8:	bf08      	it	eq
 80087ca:	6031      	streq	r1, [r6, #0]
 80087cc:	5162      	str	r2, [r4, r5]
 80087ce:	604b      	str	r3, [r1, #4]
 80087d0:	4638      	mov	r0, r7
 80087d2:	f104 060b 	add.w	r6, r4, #11
 80087d6:	f000 fdc1 	bl	800935c <__malloc_unlock>
 80087da:	f026 0607 	bic.w	r6, r6, #7
 80087de:	1d23      	adds	r3, r4, #4
 80087e0:	1af2      	subs	r2, r6, r3
 80087e2:	d0b6      	beq.n	8008752 <_malloc_r+0x22>
 80087e4:	1b9b      	subs	r3, r3, r6
 80087e6:	50a3      	str	r3, [r4, r2]
 80087e8:	e7b3      	b.n	8008752 <_malloc_r+0x22>
 80087ea:	6862      	ldr	r2, [r4, #4]
 80087ec:	42a3      	cmp	r3, r4
 80087ee:	bf0c      	ite	eq
 80087f0:	6032      	streq	r2, [r6, #0]
 80087f2:	605a      	strne	r2, [r3, #4]
 80087f4:	e7ec      	b.n	80087d0 <_malloc_r+0xa0>
 80087f6:	4623      	mov	r3, r4
 80087f8:	6864      	ldr	r4, [r4, #4]
 80087fa:	e7b2      	b.n	8008762 <_malloc_r+0x32>
 80087fc:	4634      	mov	r4, r6
 80087fe:	6876      	ldr	r6, [r6, #4]
 8008800:	e7b9      	b.n	8008776 <_malloc_r+0x46>
 8008802:	230c      	movs	r3, #12
 8008804:	603b      	str	r3, [r7, #0]
 8008806:	4638      	mov	r0, r7
 8008808:	f000 fda8 	bl	800935c <__malloc_unlock>
 800880c:	e7a1      	b.n	8008752 <_malloc_r+0x22>
 800880e:	6025      	str	r5, [r4, #0]
 8008810:	e7de      	b.n	80087d0 <_malloc_r+0xa0>
 8008812:	bf00      	nop
 8008814:	20000388 	.word	0x20000388

08008818 <_open_r>:
 8008818:	b538      	push	{r3, r4, r5, lr}
 800881a:	4d07      	ldr	r5, [pc, #28]	; (8008838 <_open_r+0x20>)
 800881c:	4604      	mov	r4, r0
 800881e:	4608      	mov	r0, r1
 8008820:	4611      	mov	r1, r2
 8008822:	2200      	movs	r2, #0
 8008824:	602a      	str	r2, [r5, #0]
 8008826:	461a      	mov	r2, r3
 8008828:	f7fa fbcb 	bl	8002fc2 <_open>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d102      	bne.n	8008836 <_open_r+0x1e>
 8008830:	682b      	ldr	r3, [r5, #0]
 8008832:	b103      	cbz	r3, 8008836 <_open_r+0x1e>
 8008834:	6023      	str	r3, [r4, #0]
 8008836:	bd38      	pop	{r3, r4, r5, pc}
 8008838:	20000390 	.word	0x20000390

0800883c <_perror_r>:
 800883c:	6983      	ldr	r3, [r0, #24]
 800883e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008840:	68c4      	ldr	r4, [r0, #12]
 8008842:	4605      	mov	r5, r0
 8008844:	460e      	mov	r6, r1
 8008846:	b90b      	cbnz	r3, 800884c <_perror_r+0x10>
 8008848:	f7ff fc02 	bl	8008050 <__sinit>
 800884c:	4b43      	ldr	r3, [pc, #268]	; (800895c <_perror_r+0x120>)
 800884e:	429c      	cmp	r4, r3
 8008850:	d132      	bne.n	80088b8 <_perror_r+0x7c>
 8008852:	686c      	ldr	r4, [r5, #4]
 8008854:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008856:	07d8      	lsls	r0, r3, #31
 8008858:	d405      	bmi.n	8008866 <_perror_r+0x2a>
 800885a:	89a3      	ldrh	r3, [r4, #12]
 800885c:	0599      	lsls	r1, r3, #22
 800885e:	d402      	bmi.n	8008866 <_perror_r+0x2a>
 8008860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008862:	f7ff fe73 	bl	800854c <__retarget_lock_acquire_recursive>
 8008866:	4621      	mov	r1, r4
 8008868:	4628      	mov	r0, r5
 800886a:	f7ff fb4b 	bl	8007f04 <_fflush_r>
 800886e:	bb6e      	cbnz	r6, 80088cc <_perror_r+0x90>
 8008870:	6829      	ldr	r1, [r5, #0]
 8008872:	ab01      	add	r3, sp, #4
 8008874:	2201      	movs	r2, #1
 8008876:	4628      	mov	r0, r5
 8008878:	f000 f9f8 	bl	8008c6c <_strerror_r>
 800887c:	4607      	mov	r7, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	d14f      	bne.n	8008922 <_perror_r+0xe6>
 8008882:	4837      	ldr	r0, [pc, #220]	; (8008960 <_perror_r+0x124>)
 8008884:	4f36      	ldr	r7, [pc, #216]	; (8008960 <_perror_r+0x124>)
 8008886:	f7f7 fc7b 	bl	8000180 <strlen>
 800888a:	4606      	mov	r6, r0
 800888c:	b156      	cbz	r6, 80088a4 <_perror_r+0x68>
 800888e:	4620      	mov	r0, r4
 8008890:	f000 fcb6 	bl	8009200 <fileno>
 8008894:	4633      	mov	r3, r6
 8008896:	4601      	mov	r1, r0
 8008898:	463a      	mov	r2, r7
 800889a:	4628      	mov	r0, r5
 800889c:	f000 fc20 	bl	80090e0 <_write_r>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	da51      	bge.n	8008948 <_perror_r+0x10c>
 80088a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088a8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088ae:	07d2      	lsls	r2, r2, #31
 80088b0:	81a3      	strh	r3, [r4, #12]
 80088b2:	d54c      	bpl.n	800894e <_perror_r+0x112>
 80088b4:	b003      	add	sp, #12
 80088b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088b8:	4b2a      	ldr	r3, [pc, #168]	; (8008964 <_perror_r+0x128>)
 80088ba:	429c      	cmp	r4, r3
 80088bc:	d101      	bne.n	80088c2 <_perror_r+0x86>
 80088be:	68ac      	ldr	r4, [r5, #8]
 80088c0:	e7c8      	b.n	8008854 <_perror_r+0x18>
 80088c2:	4b29      	ldr	r3, [pc, #164]	; (8008968 <_perror_r+0x12c>)
 80088c4:	429c      	cmp	r4, r3
 80088c6:	bf08      	it	eq
 80088c8:	68ec      	ldreq	r4, [r5, #12]
 80088ca:	e7c3      	b.n	8008854 <_perror_r+0x18>
 80088cc:	7833      	ldrb	r3, [r6, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0ce      	beq.n	8008870 <_perror_r+0x34>
 80088d2:	4630      	mov	r0, r6
 80088d4:	f7f7 fc54 	bl	8000180 <strlen>
 80088d8:	4607      	mov	r7, r0
 80088da:	b157      	cbz	r7, 80088f2 <_perror_r+0xb6>
 80088dc:	4620      	mov	r0, r4
 80088de:	f000 fc8f 	bl	8009200 <fileno>
 80088e2:	463b      	mov	r3, r7
 80088e4:	4601      	mov	r1, r0
 80088e6:	4632      	mov	r2, r6
 80088e8:	4628      	mov	r0, r5
 80088ea:	f000 fbf9 	bl	80090e0 <_write_r>
 80088ee:	2800      	cmp	r0, #0
 80088f0:	da14      	bge.n	800891c <_perror_r+0xe0>
 80088f2:	481e      	ldr	r0, [pc, #120]	; (800896c <_perror_r+0x130>)
 80088f4:	4f1d      	ldr	r7, [pc, #116]	; (800896c <_perror_r+0x130>)
 80088f6:	f7f7 fc43 	bl	8000180 <strlen>
 80088fa:	4606      	mov	r6, r0
 80088fc:	2e00      	cmp	r6, #0
 80088fe:	d0b7      	beq.n	8008870 <_perror_r+0x34>
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fc7d 	bl	8009200 <fileno>
 8008906:	4633      	mov	r3, r6
 8008908:	4601      	mov	r1, r0
 800890a:	463a      	mov	r2, r7
 800890c:	4628      	mov	r0, r5
 800890e:	f000 fbe7 	bl	80090e0 <_write_r>
 8008912:	2800      	cmp	r0, #0
 8008914:	dbac      	blt.n	8008870 <_perror_r+0x34>
 8008916:	1a36      	subs	r6, r6, r0
 8008918:	4407      	add	r7, r0
 800891a:	e7ef      	b.n	80088fc <_perror_r+0xc0>
 800891c:	1a3f      	subs	r7, r7, r0
 800891e:	4406      	add	r6, r0
 8008920:	e7db      	b.n	80088da <_perror_r+0x9e>
 8008922:	f7f7 fc2d 	bl	8000180 <strlen>
 8008926:	4606      	mov	r6, r0
 8008928:	2e00      	cmp	r6, #0
 800892a:	d0aa      	beq.n	8008882 <_perror_r+0x46>
 800892c:	4620      	mov	r0, r4
 800892e:	f000 fc67 	bl	8009200 <fileno>
 8008932:	4633      	mov	r3, r6
 8008934:	4601      	mov	r1, r0
 8008936:	463a      	mov	r2, r7
 8008938:	4628      	mov	r0, r5
 800893a:	f000 fbd1 	bl	80090e0 <_write_r>
 800893e:	2800      	cmp	r0, #0
 8008940:	db9f      	blt.n	8008882 <_perror_r+0x46>
 8008942:	1a36      	subs	r6, r6, r0
 8008944:	4407      	add	r7, r0
 8008946:	e7ef      	b.n	8008928 <_perror_r+0xec>
 8008948:	1a36      	subs	r6, r6, r0
 800894a:	4407      	add	r7, r0
 800894c:	e79e      	b.n	800888c <_perror_r+0x50>
 800894e:	059b      	lsls	r3, r3, #22
 8008950:	d4b0      	bmi.n	80088b4 <_perror_r+0x78>
 8008952:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008954:	f7ff fdfb 	bl	800854e <__retarget_lock_release_recursive>
 8008958:	e7ac      	b.n	80088b4 <_perror_r+0x78>
 800895a:	bf00      	nop
 800895c:	0800aea4 	.word	0x0800aea4
 8008960:	0800aeeb 	.word	0x0800aeeb
 8008964:	0800aec4 	.word	0x0800aec4
 8008968:	0800ae84 	.word	0x0800ae84
 800896c:	0800aee8 	.word	0x0800aee8

08008970 <perror>:
 8008970:	4b02      	ldr	r3, [pc, #8]	; (800897c <perror+0xc>)
 8008972:	4601      	mov	r1, r0
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	f7ff bf61 	b.w	800883c <_perror_r>
 800897a:	bf00      	nop
 800897c:	20000034 	.word	0x20000034

08008980 <iprintf>:
 8008980:	b40f      	push	{r0, r1, r2, r3}
 8008982:	4b0a      	ldr	r3, [pc, #40]	; (80089ac <iprintf+0x2c>)
 8008984:	b513      	push	{r0, r1, r4, lr}
 8008986:	681c      	ldr	r4, [r3, #0]
 8008988:	b124      	cbz	r4, 8008994 <iprintf+0x14>
 800898a:	69a3      	ldr	r3, [r4, #24]
 800898c:	b913      	cbnz	r3, 8008994 <iprintf+0x14>
 800898e:	4620      	mov	r0, r4
 8008990:	f7ff fb5e 	bl	8008050 <__sinit>
 8008994:	ab05      	add	r3, sp, #20
 8008996:	9a04      	ldr	r2, [sp, #16]
 8008998:	68a1      	ldr	r1, [r4, #8]
 800899a:	9301      	str	r3, [sp, #4]
 800899c:	4620      	mov	r0, r4
 800899e:	f000 fd0d 	bl	80093bc <_vfiprintf_r>
 80089a2:	b002      	add	sp, #8
 80089a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089a8:	b004      	add	sp, #16
 80089aa:	4770      	bx	lr
 80089ac:	20000034 	.word	0x20000034

080089b0 <_puts_r>:
 80089b0:	b570      	push	{r4, r5, r6, lr}
 80089b2:	460e      	mov	r6, r1
 80089b4:	4605      	mov	r5, r0
 80089b6:	b118      	cbz	r0, 80089c0 <_puts_r+0x10>
 80089b8:	6983      	ldr	r3, [r0, #24]
 80089ba:	b90b      	cbnz	r3, 80089c0 <_puts_r+0x10>
 80089bc:	f7ff fb48 	bl	8008050 <__sinit>
 80089c0:	69ab      	ldr	r3, [r5, #24]
 80089c2:	68ac      	ldr	r4, [r5, #8]
 80089c4:	b913      	cbnz	r3, 80089cc <_puts_r+0x1c>
 80089c6:	4628      	mov	r0, r5
 80089c8:	f7ff fb42 	bl	8008050 <__sinit>
 80089cc:	4b2c      	ldr	r3, [pc, #176]	; (8008a80 <_puts_r+0xd0>)
 80089ce:	429c      	cmp	r4, r3
 80089d0:	d120      	bne.n	8008a14 <_puts_r+0x64>
 80089d2:	686c      	ldr	r4, [r5, #4]
 80089d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089d6:	07db      	lsls	r3, r3, #31
 80089d8:	d405      	bmi.n	80089e6 <_puts_r+0x36>
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	0598      	lsls	r0, r3, #22
 80089de:	d402      	bmi.n	80089e6 <_puts_r+0x36>
 80089e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089e2:	f7ff fdb3 	bl	800854c <__retarget_lock_acquire_recursive>
 80089e6:	89a3      	ldrh	r3, [r4, #12]
 80089e8:	0719      	lsls	r1, r3, #28
 80089ea:	d51d      	bpl.n	8008a28 <_puts_r+0x78>
 80089ec:	6923      	ldr	r3, [r4, #16]
 80089ee:	b1db      	cbz	r3, 8008a28 <_puts_r+0x78>
 80089f0:	3e01      	subs	r6, #1
 80089f2:	68a3      	ldr	r3, [r4, #8]
 80089f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80089f8:	3b01      	subs	r3, #1
 80089fa:	60a3      	str	r3, [r4, #8]
 80089fc:	bb39      	cbnz	r1, 8008a4e <_puts_r+0x9e>
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	da38      	bge.n	8008a74 <_puts_r+0xc4>
 8008a02:	4622      	mov	r2, r4
 8008a04:	210a      	movs	r1, #10
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 fb18 	bl	800903c <__swbuf_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d011      	beq.n	8008a34 <_puts_r+0x84>
 8008a10:	250a      	movs	r5, #10
 8008a12:	e011      	b.n	8008a38 <_puts_r+0x88>
 8008a14:	4b1b      	ldr	r3, [pc, #108]	; (8008a84 <_puts_r+0xd4>)
 8008a16:	429c      	cmp	r4, r3
 8008a18:	d101      	bne.n	8008a1e <_puts_r+0x6e>
 8008a1a:	68ac      	ldr	r4, [r5, #8]
 8008a1c:	e7da      	b.n	80089d4 <_puts_r+0x24>
 8008a1e:	4b1a      	ldr	r3, [pc, #104]	; (8008a88 <_puts_r+0xd8>)
 8008a20:	429c      	cmp	r4, r3
 8008a22:	bf08      	it	eq
 8008a24:	68ec      	ldreq	r4, [r5, #12]
 8008a26:	e7d5      	b.n	80089d4 <_puts_r+0x24>
 8008a28:	4621      	mov	r1, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 fb6a 	bl	8009104 <__swsetup_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	d0dd      	beq.n	80089f0 <_puts_r+0x40>
 8008a34:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3a:	07da      	lsls	r2, r3, #31
 8008a3c:	d405      	bmi.n	8008a4a <_puts_r+0x9a>
 8008a3e:	89a3      	ldrh	r3, [r4, #12]
 8008a40:	059b      	lsls	r3, r3, #22
 8008a42:	d402      	bmi.n	8008a4a <_puts_r+0x9a>
 8008a44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a46:	f7ff fd82 	bl	800854e <__retarget_lock_release_recursive>
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da04      	bge.n	8008a5c <_puts_r+0xac>
 8008a52:	69a2      	ldr	r2, [r4, #24]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	dc06      	bgt.n	8008a66 <_puts_r+0xb6>
 8008a58:	290a      	cmp	r1, #10
 8008a5a:	d004      	beq.n	8008a66 <_puts_r+0xb6>
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	1c5a      	adds	r2, r3, #1
 8008a60:	6022      	str	r2, [r4, #0]
 8008a62:	7019      	strb	r1, [r3, #0]
 8008a64:	e7c5      	b.n	80089f2 <_puts_r+0x42>
 8008a66:	4622      	mov	r2, r4
 8008a68:	4628      	mov	r0, r5
 8008a6a:	f000 fae7 	bl	800903c <__swbuf_r>
 8008a6e:	3001      	adds	r0, #1
 8008a70:	d1bf      	bne.n	80089f2 <_puts_r+0x42>
 8008a72:	e7df      	b.n	8008a34 <_puts_r+0x84>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	250a      	movs	r5, #10
 8008a78:	1c5a      	adds	r2, r3, #1
 8008a7a:	6022      	str	r2, [r4, #0]
 8008a7c:	701d      	strb	r5, [r3, #0]
 8008a7e:	e7db      	b.n	8008a38 <_puts_r+0x88>
 8008a80:	0800aea4 	.word	0x0800aea4
 8008a84:	0800aec4 	.word	0x0800aec4
 8008a88:	0800ae84 	.word	0x0800ae84

08008a8c <puts>:
 8008a8c:	4b02      	ldr	r3, [pc, #8]	; (8008a98 <puts+0xc>)
 8008a8e:	4601      	mov	r1, r0
 8008a90:	6818      	ldr	r0, [r3, #0]
 8008a92:	f7ff bf8d 	b.w	80089b0 <_puts_r>
 8008a96:	bf00      	nop
 8008a98:	20000034 	.word	0x20000034

08008a9c <lflush>:
 8008a9c:	8983      	ldrh	r3, [r0, #12]
 8008a9e:	f003 0309 	and.w	r3, r3, #9
 8008aa2:	2b09      	cmp	r3, #9
 8008aa4:	d101      	bne.n	8008aaa <lflush+0xe>
 8008aa6:	f7ff ba69 	b.w	8007f7c <fflush>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	4770      	bx	lr
	...

08008ab0 <__srefill_r>:
 8008ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	b118      	cbz	r0, 8008ac0 <__srefill_r+0x10>
 8008ab8:	6983      	ldr	r3, [r0, #24]
 8008aba:	b90b      	cbnz	r3, 8008ac0 <__srefill_r+0x10>
 8008abc:	f7ff fac8 	bl	8008050 <__sinit>
 8008ac0:	4b3b      	ldr	r3, [pc, #236]	; (8008bb0 <__srefill_r+0x100>)
 8008ac2:	429c      	cmp	r4, r3
 8008ac4:	d10a      	bne.n	8008adc <__srefill_r+0x2c>
 8008ac6:	686c      	ldr	r4, [r5, #4]
 8008ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008acc:	2300      	movs	r3, #0
 8008ace:	6063      	str	r3, [r4, #4]
 8008ad0:	89a3      	ldrh	r3, [r4, #12]
 8008ad2:	069e      	lsls	r6, r3, #26
 8008ad4:	d50c      	bpl.n	8008af0 <__srefill_r+0x40>
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ada:	e066      	b.n	8008baa <__srefill_r+0xfa>
 8008adc:	4b35      	ldr	r3, [pc, #212]	; (8008bb4 <__srefill_r+0x104>)
 8008ade:	429c      	cmp	r4, r3
 8008ae0:	d101      	bne.n	8008ae6 <__srefill_r+0x36>
 8008ae2:	68ac      	ldr	r4, [r5, #8]
 8008ae4:	e7f0      	b.n	8008ac8 <__srefill_r+0x18>
 8008ae6:	4b34      	ldr	r3, [pc, #208]	; (8008bb8 <__srefill_r+0x108>)
 8008ae8:	429c      	cmp	r4, r3
 8008aea:	bf08      	it	eq
 8008aec:	68ec      	ldreq	r4, [r5, #12]
 8008aee:	e7eb      	b.n	8008ac8 <__srefill_r+0x18>
 8008af0:	0758      	lsls	r0, r3, #29
 8008af2:	d448      	bmi.n	8008b86 <__srefill_r+0xd6>
 8008af4:	06d9      	lsls	r1, r3, #27
 8008af6:	d405      	bmi.n	8008b04 <__srefill_r+0x54>
 8008af8:	2309      	movs	r3, #9
 8008afa:	602b      	str	r3, [r5, #0]
 8008afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008b00:	81a3      	strh	r3, [r4, #12]
 8008b02:	e7e8      	b.n	8008ad6 <__srefill_r+0x26>
 8008b04:	071a      	lsls	r2, r3, #28
 8008b06:	d50b      	bpl.n	8008b20 <__srefill_r+0x70>
 8008b08:	4621      	mov	r1, r4
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	f7ff f9fa 	bl	8007f04 <_fflush_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d1e0      	bne.n	8008ad6 <__srefill_r+0x26>
 8008b14:	89a3      	ldrh	r3, [r4, #12]
 8008b16:	60a0      	str	r0, [r4, #8]
 8008b18:	f023 0308 	bic.w	r3, r3, #8
 8008b1c:	81a3      	strh	r3, [r4, #12]
 8008b1e:	61a0      	str	r0, [r4, #24]
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	f043 0304 	orr.w	r3, r3, #4
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	6923      	ldr	r3, [r4, #16]
 8008b2a:	b91b      	cbnz	r3, 8008b34 <__srefill_r+0x84>
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f7ff fd34 	bl	800859c <__smakebuf_r>
 8008b34:	89a6      	ldrh	r6, [r4, #12]
 8008b36:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8008b3a:	07b3      	lsls	r3, r6, #30
 8008b3c:	d00f      	beq.n	8008b5e <__srefill_r+0xae>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	81a3      	strh	r3, [r4, #12]
 8008b42:	4b1e      	ldr	r3, [pc, #120]	; (8008bbc <__srefill_r+0x10c>)
 8008b44:	491e      	ldr	r1, [pc, #120]	; (8008bc0 <__srefill_r+0x110>)
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	f006 0609 	and.w	r6, r6, #9
 8008b4c:	f7ff fc9c 	bl	8008488 <_fwalk>
 8008b50:	2e09      	cmp	r6, #9
 8008b52:	81a7      	strh	r7, [r4, #12]
 8008b54:	d103      	bne.n	8008b5e <__srefill_r+0xae>
 8008b56:	4621      	mov	r1, r4
 8008b58:	4628      	mov	r0, r5
 8008b5a:	f7ff f94d 	bl	8007df8 <__sflush_r>
 8008b5e:	6922      	ldr	r2, [r4, #16]
 8008b60:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008b62:	6963      	ldr	r3, [r4, #20]
 8008b64:	6a21      	ldr	r1, [r4, #32]
 8008b66:	6022      	str	r2, [r4, #0]
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b0      	blx	r6
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	6060      	str	r0, [r4, #4]
 8008b70:	dc1c      	bgt.n	8008bac <__srefill_r+0xfc>
 8008b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b76:	bf17      	itett	ne
 8008b78:	2200      	movne	r2, #0
 8008b7a:	f043 0320 	orreq.w	r3, r3, #32
 8008b7e:	6062      	strne	r2, [r4, #4]
 8008b80:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8008b84:	e7bc      	b.n	8008b00 <__srefill_r+0x50>
 8008b86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b88:	2900      	cmp	r1, #0
 8008b8a:	d0cd      	beq.n	8008b28 <__srefill_r+0x78>
 8008b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b90:	4299      	cmp	r1, r3
 8008b92:	d002      	beq.n	8008b9a <__srefill_r+0xea>
 8008b94:	4628      	mov	r0, r5
 8008b96:	f7ff fd5f 	bl	8008658 <_free_r>
 8008b9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b9c:	6063      	str	r3, [r4, #4]
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	6360      	str	r0, [r4, #52]	; 0x34
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0c0      	beq.n	8008b28 <__srefill_r+0x78>
 8008ba6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008ba8:	6023      	str	r3, [r4, #0]
 8008baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bac:	2000      	movs	r0, #0
 8008bae:	e7fc      	b.n	8008baa <__srefill_r+0xfa>
 8008bb0:	0800aea4 	.word	0x0800aea4
 8008bb4:	0800aec4 	.word	0x0800aec4
 8008bb8:	0800ae84 	.word	0x0800ae84
 8008bbc:	0800aee4 	.word	0x0800aee4
 8008bc0:	08008a9d 	.word	0x08008a9d

08008bc4 <_sbrk_r>:
 8008bc4:	b538      	push	{r3, r4, r5, lr}
 8008bc6:	4d06      	ldr	r5, [pc, #24]	; (8008be0 <_sbrk_r+0x1c>)
 8008bc8:	2300      	movs	r3, #0
 8008bca:	4604      	mov	r4, r0
 8008bcc:	4608      	mov	r0, r1
 8008bce:	602b      	str	r3, [r5, #0]
 8008bd0:	f7fa fa06 	bl	8002fe0 <_sbrk>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d102      	bne.n	8008bde <_sbrk_r+0x1a>
 8008bd8:	682b      	ldr	r3, [r5, #0]
 8008bda:	b103      	cbz	r3, 8008bde <_sbrk_r+0x1a>
 8008bdc:	6023      	str	r3, [r4, #0]
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	20000390 	.word	0x20000390

08008be4 <__sread>:
 8008be4:	b510      	push	{r4, lr}
 8008be6:	460c      	mov	r4, r1
 8008be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bec:	f000 feaa 	bl	8009944 <_read_r>
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	bfab      	itete	ge
 8008bf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008bf6:	89a3      	ldrhlt	r3, [r4, #12]
 8008bf8:	181b      	addge	r3, r3, r0
 8008bfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008bfe:	bfac      	ite	ge
 8008c00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c02:	81a3      	strhlt	r3, [r4, #12]
 8008c04:	bd10      	pop	{r4, pc}

08008c06 <__swrite>:
 8008c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c0a:	461f      	mov	r7, r3
 8008c0c:	898b      	ldrh	r3, [r1, #12]
 8008c0e:	05db      	lsls	r3, r3, #23
 8008c10:	4605      	mov	r5, r0
 8008c12:	460c      	mov	r4, r1
 8008c14:	4616      	mov	r6, r2
 8008c16:	d505      	bpl.n	8008c24 <__swrite+0x1e>
 8008c18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f000 fb84 	bl	800932c <_lseek_r>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c2e:	81a3      	strh	r3, [r4, #12]
 8008c30:	4632      	mov	r2, r6
 8008c32:	463b      	mov	r3, r7
 8008c34:	4628      	mov	r0, r5
 8008c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3a:	f000 ba51 	b.w	80090e0 <_write_r>

08008c3e <__sseek>:
 8008c3e:	b510      	push	{r4, lr}
 8008c40:	460c      	mov	r4, r1
 8008c42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c46:	f000 fb71 	bl	800932c <_lseek_r>
 8008c4a:	1c43      	adds	r3, r0, #1
 8008c4c:	89a3      	ldrh	r3, [r4, #12]
 8008c4e:	bf15      	itete	ne
 8008c50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c5a:	81a3      	strheq	r3, [r4, #12]
 8008c5c:	bf18      	it	ne
 8008c5e:	81a3      	strhne	r3, [r4, #12]
 8008c60:	bd10      	pop	{r4, pc}

08008c62 <__sclose>:
 8008c62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c66:	f000 babb 	b.w	80091e0 <_close_r>
	...

08008c6c <_strerror_r>:
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	4604      	mov	r4, r0
 8008c70:	4608      	mov	r0, r1
 8008c72:	4611      	mov	r1, r2
 8008c74:	288e      	cmp	r0, #142	; 0x8e
 8008c76:	f200 8130 	bhi.w	8008eda <_strerror_r+0x26e>
 8008c7a:	e8df f010 	tbh	[pc, r0, lsl #1]
 8008c7e:	0139      	.short	0x0139
 8008c80:	0092008f 	.word	0x0092008f
 8008c84:	00960094 	.word	0x00960094
 8008c88:	009a0098 	.word	0x009a0098
 8008c8c:	009e009c 	.word	0x009e009c
 8008c90:	00a400a2 	.word	0x00a400a2
 8008c94:	00aa00a8 	.word	0x00aa00a8
 8008c98:	00ae00ac 	.word	0x00ae00ac
 8008c9c:	00b0012e 	.word	0x00b0012e
 8008ca0:	00b400b2 	.word	0x00b400b2
 8008ca4:	00b800b6 	.word	0x00b800b6
 8008ca8:	00c000be 	.word	0x00c000be
 8008cac:	00c800c6 	.word	0x00c800c6
 8008cb0:	00cc00ca 	.word	0x00cc00ca
 8008cb4:	00d200ce 	.word	0x00d200ce
 8008cb8:	00d800d6 	.word	0x00d800d6
 8008cbc:	00dc00da 	.word	0x00dc00da
 8008cc0:	00e000de 	.word	0x00e000de
 8008cc4:	00e400e2 	.word	0x00e400e2
 8008cc8:	012e012e 	.word	0x012e012e
 8008ccc:	012e012e 	.word	0x012e012e
 8008cd0:	012e012e 	.word	0x012e012e
 8008cd4:	012e012e 	.word	0x012e012e
 8008cd8:	00ec00e8 	.word	0x00ec00e8
 8008cdc:	012e012e 	.word	0x012e012e
 8008ce0:	012e012e 	.word	0x012e012e
 8008ce4:	012e012e 	.word	0x012e012e
 8008ce8:	012e012e 	.word	0x012e012e
 8008cec:	012e012e 	.word	0x012e012e
 8008cf0:	012e012e 	.word	0x012e012e
 8008cf4:	00ee012e 	.word	0x00ee012e
 8008cf8:	00f00108 	.word	0x00f00108
 8008cfc:	012e00f2 	.word	0x012e00f2
 8008d00:	012e012e 	.word	0x012e012e
 8008d04:	012e00f4 	.word	0x012e00f4
 8008d08:	012e012e 	.word	0x012e012e
 8008d0c:	012e00f6 	.word	0x012e00f6
 8008d10:	00fa012e 	.word	0x00fa012e
 8008d14:	012e012e 	.word	0x012e012e
 8008d18:	012e00fc 	.word	0x012e00fc
 8008d1c:	012e012e 	.word	0x012e012e
 8008d20:	012e012e 	.word	0x012e012e
 8008d24:	012e012e 	.word	0x012e012e
 8008d28:	012e012e 	.word	0x012e012e
 8008d2c:	00fe012e 	.word	0x00fe012e
 8008d30:	0100012e 	.word	0x0100012e
 8008d34:	01040102 	.word	0x01040102
 8008d38:	012e012e 	.word	0x012e012e
 8008d3c:	012e0126 	.word	0x012e0126
 8008d40:	012e012e 	.word	0x012e012e
 8008d44:	012e012e 	.word	0x012e012e
 8008d48:	012e012e 	.word	0x012e012e
 8008d4c:	0114012e 	.word	0x0114012e
 8008d50:	010a0106 	.word	0x010a0106
 8008d54:	010e010c 	.word	0x010e010c
 8008d58:	012e0110 	.word	0x012e0110
 8008d5c:	01160112 	.word	0x01160112
 8008d60:	00ea011a 	.word	0x00ea011a
 8008d64:	012c00c2 	.word	0x012c00c2
 8008d68:	00d000ba 	.word	0x00d000ba
 8008d6c:	00a000bc 	.word	0x00a000bc
 8008d70:	012a00a6 	.word	0x012a00a6
 8008d74:	012e00f8 	.word	0x012e00f8
 8008d78:	00c40118 	.word	0x00c40118
 8008d7c:	011c011e 	.word	0x011c011e
 8008d80:	012e012e 	.word	0x012e012e
 8008d84:	012e012e 	.word	0x012e012e
 8008d88:	00d4012e 	.word	0x00d4012e
 8008d8c:	012e012e 	.word	0x012e012e
 8008d90:	00e6012e 	.word	0x00e6012e
 8008d94:	01200128 	.word	0x01200128
 8008d98:	01240122 	.word	0x01240122
 8008d9c:	4b55      	ldr	r3, [pc, #340]	; (8008ef4 <_strerror_r+0x288>)
 8008d9e:	4618      	mov	r0, r3
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	4b55      	ldr	r3, [pc, #340]	; (8008ef8 <_strerror_r+0x28c>)
 8008da4:	e7fb      	b.n	8008d9e <_strerror_r+0x132>
 8008da6:	4b55      	ldr	r3, [pc, #340]	; (8008efc <_strerror_r+0x290>)
 8008da8:	e7f9      	b.n	8008d9e <_strerror_r+0x132>
 8008daa:	4b55      	ldr	r3, [pc, #340]	; (8008f00 <_strerror_r+0x294>)
 8008dac:	e7f7      	b.n	8008d9e <_strerror_r+0x132>
 8008dae:	4b55      	ldr	r3, [pc, #340]	; (8008f04 <_strerror_r+0x298>)
 8008db0:	e7f5      	b.n	8008d9e <_strerror_r+0x132>
 8008db2:	4b55      	ldr	r3, [pc, #340]	; (8008f08 <_strerror_r+0x29c>)
 8008db4:	e7f3      	b.n	8008d9e <_strerror_r+0x132>
 8008db6:	4b55      	ldr	r3, [pc, #340]	; (8008f0c <_strerror_r+0x2a0>)
 8008db8:	e7f1      	b.n	8008d9e <_strerror_r+0x132>
 8008dba:	4b55      	ldr	r3, [pc, #340]	; (8008f10 <_strerror_r+0x2a4>)
 8008dbc:	e7ef      	b.n	8008d9e <_strerror_r+0x132>
 8008dbe:	4b55      	ldr	r3, [pc, #340]	; (8008f14 <_strerror_r+0x2a8>)
 8008dc0:	e7ed      	b.n	8008d9e <_strerror_r+0x132>
 8008dc2:	4b55      	ldr	r3, [pc, #340]	; (8008f18 <_strerror_r+0x2ac>)
 8008dc4:	e7eb      	b.n	8008d9e <_strerror_r+0x132>
 8008dc6:	4b55      	ldr	r3, [pc, #340]	; (8008f1c <_strerror_r+0x2b0>)
 8008dc8:	e7e9      	b.n	8008d9e <_strerror_r+0x132>
 8008dca:	4b55      	ldr	r3, [pc, #340]	; (8008f20 <_strerror_r+0x2b4>)
 8008dcc:	e7e7      	b.n	8008d9e <_strerror_r+0x132>
 8008dce:	4b55      	ldr	r3, [pc, #340]	; (8008f24 <_strerror_r+0x2b8>)
 8008dd0:	e7e5      	b.n	8008d9e <_strerror_r+0x132>
 8008dd2:	4b55      	ldr	r3, [pc, #340]	; (8008f28 <_strerror_r+0x2bc>)
 8008dd4:	e7e3      	b.n	8008d9e <_strerror_r+0x132>
 8008dd6:	4b55      	ldr	r3, [pc, #340]	; (8008f2c <_strerror_r+0x2c0>)
 8008dd8:	e7e1      	b.n	8008d9e <_strerror_r+0x132>
 8008dda:	4b55      	ldr	r3, [pc, #340]	; (8008f30 <_strerror_r+0x2c4>)
 8008ddc:	e7df      	b.n	8008d9e <_strerror_r+0x132>
 8008dde:	4b55      	ldr	r3, [pc, #340]	; (8008f34 <_strerror_r+0x2c8>)
 8008de0:	e7dd      	b.n	8008d9e <_strerror_r+0x132>
 8008de2:	4b55      	ldr	r3, [pc, #340]	; (8008f38 <_strerror_r+0x2cc>)
 8008de4:	e7db      	b.n	8008d9e <_strerror_r+0x132>
 8008de6:	4b55      	ldr	r3, [pc, #340]	; (8008f3c <_strerror_r+0x2d0>)
 8008de8:	e7d9      	b.n	8008d9e <_strerror_r+0x132>
 8008dea:	4b55      	ldr	r3, [pc, #340]	; (8008f40 <_strerror_r+0x2d4>)
 8008dec:	e7d7      	b.n	8008d9e <_strerror_r+0x132>
 8008dee:	4b55      	ldr	r3, [pc, #340]	; (8008f44 <_strerror_r+0x2d8>)
 8008df0:	e7d5      	b.n	8008d9e <_strerror_r+0x132>
 8008df2:	4b55      	ldr	r3, [pc, #340]	; (8008f48 <_strerror_r+0x2dc>)
 8008df4:	e7d3      	b.n	8008d9e <_strerror_r+0x132>
 8008df6:	4b55      	ldr	r3, [pc, #340]	; (8008f4c <_strerror_r+0x2e0>)
 8008df8:	e7d1      	b.n	8008d9e <_strerror_r+0x132>
 8008dfa:	4b55      	ldr	r3, [pc, #340]	; (8008f50 <_strerror_r+0x2e4>)
 8008dfc:	e7cf      	b.n	8008d9e <_strerror_r+0x132>
 8008dfe:	4b55      	ldr	r3, [pc, #340]	; (8008f54 <_strerror_r+0x2e8>)
 8008e00:	e7cd      	b.n	8008d9e <_strerror_r+0x132>
 8008e02:	4b55      	ldr	r3, [pc, #340]	; (8008f58 <_strerror_r+0x2ec>)
 8008e04:	e7cb      	b.n	8008d9e <_strerror_r+0x132>
 8008e06:	4b55      	ldr	r3, [pc, #340]	; (8008f5c <_strerror_r+0x2f0>)
 8008e08:	e7c9      	b.n	8008d9e <_strerror_r+0x132>
 8008e0a:	4b55      	ldr	r3, [pc, #340]	; (8008f60 <_strerror_r+0x2f4>)
 8008e0c:	e7c7      	b.n	8008d9e <_strerror_r+0x132>
 8008e0e:	4b55      	ldr	r3, [pc, #340]	; (8008f64 <_strerror_r+0x2f8>)
 8008e10:	e7c5      	b.n	8008d9e <_strerror_r+0x132>
 8008e12:	4b55      	ldr	r3, [pc, #340]	; (8008f68 <_strerror_r+0x2fc>)
 8008e14:	e7c3      	b.n	8008d9e <_strerror_r+0x132>
 8008e16:	4b55      	ldr	r3, [pc, #340]	; (8008f6c <_strerror_r+0x300>)
 8008e18:	e7c1      	b.n	8008d9e <_strerror_r+0x132>
 8008e1a:	4b55      	ldr	r3, [pc, #340]	; (8008f70 <_strerror_r+0x304>)
 8008e1c:	e7bf      	b.n	8008d9e <_strerror_r+0x132>
 8008e1e:	4b55      	ldr	r3, [pc, #340]	; (8008f74 <_strerror_r+0x308>)
 8008e20:	e7bd      	b.n	8008d9e <_strerror_r+0x132>
 8008e22:	4b55      	ldr	r3, [pc, #340]	; (8008f78 <_strerror_r+0x30c>)
 8008e24:	e7bb      	b.n	8008d9e <_strerror_r+0x132>
 8008e26:	4b55      	ldr	r3, [pc, #340]	; (8008f7c <_strerror_r+0x310>)
 8008e28:	e7b9      	b.n	8008d9e <_strerror_r+0x132>
 8008e2a:	4b55      	ldr	r3, [pc, #340]	; (8008f80 <_strerror_r+0x314>)
 8008e2c:	e7b7      	b.n	8008d9e <_strerror_r+0x132>
 8008e2e:	4b55      	ldr	r3, [pc, #340]	; (8008f84 <_strerror_r+0x318>)
 8008e30:	e7b5      	b.n	8008d9e <_strerror_r+0x132>
 8008e32:	4b55      	ldr	r3, [pc, #340]	; (8008f88 <_strerror_r+0x31c>)
 8008e34:	e7b3      	b.n	8008d9e <_strerror_r+0x132>
 8008e36:	4b55      	ldr	r3, [pc, #340]	; (8008f8c <_strerror_r+0x320>)
 8008e38:	e7b1      	b.n	8008d9e <_strerror_r+0x132>
 8008e3a:	4b55      	ldr	r3, [pc, #340]	; (8008f90 <_strerror_r+0x324>)
 8008e3c:	e7af      	b.n	8008d9e <_strerror_r+0x132>
 8008e3e:	4b55      	ldr	r3, [pc, #340]	; (8008f94 <_strerror_r+0x328>)
 8008e40:	e7ad      	b.n	8008d9e <_strerror_r+0x132>
 8008e42:	4b55      	ldr	r3, [pc, #340]	; (8008f98 <_strerror_r+0x32c>)
 8008e44:	e7ab      	b.n	8008d9e <_strerror_r+0x132>
 8008e46:	4b55      	ldr	r3, [pc, #340]	; (8008f9c <_strerror_r+0x330>)
 8008e48:	e7a9      	b.n	8008d9e <_strerror_r+0x132>
 8008e4a:	4b55      	ldr	r3, [pc, #340]	; (8008fa0 <_strerror_r+0x334>)
 8008e4c:	e7a7      	b.n	8008d9e <_strerror_r+0x132>
 8008e4e:	4b55      	ldr	r3, [pc, #340]	; (8008fa4 <_strerror_r+0x338>)
 8008e50:	e7a5      	b.n	8008d9e <_strerror_r+0x132>
 8008e52:	4b55      	ldr	r3, [pc, #340]	; (8008fa8 <_strerror_r+0x33c>)
 8008e54:	e7a3      	b.n	8008d9e <_strerror_r+0x132>
 8008e56:	4b55      	ldr	r3, [pc, #340]	; (8008fac <_strerror_r+0x340>)
 8008e58:	e7a1      	b.n	8008d9e <_strerror_r+0x132>
 8008e5a:	4b55      	ldr	r3, [pc, #340]	; (8008fb0 <_strerror_r+0x344>)
 8008e5c:	e79f      	b.n	8008d9e <_strerror_r+0x132>
 8008e5e:	4b55      	ldr	r3, [pc, #340]	; (8008fb4 <_strerror_r+0x348>)
 8008e60:	e79d      	b.n	8008d9e <_strerror_r+0x132>
 8008e62:	4b55      	ldr	r3, [pc, #340]	; (8008fb8 <_strerror_r+0x34c>)
 8008e64:	e79b      	b.n	8008d9e <_strerror_r+0x132>
 8008e66:	4b55      	ldr	r3, [pc, #340]	; (8008fbc <_strerror_r+0x350>)
 8008e68:	e799      	b.n	8008d9e <_strerror_r+0x132>
 8008e6a:	4b55      	ldr	r3, [pc, #340]	; (8008fc0 <_strerror_r+0x354>)
 8008e6c:	e797      	b.n	8008d9e <_strerror_r+0x132>
 8008e6e:	4b55      	ldr	r3, [pc, #340]	; (8008fc4 <_strerror_r+0x358>)
 8008e70:	e795      	b.n	8008d9e <_strerror_r+0x132>
 8008e72:	4b55      	ldr	r3, [pc, #340]	; (8008fc8 <_strerror_r+0x35c>)
 8008e74:	e793      	b.n	8008d9e <_strerror_r+0x132>
 8008e76:	4b55      	ldr	r3, [pc, #340]	; (8008fcc <_strerror_r+0x360>)
 8008e78:	e791      	b.n	8008d9e <_strerror_r+0x132>
 8008e7a:	4b55      	ldr	r3, [pc, #340]	; (8008fd0 <_strerror_r+0x364>)
 8008e7c:	e78f      	b.n	8008d9e <_strerror_r+0x132>
 8008e7e:	4b55      	ldr	r3, [pc, #340]	; (8008fd4 <_strerror_r+0x368>)
 8008e80:	e78d      	b.n	8008d9e <_strerror_r+0x132>
 8008e82:	4b55      	ldr	r3, [pc, #340]	; (8008fd8 <_strerror_r+0x36c>)
 8008e84:	e78b      	b.n	8008d9e <_strerror_r+0x132>
 8008e86:	4b55      	ldr	r3, [pc, #340]	; (8008fdc <_strerror_r+0x370>)
 8008e88:	e789      	b.n	8008d9e <_strerror_r+0x132>
 8008e8a:	4b55      	ldr	r3, [pc, #340]	; (8008fe0 <_strerror_r+0x374>)
 8008e8c:	e787      	b.n	8008d9e <_strerror_r+0x132>
 8008e8e:	4b55      	ldr	r3, [pc, #340]	; (8008fe4 <_strerror_r+0x378>)
 8008e90:	e785      	b.n	8008d9e <_strerror_r+0x132>
 8008e92:	4b55      	ldr	r3, [pc, #340]	; (8008fe8 <_strerror_r+0x37c>)
 8008e94:	e783      	b.n	8008d9e <_strerror_r+0x132>
 8008e96:	4b55      	ldr	r3, [pc, #340]	; (8008fec <_strerror_r+0x380>)
 8008e98:	e781      	b.n	8008d9e <_strerror_r+0x132>
 8008e9a:	4b55      	ldr	r3, [pc, #340]	; (8008ff0 <_strerror_r+0x384>)
 8008e9c:	e77f      	b.n	8008d9e <_strerror_r+0x132>
 8008e9e:	4b55      	ldr	r3, [pc, #340]	; (8008ff4 <_strerror_r+0x388>)
 8008ea0:	e77d      	b.n	8008d9e <_strerror_r+0x132>
 8008ea2:	4b55      	ldr	r3, [pc, #340]	; (8008ff8 <_strerror_r+0x38c>)
 8008ea4:	e77b      	b.n	8008d9e <_strerror_r+0x132>
 8008ea6:	4b55      	ldr	r3, [pc, #340]	; (8008ffc <_strerror_r+0x390>)
 8008ea8:	e779      	b.n	8008d9e <_strerror_r+0x132>
 8008eaa:	4b55      	ldr	r3, [pc, #340]	; (8009000 <_strerror_r+0x394>)
 8008eac:	e777      	b.n	8008d9e <_strerror_r+0x132>
 8008eae:	4b55      	ldr	r3, [pc, #340]	; (8009004 <_strerror_r+0x398>)
 8008eb0:	e775      	b.n	8008d9e <_strerror_r+0x132>
 8008eb2:	4b55      	ldr	r3, [pc, #340]	; (8009008 <_strerror_r+0x39c>)
 8008eb4:	e773      	b.n	8008d9e <_strerror_r+0x132>
 8008eb6:	4b55      	ldr	r3, [pc, #340]	; (800900c <_strerror_r+0x3a0>)
 8008eb8:	e771      	b.n	8008d9e <_strerror_r+0x132>
 8008eba:	4b55      	ldr	r3, [pc, #340]	; (8009010 <_strerror_r+0x3a4>)
 8008ebc:	e76f      	b.n	8008d9e <_strerror_r+0x132>
 8008ebe:	4b55      	ldr	r3, [pc, #340]	; (8009014 <_strerror_r+0x3a8>)
 8008ec0:	e76d      	b.n	8008d9e <_strerror_r+0x132>
 8008ec2:	4b55      	ldr	r3, [pc, #340]	; (8009018 <_strerror_r+0x3ac>)
 8008ec4:	e76b      	b.n	8008d9e <_strerror_r+0x132>
 8008ec6:	4b55      	ldr	r3, [pc, #340]	; (800901c <_strerror_r+0x3b0>)
 8008ec8:	e769      	b.n	8008d9e <_strerror_r+0x132>
 8008eca:	4b55      	ldr	r3, [pc, #340]	; (8009020 <_strerror_r+0x3b4>)
 8008ecc:	e767      	b.n	8008d9e <_strerror_r+0x132>
 8008ece:	4b55      	ldr	r3, [pc, #340]	; (8009024 <_strerror_r+0x3b8>)
 8008ed0:	e765      	b.n	8008d9e <_strerror_r+0x132>
 8008ed2:	4b55      	ldr	r3, [pc, #340]	; (8009028 <_strerror_r+0x3bc>)
 8008ed4:	e763      	b.n	8008d9e <_strerror_r+0x132>
 8008ed6:	4b55      	ldr	r3, [pc, #340]	; (800902c <_strerror_r+0x3c0>)
 8008ed8:	e761      	b.n	8008d9e <_strerror_r+0x132>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	bf14      	ite	ne
 8008ede:	461a      	movne	r2, r3
 8008ee0:	4622      	moveq	r2, r4
 8008ee2:	f000 f8a9 	bl	8009038 <_user_strerror>
 8008ee6:	4b52      	ldr	r3, [pc, #328]	; (8009030 <_strerror_r+0x3c4>)
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	bf18      	it	ne
 8008eec:	4603      	movne	r3, r0
 8008eee:	e756      	b.n	8008d9e <_strerror_r+0x132>
 8008ef0:	4b50      	ldr	r3, [pc, #320]	; (8009034 <_strerror_r+0x3c8>)
 8008ef2:	e754      	b.n	8008d9e <_strerror_r+0x132>
 8008ef4:	0800aeed 	.word	0x0800aeed
 8008ef8:	0800aef7 	.word	0x0800aef7
 8008efc:	0800af11 	.word	0x0800af11
 8008f00:	0800af21 	.word	0x0800af21
 8008f04:	0800af39 	.word	0x0800af39
 8008f08:	0800af43 	.word	0x0800af43
 8008f0c:	0800af5d 	.word	0x0800af5d
 8008f10:	0800af6f 	.word	0x0800af6f
 8008f14:	0800af81 	.word	0x0800af81
 8008f18:	0800af9a 	.word	0x0800af9a
 8008f1c:	0800afaa 	.word	0x0800afaa
 8008f20:	0800afb6 	.word	0x0800afb6
 8008f24:	0800afd3 	.word	0x0800afd3
 8008f28:	0800afe5 	.word	0x0800afe5
 8008f2c:	0800aff6 	.word	0x0800aff6
 8008f30:	0800b008 	.word	0x0800b008
 8008f34:	0800b014 	.word	0x0800b014
 8008f38:	0800b02c 	.word	0x0800b02c
 8008f3c:	0800b038 	.word	0x0800b038
 8008f40:	0800b04a 	.word	0x0800b04a
 8008f44:	0800b059 	.word	0x0800b059
 8008f48:	0800b069 	.word	0x0800b069
 8008f4c:	0800b076 	.word	0x0800b076
 8008f50:	0800b095 	.word	0x0800b095
 8008f54:	0800b0a4 	.word	0x0800b0a4
 8008f58:	0800b0b5 	.word	0x0800b0b5
 8008f5c:	0800b0d9 	.word	0x0800b0d9
 8008f60:	0800b0f7 	.word	0x0800b0f7
 8008f64:	0800b115 	.word	0x0800b115
 8008f68:	0800b135 	.word	0x0800b135
 8008f6c:	0800b14c 	.word	0x0800b14c
 8008f70:	0800b15b 	.word	0x0800b15b
 8008f74:	0800b16a 	.word	0x0800b16a
 8008f78:	0800b17e 	.word	0x0800b17e
 8008f7c:	0800b196 	.word	0x0800b196
 8008f80:	0800b1a4 	.word	0x0800b1a4
 8008f84:	0800b1b1 	.word	0x0800b1b1
 8008f88:	0800b1c7 	.word	0x0800b1c7
 8008f8c:	0800b1d6 	.word	0x0800b1d6
 8008f90:	0800b1e2 	.word	0x0800b1e2
 8008f94:	0800b211 	.word	0x0800b211
 8008f98:	0800b222 	.word	0x0800b222
 8008f9c:	0800b23d 	.word	0x0800b23d
 8008fa0:	0800b250 	.word	0x0800b250
 8008fa4:	0800b266 	.word	0x0800b266
 8008fa8:	0800b26f 	.word	0x0800b26f
 8008fac:	0800b286 	.word	0x0800b286
 8008fb0:	0800b28e 	.word	0x0800b28e
 8008fb4:	0800b29b 	.word	0x0800b29b
 8008fb8:	0800b2b0 	.word	0x0800b2b0
 8008fbc:	0800b2c4 	.word	0x0800b2c4
 8008fc0:	0800b2dc 	.word	0x0800b2dc
 8008fc4:	0800b2eb 	.word	0x0800b2eb
 8008fc8:	0800b2fc 	.word	0x0800b2fc
 8008fcc:	0800b30f 	.word	0x0800b30f
 8008fd0:	0800b31b 	.word	0x0800b31b
 8008fd4:	0800b334 	.word	0x0800b334
 8008fd8:	0800b348 	.word	0x0800b348
 8008fdc:	0800b363 	.word	0x0800b363
 8008fe0:	0800b37b 	.word	0x0800b37b
 8008fe4:	0800b395 	.word	0x0800b395
 8008fe8:	0800b39d 	.word	0x0800b39d
 8008fec:	0800b3cd 	.word	0x0800b3cd
 8008ff0:	0800b3ec 	.word	0x0800b3ec
 8008ff4:	0800b40b 	.word	0x0800b40b
 8008ff8:	0800b422 	.word	0x0800b422
 8008ffc:	0800b435 	.word	0x0800b435
 8009000:	0800b44e 	.word	0x0800b44e
 8009004:	0800b465 	.word	0x0800b465
 8009008:	0800b47b 	.word	0x0800b47b
 800900c:	0800b49c 	.word	0x0800b49c
 8009010:	0800b4b4 	.word	0x0800b4b4
 8009014:	0800b4d0 	.word	0x0800b4d0
 8009018:	0800b4e3 	.word	0x0800b4e3
 800901c:	0800b4f9 	.word	0x0800b4f9
 8009020:	0800b50d 	.word	0x0800b50d
 8009024:	0800b52f 	.word	0x0800b52f
 8009028:	0800b555 	.word	0x0800b555
 800902c:	0800b566 	.word	0x0800b566
 8009030:	0800aeec 	.word	0x0800aeec
 8009034:	0800b57b 	.word	0x0800b57b

08009038 <_user_strerror>:
 8009038:	2000      	movs	r0, #0
 800903a:	4770      	bx	lr

0800903c <__swbuf_r>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	460e      	mov	r6, r1
 8009040:	4614      	mov	r4, r2
 8009042:	4605      	mov	r5, r0
 8009044:	b118      	cbz	r0, 800904e <__swbuf_r+0x12>
 8009046:	6983      	ldr	r3, [r0, #24]
 8009048:	b90b      	cbnz	r3, 800904e <__swbuf_r+0x12>
 800904a:	f7ff f801 	bl	8008050 <__sinit>
 800904e:	4b21      	ldr	r3, [pc, #132]	; (80090d4 <__swbuf_r+0x98>)
 8009050:	429c      	cmp	r4, r3
 8009052:	d12b      	bne.n	80090ac <__swbuf_r+0x70>
 8009054:	686c      	ldr	r4, [r5, #4]
 8009056:	69a3      	ldr	r3, [r4, #24]
 8009058:	60a3      	str	r3, [r4, #8]
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	071a      	lsls	r2, r3, #28
 800905e:	d52f      	bpl.n	80090c0 <__swbuf_r+0x84>
 8009060:	6923      	ldr	r3, [r4, #16]
 8009062:	b36b      	cbz	r3, 80090c0 <__swbuf_r+0x84>
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	6820      	ldr	r0, [r4, #0]
 8009068:	1ac0      	subs	r0, r0, r3
 800906a:	6963      	ldr	r3, [r4, #20]
 800906c:	b2f6      	uxtb	r6, r6
 800906e:	4283      	cmp	r3, r0
 8009070:	4637      	mov	r7, r6
 8009072:	dc04      	bgt.n	800907e <__swbuf_r+0x42>
 8009074:	4621      	mov	r1, r4
 8009076:	4628      	mov	r0, r5
 8009078:	f7fe ff44 	bl	8007f04 <_fflush_r>
 800907c:	bb30      	cbnz	r0, 80090cc <__swbuf_r+0x90>
 800907e:	68a3      	ldr	r3, [r4, #8]
 8009080:	3b01      	subs	r3, #1
 8009082:	60a3      	str	r3, [r4, #8]
 8009084:	6823      	ldr	r3, [r4, #0]
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	6022      	str	r2, [r4, #0]
 800908a:	701e      	strb	r6, [r3, #0]
 800908c:	6963      	ldr	r3, [r4, #20]
 800908e:	3001      	adds	r0, #1
 8009090:	4283      	cmp	r3, r0
 8009092:	d004      	beq.n	800909e <__swbuf_r+0x62>
 8009094:	89a3      	ldrh	r3, [r4, #12]
 8009096:	07db      	lsls	r3, r3, #31
 8009098:	d506      	bpl.n	80090a8 <__swbuf_r+0x6c>
 800909a:	2e0a      	cmp	r6, #10
 800909c:	d104      	bne.n	80090a8 <__swbuf_r+0x6c>
 800909e:	4621      	mov	r1, r4
 80090a0:	4628      	mov	r0, r5
 80090a2:	f7fe ff2f 	bl	8007f04 <_fflush_r>
 80090a6:	b988      	cbnz	r0, 80090cc <__swbuf_r+0x90>
 80090a8:	4638      	mov	r0, r7
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <__swbuf_r+0x9c>)
 80090ae:	429c      	cmp	r4, r3
 80090b0:	d101      	bne.n	80090b6 <__swbuf_r+0x7a>
 80090b2:	68ac      	ldr	r4, [r5, #8]
 80090b4:	e7cf      	b.n	8009056 <__swbuf_r+0x1a>
 80090b6:	4b09      	ldr	r3, [pc, #36]	; (80090dc <__swbuf_r+0xa0>)
 80090b8:	429c      	cmp	r4, r3
 80090ba:	bf08      	it	eq
 80090bc:	68ec      	ldreq	r4, [r5, #12]
 80090be:	e7ca      	b.n	8009056 <__swbuf_r+0x1a>
 80090c0:	4621      	mov	r1, r4
 80090c2:	4628      	mov	r0, r5
 80090c4:	f000 f81e 	bl	8009104 <__swsetup_r>
 80090c8:	2800      	cmp	r0, #0
 80090ca:	d0cb      	beq.n	8009064 <__swbuf_r+0x28>
 80090cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090d0:	e7ea      	b.n	80090a8 <__swbuf_r+0x6c>
 80090d2:	bf00      	nop
 80090d4:	0800aea4 	.word	0x0800aea4
 80090d8:	0800aec4 	.word	0x0800aec4
 80090dc:	0800ae84 	.word	0x0800ae84

080090e0 <_write_r>:
 80090e0:	b538      	push	{r3, r4, r5, lr}
 80090e2:	4d07      	ldr	r5, [pc, #28]	; (8009100 <_write_r+0x20>)
 80090e4:	4604      	mov	r4, r0
 80090e6:	4608      	mov	r0, r1
 80090e8:	4611      	mov	r1, r2
 80090ea:	2200      	movs	r2, #0
 80090ec:	602a      	str	r2, [r5, #0]
 80090ee:	461a      	mov	r2, r3
 80090f0:	f7fe f818 	bl	8007124 <_write>
 80090f4:	1c43      	adds	r3, r0, #1
 80090f6:	d102      	bne.n	80090fe <_write_r+0x1e>
 80090f8:	682b      	ldr	r3, [r5, #0]
 80090fa:	b103      	cbz	r3, 80090fe <_write_r+0x1e>
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	bd38      	pop	{r3, r4, r5, pc}
 8009100:	20000390 	.word	0x20000390

08009104 <__swsetup_r>:
 8009104:	4b32      	ldr	r3, [pc, #200]	; (80091d0 <__swsetup_r+0xcc>)
 8009106:	b570      	push	{r4, r5, r6, lr}
 8009108:	681d      	ldr	r5, [r3, #0]
 800910a:	4606      	mov	r6, r0
 800910c:	460c      	mov	r4, r1
 800910e:	b125      	cbz	r5, 800911a <__swsetup_r+0x16>
 8009110:	69ab      	ldr	r3, [r5, #24]
 8009112:	b913      	cbnz	r3, 800911a <__swsetup_r+0x16>
 8009114:	4628      	mov	r0, r5
 8009116:	f7fe ff9b 	bl	8008050 <__sinit>
 800911a:	4b2e      	ldr	r3, [pc, #184]	; (80091d4 <__swsetup_r+0xd0>)
 800911c:	429c      	cmp	r4, r3
 800911e:	d10f      	bne.n	8009140 <__swsetup_r+0x3c>
 8009120:	686c      	ldr	r4, [r5, #4]
 8009122:	89a3      	ldrh	r3, [r4, #12]
 8009124:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009128:	0719      	lsls	r1, r3, #28
 800912a:	d42c      	bmi.n	8009186 <__swsetup_r+0x82>
 800912c:	06dd      	lsls	r5, r3, #27
 800912e:	d411      	bmi.n	8009154 <__swsetup_r+0x50>
 8009130:	2309      	movs	r3, #9
 8009132:	6033      	str	r3, [r6, #0]
 8009134:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009138:	81a3      	strh	r3, [r4, #12]
 800913a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800913e:	e03e      	b.n	80091be <__swsetup_r+0xba>
 8009140:	4b25      	ldr	r3, [pc, #148]	; (80091d8 <__swsetup_r+0xd4>)
 8009142:	429c      	cmp	r4, r3
 8009144:	d101      	bne.n	800914a <__swsetup_r+0x46>
 8009146:	68ac      	ldr	r4, [r5, #8]
 8009148:	e7eb      	b.n	8009122 <__swsetup_r+0x1e>
 800914a:	4b24      	ldr	r3, [pc, #144]	; (80091dc <__swsetup_r+0xd8>)
 800914c:	429c      	cmp	r4, r3
 800914e:	bf08      	it	eq
 8009150:	68ec      	ldreq	r4, [r5, #12]
 8009152:	e7e6      	b.n	8009122 <__swsetup_r+0x1e>
 8009154:	0758      	lsls	r0, r3, #29
 8009156:	d512      	bpl.n	800917e <__swsetup_r+0x7a>
 8009158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915a:	b141      	cbz	r1, 800916e <__swsetup_r+0x6a>
 800915c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <__swsetup_r+0x66>
 8009164:	4630      	mov	r0, r6
 8009166:	f7ff fa77 	bl	8008658 <_free_r>
 800916a:	2300      	movs	r3, #0
 800916c:	6363      	str	r3, [r4, #52]	; 0x34
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	2300      	movs	r3, #0
 8009178:	6063      	str	r3, [r4, #4]
 800917a:	6923      	ldr	r3, [r4, #16]
 800917c:	6023      	str	r3, [r4, #0]
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	f043 0308 	orr.w	r3, r3, #8
 8009184:	81a3      	strh	r3, [r4, #12]
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	b94b      	cbnz	r3, 800919e <__swsetup_r+0x9a>
 800918a:	89a3      	ldrh	r3, [r4, #12]
 800918c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009194:	d003      	beq.n	800919e <__swsetup_r+0x9a>
 8009196:	4621      	mov	r1, r4
 8009198:	4630      	mov	r0, r6
 800919a:	f7ff f9ff 	bl	800859c <__smakebuf_r>
 800919e:	89a0      	ldrh	r0, [r4, #12]
 80091a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091a4:	f010 0301 	ands.w	r3, r0, #1
 80091a8:	d00a      	beq.n	80091c0 <__swsetup_r+0xbc>
 80091aa:	2300      	movs	r3, #0
 80091ac:	60a3      	str	r3, [r4, #8]
 80091ae:	6963      	ldr	r3, [r4, #20]
 80091b0:	425b      	negs	r3, r3
 80091b2:	61a3      	str	r3, [r4, #24]
 80091b4:	6923      	ldr	r3, [r4, #16]
 80091b6:	b943      	cbnz	r3, 80091ca <__swsetup_r+0xc6>
 80091b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091bc:	d1ba      	bne.n	8009134 <__swsetup_r+0x30>
 80091be:	bd70      	pop	{r4, r5, r6, pc}
 80091c0:	0781      	lsls	r1, r0, #30
 80091c2:	bf58      	it	pl
 80091c4:	6963      	ldrpl	r3, [r4, #20]
 80091c6:	60a3      	str	r3, [r4, #8]
 80091c8:	e7f4      	b.n	80091b4 <__swsetup_r+0xb0>
 80091ca:	2000      	movs	r0, #0
 80091cc:	e7f7      	b.n	80091be <__swsetup_r+0xba>
 80091ce:	bf00      	nop
 80091d0:	20000034 	.word	0x20000034
 80091d4:	0800aea4 	.word	0x0800aea4
 80091d8:	0800aec4 	.word	0x0800aec4
 80091dc:	0800ae84 	.word	0x0800ae84

080091e0 <_close_r>:
 80091e0:	b538      	push	{r3, r4, r5, lr}
 80091e2:	4d06      	ldr	r5, [pc, #24]	; (80091fc <_close_r+0x1c>)
 80091e4:	2300      	movs	r3, #0
 80091e6:	4604      	mov	r4, r0
 80091e8:	4608      	mov	r0, r1
 80091ea:	602b      	str	r3, [r5, #0]
 80091ec:	f7f9 feb5 	bl	8002f5a <_close>
 80091f0:	1c43      	adds	r3, r0, #1
 80091f2:	d102      	bne.n	80091fa <_close_r+0x1a>
 80091f4:	682b      	ldr	r3, [r5, #0]
 80091f6:	b103      	cbz	r3, 80091fa <_close_r+0x1a>
 80091f8:	6023      	str	r3, [r4, #0]
 80091fa:	bd38      	pop	{r3, r4, r5, pc}
 80091fc:	20000390 	.word	0x20000390

08009200 <fileno>:
 8009200:	b570      	push	{r4, r5, r6, lr}
 8009202:	4e1a      	ldr	r6, [pc, #104]	; (800926c <fileno+0x6c>)
 8009204:	6835      	ldr	r5, [r6, #0]
 8009206:	4604      	mov	r4, r0
 8009208:	b125      	cbz	r5, 8009214 <fileno+0x14>
 800920a:	69ab      	ldr	r3, [r5, #24]
 800920c:	b913      	cbnz	r3, 8009214 <fileno+0x14>
 800920e:	4628      	mov	r0, r5
 8009210:	f7fe ff1e 	bl	8008050 <__sinit>
 8009214:	4b16      	ldr	r3, [pc, #88]	; (8009270 <fileno+0x70>)
 8009216:	429c      	cmp	r4, r3
 8009218:	d118      	bne.n	800924c <fileno+0x4c>
 800921a:	686c      	ldr	r4, [r5, #4]
 800921c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800921e:	07d8      	lsls	r0, r3, #31
 8009220:	d405      	bmi.n	800922e <fileno+0x2e>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	0599      	lsls	r1, r3, #22
 8009226:	d402      	bmi.n	800922e <fileno+0x2e>
 8009228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800922a:	f7ff f98f 	bl	800854c <__retarget_lock_acquire_recursive>
 800922e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009232:	b1ab      	cbz	r3, 8009260 <fileno+0x60>
 8009234:	f9b4 500e 	ldrsh.w	r5, [r4, #14]
 8009238:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800923a:	07d2      	lsls	r2, r2, #31
 800923c:	d404      	bmi.n	8009248 <fileno+0x48>
 800923e:	059b      	lsls	r3, r3, #22
 8009240:	d402      	bmi.n	8009248 <fileno+0x48>
 8009242:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009244:	f7ff f983 	bl	800854e <__retarget_lock_release_recursive>
 8009248:	4628      	mov	r0, r5
 800924a:	bd70      	pop	{r4, r5, r6, pc}
 800924c:	4b09      	ldr	r3, [pc, #36]	; (8009274 <fileno+0x74>)
 800924e:	429c      	cmp	r4, r3
 8009250:	d101      	bne.n	8009256 <fileno+0x56>
 8009252:	68ac      	ldr	r4, [r5, #8]
 8009254:	e7e2      	b.n	800921c <fileno+0x1c>
 8009256:	4b08      	ldr	r3, [pc, #32]	; (8009278 <fileno+0x78>)
 8009258:	429c      	cmp	r4, r3
 800925a:	bf08      	it	eq
 800925c:	68ec      	ldreq	r4, [r5, #12]
 800925e:	e7dd      	b.n	800921c <fileno+0x1c>
 8009260:	6832      	ldr	r2, [r6, #0]
 8009262:	2109      	movs	r1, #9
 8009264:	6011      	str	r1, [r2, #0]
 8009266:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800926a:	e7e5      	b.n	8009238 <fileno+0x38>
 800926c:	20000034 	.word	0x20000034
 8009270:	0800aea4 	.word	0x0800aea4
 8009274:	0800aec4 	.word	0x0800aec4
 8009278:	0800ae84 	.word	0x0800ae84

0800927c <__sflags>:
 800927c:	780b      	ldrb	r3, [r1, #0]
 800927e:	2b72      	cmp	r3, #114	; 0x72
 8009280:	b530      	push	{r4, r5, lr}
 8009282:	d022      	beq.n	80092ca <__sflags+0x4e>
 8009284:	2b77      	cmp	r3, #119	; 0x77
 8009286:	d024      	beq.n	80092d2 <__sflags+0x56>
 8009288:	2b61      	cmp	r3, #97	; 0x61
 800928a:	d027      	beq.n	80092dc <__sflags+0x60>
 800928c:	2316      	movs	r3, #22
 800928e:	6003      	str	r3, [r0, #0]
 8009290:	2000      	movs	r0, #0
 8009292:	bd30      	pop	{r4, r5, pc}
 8009294:	2d62      	cmp	r5, #98	; 0x62
 8009296:	d012      	beq.n	80092be <__sflags+0x42>
 8009298:	2d78      	cmp	r5, #120	; 0x78
 800929a:	d013      	beq.n	80092c4 <__sflags+0x48>
 800929c:	2d2b      	cmp	r5, #43	; 0x2b
 800929e:	d107      	bne.n	80092b0 <__sflags+0x34>
 80092a0:	f020 001c 	bic.w	r0, r0, #28
 80092a4:	f023 0303 	bic.w	r3, r3, #3
 80092a8:	f040 0010 	orr.w	r0, r0, #16
 80092ac:	f043 0302 	orr.w	r3, r3, #2
 80092b0:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80092b4:	2d00      	cmp	r5, #0
 80092b6:	d1ed      	bne.n	8009294 <__sflags+0x18>
 80092b8:	4323      	orrs	r3, r4
 80092ba:	6013      	str	r3, [r2, #0]
 80092bc:	e7e9      	b.n	8009292 <__sflags+0x16>
 80092be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c2:	e7f5      	b.n	80092b0 <__sflags+0x34>
 80092c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80092c8:	e7f2      	b.n	80092b0 <__sflags+0x34>
 80092ca:	2400      	movs	r4, #0
 80092cc:	4623      	mov	r3, r4
 80092ce:	2004      	movs	r0, #4
 80092d0:	e7ee      	b.n	80092b0 <__sflags+0x34>
 80092d2:	f44f 64c0 	mov.w	r4, #1536	; 0x600
 80092d6:	2301      	movs	r3, #1
 80092d8:	2008      	movs	r0, #8
 80092da:	e7e9      	b.n	80092b0 <__sflags+0x34>
 80092dc:	f44f 7402 	mov.w	r4, #520	; 0x208
 80092e0:	2301      	movs	r3, #1
 80092e2:	f44f 7084 	mov.w	r0, #264	; 0x108
 80092e6:	e7e3      	b.n	80092b0 <__sflags+0x34>

080092e8 <_fstat_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d07      	ldr	r5, [pc, #28]	; (8009308 <_fstat_r+0x20>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	602b      	str	r3, [r5, #0]
 80092f6:	f7f9 fe3c 	bl	8002f72 <_fstat>
 80092fa:	1c43      	adds	r3, r0, #1
 80092fc:	d102      	bne.n	8009304 <_fstat_r+0x1c>
 80092fe:	682b      	ldr	r3, [r5, #0]
 8009300:	b103      	cbz	r3, 8009304 <_fstat_r+0x1c>
 8009302:	6023      	str	r3, [r4, #0]
 8009304:	bd38      	pop	{r3, r4, r5, pc}
 8009306:	bf00      	nop
 8009308:	20000390 	.word	0x20000390

0800930c <_isatty_r>:
 800930c:	b538      	push	{r3, r4, r5, lr}
 800930e:	4d06      	ldr	r5, [pc, #24]	; (8009328 <_isatty_r+0x1c>)
 8009310:	2300      	movs	r3, #0
 8009312:	4604      	mov	r4, r0
 8009314:	4608      	mov	r0, r1
 8009316:	602b      	str	r3, [r5, #0]
 8009318:	f7f9 fe3b 	bl	8002f92 <_isatty>
 800931c:	1c43      	adds	r3, r0, #1
 800931e:	d102      	bne.n	8009326 <_isatty_r+0x1a>
 8009320:	682b      	ldr	r3, [r5, #0]
 8009322:	b103      	cbz	r3, 8009326 <_isatty_r+0x1a>
 8009324:	6023      	str	r3, [r4, #0]
 8009326:	bd38      	pop	{r3, r4, r5, pc}
 8009328:	20000390 	.word	0x20000390

0800932c <_lseek_r>:
 800932c:	b538      	push	{r3, r4, r5, lr}
 800932e:	4d07      	ldr	r5, [pc, #28]	; (800934c <_lseek_r+0x20>)
 8009330:	4604      	mov	r4, r0
 8009332:	4608      	mov	r0, r1
 8009334:	4611      	mov	r1, r2
 8009336:	2200      	movs	r2, #0
 8009338:	602a      	str	r2, [r5, #0]
 800933a:	461a      	mov	r2, r3
 800933c:	f7f9 fe34 	bl	8002fa8 <_lseek>
 8009340:	1c43      	adds	r3, r0, #1
 8009342:	d102      	bne.n	800934a <_lseek_r+0x1e>
 8009344:	682b      	ldr	r3, [r5, #0]
 8009346:	b103      	cbz	r3, 800934a <_lseek_r+0x1e>
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	bd38      	pop	{r3, r4, r5, pc}
 800934c:	20000390 	.word	0x20000390

08009350 <__malloc_lock>:
 8009350:	4801      	ldr	r0, [pc, #4]	; (8009358 <__malloc_lock+0x8>)
 8009352:	f7ff b8fb 	b.w	800854c <__retarget_lock_acquire_recursive>
 8009356:	bf00      	nop
 8009358:	20000384 	.word	0x20000384

0800935c <__malloc_unlock>:
 800935c:	4801      	ldr	r0, [pc, #4]	; (8009364 <__malloc_unlock+0x8>)
 800935e:	f7ff b8f6 	b.w	800854e <__retarget_lock_release_recursive>
 8009362:	bf00      	nop
 8009364:	20000384 	.word	0x20000384

08009368 <__sfputc_r>:
 8009368:	6893      	ldr	r3, [r2, #8]
 800936a:	3b01      	subs	r3, #1
 800936c:	2b00      	cmp	r3, #0
 800936e:	b410      	push	{r4}
 8009370:	6093      	str	r3, [r2, #8]
 8009372:	da08      	bge.n	8009386 <__sfputc_r+0x1e>
 8009374:	6994      	ldr	r4, [r2, #24]
 8009376:	42a3      	cmp	r3, r4
 8009378:	db01      	blt.n	800937e <__sfputc_r+0x16>
 800937a:	290a      	cmp	r1, #10
 800937c:	d103      	bne.n	8009386 <__sfputc_r+0x1e>
 800937e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009382:	f7ff be5b 	b.w	800903c <__swbuf_r>
 8009386:	6813      	ldr	r3, [r2, #0]
 8009388:	1c58      	adds	r0, r3, #1
 800938a:	6010      	str	r0, [r2, #0]
 800938c:	7019      	strb	r1, [r3, #0]
 800938e:	4608      	mov	r0, r1
 8009390:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009394:	4770      	bx	lr

08009396 <__sfputs_r>:
 8009396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	4614      	mov	r4, r2
 800939e:	18d5      	adds	r5, r2, r3
 80093a0:	42ac      	cmp	r4, r5
 80093a2:	d101      	bne.n	80093a8 <__sfputs_r+0x12>
 80093a4:	2000      	movs	r0, #0
 80093a6:	e007      	b.n	80093b8 <__sfputs_r+0x22>
 80093a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ac:	463a      	mov	r2, r7
 80093ae:	4630      	mov	r0, r6
 80093b0:	f7ff ffda 	bl	8009368 <__sfputc_r>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d1f3      	bne.n	80093a0 <__sfputs_r+0xa>
 80093b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093bc <_vfiprintf_r>:
 80093bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c0:	460d      	mov	r5, r1
 80093c2:	b09d      	sub	sp, #116	; 0x74
 80093c4:	4614      	mov	r4, r2
 80093c6:	4698      	mov	r8, r3
 80093c8:	4606      	mov	r6, r0
 80093ca:	b118      	cbz	r0, 80093d4 <_vfiprintf_r+0x18>
 80093cc:	6983      	ldr	r3, [r0, #24]
 80093ce:	b90b      	cbnz	r3, 80093d4 <_vfiprintf_r+0x18>
 80093d0:	f7fe fe3e 	bl	8008050 <__sinit>
 80093d4:	4b89      	ldr	r3, [pc, #548]	; (80095fc <_vfiprintf_r+0x240>)
 80093d6:	429d      	cmp	r5, r3
 80093d8:	d11b      	bne.n	8009412 <_vfiprintf_r+0x56>
 80093da:	6875      	ldr	r5, [r6, #4]
 80093dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093de:	07d9      	lsls	r1, r3, #31
 80093e0:	d405      	bmi.n	80093ee <_vfiprintf_r+0x32>
 80093e2:	89ab      	ldrh	r3, [r5, #12]
 80093e4:	059a      	lsls	r2, r3, #22
 80093e6:	d402      	bmi.n	80093ee <_vfiprintf_r+0x32>
 80093e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ea:	f7ff f8af 	bl	800854c <__retarget_lock_acquire_recursive>
 80093ee:	89ab      	ldrh	r3, [r5, #12]
 80093f0:	071b      	lsls	r3, r3, #28
 80093f2:	d501      	bpl.n	80093f8 <_vfiprintf_r+0x3c>
 80093f4:	692b      	ldr	r3, [r5, #16]
 80093f6:	b9eb      	cbnz	r3, 8009434 <_vfiprintf_r+0x78>
 80093f8:	4629      	mov	r1, r5
 80093fa:	4630      	mov	r0, r6
 80093fc:	f7ff fe82 	bl	8009104 <__swsetup_r>
 8009400:	b1c0      	cbz	r0, 8009434 <_vfiprintf_r+0x78>
 8009402:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009404:	07dc      	lsls	r4, r3, #31
 8009406:	d50e      	bpl.n	8009426 <_vfiprintf_r+0x6a>
 8009408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800940c:	b01d      	add	sp, #116	; 0x74
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	4b7b      	ldr	r3, [pc, #492]	; (8009600 <_vfiprintf_r+0x244>)
 8009414:	429d      	cmp	r5, r3
 8009416:	d101      	bne.n	800941c <_vfiprintf_r+0x60>
 8009418:	68b5      	ldr	r5, [r6, #8]
 800941a:	e7df      	b.n	80093dc <_vfiprintf_r+0x20>
 800941c:	4b79      	ldr	r3, [pc, #484]	; (8009604 <_vfiprintf_r+0x248>)
 800941e:	429d      	cmp	r5, r3
 8009420:	bf08      	it	eq
 8009422:	68f5      	ldreq	r5, [r6, #12]
 8009424:	e7da      	b.n	80093dc <_vfiprintf_r+0x20>
 8009426:	89ab      	ldrh	r3, [r5, #12]
 8009428:	0598      	lsls	r0, r3, #22
 800942a:	d4ed      	bmi.n	8009408 <_vfiprintf_r+0x4c>
 800942c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800942e:	f7ff f88e 	bl	800854e <__retarget_lock_release_recursive>
 8009432:	e7e9      	b.n	8009408 <_vfiprintf_r+0x4c>
 8009434:	2300      	movs	r3, #0
 8009436:	9309      	str	r3, [sp, #36]	; 0x24
 8009438:	2320      	movs	r3, #32
 800943a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800943e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009442:	2330      	movs	r3, #48	; 0x30
 8009444:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009608 <_vfiprintf_r+0x24c>
 8009448:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800944c:	f04f 0901 	mov.w	r9, #1
 8009450:	4623      	mov	r3, r4
 8009452:	469a      	mov	sl, r3
 8009454:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009458:	b10a      	cbz	r2, 800945e <_vfiprintf_r+0xa2>
 800945a:	2a25      	cmp	r2, #37	; 0x25
 800945c:	d1f9      	bne.n	8009452 <_vfiprintf_r+0x96>
 800945e:	ebba 0b04 	subs.w	fp, sl, r4
 8009462:	d00b      	beq.n	800947c <_vfiprintf_r+0xc0>
 8009464:	465b      	mov	r3, fp
 8009466:	4622      	mov	r2, r4
 8009468:	4629      	mov	r1, r5
 800946a:	4630      	mov	r0, r6
 800946c:	f7ff ff93 	bl	8009396 <__sfputs_r>
 8009470:	3001      	adds	r0, #1
 8009472:	f000 80aa 	beq.w	80095ca <_vfiprintf_r+0x20e>
 8009476:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009478:	445a      	add	r2, fp
 800947a:	9209      	str	r2, [sp, #36]	; 0x24
 800947c:	f89a 3000 	ldrb.w	r3, [sl]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 80a2 	beq.w	80095ca <_vfiprintf_r+0x20e>
 8009486:	2300      	movs	r3, #0
 8009488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800948c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009490:	f10a 0a01 	add.w	sl, sl, #1
 8009494:	9304      	str	r3, [sp, #16]
 8009496:	9307      	str	r3, [sp, #28]
 8009498:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800949c:	931a      	str	r3, [sp, #104]	; 0x68
 800949e:	4654      	mov	r4, sl
 80094a0:	2205      	movs	r2, #5
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4858      	ldr	r0, [pc, #352]	; (8009608 <_vfiprintf_r+0x24c>)
 80094a8:	f7f6 fe72 	bl	8000190 <memchr>
 80094ac:	9a04      	ldr	r2, [sp, #16]
 80094ae:	b9d8      	cbnz	r0, 80094e8 <_vfiprintf_r+0x12c>
 80094b0:	06d1      	lsls	r1, r2, #27
 80094b2:	bf44      	itt	mi
 80094b4:	2320      	movmi	r3, #32
 80094b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094ba:	0713      	lsls	r3, r2, #28
 80094bc:	bf44      	itt	mi
 80094be:	232b      	movmi	r3, #43	; 0x2b
 80094c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094c4:	f89a 3000 	ldrb.w	r3, [sl]
 80094c8:	2b2a      	cmp	r3, #42	; 0x2a
 80094ca:	d015      	beq.n	80094f8 <_vfiprintf_r+0x13c>
 80094cc:	9a07      	ldr	r2, [sp, #28]
 80094ce:	4654      	mov	r4, sl
 80094d0:	2000      	movs	r0, #0
 80094d2:	f04f 0c0a 	mov.w	ip, #10
 80094d6:	4621      	mov	r1, r4
 80094d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094dc:	3b30      	subs	r3, #48	; 0x30
 80094de:	2b09      	cmp	r3, #9
 80094e0:	d94e      	bls.n	8009580 <_vfiprintf_r+0x1c4>
 80094e2:	b1b0      	cbz	r0, 8009512 <_vfiprintf_r+0x156>
 80094e4:	9207      	str	r2, [sp, #28]
 80094e6:	e014      	b.n	8009512 <_vfiprintf_r+0x156>
 80094e8:	eba0 0308 	sub.w	r3, r0, r8
 80094ec:	fa09 f303 	lsl.w	r3, r9, r3
 80094f0:	4313      	orrs	r3, r2
 80094f2:	9304      	str	r3, [sp, #16]
 80094f4:	46a2      	mov	sl, r4
 80094f6:	e7d2      	b.n	800949e <_vfiprintf_r+0xe2>
 80094f8:	9b03      	ldr	r3, [sp, #12]
 80094fa:	1d19      	adds	r1, r3, #4
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	9103      	str	r1, [sp, #12]
 8009500:	2b00      	cmp	r3, #0
 8009502:	bfbb      	ittet	lt
 8009504:	425b      	neglt	r3, r3
 8009506:	f042 0202 	orrlt.w	r2, r2, #2
 800950a:	9307      	strge	r3, [sp, #28]
 800950c:	9307      	strlt	r3, [sp, #28]
 800950e:	bfb8      	it	lt
 8009510:	9204      	strlt	r2, [sp, #16]
 8009512:	7823      	ldrb	r3, [r4, #0]
 8009514:	2b2e      	cmp	r3, #46	; 0x2e
 8009516:	d10c      	bne.n	8009532 <_vfiprintf_r+0x176>
 8009518:	7863      	ldrb	r3, [r4, #1]
 800951a:	2b2a      	cmp	r3, #42	; 0x2a
 800951c:	d135      	bne.n	800958a <_vfiprintf_r+0x1ce>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	1d1a      	adds	r2, r3, #4
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	9203      	str	r2, [sp, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfb8      	it	lt
 800952a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800952e:	3402      	adds	r4, #2
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009618 <_vfiprintf_r+0x25c>
 8009536:	7821      	ldrb	r1, [r4, #0]
 8009538:	2203      	movs	r2, #3
 800953a:	4650      	mov	r0, sl
 800953c:	f7f6 fe28 	bl	8000190 <memchr>
 8009540:	b140      	cbz	r0, 8009554 <_vfiprintf_r+0x198>
 8009542:	2340      	movs	r3, #64	; 0x40
 8009544:	eba0 000a 	sub.w	r0, r0, sl
 8009548:	fa03 f000 	lsl.w	r0, r3, r0
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	4303      	orrs	r3, r0
 8009550:	3401      	adds	r4, #1
 8009552:	9304      	str	r3, [sp, #16]
 8009554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009558:	482c      	ldr	r0, [pc, #176]	; (800960c <_vfiprintf_r+0x250>)
 800955a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800955e:	2206      	movs	r2, #6
 8009560:	f7f6 fe16 	bl	8000190 <memchr>
 8009564:	2800      	cmp	r0, #0
 8009566:	d03f      	beq.n	80095e8 <_vfiprintf_r+0x22c>
 8009568:	4b29      	ldr	r3, [pc, #164]	; (8009610 <_vfiprintf_r+0x254>)
 800956a:	bb1b      	cbnz	r3, 80095b4 <_vfiprintf_r+0x1f8>
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	3307      	adds	r3, #7
 8009570:	f023 0307 	bic.w	r3, r3, #7
 8009574:	3308      	adds	r3, #8
 8009576:	9303      	str	r3, [sp, #12]
 8009578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800957a:	443b      	add	r3, r7
 800957c:	9309      	str	r3, [sp, #36]	; 0x24
 800957e:	e767      	b.n	8009450 <_vfiprintf_r+0x94>
 8009580:	fb0c 3202 	mla	r2, ip, r2, r3
 8009584:	460c      	mov	r4, r1
 8009586:	2001      	movs	r0, #1
 8009588:	e7a5      	b.n	80094d6 <_vfiprintf_r+0x11a>
 800958a:	2300      	movs	r3, #0
 800958c:	3401      	adds	r4, #1
 800958e:	9305      	str	r3, [sp, #20]
 8009590:	4619      	mov	r1, r3
 8009592:	f04f 0c0a 	mov.w	ip, #10
 8009596:	4620      	mov	r0, r4
 8009598:	f810 2b01 	ldrb.w	r2, [r0], #1
 800959c:	3a30      	subs	r2, #48	; 0x30
 800959e:	2a09      	cmp	r2, #9
 80095a0:	d903      	bls.n	80095aa <_vfiprintf_r+0x1ee>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d0c5      	beq.n	8009532 <_vfiprintf_r+0x176>
 80095a6:	9105      	str	r1, [sp, #20]
 80095a8:	e7c3      	b.n	8009532 <_vfiprintf_r+0x176>
 80095aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80095ae:	4604      	mov	r4, r0
 80095b0:	2301      	movs	r3, #1
 80095b2:	e7f0      	b.n	8009596 <_vfiprintf_r+0x1da>
 80095b4:	ab03      	add	r3, sp, #12
 80095b6:	9300      	str	r3, [sp, #0]
 80095b8:	462a      	mov	r2, r5
 80095ba:	4b16      	ldr	r3, [pc, #88]	; (8009614 <_vfiprintf_r+0x258>)
 80095bc:	a904      	add	r1, sp, #16
 80095be:	4630      	mov	r0, r6
 80095c0:	f3af 8000 	nop.w
 80095c4:	4607      	mov	r7, r0
 80095c6:	1c78      	adds	r0, r7, #1
 80095c8:	d1d6      	bne.n	8009578 <_vfiprintf_r+0x1bc>
 80095ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095cc:	07d9      	lsls	r1, r3, #31
 80095ce:	d405      	bmi.n	80095dc <_vfiprintf_r+0x220>
 80095d0:	89ab      	ldrh	r3, [r5, #12]
 80095d2:	059a      	lsls	r2, r3, #22
 80095d4:	d402      	bmi.n	80095dc <_vfiprintf_r+0x220>
 80095d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095d8:	f7fe ffb9 	bl	800854e <__retarget_lock_release_recursive>
 80095dc:	89ab      	ldrh	r3, [r5, #12]
 80095de:	065b      	lsls	r3, r3, #25
 80095e0:	f53f af12 	bmi.w	8009408 <_vfiprintf_r+0x4c>
 80095e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e6:	e711      	b.n	800940c <_vfiprintf_r+0x50>
 80095e8:	ab03      	add	r3, sp, #12
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	462a      	mov	r2, r5
 80095ee:	4b09      	ldr	r3, [pc, #36]	; (8009614 <_vfiprintf_r+0x258>)
 80095f0:	a904      	add	r1, sp, #16
 80095f2:	4630      	mov	r0, r6
 80095f4:	f000 f880 	bl	80096f8 <_printf_i>
 80095f8:	e7e4      	b.n	80095c4 <_vfiprintf_r+0x208>
 80095fa:	bf00      	nop
 80095fc:	0800aea4 	.word	0x0800aea4
 8009600:	0800aec4 	.word	0x0800aec4
 8009604:	0800ae84 	.word	0x0800ae84
 8009608:	0800b583 	.word	0x0800b583
 800960c:	0800b58d 	.word	0x0800b58d
 8009610:	00000000 	.word	0x00000000
 8009614:	08009397 	.word	0x08009397
 8009618:	0800b589 	.word	0x0800b589

0800961c <_printf_common>:
 800961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009620:	4616      	mov	r6, r2
 8009622:	4699      	mov	r9, r3
 8009624:	688a      	ldr	r2, [r1, #8]
 8009626:	690b      	ldr	r3, [r1, #16]
 8009628:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800962c:	4293      	cmp	r3, r2
 800962e:	bfb8      	it	lt
 8009630:	4613      	movlt	r3, r2
 8009632:	6033      	str	r3, [r6, #0]
 8009634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009638:	4607      	mov	r7, r0
 800963a:	460c      	mov	r4, r1
 800963c:	b10a      	cbz	r2, 8009642 <_printf_common+0x26>
 800963e:	3301      	adds	r3, #1
 8009640:	6033      	str	r3, [r6, #0]
 8009642:	6823      	ldr	r3, [r4, #0]
 8009644:	0699      	lsls	r1, r3, #26
 8009646:	bf42      	ittt	mi
 8009648:	6833      	ldrmi	r3, [r6, #0]
 800964a:	3302      	addmi	r3, #2
 800964c:	6033      	strmi	r3, [r6, #0]
 800964e:	6825      	ldr	r5, [r4, #0]
 8009650:	f015 0506 	ands.w	r5, r5, #6
 8009654:	d106      	bne.n	8009664 <_printf_common+0x48>
 8009656:	f104 0a19 	add.w	sl, r4, #25
 800965a:	68e3      	ldr	r3, [r4, #12]
 800965c:	6832      	ldr	r2, [r6, #0]
 800965e:	1a9b      	subs	r3, r3, r2
 8009660:	42ab      	cmp	r3, r5
 8009662:	dc26      	bgt.n	80096b2 <_printf_common+0x96>
 8009664:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009668:	1e13      	subs	r3, r2, #0
 800966a:	6822      	ldr	r2, [r4, #0]
 800966c:	bf18      	it	ne
 800966e:	2301      	movne	r3, #1
 8009670:	0692      	lsls	r2, r2, #26
 8009672:	d42b      	bmi.n	80096cc <_printf_common+0xb0>
 8009674:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009678:	4649      	mov	r1, r9
 800967a:	4638      	mov	r0, r7
 800967c:	47c0      	blx	r8
 800967e:	3001      	adds	r0, #1
 8009680:	d01e      	beq.n	80096c0 <_printf_common+0xa4>
 8009682:	6823      	ldr	r3, [r4, #0]
 8009684:	68e5      	ldr	r5, [r4, #12]
 8009686:	6832      	ldr	r2, [r6, #0]
 8009688:	f003 0306 	and.w	r3, r3, #6
 800968c:	2b04      	cmp	r3, #4
 800968e:	bf08      	it	eq
 8009690:	1aad      	subeq	r5, r5, r2
 8009692:	68a3      	ldr	r3, [r4, #8]
 8009694:	6922      	ldr	r2, [r4, #16]
 8009696:	bf0c      	ite	eq
 8009698:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800969c:	2500      	movne	r5, #0
 800969e:	4293      	cmp	r3, r2
 80096a0:	bfc4      	itt	gt
 80096a2:	1a9b      	subgt	r3, r3, r2
 80096a4:	18ed      	addgt	r5, r5, r3
 80096a6:	2600      	movs	r6, #0
 80096a8:	341a      	adds	r4, #26
 80096aa:	42b5      	cmp	r5, r6
 80096ac:	d11a      	bne.n	80096e4 <_printf_common+0xc8>
 80096ae:	2000      	movs	r0, #0
 80096b0:	e008      	b.n	80096c4 <_printf_common+0xa8>
 80096b2:	2301      	movs	r3, #1
 80096b4:	4652      	mov	r2, sl
 80096b6:	4649      	mov	r1, r9
 80096b8:	4638      	mov	r0, r7
 80096ba:	47c0      	blx	r8
 80096bc:	3001      	adds	r0, #1
 80096be:	d103      	bne.n	80096c8 <_printf_common+0xac>
 80096c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c8:	3501      	adds	r5, #1
 80096ca:	e7c6      	b.n	800965a <_printf_common+0x3e>
 80096cc:	18e1      	adds	r1, r4, r3
 80096ce:	1c5a      	adds	r2, r3, #1
 80096d0:	2030      	movs	r0, #48	; 0x30
 80096d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096d6:	4422      	add	r2, r4
 80096d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096e0:	3302      	adds	r3, #2
 80096e2:	e7c7      	b.n	8009674 <_printf_common+0x58>
 80096e4:	2301      	movs	r3, #1
 80096e6:	4622      	mov	r2, r4
 80096e8:	4649      	mov	r1, r9
 80096ea:	4638      	mov	r0, r7
 80096ec:	47c0      	blx	r8
 80096ee:	3001      	adds	r0, #1
 80096f0:	d0e6      	beq.n	80096c0 <_printf_common+0xa4>
 80096f2:	3601      	adds	r6, #1
 80096f4:	e7d9      	b.n	80096aa <_printf_common+0x8e>
	...

080096f8 <_printf_i>:
 80096f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	7e0f      	ldrb	r7, [r1, #24]
 80096fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009700:	2f78      	cmp	r7, #120	; 0x78
 8009702:	4691      	mov	r9, r2
 8009704:	4680      	mov	r8, r0
 8009706:	460c      	mov	r4, r1
 8009708:	469a      	mov	sl, r3
 800970a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800970e:	d807      	bhi.n	8009720 <_printf_i+0x28>
 8009710:	2f62      	cmp	r7, #98	; 0x62
 8009712:	d80a      	bhi.n	800972a <_printf_i+0x32>
 8009714:	2f00      	cmp	r7, #0
 8009716:	f000 80d8 	beq.w	80098ca <_printf_i+0x1d2>
 800971a:	2f58      	cmp	r7, #88	; 0x58
 800971c:	f000 80a3 	beq.w	8009866 <_printf_i+0x16e>
 8009720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009724:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009728:	e03a      	b.n	80097a0 <_printf_i+0xa8>
 800972a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800972e:	2b15      	cmp	r3, #21
 8009730:	d8f6      	bhi.n	8009720 <_printf_i+0x28>
 8009732:	a101      	add	r1, pc, #4	; (adr r1, 8009738 <_printf_i+0x40>)
 8009734:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009738:	08009791 	.word	0x08009791
 800973c:	080097a5 	.word	0x080097a5
 8009740:	08009721 	.word	0x08009721
 8009744:	08009721 	.word	0x08009721
 8009748:	08009721 	.word	0x08009721
 800974c:	08009721 	.word	0x08009721
 8009750:	080097a5 	.word	0x080097a5
 8009754:	08009721 	.word	0x08009721
 8009758:	08009721 	.word	0x08009721
 800975c:	08009721 	.word	0x08009721
 8009760:	08009721 	.word	0x08009721
 8009764:	080098b1 	.word	0x080098b1
 8009768:	080097d5 	.word	0x080097d5
 800976c:	08009893 	.word	0x08009893
 8009770:	08009721 	.word	0x08009721
 8009774:	08009721 	.word	0x08009721
 8009778:	080098d3 	.word	0x080098d3
 800977c:	08009721 	.word	0x08009721
 8009780:	080097d5 	.word	0x080097d5
 8009784:	08009721 	.word	0x08009721
 8009788:	08009721 	.word	0x08009721
 800978c:	0800989b 	.word	0x0800989b
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	1d1a      	adds	r2, r3, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	602a      	str	r2, [r5, #0]
 8009798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800979c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097a0:	2301      	movs	r3, #1
 80097a2:	e0a3      	b.n	80098ec <_printf_i+0x1f4>
 80097a4:	6820      	ldr	r0, [r4, #0]
 80097a6:	6829      	ldr	r1, [r5, #0]
 80097a8:	0606      	lsls	r6, r0, #24
 80097aa:	f101 0304 	add.w	r3, r1, #4
 80097ae:	d50a      	bpl.n	80097c6 <_printf_i+0xce>
 80097b0:	680e      	ldr	r6, [r1, #0]
 80097b2:	602b      	str	r3, [r5, #0]
 80097b4:	2e00      	cmp	r6, #0
 80097b6:	da03      	bge.n	80097c0 <_printf_i+0xc8>
 80097b8:	232d      	movs	r3, #45	; 0x2d
 80097ba:	4276      	negs	r6, r6
 80097bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097c0:	485e      	ldr	r0, [pc, #376]	; (800993c <_printf_i+0x244>)
 80097c2:	230a      	movs	r3, #10
 80097c4:	e019      	b.n	80097fa <_printf_i+0x102>
 80097c6:	680e      	ldr	r6, [r1, #0]
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80097ce:	bf18      	it	ne
 80097d0:	b236      	sxthne	r6, r6
 80097d2:	e7ef      	b.n	80097b4 <_printf_i+0xbc>
 80097d4:	682b      	ldr	r3, [r5, #0]
 80097d6:	6820      	ldr	r0, [r4, #0]
 80097d8:	1d19      	adds	r1, r3, #4
 80097da:	6029      	str	r1, [r5, #0]
 80097dc:	0601      	lsls	r1, r0, #24
 80097de:	d501      	bpl.n	80097e4 <_printf_i+0xec>
 80097e0:	681e      	ldr	r6, [r3, #0]
 80097e2:	e002      	b.n	80097ea <_printf_i+0xf2>
 80097e4:	0646      	lsls	r6, r0, #25
 80097e6:	d5fb      	bpl.n	80097e0 <_printf_i+0xe8>
 80097e8:	881e      	ldrh	r6, [r3, #0]
 80097ea:	4854      	ldr	r0, [pc, #336]	; (800993c <_printf_i+0x244>)
 80097ec:	2f6f      	cmp	r7, #111	; 0x6f
 80097ee:	bf0c      	ite	eq
 80097f0:	2308      	moveq	r3, #8
 80097f2:	230a      	movne	r3, #10
 80097f4:	2100      	movs	r1, #0
 80097f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097fa:	6865      	ldr	r5, [r4, #4]
 80097fc:	60a5      	str	r5, [r4, #8]
 80097fe:	2d00      	cmp	r5, #0
 8009800:	bfa2      	ittt	ge
 8009802:	6821      	ldrge	r1, [r4, #0]
 8009804:	f021 0104 	bicge.w	r1, r1, #4
 8009808:	6021      	strge	r1, [r4, #0]
 800980a:	b90e      	cbnz	r6, 8009810 <_printf_i+0x118>
 800980c:	2d00      	cmp	r5, #0
 800980e:	d04d      	beq.n	80098ac <_printf_i+0x1b4>
 8009810:	4615      	mov	r5, r2
 8009812:	fbb6 f1f3 	udiv	r1, r6, r3
 8009816:	fb03 6711 	mls	r7, r3, r1, r6
 800981a:	5dc7      	ldrb	r7, [r0, r7]
 800981c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009820:	4637      	mov	r7, r6
 8009822:	42bb      	cmp	r3, r7
 8009824:	460e      	mov	r6, r1
 8009826:	d9f4      	bls.n	8009812 <_printf_i+0x11a>
 8009828:	2b08      	cmp	r3, #8
 800982a:	d10b      	bne.n	8009844 <_printf_i+0x14c>
 800982c:	6823      	ldr	r3, [r4, #0]
 800982e:	07de      	lsls	r6, r3, #31
 8009830:	d508      	bpl.n	8009844 <_printf_i+0x14c>
 8009832:	6923      	ldr	r3, [r4, #16]
 8009834:	6861      	ldr	r1, [r4, #4]
 8009836:	4299      	cmp	r1, r3
 8009838:	bfde      	ittt	le
 800983a:	2330      	movle	r3, #48	; 0x30
 800983c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009840:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009844:	1b52      	subs	r2, r2, r5
 8009846:	6122      	str	r2, [r4, #16]
 8009848:	f8cd a000 	str.w	sl, [sp]
 800984c:	464b      	mov	r3, r9
 800984e:	aa03      	add	r2, sp, #12
 8009850:	4621      	mov	r1, r4
 8009852:	4640      	mov	r0, r8
 8009854:	f7ff fee2 	bl	800961c <_printf_common>
 8009858:	3001      	adds	r0, #1
 800985a:	d14c      	bne.n	80098f6 <_printf_i+0x1fe>
 800985c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009860:	b004      	add	sp, #16
 8009862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009866:	4835      	ldr	r0, [pc, #212]	; (800993c <_printf_i+0x244>)
 8009868:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800986c:	6829      	ldr	r1, [r5, #0]
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	f851 6b04 	ldr.w	r6, [r1], #4
 8009874:	6029      	str	r1, [r5, #0]
 8009876:	061d      	lsls	r5, r3, #24
 8009878:	d514      	bpl.n	80098a4 <_printf_i+0x1ac>
 800987a:	07df      	lsls	r7, r3, #31
 800987c:	bf44      	itt	mi
 800987e:	f043 0320 	orrmi.w	r3, r3, #32
 8009882:	6023      	strmi	r3, [r4, #0]
 8009884:	b91e      	cbnz	r6, 800988e <_printf_i+0x196>
 8009886:	6823      	ldr	r3, [r4, #0]
 8009888:	f023 0320 	bic.w	r3, r3, #32
 800988c:	6023      	str	r3, [r4, #0]
 800988e:	2310      	movs	r3, #16
 8009890:	e7b0      	b.n	80097f4 <_printf_i+0xfc>
 8009892:	6823      	ldr	r3, [r4, #0]
 8009894:	f043 0320 	orr.w	r3, r3, #32
 8009898:	6023      	str	r3, [r4, #0]
 800989a:	2378      	movs	r3, #120	; 0x78
 800989c:	4828      	ldr	r0, [pc, #160]	; (8009940 <_printf_i+0x248>)
 800989e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80098a2:	e7e3      	b.n	800986c <_printf_i+0x174>
 80098a4:	0659      	lsls	r1, r3, #25
 80098a6:	bf48      	it	mi
 80098a8:	b2b6      	uxthmi	r6, r6
 80098aa:	e7e6      	b.n	800987a <_printf_i+0x182>
 80098ac:	4615      	mov	r5, r2
 80098ae:	e7bb      	b.n	8009828 <_printf_i+0x130>
 80098b0:	682b      	ldr	r3, [r5, #0]
 80098b2:	6826      	ldr	r6, [r4, #0]
 80098b4:	6961      	ldr	r1, [r4, #20]
 80098b6:	1d18      	adds	r0, r3, #4
 80098b8:	6028      	str	r0, [r5, #0]
 80098ba:	0635      	lsls	r5, r6, #24
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	d501      	bpl.n	80098c4 <_printf_i+0x1cc>
 80098c0:	6019      	str	r1, [r3, #0]
 80098c2:	e002      	b.n	80098ca <_printf_i+0x1d2>
 80098c4:	0670      	lsls	r0, r6, #25
 80098c6:	d5fb      	bpl.n	80098c0 <_printf_i+0x1c8>
 80098c8:	8019      	strh	r1, [r3, #0]
 80098ca:	2300      	movs	r3, #0
 80098cc:	6123      	str	r3, [r4, #16]
 80098ce:	4615      	mov	r5, r2
 80098d0:	e7ba      	b.n	8009848 <_printf_i+0x150>
 80098d2:	682b      	ldr	r3, [r5, #0]
 80098d4:	1d1a      	adds	r2, r3, #4
 80098d6:	602a      	str	r2, [r5, #0]
 80098d8:	681d      	ldr	r5, [r3, #0]
 80098da:	6862      	ldr	r2, [r4, #4]
 80098dc:	2100      	movs	r1, #0
 80098de:	4628      	mov	r0, r5
 80098e0:	f7f6 fc56 	bl	8000190 <memchr>
 80098e4:	b108      	cbz	r0, 80098ea <_printf_i+0x1f2>
 80098e6:	1b40      	subs	r0, r0, r5
 80098e8:	6060      	str	r0, [r4, #4]
 80098ea:	6863      	ldr	r3, [r4, #4]
 80098ec:	6123      	str	r3, [r4, #16]
 80098ee:	2300      	movs	r3, #0
 80098f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098f4:	e7a8      	b.n	8009848 <_printf_i+0x150>
 80098f6:	6923      	ldr	r3, [r4, #16]
 80098f8:	462a      	mov	r2, r5
 80098fa:	4649      	mov	r1, r9
 80098fc:	4640      	mov	r0, r8
 80098fe:	47d0      	blx	sl
 8009900:	3001      	adds	r0, #1
 8009902:	d0ab      	beq.n	800985c <_printf_i+0x164>
 8009904:	6823      	ldr	r3, [r4, #0]
 8009906:	079b      	lsls	r3, r3, #30
 8009908:	d413      	bmi.n	8009932 <_printf_i+0x23a>
 800990a:	68e0      	ldr	r0, [r4, #12]
 800990c:	9b03      	ldr	r3, [sp, #12]
 800990e:	4298      	cmp	r0, r3
 8009910:	bfb8      	it	lt
 8009912:	4618      	movlt	r0, r3
 8009914:	e7a4      	b.n	8009860 <_printf_i+0x168>
 8009916:	2301      	movs	r3, #1
 8009918:	4632      	mov	r2, r6
 800991a:	4649      	mov	r1, r9
 800991c:	4640      	mov	r0, r8
 800991e:	47d0      	blx	sl
 8009920:	3001      	adds	r0, #1
 8009922:	d09b      	beq.n	800985c <_printf_i+0x164>
 8009924:	3501      	adds	r5, #1
 8009926:	68e3      	ldr	r3, [r4, #12]
 8009928:	9903      	ldr	r1, [sp, #12]
 800992a:	1a5b      	subs	r3, r3, r1
 800992c:	42ab      	cmp	r3, r5
 800992e:	dcf2      	bgt.n	8009916 <_printf_i+0x21e>
 8009930:	e7eb      	b.n	800990a <_printf_i+0x212>
 8009932:	2500      	movs	r5, #0
 8009934:	f104 0619 	add.w	r6, r4, #25
 8009938:	e7f5      	b.n	8009926 <_printf_i+0x22e>
 800993a:	bf00      	nop
 800993c:	0800b594 	.word	0x0800b594
 8009940:	0800b5a5 	.word	0x0800b5a5

08009944 <_read_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4d07      	ldr	r5, [pc, #28]	; (8009964 <_read_r+0x20>)
 8009948:	4604      	mov	r4, r0
 800994a:	4608      	mov	r0, r1
 800994c:	4611      	mov	r1, r2
 800994e:	2200      	movs	r2, #0
 8009950:	602a      	str	r2, [r5, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f7f9 fae4 	bl	8002f20 <_read>
 8009958:	1c43      	adds	r3, r0, #1
 800995a:	d102      	bne.n	8009962 <_read_r+0x1e>
 800995c:	682b      	ldr	r3, [r5, #0]
 800995e:	b103      	cbz	r3, 8009962 <_read_r+0x1e>
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	bd38      	pop	{r3, r4, r5, pc}
 8009964:	20000390 	.word	0x20000390

08009968 <pow>:
 8009968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800996a:	ed2d 8b02 	vpush	{d8}
 800996e:	eeb0 8a40 	vmov.f32	s16, s0
 8009972:	eef0 8a60 	vmov.f32	s17, s1
 8009976:	ec55 4b11 	vmov	r4, r5, d1
 800997a:	f000 f865 	bl	8009a48 <__ieee754_pow>
 800997e:	4622      	mov	r2, r4
 8009980:	462b      	mov	r3, r5
 8009982:	4620      	mov	r0, r4
 8009984:	4629      	mov	r1, r5
 8009986:	ec57 6b10 	vmov	r6, r7, d0
 800998a:	f7f7 f8a7 	bl	8000adc <__aeabi_dcmpun>
 800998e:	2800      	cmp	r0, #0
 8009990:	d13b      	bne.n	8009a0a <pow+0xa2>
 8009992:	ec51 0b18 	vmov	r0, r1, d8
 8009996:	2200      	movs	r2, #0
 8009998:	2300      	movs	r3, #0
 800999a:	f7f7 f86d 	bl	8000a78 <__aeabi_dcmpeq>
 800999e:	b1b8      	cbz	r0, 80099d0 <pow+0x68>
 80099a0:	2200      	movs	r2, #0
 80099a2:	2300      	movs	r3, #0
 80099a4:	4620      	mov	r0, r4
 80099a6:	4629      	mov	r1, r5
 80099a8:	f7f7 f866 	bl	8000a78 <__aeabi_dcmpeq>
 80099ac:	2800      	cmp	r0, #0
 80099ae:	d146      	bne.n	8009a3e <pow+0xd6>
 80099b0:	ec45 4b10 	vmov	d0, r4, r5
 80099b4:	f000 fe61 	bl	800a67a <finite>
 80099b8:	b338      	cbz	r0, 8009a0a <pow+0xa2>
 80099ba:	2200      	movs	r2, #0
 80099bc:	2300      	movs	r3, #0
 80099be:	4620      	mov	r0, r4
 80099c0:	4629      	mov	r1, r5
 80099c2:	f7f7 f863 	bl	8000a8c <__aeabi_dcmplt>
 80099c6:	b300      	cbz	r0, 8009a0a <pow+0xa2>
 80099c8:	f7fe f988 	bl	8007cdc <__errno>
 80099cc:	2322      	movs	r3, #34	; 0x22
 80099ce:	e01b      	b.n	8009a08 <pow+0xa0>
 80099d0:	ec47 6b10 	vmov	d0, r6, r7
 80099d4:	f000 fe51 	bl	800a67a <finite>
 80099d8:	b9e0      	cbnz	r0, 8009a14 <pow+0xac>
 80099da:	eeb0 0a48 	vmov.f32	s0, s16
 80099de:	eef0 0a68 	vmov.f32	s1, s17
 80099e2:	f000 fe4a 	bl	800a67a <finite>
 80099e6:	b1a8      	cbz	r0, 8009a14 <pow+0xac>
 80099e8:	ec45 4b10 	vmov	d0, r4, r5
 80099ec:	f000 fe45 	bl	800a67a <finite>
 80099f0:	b180      	cbz	r0, 8009a14 <pow+0xac>
 80099f2:	4632      	mov	r2, r6
 80099f4:	463b      	mov	r3, r7
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f7 f86f 	bl	8000adc <__aeabi_dcmpun>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d0e2      	beq.n	80099c8 <pow+0x60>
 8009a02:	f7fe f96b 	bl	8007cdc <__errno>
 8009a06:	2321      	movs	r3, #33	; 0x21
 8009a08:	6003      	str	r3, [r0, #0]
 8009a0a:	ecbd 8b02 	vpop	{d8}
 8009a0e:	ec47 6b10 	vmov	d0, r6, r7
 8009a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a14:	2200      	movs	r2, #0
 8009a16:	2300      	movs	r3, #0
 8009a18:	4630      	mov	r0, r6
 8009a1a:	4639      	mov	r1, r7
 8009a1c:	f7f7 f82c 	bl	8000a78 <__aeabi_dcmpeq>
 8009a20:	2800      	cmp	r0, #0
 8009a22:	d0f2      	beq.n	8009a0a <pow+0xa2>
 8009a24:	eeb0 0a48 	vmov.f32	s0, s16
 8009a28:	eef0 0a68 	vmov.f32	s1, s17
 8009a2c:	f000 fe25 	bl	800a67a <finite>
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d0ea      	beq.n	8009a0a <pow+0xa2>
 8009a34:	ec45 4b10 	vmov	d0, r4, r5
 8009a38:	f000 fe1f 	bl	800a67a <finite>
 8009a3c:	e7c3      	b.n	80099c6 <pow+0x5e>
 8009a3e:	4f01      	ldr	r7, [pc, #4]	; (8009a44 <pow+0xdc>)
 8009a40:	2600      	movs	r6, #0
 8009a42:	e7e2      	b.n	8009a0a <pow+0xa2>
 8009a44:	3ff00000 	.word	0x3ff00000

08009a48 <__ieee754_pow>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	ed2d 8b06 	vpush	{d8-d10}
 8009a50:	b089      	sub	sp, #36	; 0x24
 8009a52:	ed8d 1b00 	vstr	d1, [sp]
 8009a56:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009a5a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009a5e:	ea58 0102 	orrs.w	r1, r8, r2
 8009a62:	ec57 6b10 	vmov	r6, r7, d0
 8009a66:	d115      	bne.n	8009a94 <__ieee754_pow+0x4c>
 8009a68:	19b3      	adds	r3, r6, r6
 8009a6a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009a6e:	4152      	adcs	r2, r2
 8009a70:	4299      	cmp	r1, r3
 8009a72:	4b89      	ldr	r3, [pc, #548]	; (8009c98 <__ieee754_pow+0x250>)
 8009a74:	4193      	sbcs	r3, r2
 8009a76:	f080 84d2 	bcs.w	800a41e <__ieee754_pow+0x9d6>
 8009a7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a7e:	4630      	mov	r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	f7f6 fbdb 	bl	800023c <__adddf3>
 8009a86:	ec41 0b10 	vmov	d0, r0, r1
 8009a8a:	b009      	add	sp, #36	; 0x24
 8009a8c:	ecbd 8b06 	vpop	{d8-d10}
 8009a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a94:	4b81      	ldr	r3, [pc, #516]	; (8009c9c <__ieee754_pow+0x254>)
 8009a96:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8009a9a:	429c      	cmp	r4, r3
 8009a9c:	ee10 aa10 	vmov	sl, s0
 8009aa0:	463d      	mov	r5, r7
 8009aa2:	dc06      	bgt.n	8009ab2 <__ieee754_pow+0x6a>
 8009aa4:	d101      	bne.n	8009aaa <__ieee754_pow+0x62>
 8009aa6:	2e00      	cmp	r6, #0
 8009aa8:	d1e7      	bne.n	8009a7a <__ieee754_pow+0x32>
 8009aaa:	4598      	cmp	r8, r3
 8009aac:	dc01      	bgt.n	8009ab2 <__ieee754_pow+0x6a>
 8009aae:	d10f      	bne.n	8009ad0 <__ieee754_pow+0x88>
 8009ab0:	b172      	cbz	r2, 8009ad0 <__ieee754_pow+0x88>
 8009ab2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8009ab6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8009aba:	ea55 050a 	orrs.w	r5, r5, sl
 8009abe:	d1dc      	bne.n	8009a7a <__ieee754_pow+0x32>
 8009ac0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ac4:	18db      	adds	r3, r3, r3
 8009ac6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8009aca:	4152      	adcs	r2, r2
 8009acc:	429d      	cmp	r5, r3
 8009ace:	e7d0      	b.n	8009a72 <__ieee754_pow+0x2a>
 8009ad0:	2d00      	cmp	r5, #0
 8009ad2:	da3b      	bge.n	8009b4c <__ieee754_pow+0x104>
 8009ad4:	4b72      	ldr	r3, [pc, #456]	; (8009ca0 <__ieee754_pow+0x258>)
 8009ad6:	4598      	cmp	r8, r3
 8009ad8:	dc51      	bgt.n	8009b7e <__ieee754_pow+0x136>
 8009ada:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009ade:	4598      	cmp	r8, r3
 8009ae0:	f340 84ac 	ble.w	800a43c <__ieee754_pow+0x9f4>
 8009ae4:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009ae8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009aec:	2b14      	cmp	r3, #20
 8009aee:	dd0f      	ble.n	8009b10 <__ieee754_pow+0xc8>
 8009af0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009af4:	fa22 f103 	lsr.w	r1, r2, r3
 8009af8:	fa01 f303 	lsl.w	r3, r1, r3
 8009afc:	4293      	cmp	r3, r2
 8009afe:	f040 849d 	bne.w	800a43c <__ieee754_pow+0x9f4>
 8009b02:	f001 0101 	and.w	r1, r1, #1
 8009b06:	f1c1 0302 	rsb	r3, r1, #2
 8009b0a:	9304      	str	r3, [sp, #16]
 8009b0c:	b182      	cbz	r2, 8009b30 <__ieee754_pow+0xe8>
 8009b0e:	e05f      	b.n	8009bd0 <__ieee754_pow+0x188>
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	d15b      	bne.n	8009bcc <__ieee754_pow+0x184>
 8009b14:	f1c3 0314 	rsb	r3, r3, #20
 8009b18:	fa48 f103 	asr.w	r1, r8, r3
 8009b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b20:	4543      	cmp	r3, r8
 8009b22:	f040 8488 	bne.w	800a436 <__ieee754_pow+0x9ee>
 8009b26:	f001 0101 	and.w	r1, r1, #1
 8009b2a:	f1c1 0302 	rsb	r3, r1, #2
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	4b5c      	ldr	r3, [pc, #368]	; (8009ca4 <__ieee754_pow+0x25c>)
 8009b32:	4598      	cmp	r8, r3
 8009b34:	d132      	bne.n	8009b9c <__ieee754_pow+0x154>
 8009b36:	f1b9 0f00 	cmp.w	r9, #0
 8009b3a:	f280 8478 	bge.w	800a42e <__ieee754_pow+0x9e6>
 8009b3e:	4959      	ldr	r1, [pc, #356]	; (8009ca4 <__ieee754_pow+0x25c>)
 8009b40:	4632      	mov	r2, r6
 8009b42:	463b      	mov	r3, r7
 8009b44:	2000      	movs	r0, #0
 8009b46:	f7f6 fe59 	bl	80007fc <__aeabi_ddiv>
 8009b4a:	e79c      	b.n	8009a86 <__ieee754_pow+0x3e>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	2a00      	cmp	r2, #0
 8009b52:	d13d      	bne.n	8009bd0 <__ieee754_pow+0x188>
 8009b54:	4b51      	ldr	r3, [pc, #324]	; (8009c9c <__ieee754_pow+0x254>)
 8009b56:	4598      	cmp	r8, r3
 8009b58:	d1ea      	bne.n	8009b30 <__ieee754_pow+0xe8>
 8009b5a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009b5e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009b62:	ea53 030a 	orrs.w	r3, r3, sl
 8009b66:	f000 845a 	beq.w	800a41e <__ieee754_pow+0x9d6>
 8009b6a:	4b4f      	ldr	r3, [pc, #316]	; (8009ca8 <__ieee754_pow+0x260>)
 8009b6c:	429c      	cmp	r4, r3
 8009b6e:	dd08      	ble.n	8009b82 <__ieee754_pow+0x13a>
 8009b70:	f1b9 0f00 	cmp.w	r9, #0
 8009b74:	f2c0 8457 	blt.w	800a426 <__ieee754_pow+0x9de>
 8009b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b7c:	e783      	b.n	8009a86 <__ieee754_pow+0x3e>
 8009b7e:	2302      	movs	r3, #2
 8009b80:	e7e5      	b.n	8009b4e <__ieee754_pow+0x106>
 8009b82:	f1b9 0f00 	cmp.w	r9, #0
 8009b86:	f04f 0000 	mov.w	r0, #0
 8009b8a:	f04f 0100 	mov.w	r1, #0
 8009b8e:	f6bf af7a 	bge.w	8009a86 <__ieee754_pow+0x3e>
 8009b92:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009b96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009b9a:	e774      	b.n	8009a86 <__ieee754_pow+0x3e>
 8009b9c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ba0:	d106      	bne.n	8009bb0 <__ieee754_pow+0x168>
 8009ba2:	4632      	mov	r2, r6
 8009ba4:	463b      	mov	r3, r7
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fcfd 	bl	80005a8 <__aeabi_dmul>
 8009bae:	e76a      	b.n	8009a86 <__ieee754_pow+0x3e>
 8009bb0:	4b3e      	ldr	r3, [pc, #248]	; (8009cac <__ieee754_pow+0x264>)
 8009bb2:	4599      	cmp	r9, r3
 8009bb4:	d10c      	bne.n	8009bd0 <__ieee754_pow+0x188>
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	db0a      	blt.n	8009bd0 <__ieee754_pow+0x188>
 8009bba:	ec47 6b10 	vmov	d0, r6, r7
 8009bbe:	b009      	add	sp, #36	; 0x24
 8009bc0:	ecbd 8b06 	vpop	{d8-d10}
 8009bc4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bc8:	f000 bc6c 	b.w	800a4a4 <__ieee754_sqrt>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9304      	str	r3, [sp, #16]
 8009bd0:	ec47 6b10 	vmov	d0, r6, r7
 8009bd4:	f000 fd48 	bl	800a668 <fabs>
 8009bd8:	ec51 0b10 	vmov	r0, r1, d0
 8009bdc:	f1ba 0f00 	cmp.w	sl, #0
 8009be0:	d129      	bne.n	8009c36 <__ieee754_pow+0x1ee>
 8009be2:	b124      	cbz	r4, 8009bee <__ieee754_pow+0x1a6>
 8009be4:	4b2f      	ldr	r3, [pc, #188]	; (8009ca4 <__ieee754_pow+0x25c>)
 8009be6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009bea:	429a      	cmp	r2, r3
 8009bec:	d123      	bne.n	8009c36 <__ieee754_pow+0x1ee>
 8009bee:	f1b9 0f00 	cmp.w	r9, #0
 8009bf2:	da05      	bge.n	8009c00 <__ieee754_pow+0x1b8>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	2000      	movs	r0, #0
 8009bfa:	492a      	ldr	r1, [pc, #168]	; (8009ca4 <__ieee754_pow+0x25c>)
 8009bfc:	f7f6 fdfe 	bl	80007fc <__aeabi_ddiv>
 8009c00:	2d00      	cmp	r5, #0
 8009c02:	f6bf af40 	bge.w	8009a86 <__ieee754_pow+0x3e>
 8009c06:	9b04      	ldr	r3, [sp, #16]
 8009c08:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009c0c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009c10:	4323      	orrs	r3, r4
 8009c12:	d108      	bne.n	8009c26 <__ieee754_pow+0x1de>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f7f6 fb0c 	bl	8000238 <__aeabi_dsub>
 8009c20:	4602      	mov	r2, r0
 8009c22:	460b      	mov	r3, r1
 8009c24:	e78f      	b.n	8009b46 <__ieee754_pow+0xfe>
 8009c26:	9b04      	ldr	r3, [sp, #16]
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	f47f af2c 	bne.w	8009a86 <__ieee754_pow+0x3e>
 8009c2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c32:	4619      	mov	r1, r3
 8009c34:	e727      	b.n	8009a86 <__ieee754_pow+0x3e>
 8009c36:	0feb      	lsrs	r3, r5, #31
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	9306      	str	r3, [sp, #24]
 8009c3c:	9a06      	ldr	r2, [sp, #24]
 8009c3e:	9b04      	ldr	r3, [sp, #16]
 8009c40:	4313      	orrs	r3, r2
 8009c42:	d102      	bne.n	8009c4a <__ieee754_pow+0x202>
 8009c44:	4632      	mov	r2, r6
 8009c46:	463b      	mov	r3, r7
 8009c48:	e7e6      	b.n	8009c18 <__ieee754_pow+0x1d0>
 8009c4a:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <__ieee754_pow+0x268>)
 8009c4c:	4598      	cmp	r8, r3
 8009c4e:	f340 80fb 	ble.w	8009e48 <__ieee754_pow+0x400>
 8009c52:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009c56:	4598      	cmp	r8, r3
 8009c58:	4b13      	ldr	r3, [pc, #76]	; (8009ca8 <__ieee754_pow+0x260>)
 8009c5a:	dd0c      	ble.n	8009c76 <__ieee754_pow+0x22e>
 8009c5c:	429c      	cmp	r4, r3
 8009c5e:	dc0f      	bgt.n	8009c80 <__ieee754_pow+0x238>
 8009c60:	f1b9 0f00 	cmp.w	r9, #0
 8009c64:	da0f      	bge.n	8009c86 <__ieee754_pow+0x23e>
 8009c66:	2000      	movs	r0, #0
 8009c68:	b009      	add	sp, #36	; 0x24
 8009c6a:	ecbd 8b06 	vpop	{d8-d10}
 8009c6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c72:	f000 bcf0 	b.w	800a656 <__math_oflow>
 8009c76:	429c      	cmp	r4, r3
 8009c78:	dbf2      	blt.n	8009c60 <__ieee754_pow+0x218>
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ca4 <__ieee754_pow+0x25c>)
 8009c7c:	429c      	cmp	r4, r3
 8009c7e:	dd19      	ble.n	8009cb4 <__ieee754_pow+0x26c>
 8009c80:	f1b9 0f00 	cmp.w	r9, #0
 8009c84:	dcef      	bgt.n	8009c66 <__ieee754_pow+0x21e>
 8009c86:	2000      	movs	r0, #0
 8009c88:	b009      	add	sp, #36	; 0x24
 8009c8a:	ecbd 8b06 	vpop	{d8-d10}
 8009c8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c92:	f000 bcd7 	b.w	800a644 <__math_uflow>
 8009c96:	bf00      	nop
 8009c98:	fff00000 	.word	0xfff00000
 8009c9c:	7ff00000 	.word	0x7ff00000
 8009ca0:	433fffff 	.word	0x433fffff
 8009ca4:	3ff00000 	.word	0x3ff00000
 8009ca8:	3fefffff 	.word	0x3fefffff
 8009cac:	3fe00000 	.word	0x3fe00000
 8009cb0:	41e00000 	.word	0x41e00000
 8009cb4:	4b60      	ldr	r3, [pc, #384]	; (8009e38 <__ieee754_pow+0x3f0>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f7f6 fabe 	bl	8000238 <__aeabi_dsub>
 8009cbc:	a354      	add	r3, pc, #336	; (adr r3, 8009e10 <__ieee754_pow+0x3c8>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	4604      	mov	r4, r0
 8009cc4:	460d      	mov	r5, r1
 8009cc6:	f7f6 fc6f 	bl	80005a8 <__aeabi_dmul>
 8009cca:	a353      	add	r3, pc, #332	; (adr r3, 8009e18 <__ieee754_pow+0x3d0>)
 8009ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd0:	4606      	mov	r6, r0
 8009cd2:	460f      	mov	r7, r1
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	f7f6 fc66 	bl	80005a8 <__aeabi_dmul>
 8009cdc:	4b57      	ldr	r3, [pc, #348]	; (8009e3c <__ieee754_pow+0x3f4>)
 8009cde:	4682      	mov	sl, r0
 8009ce0:	468b      	mov	fp, r1
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f7f6 fc5e 	bl	80005a8 <__aeabi_dmul>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	a14b      	add	r1, pc, #300	; (adr r1, 8009e20 <__ieee754_pow+0x3d8>)
 8009cf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cf6:	f7f6 fa9f 	bl	8000238 <__aeabi_dsub>
 8009cfa:	4622      	mov	r2, r4
 8009cfc:	462b      	mov	r3, r5
 8009cfe:	f7f6 fc53 	bl	80005a8 <__aeabi_dmul>
 8009d02:	4602      	mov	r2, r0
 8009d04:	460b      	mov	r3, r1
 8009d06:	2000      	movs	r0, #0
 8009d08:	494d      	ldr	r1, [pc, #308]	; (8009e40 <__ieee754_pow+0x3f8>)
 8009d0a:	f7f6 fa95 	bl	8000238 <__aeabi_dsub>
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4680      	mov	r8, r0
 8009d12:	4689      	mov	r9, r1
 8009d14:	462b      	mov	r3, r5
 8009d16:	4620      	mov	r0, r4
 8009d18:	4629      	mov	r1, r5
 8009d1a:	f7f6 fc45 	bl	80005a8 <__aeabi_dmul>
 8009d1e:	4602      	mov	r2, r0
 8009d20:	460b      	mov	r3, r1
 8009d22:	4640      	mov	r0, r8
 8009d24:	4649      	mov	r1, r9
 8009d26:	f7f6 fc3f 	bl	80005a8 <__aeabi_dmul>
 8009d2a:	a33f      	add	r3, pc, #252	; (adr r3, 8009e28 <__ieee754_pow+0x3e0>)
 8009d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d30:	f7f6 fc3a 	bl	80005a8 <__aeabi_dmul>
 8009d34:	4602      	mov	r2, r0
 8009d36:	460b      	mov	r3, r1
 8009d38:	4650      	mov	r0, sl
 8009d3a:	4659      	mov	r1, fp
 8009d3c:	f7f6 fa7c 	bl	8000238 <__aeabi_dsub>
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	4680      	mov	r8, r0
 8009d46:	4689      	mov	r9, r1
 8009d48:	4630      	mov	r0, r6
 8009d4a:	4639      	mov	r1, r7
 8009d4c:	f7f6 fa76 	bl	800023c <__adddf3>
 8009d50:	2000      	movs	r0, #0
 8009d52:	4632      	mov	r2, r6
 8009d54:	463b      	mov	r3, r7
 8009d56:	4604      	mov	r4, r0
 8009d58:	460d      	mov	r5, r1
 8009d5a:	f7f6 fa6d 	bl	8000238 <__aeabi_dsub>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	460b      	mov	r3, r1
 8009d62:	4640      	mov	r0, r8
 8009d64:	4649      	mov	r1, r9
 8009d66:	f7f6 fa67 	bl	8000238 <__aeabi_dsub>
 8009d6a:	9b04      	ldr	r3, [sp, #16]
 8009d6c:	9a06      	ldr	r2, [sp, #24]
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	4313      	orrs	r3, r2
 8009d72:	4682      	mov	sl, r0
 8009d74:	468b      	mov	fp, r1
 8009d76:	f040 81e7 	bne.w	800a148 <__ieee754_pow+0x700>
 8009d7a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009e30 <__ieee754_pow+0x3e8>
 8009d7e:	eeb0 8a47 	vmov.f32	s16, s14
 8009d82:	eef0 8a67 	vmov.f32	s17, s15
 8009d86:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009d8a:	2600      	movs	r6, #0
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d94:	f7f6 fa50 	bl	8000238 <__aeabi_dsub>
 8009d98:	4622      	mov	r2, r4
 8009d9a:	462b      	mov	r3, r5
 8009d9c:	f7f6 fc04 	bl	80005a8 <__aeabi_dmul>
 8009da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009da4:	4680      	mov	r8, r0
 8009da6:	4689      	mov	r9, r1
 8009da8:	4650      	mov	r0, sl
 8009daa:	4659      	mov	r1, fp
 8009dac:	f7f6 fbfc 	bl	80005a8 <__aeabi_dmul>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4640      	mov	r0, r8
 8009db6:	4649      	mov	r1, r9
 8009db8:	f7f6 fa40 	bl	800023c <__adddf3>
 8009dbc:	4632      	mov	r2, r6
 8009dbe:	463b      	mov	r3, r7
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4689      	mov	r9, r1
 8009dc4:	4620      	mov	r0, r4
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f7f6 fbee 	bl	80005a8 <__aeabi_dmul>
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4604      	mov	r4, r0
 8009dd0:	460d      	mov	r5, r1
 8009dd2:	4602      	mov	r2, r0
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	4640      	mov	r0, r8
 8009dd8:	f7f6 fa30 	bl	800023c <__adddf3>
 8009ddc:	4b19      	ldr	r3, [pc, #100]	; (8009e44 <__ieee754_pow+0x3fc>)
 8009dde:	4299      	cmp	r1, r3
 8009de0:	ec45 4b19 	vmov	d9, r4, r5
 8009de4:	4606      	mov	r6, r0
 8009de6:	460f      	mov	r7, r1
 8009de8:	468b      	mov	fp, r1
 8009dea:	f340 82f1 	ble.w	800a3d0 <__ieee754_pow+0x988>
 8009dee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009df2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009df6:	4303      	orrs	r3, r0
 8009df8:	f000 81e4 	beq.w	800a1c4 <__ieee754_pow+0x77c>
 8009dfc:	ec51 0b18 	vmov	r0, r1, d8
 8009e00:	2200      	movs	r2, #0
 8009e02:	2300      	movs	r3, #0
 8009e04:	f7f6 fe42 	bl	8000a8c <__aeabi_dcmplt>
 8009e08:	3800      	subs	r0, #0
 8009e0a:	bf18      	it	ne
 8009e0c:	2001      	movne	r0, #1
 8009e0e:	e72b      	b.n	8009c68 <__ieee754_pow+0x220>
 8009e10:	60000000 	.word	0x60000000
 8009e14:	3ff71547 	.word	0x3ff71547
 8009e18:	f85ddf44 	.word	0xf85ddf44
 8009e1c:	3e54ae0b 	.word	0x3e54ae0b
 8009e20:	55555555 	.word	0x55555555
 8009e24:	3fd55555 	.word	0x3fd55555
 8009e28:	652b82fe 	.word	0x652b82fe
 8009e2c:	3ff71547 	.word	0x3ff71547
 8009e30:	00000000 	.word	0x00000000
 8009e34:	bff00000 	.word	0xbff00000
 8009e38:	3ff00000 	.word	0x3ff00000
 8009e3c:	3fd00000 	.word	0x3fd00000
 8009e40:	3fe00000 	.word	0x3fe00000
 8009e44:	408fffff 	.word	0x408fffff
 8009e48:	4bd5      	ldr	r3, [pc, #852]	; (800a1a0 <__ieee754_pow+0x758>)
 8009e4a:	402b      	ands	r3, r5
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	b92b      	cbnz	r3, 8009e5c <__ieee754_pow+0x414>
 8009e50:	4bd4      	ldr	r3, [pc, #848]	; (800a1a4 <__ieee754_pow+0x75c>)
 8009e52:	f7f6 fba9 	bl	80005a8 <__aeabi_dmul>
 8009e56:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	1523      	asrs	r3, r4, #20
 8009e5e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009e62:	4413      	add	r3, r2
 8009e64:	9305      	str	r3, [sp, #20]
 8009e66:	4bd0      	ldr	r3, [pc, #832]	; (800a1a8 <__ieee754_pow+0x760>)
 8009e68:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009e6c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009e70:	429c      	cmp	r4, r3
 8009e72:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009e76:	dd08      	ble.n	8009e8a <__ieee754_pow+0x442>
 8009e78:	4bcc      	ldr	r3, [pc, #816]	; (800a1ac <__ieee754_pow+0x764>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	f340 8162 	ble.w	800a144 <__ieee754_pow+0x6fc>
 8009e80:	9b05      	ldr	r3, [sp, #20]
 8009e82:	3301      	adds	r3, #1
 8009e84:	9305      	str	r3, [sp, #20]
 8009e86:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	00e3      	lsls	r3, r4, #3
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	4bc7      	ldr	r3, [pc, #796]	; (800a1b0 <__ieee754_pow+0x768>)
 8009e92:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e96:	ed93 7b00 	vldr	d7, [r3]
 8009e9a:	4629      	mov	r1, r5
 8009e9c:	ec53 2b17 	vmov	r2, r3, d7
 8009ea0:	eeb0 9a47 	vmov.f32	s18, s14
 8009ea4:	eef0 9a67 	vmov.f32	s19, s15
 8009ea8:	4682      	mov	sl, r0
 8009eaa:	f7f6 f9c5 	bl	8000238 <__aeabi_dsub>
 8009eae:	4652      	mov	r2, sl
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	460f      	mov	r7, r1
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	ec51 0b19 	vmov	r0, r1, d9
 8009eba:	f7f6 f9bf 	bl	800023c <__adddf3>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	2000      	movs	r0, #0
 8009ec4:	49bb      	ldr	r1, [pc, #748]	; (800a1b4 <__ieee754_pow+0x76c>)
 8009ec6:	f7f6 fc99 	bl	80007fc <__aeabi_ddiv>
 8009eca:	ec41 0b1a 	vmov	d10, r0, r1
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4630      	mov	r0, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	f7f6 fb67 	bl	80005a8 <__aeabi_dmul>
 8009eda:	2300      	movs	r3, #0
 8009edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee0:	9302      	str	r3, [sp, #8]
 8009ee2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009ee6:	46ab      	mov	fp, r5
 8009ee8:	106d      	asrs	r5, r5, #1
 8009eea:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009eee:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009ef2:	ec41 0b18 	vmov	d8, r0, r1
 8009ef6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009efa:	2200      	movs	r2, #0
 8009efc:	4640      	mov	r0, r8
 8009efe:	4649      	mov	r1, r9
 8009f00:	4614      	mov	r4, r2
 8009f02:	461d      	mov	r5, r3
 8009f04:	f7f6 fb50 	bl	80005a8 <__aeabi_dmul>
 8009f08:	4602      	mov	r2, r0
 8009f0a:	460b      	mov	r3, r1
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	4639      	mov	r1, r7
 8009f10:	f7f6 f992 	bl	8000238 <__aeabi_dsub>
 8009f14:	ec53 2b19 	vmov	r2, r3, d9
 8009f18:	4606      	mov	r6, r0
 8009f1a:	460f      	mov	r7, r1
 8009f1c:	4620      	mov	r0, r4
 8009f1e:	4629      	mov	r1, r5
 8009f20:	f7f6 f98a 	bl	8000238 <__aeabi_dsub>
 8009f24:	4602      	mov	r2, r0
 8009f26:	460b      	mov	r3, r1
 8009f28:	4650      	mov	r0, sl
 8009f2a:	4659      	mov	r1, fp
 8009f2c:	f7f6 f984 	bl	8000238 <__aeabi_dsub>
 8009f30:	4642      	mov	r2, r8
 8009f32:	464b      	mov	r3, r9
 8009f34:	f7f6 fb38 	bl	80005a8 <__aeabi_dmul>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	460b      	mov	r3, r1
 8009f3c:	4630      	mov	r0, r6
 8009f3e:	4639      	mov	r1, r7
 8009f40:	f7f6 f97a 	bl	8000238 <__aeabi_dsub>
 8009f44:	ec53 2b1a 	vmov	r2, r3, d10
 8009f48:	f7f6 fb2e 	bl	80005a8 <__aeabi_dmul>
 8009f4c:	ec53 2b18 	vmov	r2, r3, d8
 8009f50:	ec41 0b19 	vmov	d9, r0, r1
 8009f54:	ec51 0b18 	vmov	r0, r1, d8
 8009f58:	f7f6 fb26 	bl	80005a8 <__aeabi_dmul>
 8009f5c:	a37c      	add	r3, pc, #496	; (adr r3, 800a150 <__ieee754_pow+0x708>)
 8009f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f62:	4604      	mov	r4, r0
 8009f64:	460d      	mov	r5, r1
 8009f66:	f7f6 fb1f 	bl	80005a8 <__aeabi_dmul>
 8009f6a:	a37b      	add	r3, pc, #492	; (adr r3, 800a158 <__ieee754_pow+0x710>)
 8009f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f70:	f7f6 f964 	bl	800023c <__adddf3>
 8009f74:	4622      	mov	r2, r4
 8009f76:	462b      	mov	r3, r5
 8009f78:	f7f6 fb16 	bl	80005a8 <__aeabi_dmul>
 8009f7c:	a378      	add	r3, pc, #480	; (adr r3, 800a160 <__ieee754_pow+0x718>)
 8009f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f82:	f7f6 f95b 	bl	800023c <__adddf3>
 8009f86:	4622      	mov	r2, r4
 8009f88:	462b      	mov	r3, r5
 8009f8a:	f7f6 fb0d 	bl	80005a8 <__aeabi_dmul>
 8009f8e:	a376      	add	r3, pc, #472	; (adr r3, 800a168 <__ieee754_pow+0x720>)
 8009f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f94:	f7f6 f952 	bl	800023c <__adddf3>
 8009f98:	4622      	mov	r2, r4
 8009f9a:	462b      	mov	r3, r5
 8009f9c:	f7f6 fb04 	bl	80005a8 <__aeabi_dmul>
 8009fa0:	a373      	add	r3, pc, #460	; (adr r3, 800a170 <__ieee754_pow+0x728>)
 8009fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa6:	f7f6 f949 	bl	800023c <__adddf3>
 8009faa:	4622      	mov	r2, r4
 8009fac:	462b      	mov	r3, r5
 8009fae:	f7f6 fafb 	bl	80005a8 <__aeabi_dmul>
 8009fb2:	a371      	add	r3, pc, #452	; (adr r3, 800a178 <__ieee754_pow+0x730>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f940 	bl	800023c <__adddf3>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4606      	mov	r6, r0
 8009fc0:	460f      	mov	r7, r1
 8009fc2:	462b      	mov	r3, r5
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	4629      	mov	r1, r5
 8009fc8:	f7f6 faee 	bl	80005a8 <__aeabi_dmul>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	4639      	mov	r1, r7
 8009fd4:	f7f6 fae8 	bl	80005a8 <__aeabi_dmul>
 8009fd8:	4642      	mov	r2, r8
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	464b      	mov	r3, r9
 8009fe0:	ec51 0b18 	vmov	r0, r1, d8
 8009fe4:	f7f6 f92a 	bl	800023c <__adddf3>
 8009fe8:	ec53 2b19 	vmov	r2, r3, d9
 8009fec:	f7f6 fadc 	bl	80005a8 <__aeabi_dmul>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	f7f6 f922 	bl	800023c <__adddf3>
 8009ff8:	4642      	mov	r2, r8
 8009ffa:	4682      	mov	sl, r0
 8009ffc:	468b      	mov	fp, r1
 8009ffe:	464b      	mov	r3, r9
 800a000:	4640      	mov	r0, r8
 800a002:	4649      	mov	r1, r9
 800a004:	f7f6 fad0 	bl	80005a8 <__aeabi_dmul>
 800a008:	4b6b      	ldr	r3, [pc, #428]	; (800a1b8 <__ieee754_pow+0x770>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	4606      	mov	r6, r0
 800a00e:	460f      	mov	r7, r1
 800a010:	f7f6 f914 	bl	800023c <__adddf3>
 800a014:	4652      	mov	r2, sl
 800a016:	465b      	mov	r3, fp
 800a018:	f7f6 f910 	bl	800023c <__adddf3>
 800a01c:	2000      	movs	r0, #0
 800a01e:	4604      	mov	r4, r0
 800a020:	460d      	mov	r5, r1
 800a022:	4602      	mov	r2, r0
 800a024:	460b      	mov	r3, r1
 800a026:	4640      	mov	r0, r8
 800a028:	4649      	mov	r1, r9
 800a02a:	f7f6 fabd 	bl	80005a8 <__aeabi_dmul>
 800a02e:	4b62      	ldr	r3, [pc, #392]	; (800a1b8 <__ieee754_pow+0x770>)
 800a030:	4680      	mov	r8, r0
 800a032:	4689      	mov	r9, r1
 800a034:	2200      	movs	r2, #0
 800a036:	4620      	mov	r0, r4
 800a038:	4629      	mov	r1, r5
 800a03a:	f7f6 f8fd 	bl	8000238 <__aeabi_dsub>
 800a03e:	4632      	mov	r2, r6
 800a040:	463b      	mov	r3, r7
 800a042:	f7f6 f8f9 	bl	8000238 <__aeabi_dsub>
 800a046:	4602      	mov	r2, r0
 800a048:	460b      	mov	r3, r1
 800a04a:	4650      	mov	r0, sl
 800a04c:	4659      	mov	r1, fp
 800a04e:	f7f6 f8f3 	bl	8000238 <__aeabi_dsub>
 800a052:	ec53 2b18 	vmov	r2, r3, d8
 800a056:	f7f6 faa7 	bl	80005a8 <__aeabi_dmul>
 800a05a:	4622      	mov	r2, r4
 800a05c:	4606      	mov	r6, r0
 800a05e:	460f      	mov	r7, r1
 800a060:	462b      	mov	r3, r5
 800a062:	ec51 0b19 	vmov	r0, r1, d9
 800a066:	f7f6 fa9f 	bl	80005a8 <__aeabi_dmul>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 f8e3 	bl	800023c <__adddf3>
 800a076:	4606      	mov	r6, r0
 800a078:	460f      	mov	r7, r1
 800a07a:	4602      	mov	r2, r0
 800a07c:	460b      	mov	r3, r1
 800a07e:	4640      	mov	r0, r8
 800a080:	4649      	mov	r1, r9
 800a082:	f7f6 f8db 	bl	800023c <__adddf3>
 800a086:	a33e      	add	r3, pc, #248	; (adr r3, 800a180 <__ieee754_pow+0x738>)
 800a088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a08c:	2000      	movs	r0, #0
 800a08e:	4604      	mov	r4, r0
 800a090:	460d      	mov	r5, r1
 800a092:	f7f6 fa89 	bl	80005a8 <__aeabi_dmul>
 800a096:	4642      	mov	r2, r8
 800a098:	ec41 0b18 	vmov	d8, r0, r1
 800a09c:	464b      	mov	r3, r9
 800a09e:	4620      	mov	r0, r4
 800a0a0:	4629      	mov	r1, r5
 800a0a2:	f7f6 f8c9 	bl	8000238 <__aeabi_dsub>
 800a0a6:	4602      	mov	r2, r0
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	4639      	mov	r1, r7
 800a0ae:	f7f6 f8c3 	bl	8000238 <__aeabi_dsub>
 800a0b2:	a335      	add	r3, pc, #212	; (adr r3, 800a188 <__ieee754_pow+0x740>)
 800a0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b8:	f7f6 fa76 	bl	80005a8 <__aeabi_dmul>
 800a0bc:	a334      	add	r3, pc, #208	; (adr r3, 800a190 <__ieee754_pow+0x748>)
 800a0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c2:	4606      	mov	r6, r0
 800a0c4:	460f      	mov	r7, r1
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	4629      	mov	r1, r5
 800a0ca:	f7f6 fa6d 	bl	80005a8 <__aeabi_dmul>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	4639      	mov	r1, r7
 800a0d6:	f7f6 f8b1 	bl	800023c <__adddf3>
 800a0da:	9a07      	ldr	r2, [sp, #28]
 800a0dc:	4b37      	ldr	r3, [pc, #220]	; (800a1bc <__ieee754_pow+0x774>)
 800a0de:	4413      	add	r3, r2
 800a0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e4:	f7f6 f8aa 	bl	800023c <__adddf3>
 800a0e8:	4682      	mov	sl, r0
 800a0ea:	9805      	ldr	r0, [sp, #20]
 800a0ec:	468b      	mov	fp, r1
 800a0ee:	f7f6 f9f1 	bl	80004d4 <__aeabi_i2d>
 800a0f2:	9a07      	ldr	r2, [sp, #28]
 800a0f4:	4b32      	ldr	r3, [pc, #200]	; (800a1c0 <__ieee754_pow+0x778>)
 800a0f6:	4413      	add	r3, r2
 800a0f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a0fc:	4606      	mov	r6, r0
 800a0fe:	460f      	mov	r7, r1
 800a100:	4652      	mov	r2, sl
 800a102:	465b      	mov	r3, fp
 800a104:	ec51 0b18 	vmov	r0, r1, d8
 800a108:	f7f6 f898 	bl	800023c <__adddf3>
 800a10c:	4642      	mov	r2, r8
 800a10e:	464b      	mov	r3, r9
 800a110:	f7f6 f894 	bl	800023c <__adddf3>
 800a114:	4632      	mov	r2, r6
 800a116:	463b      	mov	r3, r7
 800a118:	f7f6 f890 	bl	800023c <__adddf3>
 800a11c:	2000      	movs	r0, #0
 800a11e:	4632      	mov	r2, r6
 800a120:	463b      	mov	r3, r7
 800a122:	4604      	mov	r4, r0
 800a124:	460d      	mov	r5, r1
 800a126:	f7f6 f887 	bl	8000238 <__aeabi_dsub>
 800a12a:	4642      	mov	r2, r8
 800a12c:	464b      	mov	r3, r9
 800a12e:	f7f6 f883 	bl	8000238 <__aeabi_dsub>
 800a132:	ec53 2b18 	vmov	r2, r3, d8
 800a136:	f7f6 f87f 	bl	8000238 <__aeabi_dsub>
 800a13a:	4602      	mov	r2, r0
 800a13c:	460b      	mov	r3, r1
 800a13e:	4650      	mov	r0, sl
 800a140:	4659      	mov	r1, fp
 800a142:	e610      	b.n	8009d66 <__ieee754_pow+0x31e>
 800a144:	2401      	movs	r4, #1
 800a146:	e6a1      	b.n	8009e8c <__ieee754_pow+0x444>
 800a148:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a198 <__ieee754_pow+0x750>
 800a14c:	e617      	b.n	8009d7e <__ieee754_pow+0x336>
 800a14e:	bf00      	nop
 800a150:	4a454eef 	.word	0x4a454eef
 800a154:	3fca7e28 	.word	0x3fca7e28
 800a158:	93c9db65 	.word	0x93c9db65
 800a15c:	3fcd864a 	.word	0x3fcd864a
 800a160:	a91d4101 	.word	0xa91d4101
 800a164:	3fd17460 	.word	0x3fd17460
 800a168:	518f264d 	.word	0x518f264d
 800a16c:	3fd55555 	.word	0x3fd55555
 800a170:	db6fabff 	.word	0xdb6fabff
 800a174:	3fdb6db6 	.word	0x3fdb6db6
 800a178:	33333303 	.word	0x33333303
 800a17c:	3fe33333 	.word	0x3fe33333
 800a180:	e0000000 	.word	0xe0000000
 800a184:	3feec709 	.word	0x3feec709
 800a188:	dc3a03fd 	.word	0xdc3a03fd
 800a18c:	3feec709 	.word	0x3feec709
 800a190:	145b01f5 	.word	0x145b01f5
 800a194:	be3e2fe0 	.word	0xbe3e2fe0
 800a198:	00000000 	.word	0x00000000
 800a19c:	3ff00000 	.word	0x3ff00000
 800a1a0:	7ff00000 	.word	0x7ff00000
 800a1a4:	43400000 	.word	0x43400000
 800a1a8:	0003988e 	.word	0x0003988e
 800a1ac:	000bb679 	.word	0x000bb679
 800a1b0:	0800b5b8 	.word	0x0800b5b8
 800a1b4:	3ff00000 	.word	0x3ff00000
 800a1b8:	40080000 	.word	0x40080000
 800a1bc:	0800b5d8 	.word	0x0800b5d8
 800a1c0:	0800b5c8 	.word	0x0800b5c8
 800a1c4:	a3b5      	add	r3, pc, #724	; (adr r3, 800a49c <__ieee754_pow+0xa54>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	f7f6 f835 	bl	800023c <__adddf3>
 800a1d2:	4622      	mov	r2, r4
 800a1d4:	ec41 0b1a 	vmov	d10, r0, r1
 800a1d8:	462b      	mov	r3, r5
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 f82b 	bl	8000238 <__aeabi_dsub>
 800a1e2:	4602      	mov	r2, r0
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	ec51 0b1a 	vmov	r0, r1, d10
 800a1ea:	f7f6 fc6d 	bl	8000ac8 <__aeabi_dcmpgt>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f47f ae04 	bne.w	8009dfc <__ieee754_pow+0x3b4>
 800a1f4:	4aa4      	ldr	r2, [pc, #656]	; (800a488 <__ieee754_pow+0xa40>)
 800a1f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	f340 8108 	ble.w	800a410 <__ieee754_pow+0x9c8>
 800a200:	151b      	asrs	r3, r3, #20
 800a202:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a206:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a20a:	fa4a f303 	asr.w	r3, sl, r3
 800a20e:	445b      	add	r3, fp
 800a210:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800a214:	4e9d      	ldr	r6, [pc, #628]	; (800a48c <__ieee754_pow+0xa44>)
 800a216:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a21a:	4116      	asrs	r6, r2
 800a21c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800a220:	2000      	movs	r0, #0
 800a222:	ea23 0106 	bic.w	r1, r3, r6
 800a226:	f1c2 0214 	rsb	r2, r2, #20
 800a22a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a22e:	fa4a fa02 	asr.w	sl, sl, r2
 800a232:	f1bb 0f00 	cmp.w	fp, #0
 800a236:	4602      	mov	r2, r0
 800a238:	460b      	mov	r3, r1
 800a23a:	4620      	mov	r0, r4
 800a23c:	4629      	mov	r1, r5
 800a23e:	bfb8      	it	lt
 800a240:	f1ca 0a00 	rsblt	sl, sl, #0
 800a244:	f7f5 fff8 	bl	8000238 <__aeabi_dsub>
 800a248:	ec41 0b19 	vmov	d9, r0, r1
 800a24c:	4642      	mov	r2, r8
 800a24e:	464b      	mov	r3, r9
 800a250:	ec51 0b19 	vmov	r0, r1, d9
 800a254:	f7f5 fff2 	bl	800023c <__adddf3>
 800a258:	a37b      	add	r3, pc, #492	; (adr r3, 800a448 <__ieee754_pow+0xa00>)
 800a25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a25e:	2000      	movs	r0, #0
 800a260:	4604      	mov	r4, r0
 800a262:	460d      	mov	r5, r1
 800a264:	f7f6 f9a0 	bl	80005a8 <__aeabi_dmul>
 800a268:	ec53 2b19 	vmov	r2, r3, d9
 800a26c:	4606      	mov	r6, r0
 800a26e:	460f      	mov	r7, r1
 800a270:	4620      	mov	r0, r4
 800a272:	4629      	mov	r1, r5
 800a274:	f7f5 ffe0 	bl	8000238 <__aeabi_dsub>
 800a278:	4602      	mov	r2, r0
 800a27a:	460b      	mov	r3, r1
 800a27c:	4640      	mov	r0, r8
 800a27e:	4649      	mov	r1, r9
 800a280:	f7f5 ffda 	bl	8000238 <__aeabi_dsub>
 800a284:	a372      	add	r3, pc, #456	; (adr r3, 800a450 <__ieee754_pow+0xa08>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 f98d 	bl	80005a8 <__aeabi_dmul>
 800a28e:	a372      	add	r3, pc, #456	; (adr r3, 800a458 <__ieee754_pow+0xa10>)
 800a290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a294:	4680      	mov	r8, r0
 800a296:	4689      	mov	r9, r1
 800a298:	4620      	mov	r0, r4
 800a29a:	4629      	mov	r1, r5
 800a29c:	f7f6 f984 	bl	80005a8 <__aeabi_dmul>
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	f7f5 ffc8 	bl	800023c <__adddf3>
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	460d      	mov	r5, r1
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	4630      	mov	r0, r6
 800a2b6:	4639      	mov	r1, r7
 800a2b8:	f7f5 ffc0 	bl	800023c <__adddf3>
 800a2bc:	4632      	mov	r2, r6
 800a2be:	463b      	mov	r3, r7
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4689      	mov	r9, r1
 800a2c4:	f7f5 ffb8 	bl	8000238 <__aeabi_dsub>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f5 ffb2 	bl	8000238 <__aeabi_dsub>
 800a2d4:	4642      	mov	r2, r8
 800a2d6:	4606      	mov	r6, r0
 800a2d8:	460f      	mov	r7, r1
 800a2da:	464b      	mov	r3, r9
 800a2dc:	4640      	mov	r0, r8
 800a2de:	4649      	mov	r1, r9
 800a2e0:	f7f6 f962 	bl	80005a8 <__aeabi_dmul>
 800a2e4:	a35e      	add	r3, pc, #376	; (adr r3, 800a460 <__ieee754_pow+0xa18>)
 800a2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	f7f6 f95b 	bl	80005a8 <__aeabi_dmul>
 800a2f2:	a35d      	add	r3, pc, #372	; (adr r3, 800a468 <__ieee754_pow+0xa20>)
 800a2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f8:	f7f5 ff9e 	bl	8000238 <__aeabi_dsub>
 800a2fc:	4622      	mov	r2, r4
 800a2fe:	462b      	mov	r3, r5
 800a300:	f7f6 f952 	bl	80005a8 <__aeabi_dmul>
 800a304:	a35a      	add	r3, pc, #360	; (adr r3, 800a470 <__ieee754_pow+0xa28>)
 800a306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30a:	f7f5 ff97 	bl	800023c <__adddf3>
 800a30e:	4622      	mov	r2, r4
 800a310:	462b      	mov	r3, r5
 800a312:	f7f6 f949 	bl	80005a8 <__aeabi_dmul>
 800a316:	a358      	add	r3, pc, #352	; (adr r3, 800a478 <__ieee754_pow+0xa30>)
 800a318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31c:	f7f5 ff8c 	bl	8000238 <__aeabi_dsub>
 800a320:	4622      	mov	r2, r4
 800a322:	462b      	mov	r3, r5
 800a324:	f7f6 f940 	bl	80005a8 <__aeabi_dmul>
 800a328:	a355      	add	r3, pc, #340	; (adr r3, 800a480 <__ieee754_pow+0xa38>)
 800a32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a32e:	f7f5 ff85 	bl	800023c <__adddf3>
 800a332:	4622      	mov	r2, r4
 800a334:	462b      	mov	r3, r5
 800a336:	f7f6 f937 	bl	80005a8 <__aeabi_dmul>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4640      	mov	r0, r8
 800a340:	4649      	mov	r1, r9
 800a342:	f7f5 ff79 	bl	8000238 <__aeabi_dsub>
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4640      	mov	r0, r8
 800a350:	4649      	mov	r1, r9
 800a352:	f7f6 f929 	bl	80005a8 <__aeabi_dmul>
 800a356:	2200      	movs	r2, #0
 800a358:	ec41 0b19 	vmov	d9, r0, r1
 800a35c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7f5 ff68 	bl	8000238 <__aeabi_dsub>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	ec51 0b19 	vmov	r0, r1, d9
 800a370:	f7f6 fa44 	bl	80007fc <__aeabi_ddiv>
 800a374:	4632      	mov	r2, r6
 800a376:	4604      	mov	r4, r0
 800a378:	460d      	mov	r5, r1
 800a37a:	463b      	mov	r3, r7
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f6 f912 	bl	80005a8 <__aeabi_dmul>
 800a384:	4632      	mov	r2, r6
 800a386:	463b      	mov	r3, r7
 800a388:	f7f5 ff58 	bl	800023c <__adddf3>
 800a38c:	4602      	mov	r2, r0
 800a38e:	460b      	mov	r3, r1
 800a390:	4620      	mov	r0, r4
 800a392:	4629      	mov	r1, r5
 800a394:	f7f5 ff50 	bl	8000238 <__aeabi_dsub>
 800a398:	4642      	mov	r2, r8
 800a39a:	464b      	mov	r3, r9
 800a39c:	f7f5 ff4c 	bl	8000238 <__aeabi_dsub>
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	4602      	mov	r2, r0
 800a3a4:	493a      	ldr	r1, [pc, #232]	; (800a490 <__ieee754_pow+0xa48>)
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f7f5 ff46 	bl	8000238 <__aeabi_dsub>
 800a3ac:	ec41 0b10 	vmov	d0, r0, r1
 800a3b0:	ee10 3a90 	vmov	r3, s1
 800a3b4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a3b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3bc:	da2b      	bge.n	800a416 <__ieee754_pow+0x9ce>
 800a3be:	4650      	mov	r0, sl
 800a3c0:	f000 f966 	bl	800a690 <scalbn>
 800a3c4:	ec51 0b10 	vmov	r0, r1, d0
 800a3c8:	ec53 2b18 	vmov	r2, r3, d8
 800a3cc:	f7ff bbed 	b.w	8009baa <__ieee754_pow+0x162>
 800a3d0:	4b30      	ldr	r3, [pc, #192]	; (800a494 <__ieee754_pow+0xa4c>)
 800a3d2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a3d6:	429e      	cmp	r6, r3
 800a3d8:	f77f af0c 	ble.w	800a1f4 <__ieee754_pow+0x7ac>
 800a3dc:	4b2e      	ldr	r3, [pc, #184]	; (800a498 <__ieee754_pow+0xa50>)
 800a3de:	440b      	add	r3, r1
 800a3e0:	4303      	orrs	r3, r0
 800a3e2:	d009      	beq.n	800a3f8 <__ieee754_pow+0x9b0>
 800a3e4:	ec51 0b18 	vmov	r0, r1, d8
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	f7f6 fb4e 	bl	8000a8c <__aeabi_dcmplt>
 800a3f0:	3800      	subs	r0, #0
 800a3f2:	bf18      	it	ne
 800a3f4:	2001      	movne	r0, #1
 800a3f6:	e447      	b.n	8009c88 <__ieee754_pow+0x240>
 800a3f8:	4622      	mov	r2, r4
 800a3fa:	462b      	mov	r3, r5
 800a3fc:	f7f5 ff1c 	bl	8000238 <__aeabi_dsub>
 800a400:	4642      	mov	r2, r8
 800a402:	464b      	mov	r3, r9
 800a404:	f7f6 fb56 	bl	8000ab4 <__aeabi_dcmpge>
 800a408:	2800      	cmp	r0, #0
 800a40a:	f43f aef3 	beq.w	800a1f4 <__ieee754_pow+0x7ac>
 800a40e:	e7e9      	b.n	800a3e4 <__ieee754_pow+0x99c>
 800a410:	f04f 0a00 	mov.w	sl, #0
 800a414:	e71a      	b.n	800a24c <__ieee754_pow+0x804>
 800a416:	ec51 0b10 	vmov	r0, r1, d0
 800a41a:	4619      	mov	r1, r3
 800a41c:	e7d4      	b.n	800a3c8 <__ieee754_pow+0x980>
 800a41e:	491c      	ldr	r1, [pc, #112]	; (800a490 <__ieee754_pow+0xa48>)
 800a420:	2000      	movs	r0, #0
 800a422:	f7ff bb30 	b.w	8009a86 <__ieee754_pow+0x3e>
 800a426:	2000      	movs	r0, #0
 800a428:	2100      	movs	r1, #0
 800a42a:	f7ff bb2c 	b.w	8009a86 <__ieee754_pow+0x3e>
 800a42e:	4630      	mov	r0, r6
 800a430:	4639      	mov	r1, r7
 800a432:	f7ff bb28 	b.w	8009a86 <__ieee754_pow+0x3e>
 800a436:	9204      	str	r2, [sp, #16]
 800a438:	f7ff bb7a 	b.w	8009b30 <__ieee754_pow+0xe8>
 800a43c:	2300      	movs	r3, #0
 800a43e:	f7ff bb64 	b.w	8009b0a <__ieee754_pow+0xc2>
 800a442:	bf00      	nop
 800a444:	f3af 8000 	nop.w
 800a448:	00000000 	.word	0x00000000
 800a44c:	3fe62e43 	.word	0x3fe62e43
 800a450:	fefa39ef 	.word	0xfefa39ef
 800a454:	3fe62e42 	.word	0x3fe62e42
 800a458:	0ca86c39 	.word	0x0ca86c39
 800a45c:	be205c61 	.word	0xbe205c61
 800a460:	72bea4d0 	.word	0x72bea4d0
 800a464:	3e663769 	.word	0x3e663769
 800a468:	c5d26bf1 	.word	0xc5d26bf1
 800a46c:	3ebbbd41 	.word	0x3ebbbd41
 800a470:	af25de2c 	.word	0xaf25de2c
 800a474:	3f11566a 	.word	0x3f11566a
 800a478:	16bebd93 	.word	0x16bebd93
 800a47c:	3f66c16c 	.word	0x3f66c16c
 800a480:	5555553e 	.word	0x5555553e
 800a484:	3fc55555 	.word	0x3fc55555
 800a488:	3fe00000 	.word	0x3fe00000
 800a48c:	000fffff 	.word	0x000fffff
 800a490:	3ff00000 	.word	0x3ff00000
 800a494:	4090cbff 	.word	0x4090cbff
 800a498:	3f6f3400 	.word	0x3f6f3400
 800a49c:	652b82fe 	.word	0x652b82fe
 800a4a0:	3c971547 	.word	0x3c971547

0800a4a4 <__ieee754_sqrt>:
 800a4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a8:	ec55 4b10 	vmov	r4, r5, d0
 800a4ac:	4e55      	ldr	r6, [pc, #340]	; (800a604 <__ieee754_sqrt+0x160>)
 800a4ae:	43ae      	bics	r6, r5
 800a4b0:	ee10 0a10 	vmov	r0, s0
 800a4b4:	ee10 3a10 	vmov	r3, s0
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4629      	mov	r1, r5
 800a4bc:	d110      	bne.n	800a4e0 <__ieee754_sqrt+0x3c>
 800a4be:	ee10 2a10 	vmov	r2, s0
 800a4c2:	462b      	mov	r3, r5
 800a4c4:	f7f6 f870 	bl	80005a8 <__aeabi_dmul>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	4620      	mov	r0, r4
 800a4ce:	4629      	mov	r1, r5
 800a4d0:	f7f5 feb4 	bl	800023c <__adddf3>
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	460d      	mov	r5, r1
 800a4d8:	ec45 4b10 	vmov	d0, r4, r5
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	2d00      	cmp	r5, #0
 800a4e2:	dc10      	bgt.n	800a506 <__ieee754_sqrt+0x62>
 800a4e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a4e8:	4330      	orrs	r0, r6
 800a4ea:	d0f5      	beq.n	800a4d8 <__ieee754_sqrt+0x34>
 800a4ec:	b15d      	cbz	r5, 800a506 <__ieee754_sqrt+0x62>
 800a4ee:	ee10 2a10 	vmov	r2, s0
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	ee10 0a10 	vmov	r0, s0
 800a4f8:	f7f5 fe9e 	bl	8000238 <__aeabi_dsub>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	f7f6 f97c 	bl	80007fc <__aeabi_ddiv>
 800a504:	e7e6      	b.n	800a4d4 <__ieee754_sqrt+0x30>
 800a506:	1512      	asrs	r2, r2, #20
 800a508:	d074      	beq.n	800a5f4 <__ieee754_sqrt+0x150>
 800a50a:	07d4      	lsls	r4, r2, #31
 800a50c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a510:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a518:	bf5e      	ittt	pl
 800a51a:	0fda      	lsrpl	r2, r3, #31
 800a51c:	005b      	lslpl	r3, r3, #1
 800a51e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a522:	2400      	movs	r4, #0
 800a524:	0fda      	lsrs	r2, r3, #31
 800a526:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a52a:	107f      	asrs	r7, r7, #1
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	2516      	movs	r5, #22
 800a530:	4620      	mov	r0, r4
 800a532:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a536:	1886      	adds	r6, r0, r2
 800a538:	428e      	cmp	r6, r1
 800a53a:	bfde      	ittt	le
 800a53c:	1b89      	suble	r1, r1, r6
 800a53e:	18b0      	addle	r0, r6, r2
 800a540:	18a4      	addle	r4, r4, r2
 800a542:	0049      	lsls	r1, r1, #1
 800a544:	3d01      	subs	r5, #1
 800a546:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a54a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a54e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a552:	d1f0      	bne.n	800a536 <__ieee754_sqrt+0x92>
 800a554:	462a      	mov	r2, r5
 800a556:	f04f 0e20 	mov.w	lr, #32
 800a55a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a55e:	4281      	cmp	r1, r0
 800a560:	eb06 0c05 	add.w	ip, r6, r5
 800a564:	dc02      	bgt.n	800a56c <__ieee754_sqrt+0xc8>
 800a566:	d113      	bne.n	800a590 <__ieee754_sqrt+0xec>
 800a568:	459c      	cmp	ip, r3
 800a56a:	d811      	bhi.n	800a590 <__ieee754_sqrt+0xec>
 800a56c:	f1bc 0f00 	cmp.w	ip, #0
 800a570:	eb0c 0506 	add.w	r5, ip, r6
 800a574:	da43      	bge.n	800a5fe <__ieee754_sqrt+0x15a>
 800a576:	2d00      	cmp	r5, #0
 800a578:	db41      	blt.n	800a5fe <__ieee754_sqrt+0x15a>
 800a57a:	f100 0801 	add.w	r8, r0, #1
 800a57e:	1a09      	subs	r1, r1, r0
 800a580:	459c      	cmp	ip, r3
 800a582:	bf88      	it	hi
 800a584:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 800a588:	eba3 030c 	sub.w	r3, r3, ip
 800a58c:	4432      	add	r2, r6
 800a58e:	4640      	mov	r0, r8
 800a590:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a594:	f1be 0e01 	subs.w	lr, lr, #1
 800a598:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a59c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a5a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a5a4:	d1db      	bne.n	800a55e <__ieee754_sqrt+0xba>
 800a5a6:	430b      	orrs	r3, r1
 800a5a8:	d006      	beq.n	800a5b8 <__ieee754_sqrt+0x114>
 800a5aa:	1c50      	adds	r0, r2, #1
 800a5ac:	bf13      	iteet	ne
 800a5ae:	3201      	addne	r2, #1
 800a5b0:	3401      	addeq	r4, #1
 800a5b2:	4672      	moveq	r2, lr
 800a5b4:	f022 0201 	bicne.w	r2, r2, #1
 800a5b8:	1063      	asrs	r3, r4, #1
 800a5ba:	0852      	lsrs	r2, r2, #1
 800a5bc:	07e1      	lsls	r1, r4, #31
 800a5be:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a5c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a5c6:	bf48      	it	mi
 800a5c8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a5cc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a5d0:	4614      	mov	r4, r2
 800a5d2:	e781      	b.n	800a4d8 <__ieee754_sqrt+0x34>
 800a5d4:	0ad9      	lsrs	r1, r3, #11
 800a5d6:	3815      	subs	r0, #21
 800a5d8:	055b      	lsls	r3, r3, #21
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	d0fa      	beq.n	800a5d4 <__ieee754_sqrt+0x130>
 800a5de:	02cd      	lsls	r5, r1, #11
 800a5e0:	d50a      	bpl.n	800a5f8 <__ieee754_sqrt+0x154>
 800a5e2:	f1c2 0420 	rsb	r4, r2, #32
 800a5e6:	fa23 f404 	lsr.w	r4, r3, r4
 800a5ea:	1e55      	subs	r5, r2, #1
 800a5ec:	4093      	lsls	r3, r2
 800a5ee:	4321      	orrs	r1, r4
 800a5f0:	1b42      	subs	r2, r0, r5
 800a5f2:	e78a      	b.n	800a50a <__ieee754_sqrt+0x66>
 800a5f4:	4610      	mov	r0, r2
 800a5f6:	e7f0      	b.n	800a5da <__ieee754_sqrt+0x136>
 800a5f8:	0049      	lsls	r1, r1, #1
 800a5fa:	3201      	adds	r2, #1
 800a5fc:	e7ef      	b.n	800a5de <__ieee754_sqrt+0x13a>
 800a5fe:	4680      	mov	r8, r0
 800a600:	e7bd      	b.n	800a57e <__ieee754_sqrt+0xda>
 800a602:	bf00      	nop
 800a604:	7ff00000 	.word	0x7ff00000

0800a608 <with_errno>:
 800a608:	b570      	push	{r4, r5, r6, lr}
 800a60a:	4604      	mov	r4, r0
 800a60c:	460d      	mov	r5, r1
 800a60e:	4616      	mov	r6, r2
 800a610:	f7fd fb64 	bl	8007cdc <__errno>
 800a614:	4629      	mov	r1, r5
 800a616:	6006      	str	r6, [r0, #0]
 800a618:	4620      	mov	r0, r4
 800a61a:	bd70      	pop	{r4, r5, r6, pc}

0800a61c <xflow>:
 800a61c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a61e:	4614      	mov	r4, r2
 800a620:	461d      	mov	r5, r3
 800a622:	b108      	cbz	r0, 800a628 <xflow+0xc>
 800a624:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a628:	e9cd 2300 	strd	r2, r3, [sp]
 800a62c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a630:	4620      	mov	r0, r4
 800a632:	4629      	mov	r1, r5
 800a634:	f7f5 ffb8 	bl	80005a8 <__aeabi_dmul>
 800a638:	2222      	movs	r2, #34	; 0x22
 800a63a:	b003      	add	sp, #12
 800a63c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a640:	f7ff bfe2 	b.w	800a608 <with_errno>

0800a644 <__math_uflow>:
 800a644:	b508      	push	{r3, lr}
 800a646:	2200      	movs	r2, #0
 800a648:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a64c:	f7ff ffe6 	bl	800a61c <xflow>
 800a650:	ec41 0b10 	vmov	d0, r0, r1
 800a654:	bd08      	pop	{r3, pc}

0800a656 <__math_oflow>:
 800a656:	b508      	push	{r3, lr}
 800a658:	2200      	movs	r2, #0
 800a65a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a65e:	f7ff ffdd 	bl	800a61c <xflow>
 800a662:	ec41 0b10 	vmov	d0, r0, r1
 800a666:	bd08      	pop	{r3, pc}

0800a668 <fabs>:
 800a668:	ec51 0b10 	vmov	r0, r1, d0
 800a66c:	ee10 2a10 	vmov	r2, s0
 800a670:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a674:	ec43 2b10 	vmov	d0, r2, r3
 800a678:	4770      	bx	lr

0800a67a <finite>:
 800a67a:	b082      	sub	sp, #8
 800a67c:	ed8d 0b00 	vstr	d0, [sp]
 800a680:	9801      	ldr	r0, [sp, #4]
 800a682:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a686:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a68a:	0fc0      	lsrs	r0, r0, #31
 800a68c:	b002      	add	sp, #8
 800a68e:	4770      	bx	lr

0800a690 <scalbn>:
 800a690:	b570      	push	{r4, r5, r6, lr}
 800a692:	ec55 4b10 	vmov	r4, r5, d0
 800a696:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a69a:	4606      	mov	r6, r0
 800a69c:	462b      	mov	r3, r5
 800a69e:	b99a      	cbnz	r2, 800a6c8 <scalbn+0x38>
 800a6a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a6a4:	4323      	orrs	r3, r4
 800a6a6:	d036      	beq.n	800a716 <scalbn+0x86>
 800a6a8:	4b39      	ldr	r3, [pc, #228]	; (800a790 <scalbn+0x100>)
 800a6aa:	4629      	mov	r1, r5
 800a6ac:	ee10 0a10 	vmov	r0, s0
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f7f5 ff79 	bl	80005a8 <__aeabi_dmul>
 800a6b6:	4b37      	ldr	r3, [pc, #220]	; (800a794 <scalbn+0x104>)
 800a6b8:	429e      	cmp	r6, r3
 800a6ba:	4604      	mov	r4, r0
 800a6bc:	460d      	mov	r5, r1
 800a6be:	da10      	bge.n	800a6e2 <scalbn+0x52>
 800a6c0:	a32b      	add	r3, pc, #172	; (adr r3, 800a770 <scalbn+0xe0>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	e03a      	b.n	800a73e <scalbn+0xae>
 800a6c8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a6cc:	428a      	cmp	r2, r1
 800a6ce:	d10c      	bne.n	800a6ea <scalbn+0x5a>
 800a6d0:	ee10 2a10 	vmov	r2, s0
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	f7f5 fdb0 	bl	800023c <__adddf3>
 800a6dc:	4604      	mov	r4, r0
 800a6de:	460d      	mov	r5, r1
 800a6e0:	e019      	b.n	800a716 <scalbn+0x86>
 800a6e2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	3a36      	subs	r2, #54	; 0x36
 800a6ea:	4432      	add	r2, r6
 800a6ec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a6f0:	428a      	cmp	r2, r1
 800a6f2:	dd08      	ble.n	800a706 <scalbn+0x76>
 800a6f4:	2d00      	cmp	r5, #0
 800a6f6:	a120      	add	r1, pc, #128	; (adr r1, 800a778 <scalbn+0xe8>)
 800a6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fc:	da1c      	bge.n	800a738 <scalbn+0xa8>
 800a6fe:	a120      	add	r1, pc, #128	; (adr r1, 800a780 <scalbn+0xf0>)
 800a700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a704:	e018      	b.n	800a738 <scalbn+0xa8>
 800a706:	2a00      	cmp	r2, #0
 800a708:	dd08      	ble.n	800a71c <scalbn+0x8c>
 800a70a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a70e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a712:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a716:	ec45 4b10 	vmov	d0, r4, r5
 800a71a:	bd70      	pop	{r4, r5, r6, pc}
 800a71c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a720:	da19      	bge.n	800a756 <scalbn+0xc6>
 800a722:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a726:	429e      	cmp	r6, r3
 800a728:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a72c:	dd0a      	ble.n	800a744 <scalbn+0xb4>
 800a72e:	a112      	add	r1, pc, #72	; (adr r1, 800a778 <scalbn+0xe8>)
 800a730:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d1e2      	bne.n	800a6fe <scalbn+0x6e>
 800a738:	a30f      	add	r3, pc, #60	; (adr r3, 800a778 <scalbn+0xe8>)
 800a73a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73e:	f7f5 ff33 	bl	80005a8 <__aeabi_dmul>
 800a742:	e7cb      	b.n	800a6dc <scalbn+0x4c>
 800a744:	a10a      	add	r1, pc, #40	; (adr r1, 800a770 <scalbn+0xe0>)
 800a746:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d0b8      	beq.n	800a6c0 <scalbn+0x30>
 800a74e:	a10e      	add	r1, pc, #56	; (adr r1, 800a788 <scalbn+0xf8>)
 800a750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a754:	e7b4      	b.n	800a6c0 <scalbn+0x30>
 800a756:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a75a:	3236      	adds	r2, #54	; 0x36
 800a75c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a760:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a764:	4620      	mov	r0, r4
 800a766:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <scalbn+0x108>)
 800a768:	2200      	movs	r2, #0
 800a76a:	e7e8      	b.n	800a73e <scalbn+0xae>
 800a76c:	f3af 8000 	nop.w
 800a770:	c2f8f359 	.word	0xc2f8f359
 800a774:	01a56e1f 	.word	0x01a56e1f
 800a778:	8800759c 	.word	0x8800759c
 800a77c:	7e37e43c 	.word	0x7e37e43c
 800a780:	8800759c 	.word	0x8800759c
 800a784:	fe37e43c 	.word	0xfe37e43c
 800a788:	c2f8f359 	.word	0xc2f8f359
 800a78c:	81a56e1f 	.word	0x81a56e1f
 800a790:	43500000 	.word	0x43500000
 800a794:	ffff3cb0 	.word	0xffff3cb0
 800a798:	3c900000 	.word	0x3c900000

0800a79c <_init>:
 800a79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a79e:	bf00      	nop
 800a7a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a2:	bc08      	pop	{r3}
 800a7a4:	469e      	mov	lr, r3
 800a7a6:	4770      	bx	lr

0800a7a8 <_fini>:
 800a7a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7aa:	bf00      	nop
 800a7ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7ae:	bc08      	pop	{r3}
 800a7b0:	469e      	mov	lr, r3
 800a7b2:	4770      	bx	lr
