
luni_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054f4  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  08005634  08005634  00015634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005828  08005828  00015828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  08005830  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000014c  20000098  080058c0  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001e4  080058c0  000201e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013849  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002976  00000000  00000000  00033911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001510  00000000  00000000  00036288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001418  00000000  00000000  00037798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022317  00000000  00000000  00038bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00013186  00000000  00000000  0005aec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d96ec  00000000  00000000  0006e04d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00147739  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005fd4  00000000  00000000  0014778c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	0800561c 	.word	0x0800561c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	0800561c 	.word	0x0800561c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <EpdDigitalWriteCallback>:
		EPD_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10e      	bne.n	8000552 <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	4413      	add	r3, r2
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	b29b      	uxth	r3, r3
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f001 f8be 	bl	80016cc <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8000550:	e00d      	b.n	800056e <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	4413      	add	r3, r2
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	f001 f8af 	bl	80016cc <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000b4 	.word	0x200000b4

0800057c <EpdDelayMsCallback>:
  } else {
    return LOW;
  }
}

void EpdDelayMsCallback(unsigned int delaytime) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f000 fdfd 	bl	8001184 <HAL_Delay>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <EpdSpiTransferCallback+0x44>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <EpdSpiTransferCallback+0x44>)
 80005a4:	6852      	ldr	r2, [r2, #4]
 80005a6:	b291      	uxth	r1, r2
 80005a8:	2200      	movs	r2, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f88e 	bl	80016cc <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80005b0:	1df9      	adds	r1, r7, #7
 80005b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b6:	2201      	movs	r2, #1
 80005b8:	4808      	ldr	r0, [pc, #32]	; (80005dc <EpdSpiTransferCallback+0x48>)
 80005ba:	f002 ff4c 	bl	8003456 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <EpdSpiTransferCallback+0x44>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <EpdSpiTransferCallback+0x44>)
 80005c4:	6852      	ldr	r2, [r2, #4]
 80005c6:	b291      	uxth	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 f87e 	bl	80016cc <HAL_GPIO_WritePin>
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	200000b4 	.word	0x200000b4
 80005dc:	200000d4 	.word	0x200000d4

080005e0 <EpdInitCallback>:

int EpdInitCallback(void) {
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 80005e4:	4b10      	ldr	r3, [pc, #64]	; (8000628 <EpdInitCallback+0x48>)
 80005e6:	4a11      	ldr	r2, [pc, #68]	; (800062c <EpdInitCallback+0x4c>)
 80005e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ec:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 80005f0:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <EpdInitCallback+0x48>)
 80005f2:	4a0f      	ldr	r2, [pc, #60]	; (8000630 <EpdInitCallback+0x50>)
 80005f4:	3308      	adds	r3, #8
 80005f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005fa:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 80005fe:	4b0a      	ldr	r3, [pc, #40]	; (8000628 <EpdInitCallback+0x48>)
 8000600:	4a0c      	ldr	r2, [pc, #48]	; (8000634 <EpdInitCallback+0x54>)
 8000602:	3310      	adds	r3, #16
 8000604:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000608:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <EpdInitCallback+0x48>)
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <EpdInitCallback+0x58>)
 8000610:	3318      	adds	r3, #24
 8000612:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000616:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 800061a:	2300      	movs	r3, #0
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	200000b4 	.word	0x200000b4
 800062c:	20000008 	.word	0x20000008
 8000630:	20000010 	.word	0x20000010
 8000634:	20000018 	.word	0x20000018
 8000638:	20000020 	.word	0x20000020

0800063c <EPD_Init>:
#include <stdlib.h>
#include "epd2in9.h"
#include "main.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	6039      	str	r1, [r7, #0]
  epd->reset_pin = EPD_RST_Pin;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800064c:	601a      	str	r2, [r3, #0]
  epd->dc_pin = EPD_DC_Pin;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2240      	movs	r2, #64	; 0x40
 8000652:	605a      	str	r2, [r3, #4]
  epd->cs_pin = EPD_CS_Pin;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800065a:	609a      	str	r2, [r3, #8]
  epd->busy_pin = EPD_BUSY_Pin;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000662:	60da      	str	r2, [r3, #12]
  epd->width = EPD_WIDTH;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	611a      	str	r2, [r3, #16]
  epd->height = EPD_HEIGHT;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f44f 7294 	mov.w	r2, #296	; 0x128
 8000670:	615a      	str	r2, [r3, #20]
  /* this calls the peripheral hardware interface, see epdif */
  if (EpdInitCallback() != 0) {
 8000672:	f7ff ffb5 	bl	80005e0 <EpdInitCallback>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <EPD_Init+0x46>
    return -1;
 800067c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000680:	e04c      	b.n	800071c <EPD_Init+0xe0>
  }
  epd->lut = lut;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	619a      	str	r2, [r3, #24]
  /* EPD hardware init start */
  EPD_Reset(epd);
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f88f 	bl	80007ac <EPD_Reset>
  EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 800068e:	2101      	movs	r1, #1
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f861 	bl	8000758 <EPD_SendCommand>
  EPD_SendData(epd, (EPD_HEIGHT - 1) & 0xFF);
 8000696:	2127      	movs	r1, #39	; 0x27
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f872 	bl	8000782 <EPD_SendData>
  EPD_SendData(epd, ((EPD_HEIGHT - 1) >> 8) & 0xFF);
 800069e:	2101      	movs	r1, #1
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f86e 	bl	8000782 <EPD_SendData>
  EPD_SendData(epd, 0x00);                     // GD = 0; SM = 0; TB = 0;
 80006a6:	2100      	movs	r1, #0
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f86a 	bl	8000782 <EPD_SendData>
  EPD_SendCommand(epd, BOOSTER_SOFT_START_CONTROL);
 80006ae:	210c      	movs	r1, #12
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f000 f851 	bl	8000758 <EPD_SendCommand>
  EPD_SendData(epd, 0xD7);
 80006b6:	21d7      	movs	r1, #215	; 0xd7
 80006b8:	6878      	ldr	r0, [r7, #4]
 80006ba:	f000 f862 	bl	8000782 <EPD_SendData>
  EPD_SendData(epd, 0xD6);
 80006be:	21d6      	movs	r1, #214	; 0xd6
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f85e 	bl	8000782 <EPD_SendData>
  EPD_SendData(epd, 0x9D);
 80006c6:	219d      	movs	r1, #157	; 0x9d
 80006c8:	6878      	ldr	r0, [r7, #4]
 80006ca:	f000 f85a 	bl	8000782 <EPD_SendData>
  EPD_SendCommand(epd, WRITE_VCOM_REGISTER);
 80006ce:	212c      	movs	r1, #44	; 0x2c
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f000 f841 	bl	8000758 <EPD_SendCommand>
  EPD_SendData(epd, 0xA8);                     // VCOM 7C
 80006d6:	21a8      	movs	r1, #168	; 0xa8
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 f852 	bl	8000782 <EPD_SendData>
  EPD_SendCommand(epd, SET_DUMMY_LINE_PERIOD);
 80006de:	213a      	movs	r1, #58	; 0x3a
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f839 	bl	8000758 <EPD_SendCommand>
  EPD_SendData(epd, 0x1A);                     // 4 dummy lines per gate
 80006e6:	211a      	movs	r1, #26
 80006e8:	6878      	ldr	r0, [r7, #4]
 80006ea:	f000 f84a 	bl	8000782 <EPD_SendData>
  EPD_SendCommand(epd, SET_GATE_TIME);
 80006ee:	213b      	movs	r1, #59	; 0x3b
 80006f0:	6878      	ldr	r0, [r7, #4]
 80006f2:	f000 f831 	bl	8000758 <EPD_SendCommand>
  EPD_SendData(epd, 0x08);                     // 2us per line
 80006f6:	2108      	movs	r1, #8
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f842 	bl	8000782 <EPD_SendData>
  EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 80006fe:	2111      	movs	r1, #17
 8000700:	6878      	ldr	r0, [r7, #4]
 8000702:	f000 f829 	bl	8000758 <EPD_SendCommand>
  EPD_SendData(epd, 0x03);                     // X increment; Y increment
 8000706:	2103      	movs	r1, #3
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f83a 	bl	8000782 <EPD_SendData>
  EPD_SetLut(epd, epd->lut);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4619      	mov	r1, r3
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f867 	bl	80007e8 <EPD_SetLut>
  /* EPD hardware init end */
  return 0;
 800071a:	2300      	movs	r3, #0
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	68b8      	ldr	r0, [r7, #8]
 8000734:	f7ff fef6 	bl	8000524 <EpdDigitalWriteCallback>
}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
 8000748:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 800074a:	6838      	ldr	r0, [r7, #0]
 800074c:	f7ff ff16 	bl	800057c <EpdDelayMsCallback>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	460b      	mov	r3, r1
 8000762:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2200      	movs	r2, #0
 800076a:	4619      	mov	r1, r3
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ffd9 	bl	8000724 <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 8000772:	78fb      	ldrb	r3, [r7, #3]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff0d 	bl	8000594 <EpdSpiTransferCallback>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	2201      	movs	r2, #1
 8000794:	4619      	mov	r1, r3
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff ffc4 	bl	8000724 <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 800079c:	78fb      	ldrb	r3, [r7, #3]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fef8 	bl	8000594 <EpdSpiTransferCallback>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4619      	mov	r1, r3
 80007bc:	6878      	ldr	r0, [r7, #4]
 80007be:	f7ff ffb1 	bl	8000724 <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);
 80007c2:	21c8      	movs	r1, #200	; 0xc8
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ffbb 	bl	8000740 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ffa6 	bl	8000724 <EPD_DigitalWrite>
  EPD_DelayMs(epd, 200);    
 80007d8:	21c8      	movs	r1, #200	; 0xc8
 80007da:	6878      	ldr	r0, [r7, #4]
 80007dc:	f7ff ffb0 	bl	8000740 <EPD_DelayMs>
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <EPD_SetLut>:
}

/**
 *  @brief: set the look-up tables
 */
static void EPD_SetLut(EPD* epd, const unsigned char* lut) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  epd->lut = lut;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	683a      	ldr	r2, [r7, #0]
 80007f6:	619a      	str	r2, [r3, #24]
  EPD_SendCommand(epd, WRITE_LUT_REGISTER);
 80007f8:	2132      	movs	r1, #50	; 0x32
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffac 	bl	8000758 <EPD_SendCommand>
  /* the length of look-up table is 30 bytes */
  for (int i = 0; i < 30; i++) {
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	e00b      	b.n	800081e <EPD_SetLut+0x36>
    EPD_SendData(epd, epd->lut[i]);
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	699a      	ldr	r2, [r3, #24]
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4413      	add	r3, r2
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4619      	mov	r1, r3
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffb5 	bl	8000782 <EPD_SendData>
  for (int i = 0; i < 30; i++) {
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	3301      	adds	r3, #1
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	2b1d      	cmp	r3, #29
 8000822:	ddf0      	ble.n	8000806 <EPD_SetLut+0x1e>
  } 
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800082e:	b480      	push	{r7}
 8000830:	b085      	sub	sp, #20
 8000832:	af00      	add	r7, sp, #0
 8000834:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000836:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800083a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800083c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4313      	orrs	r3, r2
 8000844:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800084a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000852:	68fb      	ldr	r3, [r7, #12]
}
 8000854:	bf00      	nop
 8000856:	3714      	adds	r7, #20
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fc07 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f833 	bl	80008d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800086e:	f000 f887 	bl	8000980 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f92f 	bl	8000ad4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000876:	f000 f8df 	bl	8000a38 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 800087a:	f000 f89f 	bl	80009bc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("** LuniOne. ** \n\r");
 800087e:	4810      	ldr	r0, [pc, #64]	; (80008c0 <main+0x60>)
 8000880:	f003 fec8 	bl	8004614 <iprintf>


  EPD epd;
  if (EPD_Init(&epd, lut_full_update) != 0) {
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	490f      	ldr	r1, [pc, #60]	; (80008c4 <main+0x64>)
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fed7 	bl	800063c <EPD_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <main+0x40>
      printf("e-Paper init failed\n");
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <main+0x68>)
 8000896:	f003 ff43 	bl	8004720 <puts>
      return -1;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800089e:	e00b      	b.n	80008b8 <main+0x58>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	 /* LUNI CODE  */
	  HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 80008a0:	2102      	movs	r1, #2
 80008a2:	480a      	ldr	r0, [pc, #40]	; (80008cc <main+0x6c>)
 80008a4:	f000 ff2a 	bl	80016fc <HAL_GPIO_TogglePin>
	  printf("** Routine v2. ** \n\r");
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <main+0x70>)
 80008aa:	f003 feb3 	bl	8004614 <iprintf>
	  HAL_Delay (1000);   /* Insert delay 100 ms */
 80008ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b2:	f000 fc67 	bl	8001184 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOB, LD3_Pin);
 80008b6:	e7f3      	b.n	80008a0 <main+0x40>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3720      	adds	r7, #32
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	08005634 	.word	0x08005634
 80008c4:	080056a0 	.word	0x080056a0
 80008c8:	08005648 	.word	0x08005648
 80008cc:	48000400 	.word	0x48000400
 80008d0:	0800565c 	.word	0x0800565c

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b09a      	sub	sp, #104	; 0x68
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 0320 	add.w	r3, r7, #32
 80008de:	2248      	movs	r2, #72	; 0x48
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fe8e 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]
 80008f6:	615a      	str	r2, [r3, #20]
 80008f8:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <SystemClock_Config+0xa8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <SystemClock_Config+0xa8>)
 8000904:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000908:	6013      	str	r3, [r2, #0]
 800090a:	4b1c      	ldr	r3, [pc, #112]	; (800097c <SystemClock_Config+0xa8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000916:	2303      	movs	r3, #3
 8000918:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000920:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000926:	2340      	movs	r3, #64	; 0x40
 8000928:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800092a:	2300      	movs	r3, #0
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	4618      	mov	r0, r3
 8000934:	f001 fab4 	bl	8001ea0 <HAL_RCC_OscConfig>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800093e:	f000 f973 	bl	8000c28 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000942:	236f      	movs	r3, #111	; 0x6f
 8000944:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000946:	2302      	movs	r3, #2
 8000948:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2101      	movs	r1, #1
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fe10 	bl	8002588 <HAL_RCC_ClockConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096e:	f000 f95b 	bl	8000c28 <Error_Handler>
  }
}
 8000972:	bf00      	nop
 8000974:	3768      	adds	r7, #104	; 0x68
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	58000400 	.word	0x58000400

08000980 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2250      	movs	r2, #80	; 0x50
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f003 fe39 	bl	8004604 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800099c:	2300      	movs	r3, #0
 800099e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009a0:	463b      	mov	r3, r7
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fa2d 	bl	8002e02 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 80009ae:	f000 f93b 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 80009b2:	bf00      	nop
 80009b4:	3750      	adds	r7, #80	; 0x50
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
	...

080009bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009c2:	4a1c      	ldr	r2, [pc, #112]	; (8000a34 <MX_SPI2_Init+0x78>)
 80009c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009c6:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009de:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009f4:	2218      	movs	r2, #24
 80009f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <MX_SPI2_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a0c:	2207      	movs	r2, #7
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a18:	2208      	movs	r2, #8
 8000a1a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_SPI2_Init+0x74>)
 8000a1e:	f002 fc77 	bl	8003310 <HAL_SPI_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000a28:	f000 f8fe 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	200000d4 	.word	0x200000d4
 8000a34:	40003800 	.word	0x40003800

08000a38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a3c:	4b23      	ldr	r3, [pc, #140]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a3e:	4a24      	ldr	r2, [pc, #144]	; (8000ad0 <MX_USART1_UART_Init+0x98>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a42:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a58:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000a5c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a60:	220c      	movs	r2, #12
 8000a62:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a64:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6a:	4b18      	ldr	r3, [pc, #96]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a70:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7c:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a82:	4812      	ldr	r0, [pc, #72]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a84:	f002 ffda 	bl	8003a3c <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000a8e:	f000 f8cb 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000a96:	f003 fcc0 	bl	800441a <HAL_UARTEx_SetTxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000aa0:	f000 f8c2 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4809      	ldr	r0, [pc, #36]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000aa8:	f003 fcf5 	bl	8004496 <HAL_UARTEx_SetRxFifoThreshold>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000ab2:	f000 f8b9 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART1_UART_Init+0x94>)
 8000ab8:	f003 fc76 	bl	80043a8 <HAL_UARTEx_DisableFifoMode>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000ac2:	f000 f8b1 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000138 	.word	0x20000138
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae8:	2004      	movs	r0, #4
 8000aea:	f7ff fea0 	bl	800082e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aee:	2001      	movs	r0, #1
 8000af0:	f7ff fe9d 	bl	800082e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fe9a 	bl	800082e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000afa:	2008      	movs	r0, #8
 8000afc:	f7ff fe97 	bl	800082e <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000b00:	2200      	movs	r2, #0
 8000b02:	2123      	movs	r1, #35	; 0x23
 8000b04:	483c      	ldr	r0, [pc, #240]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b06:	f000 fde1 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000b10:	483a      	ldr	r0, [pc, #232]	; (8000bfc <MX_GPIO_Init+0x128>)
 8000b12:	f000 fddb 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b20:	f000 fdd4 	bl	80016cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b24:	2310      	movs	r3, #16
 8000b26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	4619      	mov	r1, r3
 8000b34:	4831      	ldr	r0, [pc, #196]	; (8000bfc <MX_GPIO_Init+0x128>)
 8000b36:	f000 fc59 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000b3a:	2323      	movs	r3, #35	; 0x23
 8000b3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482a      	ldr	r0, [pc, #168]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b50:	f000 fc4c 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8000b54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b58:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	4619      	mov	r1, r3
 8000b68:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <MX_GPIO_Init+0x124>)
 8000b6a:	f000 fc3f 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DC_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin;
 8000b6e:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000b72:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	481d      	ldr	r0, [pc, #116]	; (8000bfc <MX_GPIO_Init+0x128>)
 8000b86:	f000 fc31 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2302      	movs	r3, #2
 8000b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000b9c:	230a      	movs	r3, #10
 8000b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba8:	f000 fc20 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_RST_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8000bac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bc6:	f000 fc11 	bl	80013ec <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <MX_GPIO_Init+0x12c>)
 8000bdc:	f000 fc06 	bl	80013ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2028      	movs	r0, #40	; 0x28
 8000be6:	f000 fbcc 	bl	8001382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bea:	2028      	movs	r0, #40	; 0x28
 8000bec:	f000 fbe3 	bl	80013b6 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	48000c00 	.word	0x48000c00

08000c04 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000c0c:	1d39      	adds	r1, r7, #4
 8000c0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <__io_putchar+0x20>)
 8000c16:	f002 ff61 	bl	8003adc <HAL_UART_Transmit>

  return ch;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000138 	.word	0x20000138

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <Error_Handler+0x8>

08000c32 <LL_AHB2_GRP1_EnableClock>:
{
 8000c32:	b480      	push	{r7}
 8000c34:	b085      	sub	sp, #20
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4013      	ands	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4013      	ands	r3, r2
 8000c86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c88:	68fb      	ldr	r3, [r7, #12]
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr

08000c96 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c96:	b480      	push	{r7}
 8000c98:	b085      	sub	sp, #20
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000ca4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	bf00      	nop
 8000cbe:	3714      	adds	r7, #20
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ccc:	2007      	movs	r0, #7
 8000cce:	f000 fb4d 	bl	800136c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a19      	ldr	r2, [pc, #100]	; (8000d5c <HAL_SPI_MspInit+0x84>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d12b      	bne.n	8000d52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cfa:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cfe:	f7ff ffb1 	bl	8000c64 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	2004      	movs	r0, #4
 8000d04:	f7ff ff95 	bl	8000c32 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f7ff ff92 	bl	8000c32 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <HAL_SPI_MspInit+0x88>)
 8000d2a:	f000 fb5f 	bl	80013ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d32:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d40:	2305      	movs	r3, #5
 8000d42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f000 fb4d 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d52:	bf00      	nop
 8000d54:	3720      	adds	r7, #32
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40003800 	.word	0x40003800
 8000d60:	48000800 	.word	0x48000800

08000d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09c      	sub	sp, #112	; 0x70
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2250      	movs	r2, #80	; 0x50
 8000d82:	2100      	movs	r1, #0
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fc3d 	bl	8004604 <memset>
  if(huart->Instance==USART1)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a16      	ldr	r2, [pc, #88]	; (8000de8 <HAL_UART_MspInit+0x84>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d124      	bne.n	8000dde <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d94:	2301      	movs	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	4618      	mov	r0, r3
 8000da2:	f002 f82e 	bl	8002e02 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dac:	f7ff ff3c 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000db4:	f7ff ff6f 	bl	8000c96 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff ff3a 	bl	8000c32 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <HAL_UART_MspInit+0x88>)
 8000dda:	f000 fb07 	bl	80013ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dde:	bf00      	nop
 8000de0:	3770      	adds	r7, #112	; 0x70
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40013800 	.word	0x40013800
 8000dec:	48000400 	.word	0x48000400

08000df0 <PendSV_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e02:	f000 f993 	bl	800112c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EPD_BUSY_Pin);
 8000e0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000e12:	f000 fc8d 	bl	8001730 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	e00a      	b.n	8000e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e2c:	f3af 8000 	nop.w
 8000e30:	4601      	mov	r1, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60ba      	str	r2, [r7, #8]
 8000e38:	b2ca      	uxtb	r2, r1
 8000e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	617b      	str	r3, [r7, #20]
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	dbf0      	blt.n	8000e2c <_read+0x12>
  }

  return len;
 8000e4a:	687b      	ldr	r3, [r7, #4]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]
 8000e64:	e009      	b.n	8000e7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	60ba      	str	r2, [r7, #8]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fec8 	bl	8000c04 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbf1      	blt.n	8000e66 <_write+0x12>
  }
  return len;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_close>:

int _close(int file)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <_isatty>:

int _isatty(int file)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ecc:	2301      	movs	r3, #1
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000efc:	4a14      	ldr	r2, [pc, #80]	; (8000f50 <_sbrk+0x5c>)
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <_sbrk+0x60>)
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d102      	bne.n	8000f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <_sbrk+0x64>)
 8000f12:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <_sbrk+0x68>)
 8000f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d207      	bcs.n	8000f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f24:	f003 fb44 	bl	80045b0 <__errno>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	220c      	movs	r2, #12
 8000f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f32:	e009      	b.n	8000f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <_sbrk+0x64>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <_sbrk+0x64>)
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <_sbrk+0x64>)
 8000f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f46:	68fb      	ldr	r3, [r7, #12]
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3718      	adds	r7, #24
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20030000 	.word	0x20030000
 8000f54:	00000400 	.word	0x00000400
 8000f58:	200001cc 	.word	0x200001cc
 8000f5c:	200001e8 	.word	0x200001e8

08000f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <SystemInit+0x98>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <SystemInit+0x98>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8000f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f88:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000f8c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f98:	4b18      	ldr	r3, [pc, #96]	; (8000ffc <SystemInit+0x9c>)
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000fa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000faa:	f023 0305 	bic.w	r3, r3, #5
 8000fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fbe:	f023 0301 	bic.w	r3, r3, #1
 8000fc2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8000fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fca:	4a0d      	ldr	r2, [pc, #52]	; (8001000 <SystemInit+0xa0>)
 8000fcc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <SystemInit+0xa0>)
 8000fd4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00
 8000ffc:	faf6fefb 	.word	0xfaf6fefb
 8001000:	22041000 	.word	0x22041000

08001004 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001004:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001006:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001008:	3304      	adds	r3, #4

0800100a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800100a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800100c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800100e:	d3f9      	bcc.n	8001004 <CopyDataInit>
  bx lr
 8001010:	4770      	bx	lr

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001012:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001014:	3004      	adds	r0, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001016:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>
  bx lr
 800101a:	4770      	bx	lr

0800101c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800101e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001020:	f7ff ff9e 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001024:	480b      	ldr	r0, [pc, #44]	; (8001054 <LoopForever+0x6>)
 8001026:	490c      	ldr	r1, [pc, #48]	; (8001058 <LoopForever+0xa>)
 8001028:	4a0c      	ldr	r2, [pc, #48]	; (800105c <LoopForever+0xe>)
 800102a:	2300      	movs	r3, #0
 800102c:	f7ff ffed 	bl	800100a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <LoopForever+0x12>)
 8001032:	490c      	ldr	r1, [pc, #48]	; (8001064 <LoopForever+0x16>)
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <LoopForever+0x1a>)
 8001036:	2300      	movs	r3, #0
 8001038:	f7ff ffe7 	bl	800100a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800103c:	480b      	ldr	r0, [pc, #44]	; (800106c <LoopForever+0x1e>)
 800103e:	490c      	ldr	r1, [pc, #48]	; (8001070 <LoopForever+0x22>)
 8001040:	2300      	movs	r3, #0
 8001042:	f7ff ffe8 	bl	8001016 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001046:	f003 fab9 	bl	80045bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800104a:	f7ff fc09 	bl	8000860 <main>

0800104e <LoopForever>:

LoopForever:
  b LoopForever
 800104e:	e7fe      	b.n	800104e <LoopForever>
  ldr   r0, =_estack
 8001050:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001054:	20000008 	.word	0x20000008
 8001058:	20000098 	.word	0x20000098
 800105c:	08005830 	.word	0x08005830
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001060:	20030000 	.word	0x20030000
 8001064:	20030000 	.word	0x20030000
 8001068:	080058c0 	.word	0x080058c0
  INIT_BSS _sbss, _ebss
 800106c:	20000098 	.word	0x20000098
 8001070:	200001e4 	.word	0x200001e4

08001074 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_Init+0x3c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_Init+0x3c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	2003      	movs	r0, #3
 8001090:	f000 f96c 	bl	800136c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001094:	2000      	movs	r0, #0
 8001096:	f000 f80f 	bl	80010b8 <HAL_InitTick>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	e001      	b.n	80010aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a6:	f7ff fe0f 	bl	8000cc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	58004000 	.word	0x58004000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_InitTick+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d024      	beq.n	8001116 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010cc:	f001 fc08 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 80010d0:	4602      	mov	r2, r0
 80010d2:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_InitTick+0x6c>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80010e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f974 	bl	80013d2 <HAL_SYSTICK_Config>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d10f      	bne.n	8001110 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b0f      	cmp	r3, #15
 80010f4:	d809      	bhi.n	800110a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f6:	2200      	movs	r2, #0
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010fe:	f000 f940 	bl	8001382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001102:	4a09      	ldr	r2, [pc, #36]	; (8001128 <HAL_InitTick+0x70>)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	e007      	b.n	800111a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
 800110e:	e004      	b.n	800111a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	73fb      	strb	r3, [r7, #15]
 8001114:	e001      	b.n	800111a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800111a:	7bfb      	ldrb	r3, [r7, #15]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3710      	adds	r7, #16
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000030 	.word	0x20000030
 8001128:	2000002c 	.word	0x2000002c

0800112c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_IncTick+0x20>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	461a      	mov	r2, r3
 8001136:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x24>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4413      	add	r3, r2
 800113c:	4a04      	ldr	r2, [pc, #16]	; (8001150 <HAL_IncTick+0x24>)
 800113e:	6013      	str	r3, [r2, #0]
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	20000030 	.word	0x20000030
 8001150:	200001d0 	.word	0x200001d0

08001154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return uwTick;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <HAL_GetTick+0x14>)
 800115a:	681b      	ldr	r3, [r3, #0]
}
 800115c:	4618      	mov	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	200001d0 	.word	0x200001d0

0800116c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_GetTickPrio+0x14>)
 8001172:	681b      	ldr	r3, [r3, #0]
}
 8001174:	4618      	mov	r0, r3
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000002c 	.word	0x2000002c

08001184 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800118c:	f7ff ffe2 	bl	8001154 <HAL_GetTick>
 8001190:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800119c:	d005      	beq.n	80011aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119e:	4b0a      	ldr	r3, [pc, #40]	; (80011c8 <HAL_Delay+0x44>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	461a      	mov	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	4413      	add	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011aa:	bf00      	nop
 80011ac:	f7ff ffd2 	bl	8001154 <HAL_GetTick>
 80011b0:	4602      	mov	r2, r0
 80011b2:	68bb      	ldr	r3, [r7, #8]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d8f7      	bhi.n	80011ac <HAL_Delay+0x28>
  {
  }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000030 	.word	0x20000030

080011cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e2:	68ba      	ldr	r2, [r7, #8]
 80011e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e8:	4013      	ands	r3, r2
 80011ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011fe:	4a04      	ldr	r2, [pc, #16]	; (8001210 <__NVIC_SetPriorityGrouping+0x44>)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	60d3      	str	r3, [r2, #12]
}
 8001204:	bf00      	nop
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001218:	4b04      	ldr	r3, [pc, #16]	; (800122c <__NVIC_GetPriorityGrouping+0x18>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	0a1b      	lsrs	r3, r3, #8
 800121e:	f003 0307 	and.w	r3, r3, #7
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db0b      	blt.n	800125a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	f003 021f 	and.w	r2, r3, #31
 8001248:	4907      	ldr	r1, [pc, #28]	; (8001268 <__NVIC_EnableIRQ+0x38>)
 800124a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	2001      	movs	r0, #1
 8001252:	fa00 f202 	lsl.w	r2, r0, r2
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000e100 	.word	0xe000e100

0800126c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	6039      	str	r1, [r7, #0]
 8001276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127c:	2b00      	cmp	r3, #0
 800127e:	db0a      	blt.n	8001296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	b2da      	uxtb	r2, r3
 8001284:	490c      	ldr	r1, [pc, #48]	; (80012b8 <__NVIC_SetPriority+0x4c>)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	0112      	lsls	r2, r2, #4
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	440b      	add	r3, r1
 8001290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001294:	e00a      	b.n	80012ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	b2da      	uxtb	r2, r3
 800129a:	4908      	ldr	r1, [pc, #32]	; (80012bc <__NVIC_SetPriority+0x50>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	3b04      	subs	r3, #4
 80012a4:	0112      	lsls	r2, r2, #4
 80012a6:	b2d2      	uxtb	r2, r2
 80012a8:	440b      	add	r3, r1
 80012aa:	761a      	strb	r2, [r3, #24]
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	e000e100 	.word	0xe000e100
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f1c3 0307 	rsb	r3, r3, #7
 80012da:	2b04      	cmp	r3, #4
 80012dc:	bf28      	it	cs
 80012de:	2304      	movcs	r3, #4
 80012e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3304      	adds	r3, #4
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d902      	bls.n	80012f0 <NVIC_EncodePriority+0x30>
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3b03      	subs	r3, #3
 80012ee:	e000      	b.n	80012f2 <NVIC_EncodePriority+0x32>
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f8:	69bb      	ldr	r3, [r7, #24]
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43da      	mvns	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	401a      	ands	r2, r3
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	fa01 f303 	lsl.w	r3, r1, r3
 8001312:	43d9      	mvns	r1, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001318:	4313      	orrs	r3, r2
         );
}
 800131a:	4618      	mov	r0, r3
 800131c:	3724      	adds	r7, #36	; 0x24
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001338:	d301      	bcc.n	800133e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133a:	2301      	movs	r3, #1
 800133c:	e00f      	b.n	800135e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800133e:	4a0a      	ldr	r2, [pc, #40]	; (8001368 <SysTick_Config+0x40>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	3b01      	subs	r3, #1
 8001344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001346:	210f      	movs	r1, #15
 8001348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800134c:	f7ff ff8e 	bl	800126c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001350:	4b05      	ldr	r3, [pc, #20]	; (8001368 <SysTick_Config+0x40>)
 8001352:	2200      	movs	r2, #0
 8001354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001356:	4b04      	ldr	r3, [pc, #16]	; (8001368 <SysTick_Config+0x40>)
 8001358:	2207      	movs	r2, #7
 800135a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	e000e010 	.word	0xe000e010

0800136c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff29 	bl	80011cc <__NVIC_SetPriorityGrouping>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001390:	f7ff ff40 	bl	8001214 <__NVIC_GetPriorityGrouping>
 8001394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	f7ff ff90 	bl	80012c0 <NVIC_EncodePriority>
 80013a0:	4602      	mov	r2, r0
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff5f 	bl	800126c <__NVIC_SetPriority>
}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff33 	bl	8001230 <__NVIC_EnableIRQ>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff ffa4 	bl	8001328 <SysTick_Config>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
	...

080013ec <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b087      	sub	sp, #28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013f6:	2300      	movs	r3, #0
 80013f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013fa:	e14c      	b.n	8001696 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	2101      	movs	r1, #1
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	fa01 f303 	lsl.w	r3, r1, r3
 8001408:	4013      	ands	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 813e 	beq.w	8001690 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b01      	cmp	r3, #1
 800141e:	d005      	beq.n	800142c <HAL_GPIO_Init+0x40>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d130      	bne.n	800148e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	2203      	movs	r2, #3
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68da      	ldr	r2, [r3, #12]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001462:	2201      	movs	r2, #1
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	091b      	lsrs	r3, r3, #4
 8001478:	f003 0201 	and.w	r2, r3, #1
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b03      	cmp	r3, #3
 8001498:	d017      	beq.n	80014ca <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d123      	bne.n	800151e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	08da      	lsrs	r2, r3, #3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3208      	adds	r2, #8
 80014de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	691a      	ldr	r2, [r3, #16]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	6939      	ldr	r1, [r7, #16]
 800151a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	2203      	movs	r2, #3
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	43db      	mvns	r3, r3
 8001530:	693a      	ldr	r2, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f003 0203 	and.w	r2, r3, #3
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 8098 	beq.w	8001690 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_GPIO_Init+0x2c8>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	220f      	movs	r2, #15
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	43db      	mvns	r3, r3
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4013      	ands	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800158a:	d019      	beq.n	80015c0 <HAL_GPIO_Init+0x1d4>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4a4a      	ldr	r2, [pc, #296]	; (80016b8 <HAL_GPIO_Init+0x2cc>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d013      	beq.n	80015bc <HAL_GPIO_Init+0x1d0>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a49      	ldr	r2, [pc, #292]	; (80016bc <HAL_GPIO_Init+0x2d0>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d00d      	beq.n	80015b8 <HAL_GPIO_Init+0x1cc>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a48      	ldr	r2, [pc, #288]	; (80016c0 <HAL_GPIO_Init+0x2d4>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d007      	beq.n	80015b4 <HAL_GPIO_Init+0x1c8>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4a47      	ldr	r2, [pc, #284]	; (80016c4 <HAL_GPIO_Init+0x2d8>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d101      	bne.n	80015b0 <HAL_GPIO_Init+0x1c4>
 80015ac:	2304      	movs	r3, #4
 80015ae:	e008      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015b0:	2307      	movs	r3, #7
 80015b2:	e006      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015b4:	2303      	movs	r3, #3
 80015b6:	e004      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015b8:	2302      	movs	r3, #2
 80015ba:	e002      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015bc:	2301      	movs	r3, #1
 80015be:	e000      	b.n	80015c2 <HAL_GPIO_Init+0x1d6>
 80015c0:	2300      	movs	r3, #0
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	f002 0203 	and.w	r2, r2, #3
 80015c8:	0092      	lsls	r2, r2, #2
 80015ca:	4093      	lsls	r3, r2
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d2:	4938      	ldr	r1, [pc, #224]	; (80016b4 <HAL_GPIO_Init+0x2c8>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015e0:	4b39      	ldr	r3, [pc, #228]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001604:	4a30      	ldr	r2, [pc, #192]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800160a:	4b2f      	ldr	r3, [pc, #188]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43db      	mvns	r3, r3
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800162e:	4a26      	ldr	r2, [pc, #152]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001634:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 8001636:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43db      	mvns	r3, r3
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800165a:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8001662:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 8001664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4013      	ands	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d003      	beq.n	8001688 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001688:	4a0f      	ldr	r2, [pc, #60]	; (80016c8 <HAL_GPIO_Init+0x2dc>)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	3301      	adds	r3, #1
 8001694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	fa22 f303 	lsr.w	r3, r2, r3
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f aeab 	bne.w	80013fc <HAL_GPIO_Init+0x10>
  }
}
 80016a6:	bf00      	nop
 80016a8:	bf00      	nop
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40010000 	.word	0x40010000
 80016b8:	48000400 	.word	0x48000400
 80016bc:	48000800 	.word	0x48000800
 80016c0:	48000c00 	.word	0x48000c00
 80016c4:	48001000 	.word	0x48001000
 80016c8:	58000800 	.word	0x58000800

080016cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	460b      	mov	r3, r1
 80016d6:	807b      	strh	r3, [r7, #2]
 80016d8:	4613      	mov	r3, r2
 80016da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016dc:	787b      	ldrb	r3, [r7, #1]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016e2:	887a      	ldrh	r2, [r7, #2]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e8:	e002      	b.n	80016f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	695b      	ldr	r3, [r3, #20]
 800170c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800170e:	887a      	ldrh	r2, [r7, #2]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4013      	ands	r3, r2
 8001714:	041a      	lsls	r2, r3, #16
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	43d9      	mvns	r1, r3
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	400b      	ands	r3, r1
 800171e:	431a      	orrs	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800173c:	68da      	ldr	r2, [r3, #12]
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	4013      	ands	r3, r2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d006      	beq.n	8001754 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f806 	bl	8001760 <HAL_GPIO_EXTI_Callback>
  }
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	58000800 	.word	0x58000800

08001760 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a04      	ldr	r2, [pc, #16]	; (8001794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	58000400 	.word	0x58000400

08001798 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 800179c:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	58000400 	.word	0x58000400

080017b4 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80017b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017c6:	d101      	bne.n	80017cc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80017dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
}
 80017ec:	bf00      	nop
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr

080017f6 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80017fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001808:	6013      	str	r3, [r2, #0]
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001826:	d101      	bne.n	800182c <LL_RCC_HSE_IsReady+0x18>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <LL_RCC_HSE_IsReady+0x1a>
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800185a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	d101      	bne.n	800188c <LL_RCC_HSI_IsReady+0x18>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <LL_RCC_HSI_IsReady+0x1a>
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	061b      	lsls	r3, r3, #24
 80018ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80018e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr

08001906 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8001906:	b480      	push	{r7}
 8001908:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800190e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b02      	cmp	r3, #2
 8001918:	d101      	bne.n	800191e <LL_RCC_HSI48_IsReady+0x18>
 800191a:	2301      	movs	r3, #1
 800191c:	e000      	b.n	8001920 <LL_RCC_HSI48_IsReady+0x1a>
 800191e:	2300      	movs	r3, #0
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800192e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001936:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193a:	f043 0301 	orr.w	r3, r3, #1
 800193e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800197a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197e:	f043 0304 	orr.w	r3, r3, #4
 8001982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001986:	bf00      	nop
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80019b2:	b480      	push	{r7}
 80019b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019be:	f003 0302 	and.w	r3, r3, #2
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d101      	bne.n	80019ca <LL_RCC_LSE_IsReady+0x18>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <LL_RCC_LSE_IsReady+0x1a>
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e6:	f043 0301 	orr.w	r3, r3, #1
 80019ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80019fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a08:	f023 0301 	bic.w	r3, r3, #1
 8001a0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d101      	bne.n	8001a32 <LL_RCC_LSI1_IsReady+0x18>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e000      	b.n	8001a34 <LL_RCC_LSI1_IsReady+0x1a>
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a4e:	f043 0304 	orr.w	r3, r3, #4
 8001a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr

08001a60 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001a82:	b480      	push	{r7}
 8001a84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d101      	bne.n	8001a9a <LL_RCC_LSI2_IsReady+0x18>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <LL_RCC_LSI2_IsReady+0x1a>
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	6013      	str	r3, [r2, #0]
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d101      	bne.n	8001b26 <LL_RCC_MSI_IsReady+0x16>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <LL_RCC_MSI_IsReady+0x18>
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001b60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b6a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2bb0      	cmp	r3, #176	; 0xb0
 8001b70:	d901      	bls.n	8001b76 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001b72:	23b0      	movs	r3, #176	; 0xb0
 8001b74:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001b8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	604b      	str	r3, [r1, #4]
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b083      	sub	sp, #12
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f023 0203 	bic.w	r2, r3, #3
 8001bc0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	608b      	str	r3, [r1, #8]
}
 8001bca:	bf00      	nop
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001bda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001bf6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b083      	sub	sp, #12
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c22:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ca0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	608b      	str	r3, [r1, #8]
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001cdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d54:	6013      	str	r3, [r2, #0]
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d72:	d101      	bne.n	8001d78 <LL_RCC_PLL_IsReady+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_RCC_PLL_IsReady+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001dba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001dd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001df8:	d101      	bne.n	8001dfe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001e0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e12:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e1e:	d101      	bne.n	8001e24 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001e20:	2301      	movs	r3, #1
 8001e22:	e000      	b.n	8001e26 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e38:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d101      	bne.n	8001e4a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001e46:	2301      	movs	r3, #1
 8001e48:	e000      	b.n	8001e4c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e68:	d101      	bne.n	8001e6e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr

08001e7a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e8c:	d101      	bne.n	8001e92 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea0:	b590      	push	{r4, r7, lr}
 8001ea2:	b08d      	sub	sp, #52	; 0x34
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e363      	b.n	800257a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 808d 	beq.w	8001fda <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec0:	f7ff fe89 	bl	8001bd6 <LL_RCC_GetSysClkSource>
 8001ec4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ec6:	f7ff ff82 	bl	8001dce <LL_RCC_PLL_GetMainSource>
 8001eca:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d005      	beq.n	8001ede <HAL_RCC_OscConfig+0x3e>
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	2b0c      	cmp	r3, #12
 8001ed6:	d147      	bne.n	8001f68 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d144      	bne.n	8001f68 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e347      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001eee:	f7ff fe34 	bl	8001b5a <LL_RCC_MSI_GetRange>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	429c      	cmp	r4, r3
 8001ef6:	d914      	bls.n	8001f22 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	4618      	mov	r0, r3
 8001efe:	f000 fd2f 	bl	8002960 <RCC_SetFlashLatencyFromMSIRange>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e336      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fe0e 	bl	8001b32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7ff fe32 	bl	8001b84 <LL_RCC_MSI_SetCalibTrimming>
 8001f20:	e013      	b.n	8001f4a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fe03 	bl	8001b32 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fe27 	bl	8001b84 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 fd10 	bl	8002960 <RCC_SetFlashLatencyFromMSIRange>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e317      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001f4a:	f000 fcc9 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4aa4      	ldr	r2, [pc, #656]	; (80021e4 <HAL_RCC_OscConfig+0x344>)
 8001f52:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f54:	4ba4      	ldr	r3, [pc, #656]	; (80021e8 <HAL_RCC_OscConfig+0x348>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f8ad 	bl	80010b8 <HAL_InitTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d039      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e308      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d01e      	beq.n	8001fae <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f70:	f7ff fdb0 	bl	8001ad4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001f74:	f7ff f8ee 	bl	8001154 <HAL_GetTick>
 8001f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f7a:	e008      	b.n	8001f8e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f7c:	f7ff f8ea 	bl	8001154 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e2f5      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001f8e:	f7ff fdbf 	bl	8001b10 <LL_RCC_MSI_IsReady>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f1      	beq.n	8001f7c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff fdc8 	bl	8001b32 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fdec 	bl	8001b84 <LL_RCC_MSI_SetCalibTrimming>
 8001fac:	e015      	b.n	8001fda <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fae:	f7ff fda0 	bl	8001af2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff f8cf 	bl	8001154 <HAL_GetTick>
 8001fb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fba:	f7ff f8cb 	bl	8001154 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e2d6      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001fcc:	f7ff fda0 	bl	8001b10 <LL_RCC_MSI_IsReady>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f1      	bne.n	8001fba <HAL_RCC_OscConfig+0x11a>
 8001fd6:	e000      	b.n	8001fda <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fd8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d047      	beq.n	8002076 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fe6:	f7ff fdf6 	bl	8001bd6 <LL_RCC_GetSysClkSource>
 8001fea:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fec:	f7ff feef 	bl	8001dce <LL_RCC_PLL_GetMainSource>
 8001ff0:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x164>
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2b0c      	cmp	r3, #12
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d105      	bne.n	8002010 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d134      	bne.n	8002076 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e2b4      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x180>
 800201a:	f7ff fbdd 	bl	80017d8 <LL_RCC_HSE_Enable>
 800201e:	e001      	b.n	8002024 <HAL_RCC_OscConfig+0x184>
 8002020:	f7ff fbe9 	bl	80017f6 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202c:	f7ff f892 	bl	8001154 <HAL_GetTick>
 8002030:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f88e 	bl	8001154 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e299      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002046:	f7ff fbe5 	bl	8001814 <LL_RCC_HSE_IsReady>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d0f1      	beq.n	8002034 <HAL_RCC_OscConfig+0x194>
 8002050:	e011      	b.n	8002076 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002052:	f7ff f87f 	bl	8001154 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205a:	f7ff f87b 	bl	8001154 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b64      	cmp	r3, #100	; 0x64
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e286      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800206c:	f7ff fbd2 	bl	8001814 <LL_RCC_HSE_IsReady>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f1      	bne.n	800205a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d04c      	beq.n	800211c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002082:	f7ff fda8 	bl	8001bd6 <LL_RCC_GetSysClkSource>
 8002086:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	f7ff fea1 	bl	8001dce <LL_RCC_PLL_GetMainSource>
 800208c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_OscConfig+0x200>
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d10e      	bne.n	80020b8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d10b      	bne.n	80020b8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e266      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fbf1 	bl	8001898 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80020b6:	e031      	b.n	800211c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d019      	beq.n	80020f4 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c0:	f7ff fbba 	bl	8001838 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f846 	bl	8001154 <HAL_GetTick>
 80020c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020cc:	f7ff f842 	bl	8001154 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e24d      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80020de:	f7ff fbc9 	bl	8001874 <LL_RCC_HSI_IsReady>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f1      	beq.n	80020cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7ff fbd3 	bl	8001898 <LL_RCC_HSI_SetCalibTrimming>
 80020f2:	e013      	b.n	800211c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020f4:	f7ff fbaf 	bl	8001856 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7ff f82c 	bl	8001154 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7ff f828 	bl	8001154 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e233      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002112:	f7ff fbaf 	bl	8001874 <LL_RCC_HSI_IsReady>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f1      	bne.n	8002100 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 80a3 	beq.w	800227c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d076      	beq.n	800222c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d046      	beq.n	80021d8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800214a:	f7ff fc66 	bl	8001a1a <LL_RCC_LSI1_IsReady>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d113      	bne.n	800217c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8002154:	f7ff fc3f 	bl	80019d6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002158:	f7fe fffc 	bl	8001154 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002160:	f7fe fff8 	bl	8001154 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e203      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002172:	f7ff fc52 	bl	8001a1a <LL_RCC_LSI1_IsReady>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0f1      	beq.n	8002160 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800217c:	f7ff fc5f 	bl	8001a3e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7fe ffe8 	bl	8001154 <HAL_GetTick>
 8002184:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002188:	f7fe ffe4 	bl	8001154 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1ef      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800219a:	f7ff fc72 	bl	8001a82 <LL_RCC_LSI2_IsReady>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d0f1      	beq.n	8002188 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fc7c 	bl	8001aa6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80021ae:	f7ff fc23 	bl	80019f8 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b2:	f7fe ffcf 	bl	8001154 <HAL_GetTick>
 80021b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ba:	f7fe ffcb 	bl	8001154 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e1d6      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80021cc:	f7ff fc25 	bl	8001a1a <LL_RCC_LSI1_IsReady>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1f1      	bne.n	80021ba <HAL_RCC_OscConfig+0x31a>
 80021d6:	e051      	b.n	800227c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80021d8:	f7ff fbfd 	bl	80019d6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe ffba 	bl	8001154 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021e2:	e00c      	b.n	80021fe <HAL_RCC_OscConfig+0x35e>
 80021e4:	20000028 	.word	0x20000028
 80021e8:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80021ec:	f7fe ffb2 	bl	8001154 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e1bd      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80021fe:	f7ff fc0c 	bl	8001a1a <LL_RCC_LSI1_IsReady>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f1      	beq.n	80021ec <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002208:	f7ff fc2a 	bl	8001a60 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800220e:	f7fe ffa1 	bl	8001154 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b03      	cmp	r3, #3
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e1ac      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002220:	f7ff fc2f 	bl	8001a82 <LL_RCC_LSI2_IsReady>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f1      	bne.n	800220e <HAL_RCC_OscConfig+0x36e>
 800222a:	e027      	b.n	800227c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800222c:	f7ff fc18 	bl	8001a60 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7fe ff90 	bl	8001154 <HAL_GetTick>
 8002234:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002238:	f7fe ff8c 	bl	8001154 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b03      	cmp	r3, #3
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e197      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800224a:	f7ff fc1a 	bl	8001a82 <LL_RCC_LSI2_IsReady>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d1f1      	bne.n	8002238 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8002254:	f7ff fbd0 	bl	80019f8 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002258:	f7fe ff7c 	bl	8001154 <HAL_GetTick>
 800225c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002260:	f7fe ff78 	bl	8001154 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e183      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002272:	f7ff fbd2 	bl	8001a1a <LL_RCC_LSI1_IsReady>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1f1      	bne.n	8002260 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d05b      	beq.n	8002340 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002288:	4ba7      	ldr	r3, [pc, #668]	; (8002528 <HAL_RCC_OscConfig+0x688>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002290:	2b00      	cmp	r3, #0
 8002292:	d114      	bne.n	80022be <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002294:	f7ff fa70 	bl	8001778 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7fe ff5c 	bl	8001154 <HAL_GetTick>
 800229c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe ff58 	bl	8001154 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e163      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	4b9d      	ldr	r3, [pc, #628]	; (8002528 <HAL_RCC_OscConfig+0x688>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d102      	bne.n	80022cc <HAL_RCC_OscConfig+0x42c>
 80022c6:	f7ff fb30 	bl	800192a <LL_RCC_LSE_Enable>
 80022ca:	e00c      	b.n	80022e6 <HAL_RCC_OscConfig+0x446>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	2b05      	cmp	r3, #5
 80022d2:	d104      	bne.n	80022de <HAL_RCC_OscConfig+0x43e>
 80022d4:	f7ff fb4b 	bl	800196e <LL_RCC_LSE_EnableBypass>
 80022d8:	f7ff fb27 	bl	800192a <LL_RCC_LSE_Enable>
 80022dc:	e003      	b.n	80022e6 <HAL_RCC_OscConfig+0x446>
 80022de:	f7ff fb35 	bl	800194c <LL_RCC_LSE_Disable>
 80022e2:	f7ff fb55 	bl	8001990 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7fe ff31 	bl	8001154 <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe ff2d 	bl	8001154 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e136      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800230c:	f7ff fb51 	bl	80019b2 <LL_RCC_LSE_IsReady>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d0ef      	beq.n	80022f6 <HAL_RCC_OscConfig+0x456>
 8002316:	e013      	b.n	8002340 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7fe ff1c 	bl	8001154 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800231e:	e00a      	b.n	8002336 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002320:	f7fe ff18 	bl	8001154 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	f241 3288 	movw	r2, #5000	; 0x1388
 800232e:	4293      	cmp	r3, r2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e121      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002336:	f7ff fb3c 	bl	80019b2 <LL_RCC_LSE_IsReady>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ef      	bne.n	8002320 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02c      	beq.n	80023a6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	2b00      	cmp	r3, #0
 8002352:	d014      	beq.n	800237e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002354:	f7ff fab5 	bl	80018c2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fefc 	bl	8001154 <HAL_GetTick>
 800235c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800235e:	e008      	b.n	8002372 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002360:	f7fe fef8 	bl	8001154 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	2b02      	cmp	r3, #2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e103      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002372:	f7ff fac8 	bl	8001906 <LL_RCC_HSI48_IsReady>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f1      	beq.n	8002360 <HAL_RCC_OscConfig+0x4c0>
 800237c:	e013      	b.n	80023a6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800237e:	f7ff fab1 	bl	80018e4 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002382:	f7fe fee7 	bl	8001154 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800238a:	f7fe fee3 	bl	8001154 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e0ee      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800239c:	f7ff fab3 	bl	8001906 <LL_RCC_HSI48_IsReady>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1f1      	bne.n	800238a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80e4 	beq.w	8002578 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023b0:	f7ff fc11 	bl	8001bd6 <LL_RCC_GetSysClkSource>
 80023b4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80023b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	f040 80b4 	bne.w	8002530 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0203 	and.w	r2, r3, #3
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d123      	bne.n	800241e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d11c      	bne.n	800241e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0a1b      	lsrs	r3, r3, #8
 80023e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d114      	bne.n	800241e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d10d      	bne.n	800241e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d106      	bne.n	800241e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800241a:	429a      	cmp	r2, r3
 800241c:	d05d      	beq.n	80024da <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b0c      	cmp	r3, #12
 8002422:	d058      	beq.n	80024d6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0a1      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002436:	f7ff fc84 	bl	8001d42 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800243a:	f7fe fe8b 	bl	8001154 <HAL_GetTick>
 800243e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7fe fe87 	bl	8001154 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e092      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ef      	bne.n	8002442 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002466:	68da      	ldr	r2, [r3, #12]
 8002468:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCC_OscConfig+0x68c>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002474:	4311      	orrs	r1, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800247a:	0212      	lsls	r2, r2, #8
 800247c:	4311      	orrs	r1, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800248e:	430a      	orrs	r2, r1
 8002490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002494:	4313      	orrs	r3, r2
 8002496:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002498:	f7ff fc44 	bl	8001d24 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800249c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024aa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80024ac:	f7fe fe52 	bl	8001154 <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7fe fe4e 	bl	8001154 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e059      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d0ef      	beq.n	80024b4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	e050      	b.n	8002578 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e04f      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d147      	bne.n	8002578 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80024e8:	f7ff fc1c 	bl	8001d24 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024fc:	f7fe fe2a 	bl	8001154 <HAL_GetTick>
 8002500:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7fe fe26 	bl	8001154 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e031      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCC_OscConfig+0x664>
 8002524:	e028      	b.n	8002578 <HAL_RCC_OscConfig+0x6d8>
 8002526:	bf00      	nop
 8002528:	58000400 	.word	0x58000400
 800252c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	2b0c      	cmp	r3, #12
 8002534:	d01e      	beq.n	8002574 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	f7ff fc04 	bl	8001d42 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe fe0b 	bl	8001154 <HAL_GetTick>
 800253e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002542:	f7fe fe07 	bl	8001154 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e012      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1ef      	bne.n	8002542 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_OscConfig+0x6e4>)
 800256e:	4013      	ands	r3, r2
 8002570:	60cb      	str	r3, [r1, #12]
 8002572:	e001      	b.n	8002578 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3734      	adds	r7, #52	; 0x34
 800257e:	46bd      	mov	sp, r7
 8002580:	bd90      	pop	{r4, r7, pc}
 8002582:	bf00      	nop
 8002584:	eefefffc 	.word	0xeefefffc

08002588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e12d      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800259c:	4b98      	ldr	r3, [pc, #608]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	683a      	ldr	r2, [r7, #0]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d91b      	bls.n	80025e2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025aa:	4b95      	ldr	r3, [pc, #596]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f023 0207 	bic.w	r2, r3, #7
 80025b2:	4993      	ldr	r1, [pc, #588]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025ba:	f7fe fdcb 	bl	8001154 <HAL_GetTick>
 80025be:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80025c2:	f7fe fdc7 	bl	8001154 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e111      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d4:	4b8a      	ldr	r3, [pc, #552]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d1ef      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f7ff fafb 	bl	8001bee <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80025f8:	f7fe fdac 	bl	8001154 <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002600:	f7fe fda8 	bl	8001154 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e0f2      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002612:	f7ff fbe8 	bl	8001de6 <LL_RCC_IsActiveFlag_HPRE>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0f1      	beq.n	8002600 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d016      	beq.n	8002656 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff faf2 	bl	8001c16 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002632:	f7fe fd8f 	bl	8001154 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800263a:	f7fe fd8b 	bl	8001154 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e0d5      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800264c:	f7ff fbdd 	bl	8001e0a <LL_RCC_IsActiveFlag_C2HPRE>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f1      	beq.n	800263a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d016      	beq.n	8002690 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff faeb 	bl	8001c42 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800266c:	f7fe fd72 	bl	8001154 <HAL_GetTick>
 8002670:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002674:	f7fe fd6e 	bl	8001154 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e0b8      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002686:	f7ff fbd3 	bl	8001e30 <LL_RCC_IsActiveFlag_SHDHPRE>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f1      	beq.n	8002674 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d016      	beq.n	80026ca <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fae5 	bl	8001c70 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026a6:	f7fe fd55 	bl	8001154 <HAL_GetTick>
 80026aa:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ae:	f7fe fd51 	bl	8001154 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e09b      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80026c0:	f7ff fbc9 	bl	8001e56 <LL_RCC_IsActiveFlag_PPRE1>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f1      	beq.n	80026ae <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d017      	beq.n	8002706 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fadb 	bl	8001c98 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026e2:	f7fe fd37 	bl	8001154 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026ea:	f7fe fd33 	bl	8001154 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e07d      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80026fc:	f7ff fbbd 	bl	8001e7a <LL_RCC_IsActiveFlag_PPRE2>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f1      	beq.n	80026ea <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d043      	beq.n	800279a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d106      	bne.n	8002728 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800271a:	f7ff f87b 	bl	8001814 <LL_RCC_HSE_IsReady>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d11e      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e067      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b03      	cmp	r3, #3
 800272e:	d106      	bne.n	800273e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002730:	f7ff fb16 	bl	8001d60 <LL_RCC_PLL_IsReady>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d113      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e05c      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002746:	f7ff f9e3 	bl	8001b10 <LL_RCC_MSI_IsReady>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d108      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e051      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002754:	f7ff f88e 	bl	8001874 <LL_RCC_HSI_IsReady>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e04a      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff fa21 	bl	8001bae <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800276c:	f7fe fcf2 	bl	8001154 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002772:	e00a      	b.n	800278a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7fe fcee 	bl	8001154 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002782:	4293      	cmp	r3, r2
 8002784:	d901      	bls.n	800278a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e036      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	f7ff fa24 	bl	8001bd6 <LL_RCC_GetSysClkSource>
 800278e:	4602      	mov	r2, r0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	429a      	cmp	r2, r3
 8002798:	d1ec      	bne.n	8002774 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800279a:	4b19      	ldr	r3, [pc, #100]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d21b      	bcs.n	80027e0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f023 0207 	bic.w	r2, r3, #7
 80027b0:	4913      	ldr	r1, [pc, #76]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027b8:	f7fe fccc 	bl	8001154 <HAL_GetTick>
 80027bc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027c0:	f7fe fcc8 	bl	8001154 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e012      	b.n	80027f8 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <HAL_RCC_ClockConfig+0x278>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d1ef      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80027e0:	f000 f87e 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <HAL_RCC_ClockConfig+0x27c>)
 80027e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80027ea:	f7fe fcbf 	bl	800116c <HAL_GetTickPrio>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7fe fc61 	bl	80010b8 <HAL_InitTick>
 80027f6:	4603      	mov	r3, r0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	58004000 	.word	0x58004000
 8002804:	20000028 	.word	0x20000028

08002808 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800280e:	f7ff f9e2 	bl	8001bd6 <LL_RCC_GetSysClkSource>
 8002812:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10a      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800281a:	f7ff f99e 	bl	8001b5a <LL_RCC_MSI_GetRange>
 800281e:	4603      	mov	r3, r0
 8002820:	091b      	lsrs	r3, r3, #4
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	4a2b      	ldr	r2, [pc, #172]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	60fb      	str	r3, [r7, #12]
 800282e:	e04b      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d102      	bne.n	800283c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	e045      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2b08      	cmp	r3, #8
 8002840:	d10a      	bne.n	8002858 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002842:	f7fe ffb7 	bl	80017b4 <LL_RCC_HSE_IsEnabledDiv2>
 8002846:	4603      	mov	r3, r0
 8002848:	2b01      	cmp	r3, #1
 800284a:	d102      	bne.n	8002852 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	e03a      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002854:	60fb      	str	r3, [r7, #12]
 8002856:	e037      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002858:	f7ff fab9 	bl	8001dce <LL_RCC_PLL_GetMainSource>
 800285c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d003      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x64>
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x6a>
 800286a:	e00d      	b.n	8002888 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800286e:	60bb      	str	r3, [r7, #8]
        break;
 8002870:	e015      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002872:	f7fe ff9f 	bl	80017b4 <LL_RCC_HSE_IsEnabledDiv2>
 8002876:	4603      	mov	r3, r0
 8002878:	2b01      	cmp	r3, #1
 800287a:	d102      	bne.n	8002882 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800287c:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800287e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002880:	e00d      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_RCC_GetSysClockFreq+0xd4>)
 8002884:	60bb      	str	r3, [r7, #8]
        break;
 8002886:	e00a      	b.n	800289e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002888:	f7ff f967 	bl	8001b5a <LL_RCC_MSI_GetRange>
 800288c:	4603      	mov	r3, r0
 800288e:	091b      	lsrs	r3, r3, #4
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	4a0f      	ldr	r2, [pc, #60]	; (80028d4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800289a:	60bb      	str	r3, [r7, #8]
        break;
 800289c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800289e:	f7ff fa71 	bl	8001d84 <LL_RCC_PLL_GetN>
 80028a2:	4602      	mov	r2, r0
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	fb03 f402 	mul.w	r4, r3, r2
 80028aa:	f7ff fa84 	bl	8001db6 <LL_RCC_PLL_GetDivider>
 80028ae:	4603      	mov	r3, r0
 80028b0:	091b      	lsrs	r3, r3, #4
 80028b2:	3301      	adds	r3, #1
 80028b4:	fbb4 f4f3 	udiv	r4, r4, r3
 80028b8:	f7ff fa71 	bl	8001d9e <LL_RCC_PLL_GetR>
 80028bc:	4603      	mov	r3, r0
 80028be:	0f5b      	lsrs	r3, r3, #29
 80028c0:	3301      	adds	r3, #1
 80028c2:	fbb4 f3f3 	udiv	r3, r4, r3
 80028c6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80028c8:	68fb      	ldr	r3, [r7, #12]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd90      	pop	{r4, r7, pc}
 80028d2:	bf00      	nop
 80028d4:	08005720 	.word	0x08005720
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	01e84800 	.word	0x01e84800

080028e0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028e0:	b598      	push	{r3, r4, r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80028e4:	f7ff ff90 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 80028e8:	4604      	mov	r4, r0
 80028ea:	f7ff f9e9 	bl	8001cc0 <LL_RCC_GetAHBPrescaler>
 80028ee:	4603      	mov	r3, r0
 80028f0:	091b      	lsrs	r3, r3, #4
 80028f2:	f003 030f 	and.w	r3, r3, #15
 80028f6:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_GetHCLKFreq+0x24>)
 80028f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd98      	pop	{r3, r4, r7, pc}
 8002904:	080056c0 	.word	0x080056c0

08002908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002908:	b598      	push	{r3, r4, r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800290c:	f7ff ffe8 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 8002910:	4604      	mov	r4, r0
 8002912:	f7ff f9ef 	bl	8001cf4 <LL_RCC_GetAPB1Prescaler>
 8002916:	4603      	mov	r3, r0
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa24 f303 	lsr.w	r3, r4, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd98      	pop	{r3, r4, r7, pc}
 8002930:	08005700 	.word	0x08005700

08002934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002934:	b598      	push	{r3, r4, r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002938:	f7ff ffd2 	bl	80028e0 <HAL_RCC_GetHCLKFreq>
 800293c:	4604      	mov	r4, r0
 800293e:	f7ff f9e5 	bl	8001d0c <LL_RCC_GetAPB2Prescaler>
 8002942:	4603      	mov	r3, r0
 8002944:	0adb      	lsrs	r3, r3, #11
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	4a04      	ldr	r2, [pc, #16]	; (800295c <HAL_RCC_GetPCLK2Freq+0x28>)
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002958:	4618      	mov	r0, r3
 800295a:	bd98      	pop	{r3, r4, r7, pc}
 800295c:	08005700 	.word	0x08005700

08002960 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2bb0      	cmp	r3, #176	; 0xb0
 800296c:	d903      	bls.n	8002976 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800296e:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e007      	b.n	8002986 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	4a11      	ldr	r2, [pc, #68]	; (80029c4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002984:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002986:	f7ff f9a7 	bl	8001cd8 <LL_RCC_GetAHB4Prescaler>
 800298a:	4603      	mov	r3, r0
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	4a0d      	ldr	r2, [pc, #52]	; (80029c8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	fbb2 f3f3 	udiv	r3, r2, r3
 800299e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80029a4:	fba2 2303 	umull	r2, r3, r2, r3
 80029a8:	0c9c      	lsrs	r4, r3, #18
 80029aa:	f7fe fef5 	bl	8001798 <HAL_PWREx_GetVoltageRange>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4619      	mov	r1, r3
 80029b2:	4620      	mov	r0, r4
 80029b4:	f000 f80c 	bl	80029d0 <RCC_SetFlashLatency>
 80029b8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}
 80029c2:	bf00      	nop
 80029c4:	08005720 	.word	0x08005720
 80029c8:	080056c0 	.word	0x080056c0
 80029cc:	431bde83 	.word	0x431bde83

080029d0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b093      	sub	sp, #76	; 0x4c
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80029da:	4b37      	ldr	r3, [pc, #220]	; (8002ab8 <RCC_SetFlashLatency+0xe8>)
 80029dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80029e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80029e6:	4a35      	ldr	r2, [pc, #212]	; (8002abc <RCC_SetFlashLatency+0xec>)
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80029ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80029f2:	4b33      	ldr	r3, [pc, #204]	; (8002ac0 <RCC_SetFlashLatency+0xf0>)
 80029f4:	f107 040c 	add.w	r4, r7, #12
 80029f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80029fe:	2300      	movs	r3, #0
 8002a00:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a08:	d11a      	bne.n	8002a40 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a0e:	e013      	b.n	8002a38 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	3348      	adds	r3, #72	; 0x48
 8002a16:	443b      	add	r3, r7
 8002a18:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d807      	bhi.n	8002a32 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3348      	adds	r3, #72	; 0x48
 8002a28:	443b      	add	r3, r7
 8002a2a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a2e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a30:	e020      	b.n	8002a74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a34:	3301      	adds	r3, #1
 8002a36:	643b      	str	r3, [r7, #64]	; 0x40
 8002a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d9e8      	bls.n	8002a10 <RCC_SetFlashLatency+0x40>
 8002a3e:	e019      	b.n	8002a74 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a44:	e013      	b.n	8002a6e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	3348      	adds	r3, #72	; 0x48
 8002a4c:	443b      	add	r3, r7
 8002a4e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d807      	bhi.n	8002a68 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	3348      	adds	r3, #72	; 0x48
 8002a5e:	443b      	add	r3, r7
 8002a60:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002a64:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002a66:	e005      	b.n	8002a74 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d9e8      	bls.n	8002a46 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <RCC_SetFlashLatency+0xf4>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 0207 	bic.w	r2, r3, #7
 8002a7c:	4911      	ldr	r1, [pc, #68]	; (8002ac4 <RCC_SetFlashLatency+0xf4>)
 8002a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a80:	4313      	orrs	r3, r2
 8002a82:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a84:	f7fe fb66 	bl	8001154 <HAL_GetTick>
 8002a88:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a8a:	e008      	b.n	8002a9e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002a8c:	f7fe fb62 	bl	8001154 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e007      	b.n	8002aae <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <RCC_SetFlashLatency+0xf4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d1ef      	bne.n	8002a8c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	374c      	adds	r7, #76	; 0x4c
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd90      	pop	{r4, r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	08005674 	.word	0x08005674
 8002abc:	08005684 	.word	0x08005684
 8002ac0:	08005690 	.word	0x08005690
 8002ac4:	58004000 	.word	0x58004000

08002ac8 <LL_RCC_LSE_IsEnabled>:
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <LL_RCC_LSE_IsEnabled+0x18>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <LL_RCC_LSE_IsEnabled+0x1a>
 8002ae0:	2300      	movs	r3, #0
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_RCC_LSE_IsReady>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d101      	bne.n	8002b04 <LL_RCC_LSE_IsReady+0x18>
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <LL_RCC_LSE_IsReady+0x1a>
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_RCC_SetRFWKPClockSource>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <LL_RCC_SetSMPSClockSource>:
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f023 0203 	bic.w	r2, r3, #3
 8002b4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_RCC_SetSMPSPrescaler>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_RCC_SetUSARTClockSource>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9c:	f023 0203 	bic.w	r2, r3, #3
 8002ba0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_RCC_SetLPUARTClockSource>:
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_RCC_SetI2CClockSource>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002c08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_RCC_SetLPTIMClockSource>:
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002c26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c2a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	0c1b      	lsrs	r3, r3, #16
 8002c32:	041b      	lsls	r3, r3, #16
 8002c34:	43db      	mvns	r3, r3
 8002c36:	401a      	ands	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	041b      	lsls	r3, r3, #16
 8002c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <LL_RCC_SetSAIClockSource>:
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <LL_RCC_SetRNGClockSource>:
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr

08002caa <LL_RCC_SetCLK48ClockSource>:
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cbe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_SetUSBClockSource>:
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ffe3 	bl	8002caa <LL_RCC_SetCLK48ClockSource>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <LL_RCC_SetADCClockSource>:
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d0c:	bf00      	nop
 8002d0e:	370c      	adds	r7, #12
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_RCC_SetRTCClockSource>:
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002d20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002d38:	bf00      	nop
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <LL_RCC_GetRTCClockSource>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <LL_RCC_ForceBackupDomainReset>:
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d76:	bf00      	nop
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002d84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <LL_RCC_PLLSAI1_Enable>:
{
 8002da2:	b480      	push	{r7}
 8002da4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002db0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002db4:	6013      	str	r3, [r2, #0]
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_RCC_PLLSAI1_Disable>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002dce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dd2:	6013      	str	r3, [r2, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_RCC_PLLSAI1_IsReady>:
{
 8002dde:	b480      	push	{r7}
 8002de0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df0:	d101      	bne.n	8002df6 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002df6:	2300      	movs	r3, #0
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b088      	sub	sp, #32
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002e0e:	2300      	movs	r3, #0
 8002e10:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d034      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e26:	d021      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002e28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e2c:	d81b      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e32:	d01d      	beq.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002e34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e38:	d815      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00b      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e42:	d110      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e52:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e54:	e00d      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f000 f947 	bl	80030ee <RCCEx_PLLSAI1_ConfigNP>
 8002e60:	4603      	mov	r3, r0
 8002e62:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002e64:	e005      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	77fb      	strb	r3, [r7, #31]
        break;
 8002e6a:	e002      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e6c:	bf00      	nop
 8002e6e:	e000      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002e70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d105      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff fee8 	bl	8002c52 <LL_RCC_SetSAIClockSource>
 8002e82:	e001      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e84:	7ffb      	ldrb	r3, [r7, #31]
 8002e86:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d046      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002e94:	f7ff ff56 	bl	8002d44 <LL_RCC_GetRTCClockSource>
 8002e98:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d03c      	beq.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002ea4:	f7fe fc68 	bl	8001778 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ff30 	bl	8002d18 <LL_RCC_SetRTCClockSource>
 8002eb8:	e02e      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002ec4:	f7ff ff4b 	bl	8002d5e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002ec8:	f7ff ff5a 	bl	8002d80 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002eda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002ee4:	f7ff fdf0 	bl	8002ac8 <LL_RCC_LSE_IsEnabled>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d114      	bne.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002eee:	f7fe f931 	bl	8001154 <HAL_GetTick>
 8002ef2:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ef4:	e00b      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ef6:	f7fe f92d 	bl	8001154 <HAL_GetTick>
 8002efa:	4602      	mov	r2, r0
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	1ad3      	subs	r3, r2, r3
 8002f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d902      	bls.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	77fb      	strb	r3, [r7, #31]
              break;
 8002f0c:	e004      	b.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8002f0e:	f7ff fded 	bl	8002aec <LL_RCC_LSE_IsReady>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d1ee      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8002f18:	7ffb      	ldrb	r3, [r7, #31]
 8002f1a:	77bb      	strb	r3, [r7, #30]
 8002f1c:	e001      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f1e:	7ffb      	ldrb	r3, [r7, #31]
 8002f20:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d004      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff fe2a 	bl	8002b8c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0302 	and.w	r3, r3, #2
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d004      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff fe35 	bl	8002bb8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0310 	and.w	r3, r3, #16
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d004      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff fe5d 	bl	8002c1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0320 	and.w	r3, r3, #32
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d004      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff fe52 	bl	8002c1e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d004      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fe2a 	bl	8002be4 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d004      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff fe1f 	bl	8002be4 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d022      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fe8d 	bl	8002cd6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8002fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fde:	d10b      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3304      	adds	r3, #4
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 f8dd 	bl	80031a4 <RCCEx_PLLSAI1_ConfigNQ>
 8002fea:	4603      	mov	r3, r0
 8002fec:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	2b00      	cmp	r3, #0
 8003002:	d02b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003016:	d003      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	4618      	mov	r0, r3
 8003026:	f7ff fe2a 	bl	8002c7e <LL_RCC_SetRNGClockSource>
 800302a:	e00a      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	2000      	movs	r0, #0
 8003038:	f7ff fe21 	bl	8002c7e <LL_RCC_SetRNGClockSource>
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff fe34 	bl	8002caa <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003046:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800304a:	d107      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	2b00      	cmp	r3, #0
 8003066:	d022      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fe3d 	bl	8002cec <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307a:	d107      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003094:	d10b      	bne.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f8dd 	bl	800325a <RCCEx_PLLSAI1_ConfigNR>
 80030a0:	4603      	mov	r3, r0
 80030a2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80030a4:	7ffb      	ldrb	r3, [r7, #31]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
 80030ac:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d004      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fd26 	bl	8002b10 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d009      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff fd45 	bl	8002b64 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff fd2c 	bl	8002b3c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80030e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b084      	sub	sp, #16
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80030fa:	f7ff fe61 	bl	8002dc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030fe:	f7fe f829 	bl	8001154 <HAL_GetTick>
 8003102:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003104:	e009      	b.n	800311a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003106:	f7fe f825 	bl	8001154 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	73fb      	strb	r3, [r7, #15]
      break;
 8003118:	e004      	b.n	8003124 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800311a:	f7ff fe60 	bl	8002dde <LL_RCC_PLLSAI1_IsReady>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1f0      	bne.n	8003106 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d137      	bne.n	800319a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800312a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800313e:	4313      	orrs	r3, r2
 8003140:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8003142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003154:	4313      	orrs	r3, r2
 8003156:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003158:	f7ff fe23 	bl	8002da2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800315c:	f7fd fffa 	bl	8001154 <HAL_GetTick>
 8003160:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003162:	e009      	b.n	8003178 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003164:	f7fd fff6 	bl	8001154 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d902      	bls.n	8003178 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	73fb      	strb	r3, [r7, #15]
        break;
 8003176:	e004      	b.n	8003182 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003178:	f7ff fe31 	bl	8002dde <LL_RCC_PLLSAI1_IsReady>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d1f0      	bne.n	8003164 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8003182:	7bfb      	ldrb	r3, [r7, #15]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d108      	bne.n	800319a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800318c:	691a      	ldr	r2, [r3, #16]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003196:	4313      	orrs	r3, r2
 8003198:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800319a:	7bfb      	ldrb	r3, [r7, #15]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031b0:	f7ff fe06 	bl	8002dc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031b4:	f7fd ffce 	bl	8001154 <HAL_GetTick>
 80031b8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031ba:	e009      	b.n	80031d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031bc:	f7fd ffca 	bl	8001154 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d902      	bls.n	80031d0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	73fb      	strb	r3, [r7, #15]
      break;
 80031ce:	e004      	b.n	80031da <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80031d0:	f7ff fe05 	bl	8002dde <LL_RCC_PLLSAI1_IsReady>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1f0      	bne.n	80031bc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80031da:	7bfb      	ldrb	r3, [r7, #15]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d137      	bne.n	8003250 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80031e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031f4:	4313      	orrs	r3, r2
 80031f6:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80031f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800320a:	4313      	orrs	r3, r2
 800320c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800320e:	f7ff fdc8 	bl	8002da2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003212:	f7fd ff9f 	bl	8001154 <HAL_GetTick>
 8003216:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003218:	e009      	b.n	800322e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800321a:	f7fd ff9b 	bl	8001154 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d902      	bls.n	800322e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	73fb      	strb	r3, [r7, #15]
        break;
 800322c:	e004      	b.n	8003238 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800322e:	f7ff fdd6 	bl	8002dde <LL_RCC_PLLSAI1_IsReady>
 8003232:	4603      	mov	r3, r0
 8003234:	2b01      	cmp	r3, #1
 8003236:	d1f0      	bne.n	800321a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003238:	7bfb      	ldrb	r3, [r7, #15]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d108      	bne.n	8003250 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	691a      	ldr	r2, [r3, #16]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800324c:	4313      	orrs	r3, r2
 800324e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003266:	f7ff fdab 	bl	8002dc0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800326a:	f7fd ff73 	bl	8001154 <HAL_GetTick>
 800326e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003270:	e009      	b.n	8003286 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003272:	f7fd ff6f 	bl	8001154 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e004      	b.n	8003290 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003286:	f7ff fdaa 	bl	8002dde <LL_RCC_PLLSAI1_IsReady>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f0      	bne.n	8003272 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8003290:	7bfb      	ldrb	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d137      	bne.n	8003306 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003296:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	021b      	lsls	r3, r3, #8
 80032a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032aa:	4313      	orrs	r3, r2
 80032ac:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80032ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032c0:	4313      	orrs	r3, r2
 80032c2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80032c4:	f7ff fd6d 	bl	8002da2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c8:	f7fd ff44 	bl	8001154 <HAL_GetTick>
 80032cc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032ce:	e009      	b.n	80032e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d0:	f7fd ff40 	bl	8001154 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d902      	bls.n	80032e4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	73fb      	strb	r3, [r7, #15]
        break;
 80032e2:	e004      	b.n	80032ee <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80032e4:	f7ff fd7b 	bl	8002dde <LL_RCC_PLLSAI1_IsReady>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d1f0      	bne.n	80032d0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d108      	bne.n	8003306 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003302:	4313      	orrs	r3, r2
 8003304:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003306:	7bfb      	ldrb	r3, [r7, #15]
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e095      	b.n	800344e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003326:	2b00      	cmp	r3, #0
 8003328:	d108      	bne.n	800333c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003332:	d009      	beq.n	8003348 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
 800333a:	e005      	b.n	8003348 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003354:	b2db      	uxtb	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	d106      	bne.n	8003368 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd fcb8 	bl	8000cd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2202      	movs	r2, #2
 800336c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800337e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003388:	d902      	bls.n	8003390 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e002      	b.n	8003396 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003394:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800339e:	d007      	beq.n	80033b0 <HAL_SPI_Init+0xa0>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033a8:	d002      	beq.n	80033b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033e8:	431a      	orrs	r2, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033f2:	ea42 0103 	orr.w	r1, r2, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	f003 0204 	and.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	f003 0310 	and.w	r3, r3, #16
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800342c:	ea42 0103 	orr.w	r1, r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b088      	sub	sp, #32
 800345a:	af00      	add	r7, sp, #0
 800345c:	60f8      	str	r0, [r7, #12]
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	603b      	str	r3, [r7, #0]
 8003462:	4613      	mov	r3, r2
 8003464:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_SPI_Transmit+0x22>
 8003474:	2302      	movs	r3, #2
 8003476:	e158      	b.n	800372a <HAL_SPI_Transmit+0x2d4>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003480:	f7fd fe68 	bl	8001154 <HAL_GetTick>
 8003484:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d002      	beq.n	800349c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003496:	2302      	movs	r3, #2
 8003498:	77fb      	strb	r3, [r7, #31]
    goto error;
 800349a:	e13d      	b.n	8003718 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_SPI_Transmit+0x52>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80034ac:	e134      	b.n	8003718 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2203      	movs	r2, #3
 80034b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d10f      	bne.n	800351a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003518:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b40      	cmp	r3, #64	; 0x40
 8003526:	d007      	beq.n	8003538 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003540:	d94b      	bls.n	80035da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d002      	beq.n	8003550 <HAL_SPI_Transmit+0xfa>
 800354a:	8afb      	ldrh	r3, [r7, #22]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d13e      	bne.n	80035ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003554:	881a      	ldrh	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	1c9a      	adds	r2, r3, #2
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003574:	e02b      	b.n	80035ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d112      	bne.n	80035aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	881a      	ldrh	r2, [r3, #0]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	1c9a      	adds	r2, r3, #2
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80035a8:	e011      	b.n	80035ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035aa:	f7fd fdd3 	bl	8001154 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d803      	bhi.n	80035c2 <HAL_SPI_Transmit+0x16c>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035c0:	d102      	bne.n	80035c8 <HAL_SPI_Transmit+0x172>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80035cc:	e0a4      	b.n	8003718 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1ce      	bne.n	8003576 <HAL_SPI_Transmit+0x120>
 80035d8:	e07c      	b.n	80036d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <HAL_SPI_Transmit+0x192>
 80035e2:	8afb      	ldrh	r3, [r7, #22]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d170      	bne.n	80036ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d912      	bls.n	8003618 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f6:	881a      	ldrh	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003602:	1c9a      	adds	r2, r3, #2
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800360c:	b29b      	uxth	r3, r3
 800360e:	3b02      	subs	r3, #2
 8003610:	b29a      	uxth	r2, r3
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003616:	e058      	b.n	80036ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	330c      	adds	r3, #12
 8003622:	7812      	ldrb	r2, [r2, #0]
 8003624:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800363e:	e044      	b.n	80036ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	d12b      	bne.n	80036a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003652:	b29b      	uxth	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	d912      	bls.n	800367e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	881a      	ldrh	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003668:	1c9a      	adds	r2, r3, #2
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003672:	b29b      	uxth	r3, r3
 8003674:	3b02      	subs	r3, #2
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800367c:	e025      	b.n	80036ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	330c      	adds	r3, #12
 8003688:	7812      	ldrb	r2, [r2, #0]
 800368a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a4:	e011      	b.n	80036ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a6:	f7fd fd55 	bl	8001154 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d803      	bhi.n	80036be <HAL_SPI_Transmit+0x268>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036bc:	d102      	bne.n	80036c4 <HAL_SPI_Transmit+0x26e>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c8:	e026      	b.n	8003718 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1b5      	bne.n	8003640 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 f949 	bl	8003970 <SPI_EndRxTxTransaction>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	77fb      	strb	r3, [r7, #31]
 8003714:	e000      	b.n	8003718 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003716:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003728:	7ffb      	ldrb	r3, [r7, #31]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
	...

08003734 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b088      	sub	sp, #32
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003744:	f7fd fd06 	bl	8001154 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	4413      	add	r3, r2
 8003752:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003754:	f7fd fcfe 	bl	8001154 <HAL_GetTick>
 8003758:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	015b      	lsls	r3, r3, #5
 8003760:	0d1b      	lsrs	r3, r3, #20
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	fb02 f303 	mul.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800376a:	e054      	b.n	8003816 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003772:	d050      	beq.n	8003816 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003774:	f7fd fcee 	bl	8001154 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	69fa      	ldr	r2, [r7, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	d902      	bls.n	800378a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d13d      	bne.n	8003806 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003798:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037a2:	d111      	bne.n	80037c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ac:	d004      	beq.n	80037b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037b6:	d107      	bne.n	80037c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037d0:	d10f      	bne.n	80037f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e017      	b.n	8003836 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3b01      	subs	r3, #1
 8003814:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4013      	ands	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	429a      	cmp	r2, r3
 8003824:	bf0c      	ite	eq
 8003826:	2301      	moveq	r3, #1
 8003828:	2300      	movne	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	79fb      	ldrb	r3, [r7, #7]
 8003830:	429a      	cmp	r2, r3
 8003832:	d19b      	bne.n	800376c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003834:	2300      	movs	r3, #0
}
 8003836:	4618      	mov	r0, r3
 8003838:	3720      	adds	r7, #32
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000028 	.word	0x20000028

08003844 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b08a      	sub	sp, #40	; 0x28
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
 8003850:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003852:	2300      	movs	r3, #0
 8003854:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003856:	f7fd fc7d 	bl	8001154 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	4413      	add	r3, r2
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003866:	f7fd fc75 	bl	8001154 <HAL_GetTick>
 800386a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	330c      	adds	r3, #12
 8003872:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003874:	4b3d      	ldr	r3, [pc, #244]	; (800396c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00da      	lsls	r2, r3, #3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	0d1b      	lsrs	r3, r3, #20
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	fb02 f303 	mul.w	r3, r2, r3
 800388a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800388c:	e060      	b.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003894:	d107      	bne.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d104      	bne.n	80038a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038ac:	d050      	beq.n	8003950 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80038ae:	f7fd fc51 	bl	8001154 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d902      	bls.n	80038c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d13d      	bne.n	8003940 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038dc:	d111      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e6:	d004      	beq.n	80038f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f0:	d107      	bne.n	8003902 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003900:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800390a:	d10f      	bne.n	800392c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800392a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e010      	b.n	8003962 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800394a:	69bb      	ldr	r3, [r7, #24]
 800394c:	3b01      	subs	r3, #1
 800394e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689a      	ldr	r2, [r3, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	429a      	cmp	r2, r3
 800395e:	d196      	bne.n	800388e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3728      	adds	r7, #40	; 0x28
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000028 	.word	0x20000028

08003970 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2200      	movs	r2, #0
 8003984:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f7ff ff5b 	bl	8003844 <SPI_WaitFifoStateUntilTimeout>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d007      	beq.n	80039a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003998:	f043 0220 	orr.w	r2, r3, #32
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e027      	b.n	80039f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f7ff fec0 	bl	8003734 <SPI_WaitFlagStateUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d007      	beq.n	80039ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039be:	f043 0220 	orr.w	r2, r3, #32
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e014      	b.n	80039f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f7ff ff34 	bl	8003844 <SPI_WaitFifoStateUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d007      	beq.n	80039f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e6:	f043 0220 	orr.w	r2, r3, #32
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e000      	b.n	80039f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <LL_RCC_GetUSARTClockSource>:
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4013      	ands	r3, r2
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <LL_RCC_GetLPUARTClockSource>:
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4013      	ands	r3, r2
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e042      	b.n	8003ad4 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd f97f 	bl	8000d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	; 0x24
 8003a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8b2 	bl	8003be8 <UART_SetConfig>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 face 	bl	8004038 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fb55 	bl	800417c <UART_CheckIdleState>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af2:	2b20      	cmp	r3, #32
 8003af4:	d173      	bne.n	8003bde <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_Transmit+0x26>
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06c      	b.n	8003be0 <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2221      	movs	r2, #33	; 0x21
 8003b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b16:	f7fd fb1d 	bl	8001154 <HAL_GetTick>
 8003b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	88fa      	ldrh	r2, [r7, #6]
 8003b20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	88fa      	ldrh	r2, [r7, #6]
 8003b28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b34:	d108      	bne.n	8003b48 <HAL_UART_Transmit+0x6c>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d104      	bne.n	8003b48 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	61bb      	str	r3, [r7, #24]
 8003b46:	e003      	b.n	8003b50 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b50:	e02c      	b.n	8003bac <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2180      	movs	r1, #128	; 0x80
 8003b5c:	68f8      	ldr	r0, [r7, #12]
 8003b5e:	f000 fb5b 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8003b62:	4603      	mov	r3, r0
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d001      	beq.n	8003b6c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e039      	b.n	8003be0 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10b      	bne.n	8003b8a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3302      	adds	r3, #2
 8003b86:	61bb      	str	r3, [r7, #24]
 8003b88:	e007      	b.n	8003b9a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	3301      	adds	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	b29a      	uxth	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1cc      	bne.n	8003b52 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2140      	movs	r1, #64	; 0x40
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 fb28 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e006      	b.n	8003be0 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	e000      	b.n	8003be0 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003bde:	2302      	movs	r3, #2
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3720      	adds	r7, #32
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b08c      	sub	sp, #48	; 0x30
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	695b      	ldr	r3, [r3, #20]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	4baf      	ldr	r3, [pc, #700]	; (8003ed4 <UART_SetConfig+0x2ec>)
 8003c18:	4013      	ands	r3, r2
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	6812      	ldr	r2, [r2, #0]
 8003c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c20:	430b      	orrs	r3, r1
 8003c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4aa4      	ldr	r2, [pc, #656]	; (8003ed8 <UART_SetConfig+0x2f0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d004      	beq.n	8003c54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c50:	4313      	orrs	r3, r2
 8003c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f023 010f 	bic.w	r1, r3, #15
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a95      	ldr	r2, [pc, #596]	; (8003edc <UART_SetConfig+0x2f4>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d125      	bne.n	8003cd8 <UART_SetConfig+0xf0>
 8003c8c:	2003      	movs	r0, #3
 8003c8e:	f7ff feb5 	bl	80039fc <LL_RCC_GetUSARTClockSource>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d81b      	bhi.n	8003cd0 <UART_SetConfig+0xe8>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <UART_SetConfig+0xb8>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	08003cb9 	.word	0x08003cb9
 8003cac:	08003cc9 	.word	0x08003cc9
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e042      	b.n	8003d3e <UART_SetConfig+0x156>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e03e      	b.n	8003d3e <UART_SetConfig+0x156>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e03a      	b.n	8003d3e <UART_SetConfig+0x156>
 8003cc8:	2308      	movs	r3, #8
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cce:	e036      	b.n	8003d3e <UART_SetConfig+0x156>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd6:	e032      	b.n	8003d3e <UART_SetConfig+0x156>
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a7e      	ldr	r2, [pc, #504]	; (8003ed8 <UART_SetConfig+0x2f0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d12a      	bne.n	8003d38 <UART_SetConfig+0x150>
 8003ce2:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003ce6:	f7ff fe99 	bl	8003a1c <LL_RCC_GetLPUARTClockSource>
 8003cea:	4603      	mov	r3, r0
 8003cec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf0:	d01a      	beq.n	8003d28 <UART_SetConfig+0x140>
 8003cf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cf6:	d81b      	bhi.n	8003d30 <UART_SetConfig+0x148>
 8003cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cfc:	d00c      	beq.n	8003d18 <UART_SetConfig+0x130>
 8003cfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d02:	d815      	bhi.n	8003d30 <UART_SetConfig+0x148>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d003      	beq.n	8003d10 <UART_SetConfig+0x128>
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d008      	beq.n	8003d20 <UART_SetConfig+0x138>
 8003d0e:	e00f      	b.n	8003d30 <UART_SetConfig+0x148>
 8003d10:	2300      	movs	r3, #0
 8003d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d16:	e012      	b.n	8003d3e <UART_SetConfig+0x156>
 8003d18:	2302      	movs	r3, #2
 8003d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1e:	e00e      	b.n	8003d3e <UART_SetConfig+0x156>
 8003d20:	2304      	movs	r3, #4
 8003d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d26:	e00a      	b.n	8003d3e <UART_SetConfig+0x156>
 8003d28:	2308      	movs	r3, #8
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e006      	b.n	8003d3e <UART_SetConfig+0x156>
 8003d30:	2310      	movs	r3, #16
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d36:	e002      	b.n	8003d3e <UART_SetConfig+0x156>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a65      	ldr	r2, [pc, #404]	; (8003ed8 <UART_SetConfig+0x2f0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	f040 8097 	bne.w	8003e78 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d823      	bhi.n	8003d9a <UART_SetConfig+0x1b2>
 8003d52:	a201      	add	r2, pc, #4	; (adr r2, 8003d58 <UART_SetConfig+0x170>)
 8003d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	08003d9b 	.word	0x08003d9b
 8003d60:	08003d85 	.word	0x08003d85
 8003d64:	08003d9b 	.word	0x08003d9b
 8003d68:	08003d8b 	.word	0x08003d8b
 8003d6c:	08003d9b 	.word	0x08003d9b
 8003d70:	08003d9b 	.word	0x08003d9b
 8003d74:	08003d9b 	.word	0x08003d9b
 8003d78:	08003d93 	.word	0x08003d93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d7c:	f7fe fdc4 	bl	8002908 <HAL_RCC_GetPCLK1Freq>
 8003d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d82:	e010      	b.n	8003da6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d84:	4b56      	ldr	r3, [pc, #344]	; (8003ee0 <UART_SetConfig+0x2f8>)
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d88:	e00d      	b.n	8003da6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d8a:	f7fe fd3d 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003d8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d90:	e009      	b.n	8003da6 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d98:	e005      	b.n	8003da6 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003da4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f000 812b 	beq.w	8004004 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db2:	4a4c      	ldr	r2, [pc, #304]	; (8003ee4 <UART_SetConfig+0x2fc>)
 8003db4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	4413      	add	r3, r2
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d305      	bcc.n	8003dde <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d903      	bls.n	8003de6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003de4:	e10e      	b.n	8004004 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	2200      	movs	r2, #0
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	60fa      	str	r2, [r7, #12]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	4a3c      	ldr	r2, [pc, #240]	; (8003ee4 <UART_SetConfig+0x2fc>)
 8003df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	603b      	str	r3, [r7, #0]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003e08:	f7fc fa0a 	bl	8000220 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	020b      	lsls	r3, r1, #8
 8003e1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e22:	0202      	lsls	r2, r0, #8
 8003e24:	6979      	ldr	r1, [r7, #20]
 8003e26:	6849      	ldr	r1, [r1, #4]
 8003e28:	0849      	lsrs	r1, r1, #1
 8003e2a:	2000      	movs	r0, #0
 8003e2c:	460c      	mov	r4, r1
 8003e2e:	4605      	mov	r5, r0
 8003e30:	eb12 0804 	adds.w	r8, r2, r4
 8003e34:	eb43 0905 	adc.w	r9, r3, r5
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	469a      	mov	sl, r3
 8003e40:	4693      	mov	fp, r2
 8003e42:	4652      	mov	r2, sl
 8003e44:	465b      	mov	r3, fp
 8003e46:	4640      	mov	r0, r8
 8003e48:	4649      	mov	r1, r9
 8003e4a:	f7fc f9e9 	bl	8000220 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4613      	mov	r3, r2
 8003e54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e5c:	d308      	bcc.n	8003e70 <UART_SetConfig+0x288>
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e64:	d204      	bcs.n	8003e70 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a3a      	ldr	r2, [r7, #32]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	e0c9      	b.n	8004004 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e76:	e0c5      	b.n	8004004 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e80:	d16d      	bne.n	8003f5e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003e82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e86:	3b01      	subs	r3, #1
 8003e88:	2b07      	cmp	r3, #7
 8003e8a:	d82d      	bhi.n	8003ee8 <UART_SetConfig+0x300>
 8003e8c:	a201      	add	r2, pc, #4	; (adr r2, 8003e94 <UART_SetConfig+0x2ac>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003eb5 	.word	0x08003eb5
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ee9 	.word	0x08003ee9
 8003ea0:	08003ec3 	.word	0x08003ec3
 8003ea4:	08003ee9 	.word	0x08003ee9
 8003ea8:	08003ee9 	.word	0x08003ee9
 8003eac:	08003ee9 	.word	0x08003ee9
 8003eb0:	08003ecb 	.word	0x08003ecb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003eb4:	f7fe fd3e 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8003eb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003eba:	e01b      	b.n	8003ef4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ebc:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <UART_SetConfig+0x2f8>)
 8003ebe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ec0:	e018      	b.n	8003ef4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ec2:	f7fe fca1 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003ec6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ec8:	e014      	b.n	8003ef4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ed0:	e010      	b.n	8003ef4 <UART_SetConfig+0x30c>
 8003ed2:	bf00      	nop
 8003ed4:	cfff69f3 	.word	0xcfff69f3
 8003ed8:	40008000 	.word	0x40008000
 8003edc:	40013800 	.word	0x40013800
 8003ee0:	00f42400 	.word	0x00f42400
 8003ee4:	08005760 	.word	0x08005760
      default:
        pclk = 0U;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8084 	beq.w	8004004 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	4a4b      	ldr	r2, [pc, #300]	; (8004030 <UART_SetConfig+0x448>)
 8003f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f06:	461a      	mov	r2, r3
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f0e:	005a      	lsls	r2, r3, #1
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	441a      	add	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2b0f      	cmp	r3, #15
 8003f26:	d916      	bls.n	8003f56 <UART_SetConfig+0x36e>
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d212      	bcs.n	8003f56 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	f023 030f 	bic.w	r3, r3, #15
 8003f38:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	b29a      	uxth	r2, r3
 8003f46:	8bfb      	ldrh	r3, [r7, #30]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	8bfa      	ldrh	r2, [r7, #30]
 8003f52:	60da      	str	r2, [r3, #12]
 8003f54:	e056      	b.n	8004004 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f5c:	e052      	b.n	8004004 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f5e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f62:	3b01      	subs	r3, #1
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d822      	bhi.n	8003fae <UART_SetConfig+0x3c6>
 8003f68:	a201      	add	r2, pc, #4	; (adr r2, 8003f70 <UART_SetConfig+0x388>)
 8003f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f6e:	bf00      	nop
 8003f70:	08003f91 	.word	0x08003f91
 8003f74:	08003f99 	.word	0x08003f99
 8003f78:	08003faf 	.word	0x08003faf
 8003f7c:	08003f9f 	.word	0x08003f9f
 8003f80:	08003faf 	.word	0x08003faf
 8003f84:	08003faf 	.word	0x08003faf
 8003f88:	08003faf 	.word	0x08003faf
 8003f8c:	08003fa7 	.word	0x08003fa7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f90:	f7fe fcd0 	bl	8002934 <HAL_RCC_GetPCLK2Freq>
 8003f94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f96:	e010      	b.n	8003fba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <UART_SetConfig+0x44c>)
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f9c:	e00d      	b.n	8003fba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f9e:	f7fe fc33 	bl	8002808 <HAL_RCC_GetSysClockFreq>
 8003fa2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fa4:	e009      	b.n	8003fba <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fac:	e005      	b.n	8003fba <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fb8:	bf00      	nop
    }

    if (pclk != 0U)
 8003fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d021      	beq.n	8004004 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <UART_SetConfig+0x448>)
 8003fc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	fbb3 f2f2 	udiv	r2, r3, r2
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	085b      	lsrs	r3, r3, #1
 8003fd8:	441a      	add	r2, r3
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b0f      	cmp	r3, #15
 8003fe8:	d909      	bls.n	8003ffe <UART_SetConfig+0x416>
 8003fea:	6a3b      	ldr	r3, [r7, #32]
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff0:	d205      	bcs.n	8003ffe <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e002      	b.n	8004004 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	2201      	movs	r2, #1
 8004008:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	2201      	movs	r2, #1
 8004010:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2200      	movs	r2, #0
 8004018:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2200      	movs	r2, #0
 800401e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004020:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004024:	4618      	mov	r0, r3
 8004026:	3730      	adds	r7, #48	; 0x30
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800402e:	bf00      	nop
 8004030:	08005760 	.word	0x08005760
 8004034:	00f42400 	.word	0x00f42400

08004038 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00a      	beq.n	8004062 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040cc:	f003 0310 	and.w	r3, r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00a      	beq.n	80040ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	430a      	orrs	r2, r1
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01a      	beq.n	800414e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004136:	d10a      	bne.n	800414e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	430a      	orrs	r2, r1
 800414c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	605a      	str	r2, [r3, #4]
  }
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af02      	add	r7, sp, #8
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800418c:	f7fc ffe2 	bl	8001154 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0308 	and.w	r3, r3, #8
 800419c:	2b08      	cmp	r3, #8
 800419e:	d10e      	bne.n	80041be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f832 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e028      	b.n	8004210 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d10e      	bne.n	80041ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f81c 	bl	8004218 <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e012      	b.n	8004210 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2220      	movs	r2, #32
 80041ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b09c      	sub	sp, #112	; 0x70
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004228:	e0a9      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800422a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004230:	f000 80a5 	beq.w	800437e <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004234:	f7fc ff8e 	bl	8001154 <HAL_GetTick>
 8004238:	4602      	mov	r2, r0
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	1ad3      	subs	r3, r2, r3
 800423e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <UART_WaitOnFlagUntilTimeout+0x32>
 8004244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004246:	2b00      	cmp	r3, #0
 8004248:	d140      	bne.n	80042cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800425e:	667b      	str	r3, [r7, #100]	; 0x64
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	461a      	mov	r2, r3
 8004266:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004268:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426a:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800426e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004270:	e841 2300 	strex	r3, r2, [r1]
 8004274:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1e6      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3308      	adds	r3, #8
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004286:	e853 3f00 	ldrex	r3, [r3]
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	663b      	str	r3, [r7, #96]	; 0x60
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3308      	adds	r3, #8
 800429a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800429c:	64ba      	str	r2, [r7, #72]	; 0x48
 800429e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a4:	e841 2300 	strex	r3, r2, [r1]
 80042a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d1e5      	bne.n	800427c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e069      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d051      	beq.n	800437e <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	69db      	ldr	r3, [r3, #28]
 80042e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e8:	d149      	bne.n	800437e <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004308:	66fb      	str	r3, [r7, #108]	; 0x6c
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
 8004314:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004318:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	613b      	str	r3, [r7, #16]
   return(result);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	66bb      	str	r3, [r7, #104]	; 0x68
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004346:	623a      	str	r2, [r7, #32]
 8004348:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69f9      	ldr	r1, [r7, #28]
 800434c:	6a3a      	ldr	r2, [r7, #32]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	61bb      	str	r3, [r7, #24]
   return(result);
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2220      	movs	r2, #32
 800436e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e010      	b.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	69da      	ldr	r2, [r3, #28]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	4013      	ands	r3, r2
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	bf0c      	ite	eq
 800438e:	2301      	moveq	r3, #1
 8004390:	2300      	movne	r3, #0
 8004392:	b2db      	uxtb	r3, r3
 8004394:	461a      	mov	r2, r3
 8004396:	79fb      	ldrb	r3, [r7, #7]
 8004398:	429a      	cmp	r2, r3
 800439a:	f43f af46 	beq.w	800422a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3770      	adds	r7, #112	; 0x70
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_UARTEx_DisableFifoMode+0x16>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e027      	b.n	800440e <HAL_UARTEx_DisableFifoMode+0x66>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2224      	movs	r2, #36	; 0x24
 80043ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 0201 	bic.w	r2, r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80043ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	6078      	str	r0, [r7, #4]
 8004422:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800442e:	2302      	movs	r3, #2
 8004430:	e02d      	b.n	800448e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2224      	movs	r2, #36	; 0x24
 800443e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 0201 	bic.w	r2, r2, #1
 8004458:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f850 	bl	8004514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3710      	adds	r7, #16
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b084      	sub	sp, #16
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e02d      	b.n	800450a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2224      	movs	r2, #36	; 0x24
 80044ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f022 0201 	bic.w	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f812 	bl	8004514 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004520:	2b00      	cmp	r3, #0
 8004522:	d108      	bne.n	8004536 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004534:	e031      	b.n	800459a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004536:	2308      	movs	r3, #8
 8004538:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800453a:	2308      	movs	r3, #8
 800453c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	0e5b      	lsrs	r3, r3, #25
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	0f5b      	lsrs	r3, r3, #29
 8004556:	b2db      	uxtb	r3, r3
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800455e:	7bbb      	ldrb	r3, [r7, #14]
 8004560:	7b3a      	ldrb	r2, [r7, #12]
 8004562:	4911      	ldr	r1, [pc, #68]	; (80045a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004564:	5c8a      	ldrb	r2, [r1, r2]
 8004566:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800456a:	7b3a      	ldrb	r2, [r7, #12]
 800456c:	490f      	ldr	r1, [pc, #60]	; (80045ac <UARTEx_SetNbDataToProcess+0x98>)
 800456e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004570:	fb93 f3f2 	sdiv	r3, r3, r2
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800457c:	7bfb      	ldrb	r3, [r7, #15]
 800457e:	7b7a      	ldrb	r2, [r7, #13]
 8004580:	4909      	ldr	r1, [pc, #36]	; (80045a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004582:	5c8a      	ldrb	r2, [r1, r2]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004588:	7b7a      	ldrb	r2, [r7, #13]
 800458a:	4908      	ldr	r1, [pc, #32]	; (80045ac <UARTEx_SetNbDataToProcess+0x98>)
 800458c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800458e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800459a:	bf00      	nop
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	08005778 	.word	0x08005778
 80045ac:	08005780 	.word	0x08005780

080045b0 <__errno>:
 80045b0:	4b01      	ldr	r3, [pc, #4]	; (80045b8 <__errno+0x8>)
 80045b2:	6818      	ldr	r0, [r3, #0]
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000034 	.word	0x20000034

080045bc <__libc_init_array>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	4d0d      	ldr	r5, [pc, #52]	; (80045f4 <__libc_init_array+0x38>)
 80045c0:	4c0d      	ldr	r4, [pc, #52]	; (80045f8 <__libc_init_array+0x3c>)
 80045c2:	1b64      	subs	r4, r4, r5
 80045c4:	10a4      	asrs	r4, r4, #2
 80045c6:	2600      	movs	r6, #0
 80045c8:	42a6      	cmp	r6, r4
 80045ca:	d109      	bne.n	80045e0 <__libc_init_array+0x24>
 80045cc:	4d0b      	ldr	r5, [pc, #44]	; (80045fc <__libc_init_array+0x40>)
 80045ce:	4c0c      	ldr	r4, [pc, #48]	; (8004600 <__libc_init_array+0x44>)
 80045d0:	f001 f824 	bl	800561c <_init>
 80045d4:	1b64      	subs	r4, r4, r5
 80045d6:	10a4      	asrs	r4, r4, #2
 80045d8:	2600      	movs	r6, #0
 80045da:	42a6      	cmp	r6, r4
 80045dc:	d105      	bne.n	80045ea <__libc_init_array+0x2e>
 80045de:	bd70      	pop	{r4, r5, r6, pc}
 80045e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e4:	4798      	blx	r3
 80045e6:	3601      	adds	r6, #1
 80045e8:	e7ee      	b.n	80045c8 <__libc_init_array+0xc>
 80045ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ee:	4798      	blx	r3
 80045f0:	3601      	adds	r6, #1
 80045f2:	e7f2      	b.n	80045da <__libc_init_array+0x1e>
 80045f4:	08005828 	.word	0x08005828
 80045f8:	08005828 	.word	0x08005828
 80045fc:	08005828 	.word	0x08005828
 8004600:	0800582c 	.word	0x0800582c

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <iprintf>:
 8004614:	b40f      	push	{r0, r1, r2, r3}
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <iprintf+0x2c>)
 8004618:	b513      	push	{r0, r1, r4, lr}
 800461a:	681c      	ldr	r4, [r3, #0]
 800461c:	b124      	cbz	r4, 8004628 <iprintf+0x14>
 800461e:	69a3      	ldr	r3, [r4, #24]
 8004620:	b913      	cbnz	r3, 8004628 <iprintf+0x14>
 8004622:	4620      	mov	r0, r4
 8004624:	f000 fa5e 	bl	8004ae4 <__sinit>
 8004628:	ab05      	add	r3, sp, #20
 800462a:	9a04      	ldr	r2, [sp, #16]
 800462c:	68a1      	ldr	r1, [r4, #8]
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	4620      	mov	r0, r4
 8004632:	f000 fc67 	bl	8004f04 <_vfiprintf_r>
 8004636:	b002      	add	sp, #8
 8004638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800463c:	b004      	add	sp, #16
 800463e:	4770      	bx	lr
 8004640:	20000034 	.word	0x20000034

08004644 <_puts_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460e      	mov	r6, r1
 8004648:	4605      	mov	r5, r0
 800464a:	b118      	cbz	r0, 8004654 <_puts_r+0x10>
 800464c:	6983      	ldr	r3, [r0, #24]
 800464e:	b90b      	cbnz	r3, 8004654 <_puts_r+0x10>
 8004650:	f000 fa48 	bl	8004ae4 <__sinit>
 8004654:	69ab      	ldr	r3, [r5, #24]
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	b913      	cbnz	r3, 8004660 <_puts_r+0x1c>
 800465a:	4628      	mov	r0, r5
 800465c:	f000 fa42 	bl	8004ae4 <__sinit>
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <_puts_r+0xd0>)
 8004662:	429c      	cmp	r4, r3
 8004664:	d120      	bne.n	80046a8 <_puts_r+0x64>
 8004666:	686c      	ldr	r4, [r5, #4]
 8004668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800466a:	07db      	lsls	r3, r3, #31
 800466c:	d405      	bmi.n	800467a <_puts_r+0x36>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	0598      	lsls	r0, r3, #22
 8004672:	d402      	bmi.n	800467a <_puts_r+0x36>
 8004674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004676:	f000 fad3 	bl	8004c20 <__retarget_lock_acquire_recursive>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	0719      	lsls	r1, r3, #28
 800467e:	d51d      	bpl.n	80046bc <_puts_r+0x78>
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	b1db      	cbz	r3, 80046bc <_puts_r+0x78>
 8004684:	3e01      	subs	r6, #1
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800468c:	3b01      	subs	r3, #1
 800468e:	60a3      	str	r3, [r4, #8]
 8004690:	bb39      	cbnz	r1, 80046e2 <_puts_r+0x9e>
 8004692:	2b00      	cmp	r3, #0
 8004694:	da38      	bge.n	8004708 <_puts_r+0xc4>
 8004696:	4622      	mov	r2, r4
 8004698:	210a      	movs	r1, #10
 800469a:	4628      	mov	r0, r5
 800469c:	f000 f848 	bl	8004730 <__swbuf_r>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d011      	beq.n	80046c8 <_puts_r+0x84>
 80046a4:	250a      	movs	r5, #10
 80046a6:	e011      	b.n	80046cc <_puts_r+0x88>
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <_puts_r+0xd4>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	d101      	bne.n	80046b2 <_puts_r+0x6e>
 80046ae:	68ac      	ldr	r4, [r5, #8]
 80046b0:	e7da      	b.n	8004668 <_puts_r+0x24>
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <_puts_r+0xd8>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	bf08      	it	eq
 80046b8:	68ec      	ldreq	r4, [r5, #12]
 80046ba:	e7d5      	b.n	8004668 <_puts_r+0x24>
 80046bc:	4621      	mov	r1, r4
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 f888 	bl	80047d4 <__swsetup_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d0dd      	beq.n	8004684 <_puts_r+0x40>
 80046c8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80046cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ce:	07da      	lsls	r2, r3, #31
 80046d0:	d405      	bmi.n	80046de <_puts_r+0x9a>
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	059b      	lsls	r3, r3, #22
 80046d6:	d402      	bmi.n	80046de <_puts_r+0x9a>
 80046d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046da:	f000 faa2 	bl	8004c22 <__retarget_lock_release_recursive>
 80046de:	4628      	mov	r0, r5
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da04      	bge.n	80046f0 <_puts_r+0xac>
 80046e6:	69a2      	ldr	r2, [r4, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dc06      	bgt.n	80046fa <_puts_r+0xb6>
 80046ec:	290a      	cmp	r1, #10
 80046ee:	d004      	beq.n	80046fa <_puts_r+0xb6>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	6022      	str	r2, [r4, #0]
 80046f6:	7019      	strb	r1, [r3, #0]
 80046f8:	e7c5      	b.n	8004686 <_puts_r+0x42>
 80046fa:	4622      	mov	r2, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 f817 	bl	8004730 <__swbuf_r>
 8004702:	3001      	adds	r0, #1
 8004704:	d1bf      	bne.n	8004686 <_puts_r+0x42>
 8004706:	e7df      	b.n	80046c8 <_puts_r+0x84>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	250a      	movs	r5, #10
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	701d      	strb	r5, [r3, #0]
 8004712:	e7db      	b.n	80046cc <_puts_r+0x88>
 8004714:	080057ac 	.word	0x080057ac
 8004718:	080057cc 	.word	0x080057cc
 800471c:	0800578c 	.word	0x0800578c

08004720 <puts>:
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <puts+0xc>)
 8004722:	4601      	mov	r1, r0
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	f7ff bf8d 	b.w	8004644 <_puts_r>
 800472a:	bf00      	nop
 800472c:	20000034 	.word	0x20000034

08004730 <__swbuf_r>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	460e      	mov	r6, r1
 8004734:	4614      	mov	r4, r2
 8004736:	4605      	mov	r5, r0
 8004738:	b118      	cbz	r0, 8004742 <__swbuf_r+0x12>
 800473a:	6983      	ldr	r3, [r0, #24]
 800473c:	b90b      	cbnz	r3, 8004742 <__swbuf_r+0x12>
 800473e:	f000 f9d1 	bl	8004ae4 <__sinit>
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <__swbuf_r+0x98>)
 8004744:	429c      	cmp	r4, r3
 8004746:	d12b      	bne.n	80047a0 <__swbuf_r+0x70>
 8004748:	686c      	ldr	r4, [r5, #4]
 800474a:	69a3      	ldr	r3, [r4, #24]
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	071a      	lsls	r2, r3, #28
 8004752:	d52f      	bpl.n	80047b4 <__swbuf_r+0x84>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	b36b      	cbz	r3, 80047b4 <__swbuf_r+0x84>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	1ac0      	subs	r0, r0, r3
 800475e:	6963      	ldr	r3, [r4, #20]
 8004760:	b2f6      	uxtb	r6, r6
 8004762:	4283      	cmp	r3, r0
 8004764:	4637      	mov	r7, r6
 8004766:	dc04      	bgt.n	8004772 <__swbuf_r+0x42>
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f926 	bl	80049bc <_fflush_r>
 8004770:	bb30      	cbnz	r0, 80047c0 <__swbuf_r+0x90>
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	3b01      	subs	r3, #1
 8004776:	60a3      	str	r3, [r4, #8]
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	701e      	strb	r6, [r3, #0]
 8004780:	6963      	ldr	r3, [r4, #20]
 8004782:	3001      	adds	r0, #1
 8004784:	4283      	cmp	r3, r0
 8004786:	d004      	beq.n	8004792 <__swbuf_r+0x62>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	07db      	lsls	r3, r3, #31
 800478c:	d506      	bpl.n	800479c <__swbuf_r+0x6c>
 800478e:	2e0a      	cmp	r6, #10
 8004790:	d104      	bne.n	800479c <__swbuf_r+0x6c>
 8004792:	4621      	mov	r1, r4
 8004794:	4628      	mov	r0, r5
 8004796:	f000 f911 	bl	80049bc <_fflush_r>
 800479a:	b988      	cbnz	r0, 80047c0 <__swbuf_r+0x90>
 800479c:	4638      	mov	r0, r7
 800479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <__swbuf_r+0x9c>)
 80047a2:	429c      	cmp	r4, r3
 80047a4:	d101      	bne.n	80047aa <__swbuf_r+0x7a>
 80047a6:	68ac      	ldr	r4, [r5, #8]
 80047a8:	e7cf      	b.n	800474a <__swbuf_r+0x1a>
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <__swbuf_r+0xa0>)
 80047ac:	429c      	cmp	r4, r3
 80047ae:	bf08      	it	eq
 80047b0:	68ec      	ldreq	r4, [r5, #12]
 80047b2:	e7ca      	b.n	800474a <__swbuf_r+0x1a>
 80047b4:	4621      	mov	r1, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 f80c 	bl	80047d4 <__swsetup_r>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d0cb      	beq.n	8004758 <__swbuf_r+0x28>
 80047c0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80047c4:	e7ea      	b.n	800479c <__swbuf_r+0x6c>
 80047c6:	bf00      	nop
 80047c8:	080057ac 	.word	0x080057ac
 80047cc:	080057cc 	.word	0x080057cc
 80047d0:	0800578c 	.word	0x0800578c

080047d4 <__swsetup_r>:
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <__swsetup_r+0xcc>)
 80047d6:	b570      	push	{r4, r5, r6, lr}
 80047d8:	681d      	ldr	r5, [r3, #0]
 80047da:	4606      	mov	r6, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	b125      	cbz	r5, 80047ea <__swsetup_r+0x16>
 80047e0:	69ab      	ldr	r3, [r5, #24]
 80047e2:	b913      	cbnz	r3, 80047ea <__swsetup_r+0x16>
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f97d 	bl	8004ae4 <__sinit>
 80047ea:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <__swsetup_r+0xd0>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d10f      	bne.n	8004810 <__swsetup_r+0x3c>
 80047f0:	686c      	ldr	r4, [r5, #4]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f8:	0719      	lsls	r1, r3, #28
 80047fa:	d42c      	bmi.n	8004856 <__swsetup_r+0x82>
 80047fc:	06dd      	lsls	r5, r3, #27
 80047fe:	d411      	bmi.n	8004824 <__swsetup_r+0x50>
 8004800:	2309      	movs	r3, #9
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800480e:	e03e      	b.n	800488e <__swsetup_r+0xba>
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <__swsetup_r+0xd4>)
 8004812:	429c      	cmp	r4, r3
 8004814:	d101      	bne.n	800481a <__swsetup_r+0x46>
 8004816:	68ac      	ldr	r4, [r5, #8]
 8004818:	e7eb      	b.n	80047f2 <__swsetup_r+0x1e>
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <__swsetup_r+0xd8>)
 800481c:	429c      	cmp	r4, r3
 800481e:	bf08      	it	eq
 8004820:	68ec      	ldreq	r4, [r5, #12]
 8004822:	e7e6      	b.n	80047f2 <__swsetup_r+0x1e>
 8004824:	0758      	lsls	r0, r3, #29
 8004826:	d512      	bpl.n	800484e <__swsetup_r+0x7a>
 8004828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482a:	b141      	cbz	r1, 800483e <__swsetup_r+0x6a>
 800482c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004830:	4299      	cmp	r1, r3
 8004832:	d002      	beq.n	800483a <__swsetup_r+0x66>
 8004834:	4630      	mov	r0, r6
 8004836:	f000 fa5b 	bl	8004cf0 <_free_r>
 800483a:	2300      	movs	r3, #0
 800483c:	6363      	str	r3, [r4, #52]	; 0x34
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	2300      	movs	r3, #0
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	b94b      	cbnz	r3, 800486e <__swsetup_r+0x9a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004864:	d003      	beq.n	800486e <__swsetup_r+0x9a>
 8004866:	4621      	mov	r1, r4
 8004868:	4630      	mov	r0, r6
 800486a:	f000 fa01 	bl	8004c70 <__smakebuf_r>
 800486e:	89a0      	ldrh	r0, [r4, #12]
 8004870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004874:	f010 0301 	ands.w	r3, r0, #1
 8004878:	d00a      	beq.n	8004890 <__swsetup_r+0xbc>
 800487a:	2300      	movs	r3, #0
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	6963      	ldr	r3, [r4, #20]
 8004880:	425b      	negs	r3, r3
 8004882:	61a3      	str	r3, [r4, #24]
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	b943      	cbnz	r3, 800489a <__swsetup_r+0xc6>
 8004888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800488c:	d1ba      	bne.n	8004804 <__swsetup_r+0x30>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	0781      	lsls	r1, r0, #30
 8004892:	bf58      	it	pl
 8004894:	6963      	ldrpl	r3, [r4, #20]
 8004896:	60a3      	str	r3, [r4, #8]
 8004898:	e7f4      	b.n	8004884 <__swsetup_r+0xb0>
 800489a:	2000      	movs	r0, #0
 800489c:	e7f7      	b.n	800488e <__swsetup_r+0xba>
 800489e:	bf00      	nop
 80048a0:	20000034 	.word	0x20000034
 80048a4:	080057ac 	.word	0x080057ac
 80048a8:	080057cc 	.word	0x080057cc
 80048ac:	0800578c 	.word	0x0800578c

080048b0 <__sflush_r>:
 80048b0:	898a      	ldrh	r2, [r1, #12]
 80048b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	4605      	mov	r5, r0
 80048b8:	0710      	lsls	r0, r2, #28
 80048ba:	460c      	mov	r4, r1
 80048bc:	d458      	bmi.n	8004970 <__sflush_r+0xc0>
 80048be:	684b      	ldr	r3, [r1, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	dc05      	bgt.n	80048d0 <__sflush_r+0x20>
 80048c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	dc02      	bgt.n	80048d0 <__sflush_r+0x20>
 80048ca:	2000      	movs	r0, #0
 80048cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d0f9      	beq.n	80048ca <__sflush_r+0x1a>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048dc:	682f      	ldr	r7, [r5, #0]
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	d032      	beq.n	8004948 <__sflush_r+0x98>
 80048e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	075a      	lsls	r2, r3, #29
 80048e8:	d505      	bpl.n	80048f6 <__sflush_r+0x46>
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	1ac0      	subs	r0, r0, r3
 80048ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f0:	b10b      	cbz	r3, 80048f6 <__sflush_r+0x46>
 80048f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	4602      	mov	r2, r0
 80048fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048fc:	6a21      	ldr	r1, [r4, #32]
 80048fe:	4628      	mov	r0, r5
 8004900:	47b0      	blx	r6
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	d106      	bne.n	8004916 <__sflush_r+0x66>
 8004908:	6829      	ldr	r1, [r5, #0]
 800490a:	291d      	cmp	r1, #29
 800490c:	d82c      	bhi.n	8004968 <__sflush_r+0xb8>
 800490e:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <__sflush_r+0x108>)
 8004910:	40ca      	lsrs	r2, r1
 8004912:	07d6      	lsls	r6, r2, #31
 8004914:	d528      	bpl.n	8004968 <__sflush_r+0xb8>
 8004916:	2200      	movs	r2, #0
 8004918:	6062      	str	r2, [r4, #4]
 800491a:	04d9      	lsls	r1, r3, #19
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	6022      	str	r2, [r4, #0]
 8004920:	d504      	bpl.n	800492c <__sflush_r+0x7c>
 8004922:	1c42      	adds	r2, r0, #1
 8004924:	d101      	bne.n	800492a <__sflush_r+0x7a>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	b903      	cbnz	r3, 800492c <__sflush_r+0x7c>
 800492a:	6560      	str	r0, [r4, #84]	; 0x54
 800492c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492e:	602f      	str	r7, [r5, #0]
 8004930:	2900      	cmp	r1, #0
 8004932:	d0ca      	beq.n	80048ca <__sflush_r+0x1a>
 8004934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004938:	4299      	cmp	r1, r3
 800493a:	d002      	beq.n	8004942 <__sflush_r+0x92>
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f9d7 	bl	8004cf0 <_free_r>
 8004942:	2000      	movs	r0, #0
 8004944:	6360      	str	r0, [r4, #52]	; 0x34
 8004946:	e7c1      	b.n	80048cc <__sflush_r+0x1c>
 8004948:	6a21      	ldr	r1, [r4, #32]
 800494a:	2301      	movs	r3, #1
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	1c41      	adds	r1, r0, #1
 8004952:	d1c7      	bne.n	80048e4 <__sflush_r+0x34>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c4      	beq.n	80048e4 <__sflush_r+0x34>
 800495a:	2b1d      	cmp	r3, #29
 800495c:	d001      	beq.n	8004962 <__sflush_r+0xb2>
 800495e:	2b16      	cmp	r3, #22
 8004960:	d101      	bne.n	8004966 <__sflush_r+0xb6>
 8004962:	602f      	str	r7, [r5, #0]
 8004964:	e7b1      	b.n	80048ca <__sflush_r+0x1a>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	e7ad      	b.n	80048cc <__sflush_r+0x1c>
 8004970:	690f      	ldr	r7, [r1, #16]
 8004972:	2f00      	cmp	r7, #0
 8004974:	d0a9      	beq.n	80048ca <__sflush_r+0x1a>
 8004976:	0793      	lsls	r3, r2, #30
 8004978:	680e      	ldr	r6, [r1, #0]
 800497a:	bf08      	it	eq
 800497c:	694b      	ldreq	r3, [r1, #20]
 800497e:	600f      	str	r7, [r1, #0]
 8004980:	bf18      	it	ne
 8004982:	2300      	movne	r3, #0
 8004984:	eba6 0807 	sub.w	r8, r6, r7
 8004988:	608b      	str	r3, [r1, #8]
 800498a:	f1b8 0f00 	cmp.w	r8, #0
 800498e:	dd9c      	ble.n	80048ca <__sflush_r+0x1a>
 8004990:	6a21      	ldr	r1, [r4, #32]
 8004992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004994:	4643      	mov	r3, r8
 8004996:	463a      	mov	r2, r7
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	2800      	cmp	r0, #0
 800499e:	dc06      	bgt.n	80049ae <__sflush_r+0xfe>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049ac:	e78e      	b.n	80048cc <__sflush_r+0x1c>
 80049ae:	4407      	add	r7, r0
 80049b0:	eba8 0800 	sub.w	r8, r8, r0
 80049b4:	e7e9      	b.n	800498a <__sflush_r+0xda>
 80049b6:	bf00      	nop
 80049b8:	20400001 	.word	0x20400001

080049bc <_fflush_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	690b      	ldr	r3, [r1, #16]
 80049c0:	4605      	mov	r5, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	b913      	cbnz	r3, 80049cc <_fflush_r+0x10>
 80049c6:	2500      	movs	r5, #0
 80049c8:	4628      	mov	r0, r5
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	b118      	cbz	r0, 80049d6 <_fflush_r+0x1a>
 80049ce:	6983      	ldr	r3, [r0, #24]
 80049d0:	b90b      	cbnz	r3, 80049d6 <_fflush_r+0x1a>
 80049d2:	f000 f887 	bl	8004ae4 <__sinit>
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <_fflush_r+0x6c>)
 80049d8:	429c      	cmp	r4, r3
 80049da:	d11b      	bne.n	8004a14 <_fflush_r+0x58>
 80049dc:	686c      	ldr	r4, [r5, #4]
 80049de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ef      	beq.n	80049c6 <_fflush_r+0xa>
 80049e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e8:	07d0      	lsls	r0, r2, #31
 80049ea:	d404      	bmi.n	80049f6 <_fflush_r+0x3a>
 80049ec:	0599      	lsls	r1, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <_fflush_r+0x3a>
 80049f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f2:	f000 f915 	bl	8004c20 <__retarget_lock_acquire_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7ff ff59 	bl	80048b0 <__sflush_r>
 80049fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a00:	07da      	lsls	r2, r3, #31
 8004a02:	4605      	mov	r5, r0
 8004a04:	d4e0      	bmi.n	80049c8 <_fflush_r+0xc>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	d4dd      	bmi.n	80049c8 <_fflush_r+0xc>
 8004a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0e:	f000 f908 	bl	8004c22 <__retarget_lock_release_recursive>
 8004a12:	e7d9      	b.n	80049c8 <_fflush_r+0xc>
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_fflush_r+0x70>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d101      	bne.n	8004a1e <_fflush_r+0x62>
 8004a1a:	68ac      	ldr	r4, [r5, #8]
 8004a1c:	e7df      	b.n	80049de <_fflush_r+0x22>
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <_fflush_r+0x74>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	bf08      	it	eq
 8004a24:	68ec      	ldreq	r4, [r5, #12]
 8004a26:	e7da      	b.n	80049de <_fflush_r+0x22>
 8004a28:	080057ac 	.word	0x080057ac
 8004a2c:	080057cc 	.word	0x080057cc
 8004a30:	0800578c 	.word	0x0800578c

08004a34 <std>:
 8004a34:	2300      	movs	r3, #0
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a42:	6083      	str	r3, [r0, #8]
 8004a44:	8181      	strh	r1, [r0, #12]
 8004a46:	6643      	str	r3, [r0, #100]	; 0x64
 8004a48:	81c2      	strh	r2, [r0, #14]
 8004a4a:	6183      	str	r3, [r0, #24]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	2208      	movs	r2, #8
 8004a50:	305c      	adds	r0, #92	; 0x5c
 8004a52:	f7ff fdd7 	bl	8004604 <memset>
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <std+0x38>)
 8004a58:	6263      	str	r3, [r4, #36]	; 0x24
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <std+0x3c>)
 8004a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <std+0x40>)
 8004a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <std+0x44>)
 8004a64:	6224      	str	r4, [r4, #32]
 8004a66:	6323      	str	r3, [r4, #48]	; 0x30
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop
 8004a6c:	080054ad 	.word	0x080054ad
 8004a70:	080054cf 	.word	0x080054cf
 8004a74:	08005507 	.word	0x08005507
 8004a78:	0800552b 	.word	0x0800552b

08004a7c <_cleanup_r>:
 8004a7c:	4901      	ldr	r1, [pc, #4]	; (8004a84 <_cleanup_r+0x8>)
 8004a7e:	f000 b8af 	b.w	8004be0 <_fwalk_reent>
 8004a82:	bf00      	nop
 8004a84:	080049bd 	.word	0x080049bd

08004a88 <__sfmoreglue>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	2268      	movs	r2, #104	; 0x68
 8004a8c:	1e4d      	subs	r5, r1, #1
 8004a8e:	4355      	muls	r5, r2
 8004a90:	460e      	mov	r6, r1
 8004a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a96:	f000 f997 	bl	8004dc8 <_malloc_r>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	b140      	cbz	r0, 8004ab0 <__sfmoreglue+0x28>
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8004aa4:	300c      	adds	r0, #12
 8004aa6:	60a0      	str	r0, [r4, #8]
 8004aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004aac:	f7ff fdaa 	bl	8004604 <memset>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}

08004ab4 <__sfp_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sfp_lock_acquire+0x8>)
 8004ab6:	f000 b8b3 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	200001d5 	.word	0x200001d5

08004ac0 <__sfp_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sfp_lock_release+0x8>)
 8004ac2:	f000 b8ae 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	200001d5 	.word	0x200001d5

08004acc <__sinit_lock_acquire>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__sinit_lock_acquire+0x8>)
 8004ace:	f000 b8a7 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	200001d6 	.word	0x200001d6

08004ad8 <__sinit_lock_release>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__sinit_lock_release+0x8>)
 8004ada:	f000 b8a2 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	200001d6 	.word	0x200001d6

08004ae4 <__sinit>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	f7ff fff0 	bl	8004acc <__sinit_lock_acquire>
 8004aec:	69a3      	ldr	r3, [r4, #24]
 8004aee:	b11b      	cbz	r3, 8004af8 <__sinit+0x14>
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f7ff bff0 	b.w	8004ad8 <__sinit_lock_release>
 8004af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004afc:	6523      	str	r3, [r4, #80]	; 0x50
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <__sinit+0x68>)
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <__sinit+0x6c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b06:	42a3      	cmp	r3, r4
 8004b08:	bf04      	itt	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	61a3      	streq	r3, [r4, #24]
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 f820 	bl	8004b54 <__sfp>
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 f81c 	bl	8004b54 <__sfp>
 8004b1c:	60a0      	str	r0, [r4, #8]
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 f818 	bl	8004b54 <__sfp>
 8004b24:	2200      	movs	r2, #0
 8004b26:	60e0      	str	r0, [r4, #12]
 8004b28:	2104      	movs	r1, #4
 8004b2a:	6860      	ldr	r0, [r4, #4]
 8004b2c:	f7ff ff82 	bl	8004a34 <std>
 8004b30:	68a0      	ldr	r0, [r4, #8]
 8004b32:	2201      	movs	r2, #1
 8004b34:	2109      	movs	r1, #9
 8004b36:	f7ff ff7d 	bl	8004a34 <std>
 8004b3a:	68e0      	ldr	r0, [r4, #12]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	2112      	movs	r1, #18
 8004b40:	f7ff ff78 	bl	8004a34 <std>
 8004b44:	2301      	movs	r3, #1
 8004b46:	61a3      	str	r3, [r4, #24]
 8004b48:	e7d2      	b.n	8004af0 <__sinit+0xc>
 8004b4a:	bf00      	nop
 8004b4c:	08005788 	.word	0x08005788
 8004b50:	08004a7d 	.word	0x08004a7d

08004b54 <__sfp>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	4607      	mov	r7, r0
 8004b58:	f7ff ffac 	bl	8004ab4 <__sfp_lock_acquire>
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <__sfp+0x84>)
 8004b5e:	681e      	ldr	r6, [r3, #0]
 8004b60:	69b3      	ldr	r3, [r6, #24]
 8004b62:	b913      	cbnz	r3, 8004b6a <__sfp+0x16>
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7ff ffbd 	bl	8004ae4 <__sinit>
 8004b6a:	3648      	adds	r6, #72	; 0x48
 8004b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	d503      	bpl.n	8004b7c <__sfp+0x28>
 8004b74:	6833      	ldr	r3, [r6, #0]
 8004b76:	b30b      	cbz	r3, 8004bbc <__sfp+0x68>
 8004b78:	6836      	ldr	r6, [r6, #0]
 8004b7a:	e7f7      	b.n	8004b6c <__sfp+0x18>
 8004b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b80:	b9d5      	cbnz	r5, 8004bb8 <__sfp+0x64>
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <__sfp+0x88>)
 8004b84:	60e3      	str	r3, [r4, #12]
 8004b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b8c:	f000 f847 	bl	8004c1e <__retarget_lock_init_recursive>
 8004b90:	f7ff ff96 	bl	8004ac0 <__sfp_lock_release>
 8004b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b9c:	6025      	str	r5, [r4, #0]
 8004b9e:	61a5      	str	r5, [r4, #24]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ba8:	f7ff fd2c 	bl	8004604 <memset>
 8004bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb8:	3468      	adds	r4, #104	; 0x68
 8004bba:	e7d9      	b.n	8004b70 <__sfp+0x1c>
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7ff ff62 	bl	8004a88 <__sfmoreglue>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	6030      	str	r0, [r6, #0]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d1d5      	bne.n	8004b78 <__sfp+0x24>
 8004bcc:	f7ff ff78 	bl	8004ac0 <__sfp_lock_release>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	e7ee      	b.n	8004bb4 <__sfp+0x60>
 8004bd6:	bf00      	nop
 8004bd8:	08005788 	.word	0x08005788
 8004bdc:	ffff0001 	.word	0xffff0001

08004be0 <_fwalk_reent>:
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	4606      	mov	r6, r0
 8004be6:	4688      	mov	r8, r1
 8004be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bec:	2700      	movs	r7, #0
 8004bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf6:	d505      	bpl.n	8004c04 <_fwalk_reent+0x24>
 8004bf8:	6824      	ldr	r4, [r4, #0]
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d1f7      	bne.n	8004bee <_fwalk_reent+0xe>
 8004bfe:	4638      	mov	r0, r7
 8004c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c04:	89ab      	ldrh	r3, [r5, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d907      	bls.n	8004c1a <_fwalk_reent+0x3a>
 8004c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	d003      	beq.n	8004c1a <_fwalk_reent+0x3a>
 8004c12:	4629      	mov	r1, r5
 8004c14:	4630      	mov	r0, r6
 8004c16:	47c0      	blx	r8
 8004c18:	4307      	orrs	r7, r0
 8004c1a:	3568      	adds	r5, #104	; 0x68
 8004c1c:	e7e9      	b.n	8004bf2 <_fwalk_reent+0x12>

08004c1e <__retarget_lock_init_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <__swhatbuf_r>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	b096      	sub	sp, #88	; 0x58
 8004c30:	4614      	mov	r4, r2
 8004c32:	461d      	mov	r5, r3
 8004c34:	da08      	bge.n	8004c48 <__swhatbuf_r+0x24>
 8004c36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	602a      	str	r2, [r5, #0]
 8004c3e:	061a      	lsls	r2, r3, #24
 8004c40:	d410      	bmi.n	8004c64 <__swhatbuf_r+0x40>
 8004c42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c46:	e00e      	b.n	8004c66 <__swhatbuf_r+0x42>
 8004c48:	466a      	mov	r2, sp
 8004c4a:	f000 fc95 	bl	8005578 <_fstat_r>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	dbf1      	blt.n	8004c36 <__swhatbuf_r+0x12>
 8004c52:	9a01      	ldr	r2, [sp, #4]
 8004c54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c5c:	425a      	negs	r2, r3
 8004c5e:	415a      	adcs	r2, r3
 8004c60:	602a      	str	r2, [r5, #0]
 8004c62:	e7ee      	b.n	8004c42 <__swhatbuf_r+0x1e>
 8004c64:	2340      	movs	r3, #64	; 0x40
 8004c66:	2000      	movs	r0, #0
 8004c68:	6023      	str	r3, [r4, #0]
 8004c6a:	b016      	add	sp, #88	; 0x58
 8004c6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c70 <__smakebuf_r>:
 8004c70:	898b      	ldrh	r3, [r1, #12]
 8004c72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c74:	079d      	lsls	r5, r3, #30
 8004c76:	4606      	mov	r6, r0
 8004c78:	460c      	mov	r4, r1
 8004c7a:	d507      	bpl.n	8004c8c <__smakebuf_r+0x1c>
 8004c7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c80:	6023      	str	r3, [r4, #0]
 8004c82:	6123      	str	r3, [r4, #16]
 8004c84:	2301      	movs	r3, #1
 8004c86:	6163      	str	r3, [r4, #20]
 8004c88:	b002      	add	sp, #8
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
 8004c8c:	ab01      	add	r3, sp, #4
 8004c8e:	466a      	mov	r2, sp
 8004c90:	f7ff ffc8 	bl	8004c24 <__swhatbuf_r>
 8004c94:	9900      	ldr	r1, [sp, #0]
 8004c96:	4605      	mov	r5, r0
 8004c98:	4630      	mov	r0, r6
 8004c9a:	f000 f895 	bl	8004dc8 <_malloc_r>
 8004c9e:	b948      	cbnz	r0, 8004cb4 <__smakebuf_r+0x44>
 8004ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca4:	059a      	lsls	r2, r3, #22
 8004ca6:	d4ef      	bmi.n	8004c88 <__smakebuf_r+0x18>
 8004ca8:	f023 0303 	bic.w	r3, r3, #3
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	81a3      	strh	r3, [r4, #12]
 8004cb2:	e7e3      	b.n	8004c7c <__smakebuf_r+0xc>
 8004cb4:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <__smakebuf_r+0x7c>)
 8004cb6:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	6020      	str	r0, [r4, #0]
 8004cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc0:	81a3      	strh	r3, [r4, #12]
 8004cc2:	9b00      	ldr	r3, [sp, #0]
 8004cc4:	6163      	str	r3, [r4, #20]
 8004cc6:	9b01      	ldr	r3, [sp, #4]
 8004cc8:	6120      	str	r0, [r4, #16]
 8004cca:	b15b      	cbz	r3, 8004ce4 <__smakebuf_r+0x74>
 8004ccc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cd0:	4630      	mov	r0, r6
 8004cd2:	f000 fc63 	bl	800559c <_isatty_r>
 8004cd6:	b128      	cbz	r0, 8004ce4 <__smakebuf_r+0x74>
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	f023 0303 	bic.w	r3, r3, #3
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	81a3      	strh	r3, [r4, #12]
 8004ce4:	89a0      	ldrh	r0, [r4, #12]
 8004ce6:	4305      	orrs	r5, r0
 8004ce8:	81a5      	strh	r5, [r4, #12]
 8004cea:	e7cd      	b.n	8004c88 <__smakebuf_r+0x18>
 8004cec:	08004a7d 	.word	0x08004a7d

08004cf0 <_free_r>:
 8004cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d044      	beq.n	8004d80 <_free_r+0x90>
 8004cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cfa:	9001      	str	r0, [sp, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8004d02:	bfb8      	it	lt
 8004d04:	18e4      	addlt	r4, r4, r3
 8004d06:	f000 fc6b 	bl	80055e0 <__malloc_lock>
 8004d0a:	4a1e      	ldr	r2, [pc, #120]	; (8004d84 <_free_r+0x94>)
 8004d0c:	9801      	ldr	r0, [sp, #4]
 8004d0e:	6813      	ldr	r3, [r2, #0]
 8004d10:	b933      	cbnz	r3, 8004d20 <_free_r+0x30>
 8004d12:	6063      	str	r3, [r4, #4]
 8004d14:	6014      	str	r4, [r2, #0]
 8004d16:	b003      	add	sp, #12
 8004d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d1c:	f000 bc66 	b.w	80055ec <__malloc_unlock>
 8004d20:	42a3      	cmp	r3, r4
 8004d22:	d908      	bls.n	8004d36 <_free_r+0x46>
 8004d24:	6825      	ldr	r5, [r4, #0]
 8004d26:	1961      	adds	r1, r4, r5
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	bf01      	itttt	eq
 8004d2c:	6819      	ldreq	r1, [r3, #0]
 8004d2e:	685b      	ldreq	r3, [r3, #4]
 8004d30:	1949      	addeq	r1, r1, r5
 8004d32:	6021      	streq	r1, [r4, #0]
 8004d34:	e7ed      	b.n	8004d12 <_free_r+0x22>
 8004d36:	461a      	mov	r2, r3
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	b10b      	cbz	r3, 8004d40 <_free_r+0x50>
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	d9fa      	bls.n	8004d36 <_free_r+0x46>
 8004d40:	6811      	ldr	r1, [r2, #0]
 8004d42:	1855      	adds	r5, r2, r1
 8004d44:	42a5      	cmp	r5, r4
 8004d46:	d10b      	bne.n	8004d60 <_free_r+0x70>
 8004d48:	6824      	ldr	r4, [r4, #0]
 8004d4a:	4421      	add	r1, r4
 8004d4c:	1854      	adds	r4, r2, r1
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	6011      	str	r1, [r2, #0]
 8004d52:	d1e0      	bne.n	8004d16 <_free_r+0x26>
 8004d54:	681c      	ldr	r4, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	6053      	str	r3, [r2, #4]
 8004d5a:	4421      	add	r1, r4
 8004d5c:	6011      	str	r1, [r2, #0]
 8004d5e:	e7da      	b.n	8004d16 <_free_r+0x26>
 8004d60:	d902      	bls.n	8004d68 <_free_r+0x78>
 8004d62:	230c      	movs	r3, #12
 8004d64:	6003      	str	r3, [r0, #0]
 8004d66:	e7d6      	b.n	8004d16 <_free_r+0x26>
 8004d68:	6825      	ldr	r5, [r4, #0]
 8004d6a:	1961      	adds	r1, r4, r5
 8004d6c:	428b      	cmp	r3, r1
 8004d6e:	bf04      	itt	eq
 8004d70:	6819      	ldreq	r1, [r3, #0]
 8004d72:	685b      	ldreq	r3, [r3, #4]
 8004d74:	6063      	str	r3, [r4, #4]
 8004d76:	bf04      	itt	eq
 8004d78:	1949      	addeq	r1, r1, r5
 8004d7a:	6021      	streq	r1, [r4, #0]
 8004d7c:	6054      	str	r4, [r2, #4]
 8004d7e:	e7ca      	b.n	8004d16 <_free_r+0x26>
 8004d80:	b003      	add	sp, #12
 8004d82:	bd30      	pop	{r4, r5, pc}
 8004d84:	200001d8 	.word	0x200001d8

08004d88 <sbrk_aligned>:
 8004d88:	b570      	push	{r4, r5, r6, lr}
 8004d8a:	4e0e      	ldr	r6, [pc, #56]	; (8004dc4 <sbrk_aligned+0x3c>)
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	6831      	ldr	r1, [r6, #0]
 8004d90:	4605      	mov	r5, r0
 8004d92:	b911      	cbnz	r1, 8004d9a <sbrk_aligned+0x12>
 8004d94:	f000 fb7a 	bl	800548c <_sbrk_r>
 8004d98:	6030      	str	r0, [r6, #0]
 8004d9a:	4621      	mov	r1, r4
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f000 fb75 	bl	800548c <_sbrk_r>
 8004da2:	1c43      	adds	r3, r0, #1
 8004da4:	d00a      	beq.n	8004dbc <sbrk_aligned+0x34>
 8004da6:	1cc4      	adds	r4, r0, #3
 8004da8:	f024 0403 	bic.w	r4, r4, #3
 8004dac:	42a0      	cmp	r0, r4
 8004dae:	d007      	beq.n	8004dc0 <sbrk_aligned+0x38>
 8004db0:	1a21      	subs	r1, r4, r0
 8004db2:	4628      	mov	r0, r5
 8004db4:	f000 fb6a 	bl	800548c <_sbrk_r>
 8004db8:	3001      	adds	r0, #1
 8004dba:	d101      	bne.n	8004dc0 <sbrk_aligned+0x38>
 8004dbc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004dc0:	4620      	mov	r0, r4
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	200001dc 	.word	0x200001dc

08004dc8 <_malloc_r>:
 8004dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dcc:	1ccd      	adds	r5, r1, #3
 8004dce:	f025 0503 	bic.w	r5, r5, #3
 8004dd2:	3508      	adds	r5, #8
 8004dd4:	2d0c      	cmp	r5, #12
 8004dd6:	bf38      	it	cc
 8004dd8:	250c      	movcc	r5, #12
 8004dda:	2d00      	cmp	r5, #0
 8004ddc:	4607      	mov	r7, r0
 8004dde:	db01      	blt.n	8004de4 <_malloc_r+0x1c>
 8004de0:	42a9      	cmp	r1, r5
 8004de2:	d905      	bls.n	8004df0 <_malloc_r+0x28>
 8004de4:	230c      	movs	r3, #12
 8004de6:	603b      	str	r3, [r7, #0]
 8004de8:	2600      	movs	r6, #0
 8004dea:	4630      	mov	r0, r6
 8004dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004df0:	4e2e      	ldr	r6, [pc, #184]	; (8004eac <_malloc_r+0xe4>)
 8004df2:	f000 fbf5 	bl	80055e0 <__malloc_lock>
 8004df6:	6833      	ldr	r3, [r6, #0]
 8004df8:	461c      	mov	r4, r3
 8004dfa:	bb34      	cbnz	r4, 8004e4a <_malloc_r+0x82>
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	4638      	mov	r0, r7
 8004e00:	f7ff ffc2 	bl	8004d88 <sbrk_aligned>
 8004e04:	1c43      	adds	r3, r0, #1
 8004e06:	4604      	mov	r4, r0
 8004e08:	d14d      	bne.n	8004ea6 <_malloc_r+0xde>
 8004e0a:	6834      	ldr	r4, [r6, #0]
 8004e0c:	4626      	mov	r6, r4
 8004e0e:	2e00      	cmp	r6, #0
 8004e10:	d140      	bne.n	8004e94 <_malloc_r+0xcc>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	4631      	mov	r1, r6
 8004e16:	4638      	mov	r0, r7
 8004e18:	eb04 0803 	add.w	r8, r4, r3
 8004e1c:	f000 fb36 	bl	800548c <_sbrk_r>
 8004e20:	4580      	cmp	r8, r0
 8004e22:	d13a      	bne.n	8004e9a <_malloc_r+0xd2>
 8004e24:	6821      	ldr	r1, [r4, #0]
 8004e26:	3503      	adds	r5, #3
 8004e28:	1a6d      	subs	r5, r5, r1
 8004e2a:	f025 0503 	bic.w	r5, r5, #3
 8004e2e:	3508      	adds	r5, #8
 8004e30:	2d0c      	cmp	r5, #12
 8004e32:	bf38      	it	cc
 8004e34:	250c      	movcc	r5, #12
 8004e36:	4629      	mov	r1, r5
 8004e38:	4638      	mov	r0, r7
 8004e3a:	f7ff ffa5 	bl	8004d88 <sbrk_aligned>
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d02b      	beq.n	8004e9a <_malloc_r+0xd2>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	442b      	add	r3, r5
 8004e46:	6023      	str	r3, [r4, #0]
 8004e48:	e00e      	b.n	8004e68 <_malloc_r+0xa0>
 8004e4a:	6822      	ldr	r2, [r4, #0]
 8004e4c:	1b52      	subs	r2, r2, r5
 8004e4e:	d41e      	bmi.n	8004e8e <_malloc_r+0xc6>
 8004e50:	2a0b      	cmp	r2, #11
 8004e52:	d916      	bls.n	8004e82 <_malloc_r+0xba>
 8004e54:	1961      	adds	r1, r4, r5
 8004e56:	42a3      	cmp	r3, r4
 8004e58:	6025      	str	r5, [r4, #0]
 8004e5a:	bf18      	it	ne
 8004e5c:	6059      	strne	r1, [r3, #4]
 8004e5e:	6863      	ldr	r3, [r4, #4]
 8004e60:	bf08      	it	eq
 8004e62:	6031      	streq	r1, [r6, #0]
 8004e64:	5162      	str	r2, [r4, r5]
 8004e66:	604b      	str	r3, [r1, #4]
 8004e68:	4638      	mov	r0, r7
 8004e6a:	f104 060b 	add.w	r6, r4, #11
 8004e6e:	f000 fbbd 	bl	80055ec <__malloc_unlock>
 8004e72:	f026 0607 	bic.w	r6, r6, #7
 8004e76:	1d23      	adds	r3, r4, #4
 8004e78:	1af2      	subs	r2, r6, r3
 8004e7a:	d0b6      	beq.n	8004dea <_malloc_r+0x22>
 8004e7c:	1b9b      	subs	r3, r3, r6
 8004e7e:	50a3      	str	r3, [r4, r2]
 8004e80:	e7b3      	b.n	8004dea <_malloc_r+0x22>
 8004e82:	6862      	ldr	r2, [r4, #4]
 8004e84:	42a3      	cmp	r3, r4
 8004e86:	bf0c      	ite	eq
 8004e88:	6032      	streq	r2, [r6, #0]
 8004e8a:	605a      	strne	r2, [r3, #4]
 8004e8c:	e7ec      	b.n	8004e68 <_malloc_r+0xa0>
 8004e8e:	4623      	mov	r3, r4
 8004e90:	6864      	ldr	r4, [r4, #4]
 8004e92:	e7b2      	b.n	8004dfa <_malloc_r+0x32>
 8004e94:	4634      	mov	r4, r6
 8004e96:	6876      	ldr	r6, [r6, #4]
 8004e98:	e7b9      	b.n	8004e0e <_malloc_r+0x46>
 8004e9a:	230c      	movs	r3, #12
 8004e9c:	603b      	str	r3, [r7, #0]
 8004e9e:	4638      	mov	r0, r7
 8004ea0:	f000 fba4 	bl	80055ec <__malloc_unlock>
 8004ea4:	e7a1      	b.n	8004dea <_malloc_r+0x22>
 8004ea6:	6025      	str	r5, [r4, #0]
 8004ea8:	e7de      	b.n	8004e68 <_malloc_r+0xa0>
 8004eaa:	bf00      	nop
 8004eac:	200001d8 	.word	0x200001d8

08004eb0 <__sfputc_r>:
 8004eb0:	6893      	ldr	r3, [r2, #8]
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	b410      	push	{r4}
 8004eb8:	6093      	str	r3, [r2, #8]
 8004eba:	da08      	bge.n	8004ece <__sfputc_r+0x1e>
 8004ebc:	6994      	ldr	r4, [r2, #24]
 8004ebe:	42a3      	cmp	r3, r4
 8004ec0:	db01      	blt.n	8004ec6 <__sfputc_r+0x16>
 8004ec2:	290a      	cmp	r1, #10
 8004ec4:	d103      	bne.n	8004ece <__sfputc_r+0x1e>
 8004ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004eca:	f7ff bc31 	b.w	8004730 <__swbuf_r>
 8004ece:	6813      	ldr	r3, [r2, #0]
 8004ed0:	1c58      	adds	r0, r3, #1
 8004ed2:	6010      	str	r0, [r2, #0]
 8004ed4:	7019      	strb	r1, [r3, #0]
 8004ed6:	4608      	mov	r0, r1
 8004ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <__sfputs_r>:
 8004ede:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee0:	4606      	mov	r6, r0
 8004ee2:	460f      	mov	r7, r1
 8004ee4:	4614      	mov	r4, r2
 8004ee6:	18d5      	adds	r5, r2, r3
 8004ee8:	42ac      	cmp	r4, r5
 8004eea:	d101      	bne.n	8004ef0 <__sfputs_r+0x12>
 8004eec:	2000      	movs	r0, #0
 8004eee:	e007      	b.n	8004f00 <__sfputs_r+0x22>
 8004ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef4:	463a      	mov	r2, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	f7ff ffda 	bl	8004eb0 <__sfputc_r>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d1f3      	bne.n	8004ee8 <__sfputs_r+0xa>
 8004f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004f04 <_vfiprintf_r>:
 8004f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f08:	460d      	mov	r5, r1
 8004f0a:	b09d      	sub	sp, #116	; 0x74
 8004f0c:	4614      	mov	r4, r2
 8004f0e:	4698      	mov	r8, r3
 8004f10:	4606      	mov	r6, r0
 8004f12:	b118      	cbz	r0, 8004f1c <_vfiprintf_r+0x18>
 8004f14:	6983      	ldr	r3, [r0, #24]
 8004f16:	b90b      	cbnz	r3, 8004f1c <_vfiprintf_r+0x18>
 8004f18:	f7ff fde4 	bl	8004ae4 <__sinit>
 8004f1c:	4b89      	ldr	r3, [pc, #548]	; (8005144 <_vfiprintf_r+0x240>)
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	d11b      	bne.n	8004f5a <_vfiprintf_r+0x56>
 8004f22:	6875      	ldr	r5, [r6, #4]
 8004f24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f26:	07d9      	lsls	r1, r3, #31
 8004f28:	d405      	bmi.n	8004f36 <_vfiprintf_r+0x32>
 8004f2a:	89ab      	ldrh	r3, [r5, #12]
 8004f2c:	059a      	lsls	r2, r3, #22
 8004f2e:	d402      	bmi.n	8004f36 <_vfiprintf_r+0x32>
 8004f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f32:	f7ff fe75 	bl	8004c20 <__retarget_lock_acquire_recursive>
 8004f36:	89ab      	ldrh	r3, [r5, #12]
 8004f38:	071b      	lsls	r3, r3, #28
 8004f3a:	d501      	bpl.n	8004f40 <_vfiprintf_r+0x3c>
 8004f3c:	692b      	ldr	r3, [r5, #16]
 8004f3e:	b9eb      	cbnz	r3, 8004f7c <_vfiprintf_r+0x78>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4630      	mov	r0, r6
 8004f44:	f7ff fc46 	bl	80047d4 <__swsetup_r>
 8004f48:	b1c0      	cbz	r0, 8004f7c <_vfiprintf_r+0x78>
 8004f4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f4c:	07dc      	lsls	r4, r3, #31
 8004f4e:	d50e      	bpl.n	8004f6e <_vfiprintf_r+0x6a>
 8004f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f54:	b01d      	add	sp, #116	; 0x74
 8004f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5a:	4b7b      	ldr	r3, [pc, #492]	; (8005148 <_vfiprintf_r+0x244>)
 8004f5c:	429d      	cmp	r5, r3
 8004f5e:	d101      	bne.n	8004f64 <_vfiprintf_r+0x60>
 8004f60:	68b5      	ldr	r5, [r6, #8]
 8004f62:	e7df      	b.n	8004f24 <_vfiprintf_r+0x20>
 8004f64:	4b79      	ldr	r3, [pc, #484]	; (800514c <_vfiprintf_r+0x248>)
 8004f66:	429d      	cmp	r5, r3
 8004f68:	bf08      	it	eq
 8004f6a:	68f5      	ldreq	r5, [r6, #12]
 8004f6c:	e7da      	b.n	8004f24 <_vfiprintf_r+0x20>
 8004f6e:	89ab      	ldrh	r3, [r5, #12]
 8004f70:	0598      	lsls	r0, r3, #22
 8004f72:	d4ed      	bmi.n	8004f50 <_vfiprintf_r+0x4c>
 8004f74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f76:	f7ff fe54 	bl	8004c22 <__retarget_lock_release_recursive>
 8004f7a:	e7e9      	b.n	8004f50 <_vfiprintf_r+0x4c>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f80:	2320      	movs	r3, #32
 8004f82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f86:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f8a:	2330      	movs	r3, #48	; 0x30
 8004f8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005150 <_vfiprintf_r+0x24c>
 8004f90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f94:	f04f 0901 	mov.w	r9, #1
 8004f98:	4623      	mov	r3, r4
 8004f9a:	469a      	mov	sl, r3
 8004f9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004fa0:	b10a      	cbz	r2, 8004fa6 <_vfiprintf_r+0xa2>
 8004fa2:	2a25      	cmp	r2, #37	; 0x25
 8004fa4:	d1f9      	bne.n	8004f9a <_vfiprintf_r+0x96>
 8004fa6:	ebba 0b04 	subs.w	fp, sl, r4
 8004faa:	d00b      	beq.n	8004fc4 <_vfiprintf_r+0xc0>
 8004fac:	465b      	mov	r3, fp
 8004fae:	4622      	mov	r2, r4
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	4630      	mov	r0, r6
 8004fb4:	f7ff ff93 	bl	8004ede <__sfputs_r>
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f000 80aa 	beq.w	8005112 <_vfiprintf_r+0x20e>
 8004fbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fc0:	445a      	add	r2, fp
 8004fc2:	9209      	str	r2, [sp, #36]	; 0x24
 8004fc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f000 80a2 	beq.w	8005112 <_vfiprintf_r+0x20e>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fd8:	f10a 0a01 	add.w	sl, sl, #1
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	9307      	str	r3, [sp, #28]
 8004fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8004fe6:	4654      	mov	r4, sl
 8004fe8:	2205      	movs	r2, #5
 8004fea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fee:	4858      	ldr	r0, [pc, #352]	; (8005150 <_vfiprintf_r+0x24c>)
 8004ff0:	f7fb f8c6 	bl	8000180 <memchr>
 8004ff4:	9a04      	ldr	r2, [sp, #16]
 8004ff6:	b9d8      	cbnz	r0, 8005030 <_vfiprintf_r+0x12c>
 8004ff8:	06d1      	lsls	r1, r2, #27
 8004ffa:	bf44      	itt	mi
 8004ffc:	2320      	movmi	r3, #32
 8004ffe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005002:	0713      	lsls	r3, r2, #28
 8005004:	bf44      	itt	mi
 8005006:	232b      	movmi	r3, #43	; 0x2b
 8005008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800500c:	f89a 3000 	ldrb.w	r3, [sl]
 8005010:	2b2a      	cmp	r3, #42	; 0x2a
 8005012:	d015      	beq.n	8005040 <_vfiprintf_r+0x13c>
 8005014:	9a07      	ldr	r2, [sp, #28]
 8005016:	4654      	mov	r4, sl
 8005018:	2000      	movs	r0, #0
 800501a:	f04f 0c0a 	mov.w	ip, #10
 800501e:	4621      	mov	r1, r4
 8005020:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005024:	3b30      	subs	r3, #48	; 0x30
 8005026:	2b09      	cmp	r3, #9
 8005028:	d94e      	bls.n	80050c8 <_vfiprintf_r+0x1c4>
 800502a:	b1b0      	cbz	r0, 800505a <_vfiprintf_r+0x156>
 800502c:	9207      	str	r2, [sp, #28]
 800502e:	e014      	b.n	800505a <_vfiprintf_r+0x156>
 8005030:	eba0 0308 	sub.w	r3, r0, r8
 8005034:	fa09 f303 	lsl.w	r3, r9, r3
 8005038:	4313      	orrs	r3, r2
 800503a:	9304      	str	r3, [sp, #16]
 800503c:	46a2      	mov	sl, r4
 800503e:	e7d2      	b.n	8004fe6 <_vfiprintf_r+0xe2>
 8005040:	9b03      	ldr	r3, [sp, #12]
 8005042:	1d19      	adds	r1, r3, #4
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	9103      	str	r1, [sp, #12]
 8005048:	2b00      	cmp	r3, #0
 800504a:	bfbb      	ittet	lt
 800504c:	425b      	neglt	r3, r3
 800504e:	f042 0202 	orrlt.w	r2, r2, #2
 8005052:	9307      	strge	r3, [sp, #28]
 8005054:	9307      	strlt	r3, [sp, #28]
 8005056:	bfb8      	it	lt
 8005058:	9204      	strlt	r2, [sp, #16]
 800505a:	7823      	ldrb	r3, [r4, #0]
 800505c:	2b2e      	cmp	r3, #46	; 0x2e
 800505e:	d10c      	bne.n	800507a <_vfiprintf_r+0x176>
 8005060:	7863      	ldrb	r3, [r4, #1]
 8005062:	2b2a      	cmp	r3, #42	; 0x2a
 8005064:	d135      	bne.n	80050d2 <_vfiprintf_r+0x1ce>
 8005066:	9b03      	ldr	r3, [sp, #12]
 8005068:	1d1a      	adds	r2, r3, #4
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	9203      	str	r2, [sp, #12]
 800506e:	2b00      	cmp	r3, #0
 8005070:	bfb8      	it	lt
 8005072:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005076:	3402      	adds	r4, #2
 8005078:	9305      	str	r3, [sp, #20]
 800507a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005160 <_vfiprintf_r+0x25c>
 800507e:	7821      	ldrb	r1, [r4, #0]
 8005080:	2203      	movs	r2, #3
 8005082:	4650      	mov	r0, sl
 8005084:	f7fb f87c 	bl	8000180 <memchr>
 8005088:	b140      	cbz	r0, 800509c <_vfiprintf_r+0x198>
 800508a:	2340      	movs	r3, #64	; 0x40
 800508c:	eba0 000a 	sub.w	r0, r0, sl
 8005090:	fa03 f000 	lsl.w	r0, r3, r0
 8005094:	9b04      	ldr	r3, [sp, #16]
 8005096:	4303      	orrs	r3, r0
 8005098:	3401      	adds	r4, #1
 800509a:	9304      	str	r3, [sp, #16]
 800509c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050a0:	482c      	ldr	r0, [pc, #176]	; (8005154 <_vfiprintf_r+0x250>)
 80050a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80050a6:	2206      	movs	r2, #6
 80050a8:	f7fb f86a 	bl	8000180 <memchr>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d03f      	beq.n	8005130 <_vfiprintf_r+0x22c>
 80050b0:	4b29      	ldr	r3, [pc, #164]	; (8005158 <_vfiprintf_r+0x254>)
 80050b2:	bb1b      	cbnz	r3, 80050fc <_vfiprintf_r+0x1f8>
 80050b4:	9b03      	ldr	r3, [sp, #12]
 80050b6:	3307      	adds	r3, #7
 80050b8:	f023 0307 	bic.w	r3, r3, #7
 80050bc:	3308      	adds	r3, #8
 80050be:	9303      	str	r3, [sp, #12]
 80050c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c2:	443b      	add	r3, r7
 80050c4:	9309      	str	r3, [sp, #36]	; 0x24
 80050c6:	e767      	b.n	8004f98 <_vfiprintf_r+0x94>
 80050c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80050cc:	460c      	mov	r4, r1
 80050ce:	2001      	movs	r0, #1
 80050d0:	e7a5      	b.n	800501e <_vfiprintf_r+0x11a>
 80050d2:	2300      	movs	r3, #0
 80050d4:	3401      	adds	r4, #1
 80050d6:	9305      	str	r3, [sp, #20]
 80050d8:	4619      	mov	r1, r3
 80050da:	f04f 0c0a 	mov.w	ip, #10
 80050de:	4620      	mov	r0, r4
 80050e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050e4:	3a30      	subs	r2, #48	; 0x30
 80050e6:	2a09      	cmp	r2, #9
 80050e8:	d903      	bls.n	80050f2 <_vfiprintf_r+0x1ee>
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d0c5      	beq.n	800507a <_vfiprintf_r+0x176>
 80050ee:	9105      	str	r1, [sp, #20]
 80050f0:	e7c3      	b.n	800507a <_vfiprintf_r+0x176>
 80050f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80050f6:	4604      	mov	r4, r0
 80050f8:	2301      	movs	r3, #1
 80050fa:	e7f0      	b.n	80050de <_vfiprintf_r+0x1da>
 80050fc:	ab03      	add	r3, sp, #12
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	462a      	mov	r2, r5
 8005102:	4b16      	ldr	r3, [pc, #88]	; (800515c <_vfiprintf_r+0x258>)
 8005104:	a904      	add	r1, sp, #16
 8005106:	4630      	mov	r0, r6
 8005108:	f3af 8000 	nop.w
 800510c:	4607      	mov	r7, r0
 800510e:	1c78      	adds	r0, r7, #1
 8005110:	d1d6      	bne.n	80050c0 <_vfiprintf_r+0x1bc>
 8005112:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005114:	07d9      	lsls	r1, r3, #31
 8005116:	d405      	bmi.n	8005124 <_vfiprintf_r+0x220>
 8005118:	89ab      	ldrh	r3, [r5, #12]
 800511a:	059a      	lsls	r2, r3, #22
 800511c:	d402      	bmi.n	8005124 <_vfiprintf_r+0x220>
 800511e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005120:	f7ff fd7f 	bl	8004c22 <__retarget_lock_release_recursive>
 8005124:	89ab      	ldrh	r3, [r5, #12]
 8005126:	065b      	lsls	r3, r3, #25
 8005128:	f53f af12 	bmi.w	8004f50 <_vfiprintf_r+0x4c>
 800512c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800512e:	e711      	b.n	8004f54 <_vfiprintf_r+0x50>
 8005130:	ab03      	add	r3, sp, #12
 8005132:	9300      	str	r3, [sp, #0]
 8005134:	462a      	mov	r2, r5
 8005136:	4b09      	ldr	r3, [pc, #36]	; (800515c <_vfiprintf_r+0x258>)
 8005138:	a904      	add	r1, sp, #16
 800513a:	4630      	mov	r0, r6
 800513c:	f000 f880 	bl	8005240 <_printf_i>
 8005140:	e7e4      	b.n	800510c <_vfiprintf_r+0x208>
 8005142:	bf00      	nop
 8005144:	080057ac 	.word	0x080057ac
 8005148:	080057cc 	.word	0x080057cc
 800514c:	0800578c 	.word	0x0800578c
 8005150:	080057ec 	.word	0x080057ec
 8005154:	080057f6 	.word	0x080057f6
 8005158:	00000000 	.word	0x00000000
 800515c:	08004edf 	.word	0x08004edf
 8005160:	080057f2 	.word	0x080057f2

08005164 <_printf_common>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	4616      	mov	r6, r2
 800516a:	4699      	mov	r9, r3
 800516c:	688a      	ldr	r2, [r1, #8]
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005174:	4293      	cmp	r3, r2
 8005176:	bfb8      	it	lt
 8005178:	4613      	movlt	r3, r2
 800517a:	6033      	str	r3, [r6, #0]
 800517c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005180:	4607      	mov	r7, r0
 8005182:	460c      	mov	r4, r1
 8005184:	b10a      	cbz	r2, 800518a <_printf_common+0x26>
 8005186:	3301      	adds	r3, #1
 8005188:	6033      	str	r3, [r6, #0]
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	0699      	lsls	r1, r3, #26
 800518e:	bf42      	ittt	mi
 8005190:	6833      	ldrmi	r3, [r6, #0]
 8005192:	3302      	addmi	r3, #2
 8005194:	6033      	strmi	r3, [r6, #0]
 8005196:	6825      	ldr	r5, [r4, #0]
 8005198:	f015 0506 	ands.w	r5, r5, #6
 800519c:	d106      	bne.n	80051ac <_printf_common+0x48>
 800519e:	f104 0a19 	add.w	sl, r4, #25
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	6832      	ldr	r2, [r6, #0]
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	dc26      	bgt.n	80051fa <_printf_common+0x96>
 80051ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051b0:	1e13      	subs	r3, r2, #0
 80051b2:	6822      	ldr	r2, [r4, #0]
 80051b4:	bf18      	it	ne
 80051b6:	2301      	movne	r3, #1
 80051b8:	0692      	lsls	r2, r2, #26
 80051ba:	d42b      	bmi.n	8005214 <_printf_common+0xb0>
 80051bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051c0:	4649      	mov	r1, r9
 80051c2:	4638      	mov	r0, r7
 80051c4:	47c0      	blx	r8
 80051c6:	3001      	adds	r0, #1
 80051c8:	d01e      	beq.n	8005208 <_printf_common+0xa4>
 80051ca:	6823      	ldr	r3, [r4, #0]
 80051cc:	68e5      	ldr	r5, [r4, #12]
 80051ce:	6832      	ldr	r2, [r6, #0]
 80051d0:	f003 0306 	and.w	r3, r3, #6
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	bf08      	it	eq
 80051d8:	1aad      	subeq	r5, r5, r2
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	6922      	ldr	r2, [r4, #16]
 80051de:	bf0c      	ite	eq
 80051e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051e4:	2500      	movne	r5, #0
 80051e6:	4293      	cmp	r3, r2
 80051e8:	bfc4      	itt	gt
 80051ea:	1a9b      	subgt	r3, r3, r2
 80051ec:	18ed      	addgt	r5, r5, r3
 80051ee:	2600      	movs	r6, #0
 80051f0:	341a      	adds	r4, #26
 80051f2:	42b5      	cmp	r5, r6
 80051f4:	d11a      	bne.n	800522c <_printf_common+0xc8>
 80051f6:	2000      	movs	r0, #0
 80051f8:	e008      	b.n	800520c <_printf_common+0xa8>
 80051fa:	2301      	movs	r3, #1
 80051fc:	4652      	mov	r2, sl
 80051fe:	4649      	mov	r1, r9
 8005200:	4638      	mov	r0, r7
 8005202:	47c0      	blx	r8
 8005204:	3001      	adds	r0, #1
 8005206:	d103      	bne.n	8005210 <_printf_common+0xac>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800520c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005210:	3501      	adds	r5, #1
 8005212:	e7c6      	b.n	80051a2 <_printf_common+0x3e>
 8005214:	18e1      	adds	r1, r4, r3
 8005216:	1c5a      	adds	r2, r3, #1
 8005218:	2030      	movs	r0, #48	; 0x30
 800521a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800521e:	4422      	add	r2, r4
 8005220:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005224:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005228:	3302      	adds	r3, #2
 800522a:	e7c7      	b.n	80051bc <_printf_common+0x58>
 800522c:	2301      	movs	r3, #1
 800522e:	4622      	mov	r2, r4
 8005230:	4649      	mov	r1, r9
 8005232:	4638      	mov	r0, r7
 8005234:	47c0      	blx	r8
 8005236:	3001      	adds	r0, #1
 8005238:	d0e6      	beq.n	8005208 <_printf_common+0xa4>
 800523a:	3601      	adds	r6, #1
 800523c:	e7d9      	b.n	80051f2 <_printf_common+0x8e>
	...

08005240 <_printf_i>:
 8005240:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	7e0f      	ldrb	r7, [r1, #24]
 8005246:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005248:	2f78      	cmp	r7, #120	; 0x78
 800524a:	4691      	mov	r9, r2
 800524c:	4680      	mov	r8, r0
 800524e:	460c      	mov	r4, r1
 8005250:	469a      	mov	sl, r3
 8005252:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005256:	d807      	bhi.n	8005268 <_printf_i+0x28>
 8005258:	2f62      	cmp	r7, #98	; 0x62
 800525a:	d80a      	bhi.n	8005272 <_printf_i+0x32>
 800525c:	2f00      	cmp	r7, #0
 800525e:	f000 80d8 	beq.w	8005412 <_printf_i+0x1d2>
 8005262:	2f58      	cmp	r7, #88	; 0x58
 8005264:	f000 80a3 	beq.w	80053ae <_printf_i+0x16e>
 8005268:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800526c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005270:	e03a      	b.n	80052e8 <_printf_i+0xa8>
 8005272:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005276:	2b15      	cmp	r3, #21
 8005278:	d8f6      	bhi.n	8005268 <_printf_i+0x28>
 800527a:	a101      	add	r1, pc, #4	; (adr r1, 8005280 <_printf_i+0x40>)
 800527c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005280:	080052d9 	.word	0x080052d9
 8005284:	080052ed 	.word	0x080052ed
 8005288:	08005269 	.word	0x08005269
 800528c:	08005269 	.word	0x08005269
 8005290:	08005269 	.word	0x08005269
 8005294:	08005269 	.word	0x08005269
 8005298:	080052ed 	.word	0x080052ed
 800529c:	08005269 	.word	0x08005269
 80052a0:	08005269 	.word	0x08005269
 80052a4:	08005269 	.word	0x08005269
 80052a8:	08005269 	.word	0x08005269
 80052ac:	080053f9 	.word	0x080053f9
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	080053db 	.word	0x080053db
 80052b8:	08005269 	.word	0x08005269
 80052bc:	08005269 	.word	0x08005269
 80052c0:	0800541b 	.word	0x0800541b
 80052c4:	08005269 	.word	0x08005269
 80052c8:	0800531d 	.word	0x0800531d
 80052cc:	08005269 	.word	0x08005269
 80052d0:	08005269 	.word	0x08005269
 80052d4:	080053e3 	.word	0x080053e3
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	1d1a      	adds	r2, r3, #4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	602a      	str	r2, [r5, #0]
 80052e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0a3      	b.n	8005434 <_printf_i+0x1f4>
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	6829      	ldr	r1, [r5, #0]
 80052f0:	0606      	lsls	r6, r0, #24
 80052f2:	f101 0304 	add.w	r3, r1, #4
 80052f6:	d50a      	bpl.n	800530e <_printf_i+0xce>
 80052f8:	680e      	ldr	r6, [r1, #0]
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	2e00      	cmp	r6, #0
 80052fe:	da03      	bge.n	8005308 <_printf_i+0xc8>
 8005300:	232d      	movs	r3, #45	; 0x2d
 8005302:	4276      	negs	r6, r6
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005308:	485e      	ldr	r0, [pc, #376]	; (8005484 <_printf_i+0x244>)
 800530a:	230a      	movs	r3, #10
 800530c:	e019      	b.n	8005342 <_printf_i+0x102>
 800530e:	680e      	ldr	r6, [r1, #0]
 8005310:	602b      	str	r3, [r5, #0]
 8005312:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005316:	bf18      	it	ne
 8005318:	b236      	sxthne	r6, r6
 800531a:	e7ef      	b.n	80052fc <_printf_i+0xbc>
 800531c:	682b      	ldr	r3, [r5, #0]
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	1d19      	adds	r1, r3, #4
 8005322:	6029      	str	r1, [r5, #0]
 8005324:	0601      	lsls	r1, r0, #24
 8005326:	d501      	bpl.n	800532c <_printf_i+0xec>
 8005328:	681e      	ldr	r6, [r3, #0]
 800532a:	e002      	b.n	8005332 <_printf_i+0xf2>
 800532c:	0646      	lsls	r6, r0, #25
 800532e:	d5fb      	bpl.n	8005328 <_printf_i+0xe8>
 8005330:	881e      	ldrh	r6, [r3, #0]
 8005332:	4854      	ldr	r0, [pc, #336]	; (8005484 <_printf_i+0x244>)
 8005334:	2f6f      	cmp	r7, #111	; 0x6f
 8005336:	bf0c      	ite	eq
 8005338:	2308      	moveq	r3, #8
 800533a:	230a      	movne	r3, #10
 800533c:	2100      	movs	r1, #0
 800533e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005342:	6865      	ldr	r5, [r4, #4]
 8005344:	60a5      	str	r5, [r4, #8]
 8005346:	2d00      	cmp	r5, #0
 8005348:	bfa2      	ittt	ge
 800534a:	6821      	ldrge	r1, [r4, #0]
 800534c:	f021 0104 	bicge.w	r1, r1, #4
 8005350:	6021      	strge	r1, [r4, #0]
 8005352:	b90e      	cbnz	r6, 8005358 <_printf_i+0x118>
 8005354:	2d00      	cmp	r5, #0
 8005356:	d04d      	beq.n	80053f4 <_printf_i+0x1b4>
 8005358:	4615      	mov	r5, r2
 800535a:	fbb6 f1f3 	udiv	r1, r6, r3
 800535e:	fb03 6711 	mls	r7, r3, r1, r6
 8005362:	5dc7      	ldrb	r7, [r0, r7]
 8005364:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005368:	4637      	mov	r7, r6
 800536a:	42bb      	cmp	r3, r7
 800536c:	460e      	mov	r6, r1
 800536e:	d9f4      	bls.n	800535a <_printf_i+0x11a>
 8005370:	2b08      	cmp	r3, #8
 8005372:	d10b      	bne.n	800538c <_printf_i+0x14c>
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	07de      	lsls	r6, r3, #31
 8005378:	d508      	bpl.n	800538c <_printf_i+0x14c>
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	6861      	ldr	r1, [r4, #4]
 800537e:	4299      	cmp	r1, r3
 8005380:	bfde      	ittt	le
 8005382:	2330      	movle	r3, #48	; 0x30
 8005384:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005388:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800538c:	1b52      	subs	r2, r2, r5
 800538e:	6122      	str	r2, [r4, #16]
 8005390:	f8cd a000 	str.w	sl, [sp]
 8005394:	464b      	mov	r3, r9
 8005396:	aa03      	add	r2, sp, #12
 8005398:	4621      	mov	r1, r4
 800539a:	4640      	mov	r0, r8
 800539c:	f7ff fee2 	bl	8005164 <_printf_common>
 80053a0:	3001      	adds	r0, #1
 80053a2:	d14c      	bne.n	800543e <_printf_i+0x1fe>
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a8:	b004      	add	sp, #16
 80053aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ae:	4835      	ldr	r0, [pc, #212]	; (8005484 <_printf_i+0x244>)
 80053b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053b4:	6829      	ldr	r1, [r5, #0]
 80053b6:	6823      	ldr	r3, [r4, #0]
 80053b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80053bc:	6029      	str	r1, [r5, #0]
 80053be:	061d      	lsls	r5, r3, #24
 80053c0:	d514      	bpl.n	80053ec <_printf_i+0x1ac>
 80053c2:	07df      	lsls	r7, r3, #31
 80053c4:	bf44      	itt	mi
 80053c6:	f043 0320 	orrmi.w	r3, r3, #32
 80053ca:	6023      	strmi	r3, [r4, #0]
 80053cc:	b91e      	cbnz	r6, 80053d6 <_printf_i+0x196>
 80053ce:	6823      	ldr	r3, [r4, #0]
 80053d0:	f023 0320 	bic.w	r3, r3, #32
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	2310      	movs	r3, #16
 80053d8:	e7b0      	b.n	800533c <_printf_i+0xfc>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	f043 0320 	orr.w	r3, r3, #32
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	2378      	movs	r3, #120	; 0x78
 80053e4:	4828      	ldr	r0, [pc, #160]	; (8005488 <_printf_i+0x248>)
 80053e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053ea:	e7e3      	b.n	80053b4 <_printf_i+0x174>
 80053ec:	0659      	lsls	r1, r3, #25
 80053ee:	bf48      	it	mi
 80053f0:	b2b6      	uxthmi	r6, r6
 80053f2:	e7e6      	b.n	80053c2 <_printf_i+0x182>
 80053f4:	4615      	mov	r5, r2
 80053f6:	e7bb      	b.n	8005370 <_printf_i+0x130>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	6826      	ldr	r6, [r4, #0]
 80053fc:	6961      	ldr	r1, [r4, #20]
 80053fe:	1d18      	adds	r0, r3, #4
 8005400:	6028      	str	r0, [r5, #0]
 8005402:	0635      	lsls	r5, r6, #24
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	d501      	bpl.n	800540c <_printf_i+0x1cc>
 8005408:	6019      	str	r1, [r3, #0]
 800540a:	e002      	b.n	8005412 <_printf_i+0x1d2>
 800540c:	0670      	lsls	r0, r6, #25
 800540e:	d5fb      	bpl.n	8005408 <_printf_i+0x1c8>
 8005410:	8019      	strh	r1, [r3, #0]
 8005412:	2300      	movs	r3, #0
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	4615      	mov	r5, r2
 8005418:	e7ba      	b.n	8005390 <_printf_i+0x150>
 800541a:	682b      	ldr	r3, [r5, #0]
 800541c:	1d1a      	adds	r2, r3, #4
 800541e:	602a      	str	r2, [r5, #0]
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	6862      	ldr	r2, [r4, #4]
 8005424:	2100      	movs	r1, #0
 8005426:	4628      	mov	r0, r5
 8005428:	f7fa feaa 	bl	8000180 <memchr>
 800542c:	b108      	cbz	r0, 8005432 <_printf_i+0x1f2>
 800542e:	1b40      	subs	r0, r0, r5
 8005430:	6060      	str	r0, [r4, #4]
 8005432:	6863      	ldr	r3, [r4, #4]
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	2300      	movs	r3, #0
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	e7a8      	b.n	8005390 <_printf_i+0x150>
 800543e:	6923      	ldr	r3, [r4, #16]
 8005440:	462a      	mov	r2, r5
 8005442:	4649      	mov	r1, r9
 8005444:	4640      	mov	r0, r8
 8005446:	47d0      	blx	sl
 8005448:	3001      	adds	r0, #1
 800544a:	d0ab      	beq.n	80053a4 <_printf_i+0x164>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	079b      	lsls	r3, r3, #30
 8005450:	d413      	bmi.n	800547a <_printf_i+0x23a>
 8005452:	68e0      	ldr	r0, [r4, #12]
 8005454:	9b03      	ldr	r3, [sp, #12]
 8005456:	4298      	cmp	r0, r3
 8005458:	bfb8      	it	lt
 800545a:	4618      	movlt	r0, r3
 800545c:	e7a4      	b.n	80053a8 <_printf_i+0x168>
 800545e:	2301      	movs	r3, #1
 8005460:	4632      	mov	r2, r6
 8005462:	4649      	mov	r1, r9
 8005464:	4640      	mov	r0, r8
 8005466:	47d0      	blx	sl
 8005468:	3001      	adds	r0, #1
 800546a:	d09b      	beq.n	80053a4 <_printf_i+0x164>
 800546c:	3501      	adds	r5, #1
 800546e:	68e3      	ldr	r3, [r4, #12]
 8005470:	9903      	ldr	r1, [sp, #12]
 8005472:	1a5b      	subs	r3, r3, r1
 8005474:	42ab      	cmp	r3, r5
 8005476:	dcf2      	bgt.n	800545e <_printf_i+0x21e>
 8005478:	e7eb      	b.n	8005452 <_printf_i+0x212>
 800547a:	2500      	movs	r5, #0
 800547c:	f104 0619 	add.w	r6, r4, #25
 8005480:	e7f5      	b.n	800546e <_printf_i+0x22e>
 8005482:	bf00      	nop
 8005484:	080057fd 	.word	0x080057fd
 8005488:	0800580e 	.word	0x0800580e

0800548c <_sbrk_r>:
 800548c:	b538      	push	{r3, r4, r5, lr}
 800548e:	4d06      	ldr	r5, [pc, #24]	; (80054a8 <_sbrk_r+0x1c>)
 8005490:	2300      	movs	r3, #0
 8005492:	4604      	mov	r4, r0
 8005494:	4608      	mov	r0, r1
 8005496:	602b      	str	r3, [r5, #0]
 8005498:	f7fb fd2c 	bl	8000ef4 <_sbrk>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <_sbrk_r+0x1a>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	b103      	cbz	r3, 80054a6 <_sbrk_r+0x1a>
 80054a4:	6023      	str	r3, [r4, #0]
 80054a6:	bd38      	pop	{r3, r4, r5, pc}
 80054a8:	200001e0 	.word	0x200001e0

080054ac <__sread>:
 80054ac:	b510      	push	{r4, lr}
 80054ae:	460c      	mov	r4, r1
 80054b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b4:	f000 f8a0 	bl	80055f8 <_read_r>
 80054b8:	2800      	cmp	r0, #0
 80054ba:	bfab      	itete	ge
 80054bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80054be:	89a3      	ldrhlt	r3, [r4, #12]
 80054c0:	181b      	addge	r3, r3, r0
 80054c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80054c6:	bfac      	ite	ge
 80054c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80054ca:	81a3      	strhlt	r3, [r4, #12]
 80054cc:	bd10      	pop	{r4, pc}

080054ce <__swrite>:
 80054ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054d2:	461f      	mov	r7, r3
 80054d4:	898b      	ldrh	r3, [r1, #12]
 80054d6:	05db      	lsls	r3, r3, #23
 80054d8:	4605      	mov	r5, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	4616      	mov	r6, r2
 80054de:	d505      	bpl.n	80054ec <__swrite+0x1e>
 80054e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054e4:	2302      	movs	r3, #2
 80054e6:	2200      	movs	r2, #0
 80054e8:	f000 f868 	bl	80055bc <_lseek_r>
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	4632      	mov	r2, r6
 80054fa:	463b      	mov	r3, r7
 80054fc:	4628      	mov	r0, r5
 80054fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005502:	f000 b817 	b.w	8005534 <_write_r>

08005506 <__sseek>:
 8005506:	b510      	push	{r4, lr}
 8005508:	460c      	mov	r4, r1
 800550a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800550e:	f000 f855 	bl	80055bc <_lseek_r>
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	bf15      	itete	ne
 8005518:	6560      	strne	r0, [r4, #84]	; 0x54
 800551a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800551e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005522:	81a3      	strheq	r3, [r4, #12]
 8005524:	bf18      	it	ne
 8005526:	81a3      	strhne	r3, [r4, #12]
 8005528:	bd10      	pop	{r4, pc}

0800552a <__sclose>:
 800552a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552e:	f000 b813 	b.w	8005558 <_close_r>
	...

08005534 <_write_r>:
 8005534:	b538      	push	{r3, r4, r5, lr}
 8005536:	4d07      	ldr	r5, [pc, #28]	; (8005554 <_write_r+0x20>)
 8005538:	4604      	mov	r4, r0
 800553a:	4608      	mov	r0, r1
 800553c:	4611      	mov	r1, r2
 800553e:	2200      	movs	r2, #0
 8005540:	602a      	str	r2, [r5, #0]
 8005542:	461a      	mov	r2, r3
 8005544:	f7fb fc86 	bl	8000e54 <_write>
 8005548:	1c43      	adds	r3, r0, #1
 800554a:	d102      	bne.n	8005552 <_write_r+0x1e>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	b103      	cbz	r3, 8005552 <_write_r+0x1e>
 8005550:	6023      	str	r3, [r4, #0]
 8005552:	bd38      	pop	{r3, r4, r5, pc}
 8005554:	200001e0 	.word	0x200001e0

08005558 <_close_r>:
 8005558:	b538      	push	{r3, r4, r5, lr}
 800555a:	4d06      	ldr	r5, [pc, #24]	; (8005574 <_close_r+0x1c>)
 800555c:	2300      	movs	r3, #0
 800555e:	4604      	mov	r4, r0
 8005560:	4608      	mov	r0, r1
 8005562:	602b      	str	r3, [r5, #0]
 8005564:	f7fb fc92 	bl	8000e8c <_close>
 8005568:	1c43      	adds	r3, r0, #1
 800556a:	d102      	bne.n	8005572 <_close_r+0x1a>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	b103      	cbz	r3, 8005572 <_close_r+0x1a>
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	bd38      	pop	{r3, r4, r5, pc}
 8005574:	200001e0 	.word	0x200001e0

08005578 <_fstat_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d07      	ldr	r5, [pc, #28]	; (8005598 <_fstat_r+0x20>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	4611      	mov	r1, r2
 8005584:	602b      	str	r3, [r5, #0]
 8005586:	f7fb fc8d 	bl	8000ea4 <_fstat>
 800558a:	1c43      	adds	r3, r0, #1
 800558c:	d102      	bne.n	8005594 <_fstat_r+0x1c>
 800558e:	682b      	ldr	r3, [r5, #0]
 8005590:	b103      	cbz	r3, 8005594 <_fstat_r+0x1c>
 8005592:	6023      	str	r3, [r4, #0]
 8005594:	bd38      	pop	{r3, r4, r5, pc}
 8005596:	bf00      	nop
 8005598:	200001e0 	.word	0x200001e0

0800559c <_isatty_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4d06      	ldr	r5, [pc, #24]	; (80055b8 <_isatty_r+0x1c>)
 80055a0:	2300      	movs	r3, #0
 80055a2:	4604      	mov	r4, r0
 80055a4:	4608      	mov	r0, r1
 80055a6:	602b      	str	r3, [r5, #0]
 80055a8:	f7fb fc8c 	bl	8000ec4 <_isatty>
 80055ac:	1c43      	adds	r3, r0, #1
 80055ae:	d102      	bne.n	80055b6 <_isatty_r+0x1a>
 80055b0:	682b      	ldr	r3, [r5, #0]
 80055b2:	b103      	cbz	r3, 80055b6 <_isatty_r+0x1a>
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
 80055b8:	200001e0 	.word	0x200001e0

080055bc <_lseek_r>:
 80055bc:	b538      	push	{r3, r4, r5, lr}
 80055be:	4d07      	ldr	r5, [pc, #28]	; (80055dc <_lseek_r+0x20>)
 80055c0:	4604      	mov	r4, r0
 80055c2:	4608      	mov	r0, r1
 80055c4:	4611      	mov	r1, r2
 80055c6:	2200      	movs	r2, #0
 80055c8:	602a      	str	r2, [r5, #0]
 80055ca:	461a      	mov	r2, r3
 80055cc:	f7fb fc85 	bl	8000eda <_lseek>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_lseek_r+0x1e>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_lseek_r+0x1e>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	200001e0 	.word	0x200001e0

080055e0 <__malloc_lock>:
 80055e0:	4801      	ldr	r0, [pc, #4]	; (80055e8 <__malloc_lock+0x8>)
 80055e2:	f7ff bb1d 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	200001d4 	.word	0x200001d4

080055ec <__malloc_unlock>:
 80055ec:	4801      	ldr	r0, [pc, #4]	; (80055f4 <__malloc_unlock+0x8>)
 80055ee:	f7ff bb18 	b.w	8004c22 <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	200001d4 	.word	0x200001d4

080055f8 <_read_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d07      	ldr	r5, [pc, #28]	; (8005618 <_read_r+0x20>)
 80055fc:	4604      	mov	r4, r0
 80055fe:	4608      	mov	r0, r1
 8005600:	4611      	mov	r1, r2
 8005602:	2200      	movs	r2, #0
 8005604:	602a      	str	r2, [r5, #0]
 8005606:	461a      	mov	r2, r3
 8005608:	f7fb fc07 	bl	8000e1a <_read>
 800560c:	1c43      	adds	r3, r0, #1
 800560e:	d102      	bne.n	8005616 <_read_r+0x1e>
 8005610:	682b      	ldr	r3, [r5, #0]
 8005612:	b103      	cbz	r3, 8005616 <_read_r+0x1e>
 8005614:	6023      	str	r3, [r4, #0]
 8005616:	bd38      	pop	{r3, r4, r5, pc}
 8005618:	200001e0 	.word	0x200001e0

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
