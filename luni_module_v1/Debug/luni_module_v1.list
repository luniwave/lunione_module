
luni_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005600  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  08005740  08005740  00015740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080059c8  080059c8  000159c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000090  20000008  080059d0  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000014c  20000098  08005a60  00020098  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200001e4  08005a60  000201e4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 10 .debug_info   000136d3  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000299f  00000000  00000000  0003379b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001508  00000000  00000000  00036140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001410  00000000  00000000  00037648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00022330  00000000  00000000  00038a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000131c8  00000000  00000000  0005ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d97ca  00000000  00000000  0006df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0014771a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005ff8  00000000  00000000  0014776c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000098 	.word	0x20000098
 800015c:	00000000 	.word	0x00000000
 8000160:	08005728 	.word	0x08005728

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000009c 	.word	0x2000009c
 800017c:	08005728 	.word	0x08005728

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000230:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <EpdDigitalWriteCallback>:
		EPD_BUSY_Pin,
};

EPD_Pin pins[4];

void EpdDigitalWriteCallback(int pin_num, int value) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
 800052c:	6039      	str	r1, [r7, #0]
  if (value == HIGH) {
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d10e      	bne.n	8000552 <EpdDigitalWriteCallback+0x2e>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_SET);
 8000534:	4a10      	ldr	r2, [pc, #64]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	4413      	add	r3, r2
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	b29b      	uxth	r3, r3
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	f001 f978 	bl	8001840 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
  }
}
 8000550:	e00d      	b.n	800056e <EpdDigitalWriteCallback+0x4a>
    HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 8000552:	4a09      	ldr	r2, [pc, #36]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800055a:	4a07      	ldr	r2, [pc, #28]	; (8000578 <EpdDigitalWriteCallback+0x54>)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	4413      	add	r3, r2
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	b29b      	uxth	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	4619      	mov	r1, r3
 800056a:	f001 f969 	bl	8001840 <HAL_GPIO_WritePin>
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	200000b4 	.word	0x200000b4

0800057c <EpdDigitalReadCallback>:

int EpdDigitalReadCallback(int pin_num) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  if (HAL_GPIO_ReadPin(pins[pin_num].port, pins[pin_num].pin) == GPIO_PIN_SET) {
 8000584:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <EpdDigitalReadCallback+0x38>)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800058c:	4909      	ldr	r1, [pc, #36]	; (80005b4 <EpdDigitalReadCallback+0x38>)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	440b      	add	r3, r1
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	b29b      	uxth	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	4610      	mov	r0, r2
 800059c:	f001 f938 	bl	8001810 <HAL_GPIO_ReadPin>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d101      	bne.n	80005aa <EpdDigitalReadCallback+0x2e>
    return HIGH;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <EpdDigitalReadCallback+0x30>
  } else {
    return LOW;
 80005aa:	2300      	movs	r3, #0
  }
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	200000b4 	.word	0x200000b4

080005b8 <EpdDelayMsCallback>:

void EpdDelayMsCallback(unsigned int delaytime) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  HAL_Delay(delaytime);
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 fead 	bl	8001320 <HAL_Delay>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
	...

080005d0 <EpdSpiTransferCallback>:

void EpdSpiTransferCallback(unsigned char data) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_RESET);
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005e0:	6852      	ldr	r2, [r2, #4]
 80005e2:	b291      	uxth	r1, r2
 80005e4:	2200      	movs	r2, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f92a 	bl	8001840 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 1000);
 80005ec:	1df9      	adds	r1, r7, #7
 80005ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f2:	2201      	movs	r2, #1
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <EpdSpiTransferCallback+0x48>)
 80005f6:	f002 ffac 	bl	8003552 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin((GPIO_TypeDef*)pins[CS_PIN].port, pins[CS_PIN].pin, GPIO_PIN_SET);
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <EpdSpiTransferCallback+0x44>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a05      	ldr	r2, [pc, #20]	; (8000614 <EpdSpiTransferCallback+0x44>)
 8000600:	6852      	ldr	r2, [r2, #4]
 8000602:	b291      	uxth	r1, r2
 8000604:	2201      	movs	r2, #1
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f91a 	bl	8001840 <HAL_GPIO_WritePin>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	200000b4 	.word	0x200000b4
 8000618:	200000d4 	.word	0x200000d4

0800061c <EpdInitCallback>:

int EpdInitCallback(void) {
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  pins[CS_PIN] = epd_cs_pin;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <EpdInitCallback+0x48>)
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <EpdInitCallback+0x4c>)
 8000624:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000628:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[RST_PIN] = epd_rst_pin;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <EpdInitCallback+0x48>)
 800062e:	4a0f      	ldr	r2, [pc, #60]	; (800066c <EpdInitCallback+0x50>)
 8000630:	3308      	adds	r3, #8
 8000632:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000636:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[DC_PIN] = epd_dc_pin;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <EpdInitCallback+0x48>)
 800063c:	4a0c      	ldr	r2, [pc, #48]	; (8000670 <EpdInitCallback+0x54>)
 800063e:	3310      	adds	r3, #16
 8000640:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000644:	e883 0003 	stmia.w	r3, {r0, r1}
  pins[BUSY_PIN] = epd_busy_pin;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <EpdInitCallback+0x48>)
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <EpdInitCallback+0x58>)
 800064c:	3318      	adds	r3, #24
 800064e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000652:	e883 0003 	stmia.w	r3, {r0, r1}
  
  return 0;
 8000656:	2300      	movs	r3, #0
}
 8000658:	4618      	mov	r0, r3
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	200000b4 	.word	0x200000b4
 8000668:	20000008 	.word	0x20000008
 800066c:	20000010 	.word	0x20000010
 8000670:	20000018 	.word	0x20000018
 8000674:	20000020 	.word	0x20000020

08000678 <EPD_Init>:
#include <stdlib.h>
#include "epd2in9.h"
#include "main.h"
#include "epdif.h"

int EPD_Init(EPD* epd, const unsigned char* lut) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af02      	add	r7, sp, #8
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
	epd->reset_pin = RST_PIN;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2201      	movs	r2, #1
 8000686:	601a      	str	r2, [r3, #0]
	epd->dc_pin = DC_PIN;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	2202      	movs	r2, #2
 800068c:	605a      	str	r2, [r3, #4]
	epd->cs_pin = CS_PIN;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
	epd->busy_pin = BUSY_PIN;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2203      	movs	r2, #3
 8000698:	60da      	str	r2, [r3, #12]
	epd->width = EPD_WIDTH;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	2280      	movs	r2, #128	; 0x80
 800069e:	611a      	str	r2, [r3, #16]
	epd->height = EPD_HEIGHT;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80006a6:	615a      	str	r2, [r3, #20]
	/* this calls the peripheral hardware interface, see epdif */
	if (EpdInitCallback() != 0) {
 80006a8:	f7ff ffb8 	bl	800061c <EpdInitCallback>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d002      	beq.n	80006b8 <EPD_Init+0x40>
		return -1;
 80006b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b6:	e045      	b.n	8000744 <EPD_Init+0xcc>
	}



	epd->lut = lut;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	619a      	str	r2, [r3, #24]

  EPD_Reset(epd);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f8ac 	bl	800081c <EPD_Reset>

  EPD_WaitUntilIdle(epd);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f892 	bl	80007ee <EPD_WaitUntilIdle>
  EPD_SendCommand(epd,SW_RESET); // soft reset
 80006ca:	2112      	movs	r1, #18
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f864 	bl	800079a <EPD_SendCommand>
  EPD_WaitUntilIdle(epd);
 80006d2:	6878      	ldr	r0, [r7, #4]
 80006d4:	f000 f88b 	bl	80007ee <EPD_WaitUntilIdle>

  EPD_SendCommand(epd, DRIVER_OUTPUT_CONTROL);
 80006d8:	2101      	movs	r1, #1
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f85d 	bl	800079a <EPD_SendCommand>
  EPD_SendData(epd, 0x27);
 80006e0:	2127      	movs	r1, #39	; 0x27
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f86e 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, 0x01);
 80006e8:	2101      	movs	r1, #1
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f86a 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, 0x00);
 80006f0:	2100      	movs	r1, #0
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f000 f866 	bl	80007c4 <EPD_SendData>

  // Entrymode
  EPD_SendCommand(epd, DATA_ENTRY_MODE_SETTING);
 80006f8:	2111      	movs	r1, #17
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f84d 	bl	800079a <EPD_SendCommand>
  EPD_SendData(epd, 0x03);
 8000700:	2103      	movs	r1, #3
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f85e 	bl	80007c4 <EPD_SendData>

  // Curseur de mémoire
  EPD_SetMemoryArea(epd, 0 , 0, EPD_WIDTH-1, EPD_HEIGHT-1);
 8000708:	f240 1327 	movw	r3, #295	; 0x127
 800070c:	9300      	str	r3, [sp, #0]
 800070e:	237f      	movs	r3, #127	; 0x7f
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f000 f8c9 	bl	80008ac <EPD_SetMemoryArea>

  // Update mode
  EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_1);
 800071a:	2121      	movs	r1, #33	; 0x21
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f83c 	bl	800079a <EPD_SendCommand>
  EPD_SendData(epd, 0x00);
 8000722:	2100      	movs	r1, #0
 8000724:	6878      	ldr	r0, [r7, #4]
 8000726:	f000 f84d 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, 0x80);
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f000 f849 	bl	80007c4 <EPD_SendData>

  // Set the cursor
  EPD_SetMemoryPointer(epd,0,0);
 8000732:	2200      	movs	r2, #0
 8000734:	2100      	movs	r1, #0
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f8f3 	bl	8000922 <EPD_SetMemoryPointer>
  EPD_WaitUntilIdle(epd);
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f000 f856 	bl	80007ee <EPD_WaitUntilIdle>


  /* EPD hardware init end */
  return 0;
 8000742:	2300      	movs	r3, #0



}
 8000744:	4618      	mov	r0, r3
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}

0800074c <EPD_DigitalWrite>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DigitalWrite(EPD* epd, int pin, int value) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	60f8      	str	r0, [r7, #12]
 8000754:	60b9      	str	r1, [r7, #8]
 8000756:	607a      	str	r2, [r7, #4]
  EpdDigitalWriteCallback(pin, value);
 8000758:	6879      	ldr	r1, [r7, #4]
 800075a:	68b8      	ldr	r0, [r7, #8]
 800075c:	f7ff fee2 	bl	8000524 <EpdDigitalWriteCallback>
}
 8000760:	bf00      	nop
 8000762:	3710      	adds	r7, #16
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <EPD_DigitalRead>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
int EPD_DigitalRead(EPD* epd, int pin) {
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
  return EpdDigitalReadCallback(pin);
 8000772:	6838      	ldr	r0, [r7, #0]
 8000774:	f7ff ff02 	bl	800057c <EpdDigitalReadCallback>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <EPD_DelayMs>:

/**
 *  @brief: this calls the corresponding function from epdif.h
 *          usually there is no need to change this function
 */
void EPD_DelayMs(EPD* epd, unsigned int delaytime) {  // 1ms
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	6039      	str	r1, [r7, #0]
  EpdDelayMsCallback(delaytime);
 800078c:	6838      	ldr	r0, [r7, #0]
 800078e:	f7ff ff13 	bl	80005b8 <EpdDelayMsCallback>
}
 8000792:	bf00      	nop
 8000794:	3708      	adds	r7, #8
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <EPD_SendCommand>:

/**
 *  @brief: basic function for sending commands
 */
void EPD_SendCommand(EPD* epd, unsigned char command) {
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	6078      	str	r0, [r7, #4]
 80007a2:	460b      	mov	r3, r1
 80007a4:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, LOW);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	4619      	mov	r1, r3
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f7ff ffcc 	bl	800074c <EPD_DigitalWrite>
  EpdSpiTransferCallback(command);
 80007b4:	78fb      	ldrb	r3, [r7, #3]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ff0a 	bl	80005d0 <EpdSpiTransferCallback>
}
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <EPD_SendData>:

/**
 *  @brief: basic function for sending data
 */
void EPD_SendData(EPD* epd, unsigned char data) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	70fb      	strb	r3, [r7, #3]
  EPD_DigitalWrite(epd, epd->dc_pin, HIGH);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	2201      	movs	r2, #1
 80007d6:	4619      	mov	r1, r3
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ffb7 	bl	800074c <EPD_DigitalWrite>
  EpdSpiTransferCallback(data);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f7ff fef5 	bl	80005d0 <EpdSpiTransferCallback>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <EPD_WaitUntilIdle>:

/**
 *  @brief: Wait until the busy_pin goes LOW
 */
void EPD_WaitUntilIdle(EPD* epd) {
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 80007f6:	e003      	b.n	8000800 <EPD_WaitUntilIdle+0x12>
    EPD_DelayMs(epd, 100);
 80007f8:	2164      	movs	r1, #100	; 0x64
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ffc1 	bl	8000782 <EPD_DelayMs>
  while(EPD_DigitalRead(epd, epd->busy_pin) == HIGH) {      //0: busy, 1: idle
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	4619      	mov	r1, r3
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffae 	bl	8000768 <EPD_DigitalRead>
 800080c:	4603      	mov	r3, r0
 800080e:	2b01      	cmp	r3, #1
 8000810:	d0f2      	beq.n	80007f8 <EPD_WaitUntilIdle+0xa>
  }      
}
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}

0800081c <EPD_Reset>:
/**
 *  @brief: module reset.
 *          often used to awaken the module in deep sleep,
 *          see EPD::Sleep();
 */
void EPD_Reset(EPD* epd) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  EPD_DigitalWrite(epd, epd->reset_pin, LOW);                //module reset    
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ff8d 	bl	800074c <EPD_DigitalWrite>
  EPD_DelayMs(epd, 10);
 8000832:	210a      	movs	r1, #10
 8000834:	6878      	ldr	r0, [r7, #4]
 8000836:	f7ff ffa4 	bl	8000782 <EPD_DelayMs>
  EPD_DigitalWrite(epd, epd->reset_pin, HIGH);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2201      	movs	r2, #1
 8000840:	4619      	mov	r1, r3
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ff82 	bl	800074c <EPD_DigitalWrite>
  EPD_DelayMs(epd, 10);
 8000848:	210a      	movs	r1, #10
 800084a:	6878      	ldr	r0, [r7, #4]
 800084c:	f7ff ff99 	bl	8000782 <EPD_DelayMs>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <EPD_Display_full_refresh>:
  EPD_SendCommand(epd, MASTER_ACTIVATION);
  EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
  EPD_WaitUntilIdle(epd);
}

void EPD_Display_full_refresh(EPD* epd) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  EPD_SendCommand(epd, DISPLAY_UPDATE_CONTROL_2);
 8000860:	2122      	movs	r1, #34	; 0x22
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f7ff ff99 	bl	800079a <EPD_SendCommand>
  EPD_SendData(epd, 0xF7);
 8000868:	21f7      	movs	r1, #247	; 0xf7
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff ffaa 	bl	80007c4 <EPD_SendData>
  EPD_SendCommand(epd, MASTER_ACTIVATION);
 8000870:	2120      	movs	r1, #32
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ff91 	bl	800079a <EPD_SendCommand>
  EPD_SendCommand(epd, TERMINATE_FRAME_READ_WRITE);
 8000878:	21ff      	movs	r1, #255	; 0xff
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff ff8d 	bl	800079a <EPD_SendCommand>
  EPD_WaitUntilIdle(epd);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ffb4 	bl	80007ee <EPD_WaitUntilIdle>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <EPD_Sleep>:
 *  @brief: After this command is transmitted, the chip would enter the 
 *          deep-sleep mode to save power. 
 *          The deep sleep mode would return to standby by hardware reset. 
 *          You can use EPD_Init() to awaken
 */
void EPD_Sleep(EPD* epd) {
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
  EPD_SendCommand(epd, DEEP_SLEEP_MODE);
 8000896:	2110      	movs	r1, #16
 8000898:	6878      	ldr	r0, [r7, #4]
 800089a:	f7ff ff7e 	bl	800079a <EPD_SendCommand>
  EPD_WaitUntilIdle(epd);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f7ff ffa5 	bl	80007ee <EPD_WaitUntilIdle>
}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <EPD_SetMemoryArea>:
}

/**
 *  @brief: private function to specify the memory area for data R/W
 */
static void EPD_SetMemoryArea(EPD* epd, int x_start, int y_start, int x_end, int y_end) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
 80008b8:	603b      	str	r3, [r7, #0]
  EPD_SendCommand(epd, SET_RAM_X_ADDRESS_START_END_POSITION);
 80008ba:	2144      	movs	r1, #68	; 0x44
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff ff6c 	bl	800079a <EPD_SendCommand>
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  EPD_SendData(epd, (x_start >> 3) & 0xFF);
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	10db      	asrs	r3, r3, #3
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	4619      	mov	r1, r3
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f7ff ff7a 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, (x_end >> 3) & 0xFF);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	10db      	asrs	r3, r3, #3
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4619      	mov	r1, r3
 80008d8:	68f8      	ldr	r0, [r7, #12]
 80008da:	f7ff ff73 	bl	80007c4 <EPD_SendData>
  EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_START_END_POSITION);
 80008de:	2145      	movs	r1, #69	; 0x45
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff ff5a 	bl	800079a <EPD_SendCommand>
  EPD_SendData(epd, y_start & 0xFF);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4619      	mov	r1, r3
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f7ff ff69 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, (y_start >> 8) & 0xFF);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	121b      	asrs	r3, r3, #8
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	4619      	mov	r1, r3
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff ff62 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, y_end & 0xFF);
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	4619      	mov	r1, r3
 8000906:	68f8      	ldr	r0, [r7, #12]
 8000908:	f7ff ff5c 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, (y_end >> 8) & 0xFF);
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	121b      	asrs	r3, r3, #8
 8000910:	b2db      	uxtb	r3, r3
 8000912:	4619      	mov	r1, r3
 8000914:	68f8      	ldr	r0, [r7, #12]
 8000916:	f7ff ff55 	bl	80007c4 <EPD_SendData>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <EPD_SetMemoryPointer>:

/**
 *  @brief: private function to specify the start point for data R/W
 */
static void EPD_SetMemoryPointer(EPD* epd, int x, int y) {
 8000922:	b580      	push	{r7, lr}
 8000924:	b084      	sub	sp, #16
 8000926:	af00      	add	r7, sp, #0
 8000928:	60f8      	str	r0, [r7, #12]
 800092a:	60b9      	str	r1, [r7, #8]
 800092c:	607a      	str	r2, [r7, #4]
  EPD_SendCommand(epd, SET_RAM_X_ADDRESS_COUNTER);
 800092e:	214e      	movs	r1, #78	; 0x4e
 8000930:	68f8      	ldr	r0, [r7, #12]
 8000932:	f7ff ff32 	bl	800079a <EPD_SendCommand>
  /* x point must be the multiple of 8 or the last 3 bits will be ignored */
  EPD_SendData(epd, (x >> 3) & 0xFF);
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	10db      	asrs	r3, r3, #3
 800093a:	b2db      	uxtb	r3, r3
 800093c:	4619      	mov	r1, r3
 800093e:	68f8      	ldr	r0, [r7, #12]
 8000940:	f7ff ff40 	bl	80007c4 <EPD_SendData>
  EPD_SendCommand(epd, SET_RAM_Y_ADDRESS_COUNTER);
 8000944:	214f      	movs	r1, #79	; 0x4f
 8000946:	68f8      	ldr	r0, [r7, #12]
 8000948:	f7ff ff27 	bl	800079a <EPD_SendCommand>
  EPD_SendData(epd, y & 0xFF);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	4619      	mov	r1, r3
 8000952:	68f8      	ldr	r0, [r7, #12]
 8000954:	f7ff ff36 	bl	80007c4 <EPD_SendData>
  EPD_SendData(epd, (y >> 8) & 0xFF);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	121b      	asrs	r3, r3, #8
 800095c:	b2db      	uxtb	r3, r3
 800095e:	4619      	mov	r1, r3
 8000960:	68f8      	ldr	r0, [r7, #12]
 8000962:	f7ff ff2f 	bl	80007c4 <EPD_SendData>
  EPD_WaitUntilIdle(epd);
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f7ff ff41 	bl	80007ee <EPD_WaitUntilIdle>
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800097c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000980:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4313      	orrs	r3, r2
 800098a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800098c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000998:	68fb      	ldr	r3, [r7, #12]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	; 0x38
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	unsigned char* frame_buffer = (unsigned char*)malloc(EPD_WIDTH * EPD_HEIGHT / 8);
 80009ae:	f44f 5094 	mov.w	r0, #4736	; 0x1280
 80009b2:	f003 fea5 	bl	8004700 <malloc>
 80009b6:	4603      	mov	r3, r0
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
	char time_string[] = {'0', '0', ':', '0', '0', '\0'};
 80009ba:	4a24      	ldr	r2, [pc, #144]	; (8000a4c <main+0xa4>)
 80009bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c4:	6018      	str	r0, [r3, #0]
 80009c6:	3304      	adds	r3, #4
 80009c8:	8019      	strh	r1, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ca:	f000 fc23 	bl	8001214 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ce:	f000 f851 	bl	8000a74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80009d2:	f000 f8b3 	bl	8000b3c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 f95b 	bl	8000c90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009da:	f000 f90b 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80009de:	f000 f8cb 	bl	8000b78 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\r ** LuniOne. v1.0.1 ** \n\r");
 80009e2:	481b      	ldr	r0, [pc, #108]	; (8000a50 <main+0xa8>)
 80009e4:	f003 ff7c 	bl	80048e0 <iprintf>

  //HAL_GPIO_WritePin((GPIO_TypeDef*)pins[pin_num].port, pins[pin_num].pin, GPIO_PIN_RESET);
 // HAL_GPIO_WritePin(EPD_RST_GPIO_Port,EPD_RST_Pin,GPIO_PIN_RESET);

  printf("DEBUT de l'initialisation \n\r");
 80009e8:	481a      	ldr	r0, [pc, #104]	; (8000a54 <main+0xac>)
 80009ea:	f003 ff79 	bl	80048e0 <iprintf>
  EPD epd;
  if (EPD_Init(&epd, lut_full_update) != 0) {
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	4919      	ldr	r1, [pc, #100]	; (8000a58 <main+0xb0>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe3f 	bl	8000678 <EPD_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d005      	beq.n	8000a0c <main+0x64>
      printf("e-Paper init failed \n\r");
 8000a00:	4816      	ldr	r0, [pc, #88]	; (8000a5c <main+0xb4>)
 8000a02:	f003 ff6d 	bl	80048e0 <iprintf>
      return -1;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a0a:	e01a      	b.n	8000a42 <main+0x9a>
  }
  else{
	  printf("e-Paper init done \n\r");
 8000a0c:	4814      	ldr	r0, [pc, #80]	; (8000a60 <main+0xb8>)
 8000a0e:	f003 ff67 	bl	80048e0 <iprintf>
  }

  printf("Début du clear...\r\n");
 8000a12:	4814      	ldr	r0, [pc, #80]	; (8000a64 <main+0xbc>)
 8000a14:	f003 ffea 	bl	80049ec <puts>
  EPD_Display_full_refresh(&epd);
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff1b 	bl	8000858 <EPD_Display_full_refresh>
  printf("Fin du clear...\r\n");
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <main+0xc0>)
 8000a24:	f003 ffe2 	bl	80049ec <puts>


  printf("Début mise en veille ...\r\n");
 8000a28:	4810      	ldr	r0, [pc, #64]	; (8000a6c <main+0xc4>)
 8000a2a:	f003 ffdf 	bl	80049ec <puts>
  EPD_Sleep(&epd);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ff2b 	bl	800088e <EPD_Sleep>
  printf("Fin de mise en veille ...\r\n");
 8000a38:	480d      	ldr	r0, [pc, #52]	; (8000a70 <main+0xc8>)
 8000a3a:	f003 ffd7 	bl	80049ec <puts>

  return -1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	  EPD_DisplayFrame(&epd);

	  EPD_DelayMs(&epd, 500);
  }
  /* USER CODE END 3 */
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3738      	adds	r7, #56	; 0x38
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	0800580c 	.word	0x0800580c
 8000a50:	08005740 	.word	0x08005740
 8000a54:	0800575c 	.word	0x0800575c
 8000a58:	08005840 	.word	0x08005840
 8000a5c:	0800577c 	.word	0x0800577c
 8000a60:	08005794 	.word	0x08005794
 8000a64:	080057ac 	.word	0x080057ac
 8000a68:	080057c0 	.word	0x080057c0
 8000a6c:	080057d4 	.word	0x080057d4
 8000a70:	080057f0 	.word	0x080057f0

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09a      	sub	sp, #104	; 0x68
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2248      	movs	r2, #72	; 0x48
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f003 fe44 	bl	8004710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
 8000a94:	611a      	str	r2, [r3, #16]
 8000a96:	615a      	str	r2, [r3, #20]
 8000a98:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9a:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <SystemClock_Config+0xc4>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000aa2:	4a25      	ldr	r2, [pc, #148]	; (8000b38 <SystemClock_Config+0xc4>)
 8000aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	4b23      	ldr	r3, [pc, #140]	; (8000b38 <SystemClock_Config+0xc4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ac0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac6:	2340      	movs	r3, #64	; 0x40
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aca:	2302      	movs	r3, #2
 8000acc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 12;
 8000ad6:	230c      	movs	r3, #12
 8000ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ada:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ade:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000ae0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000ae4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aea:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aec:	f107 0320 	add.w	r3, r7, #32
 8000af0:	4618      	mov	r0, r3
 8000af2:	f001 fa51 	bl	8001f98 <HAL_RCC_OscConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000afc:	f000 f96a 	bl	8000dd4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000b00:	236f      	movs	r3, #111	; 0x6f
 8000b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b04:	2303      	movs	r3, #3
 8000b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b08:	2380      	movs	r3, #128	; 0x80
 8000b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV4;
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV4;
 8000b18:	2390      	movs	r3, #144	; 0x90
 8000b1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f001 fdad 	bl	8002680 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b2c:	f000 f952 	bl	8000dd4 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3768      	adds	r7, #104	; 0x68
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58000400 	.word	0x58000400

08000b3c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b094      	sub	sp, #80	; 0x50
 8000b40:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2250      	movs	r2, #80	; 0x50
 8000b46:	2100      	movs	r1, #0
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f003 fde1 	bl	8004710 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b52:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000b54:	2300      	movs	r3, #0
 8000b56:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f002 f9cd 	bl	8002efe <HAL_RCCEx_PeriphCLKConfig>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000b6a:	f000 f933 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000b6e:	bf00      	nop
 8000b70:	3750      	adds	r7, #80	; 0x50
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
	...

08000b78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b7c:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <MX_SPI2_Init+0x74>)
 8000b7e:	4a1c      	ldr	r2, [pc, #112]	; (8000bf0 <MX_SPI2_Init+0x78>)
 8000b80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b82:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_SPI2_Init+0x74>)
 8000b84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_SPI2_Init+0x74>)
 8000b8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b90:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <MX_SPI2_Init+0x74>)
 8000b94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_SPI2_Init+0x74>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_SPI2_Init+0x74>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_SPI2_Init+0x74>)
 8000ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bb0:	2208      	movs	r2, #8
 8000bb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bc8:	2207      	movs	r2, #7
 8000bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bd4:	2208      	movs	r2, #8
 8000bd6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	; (8000bec <MX_SPI2_Init+0x74>)
 8000bda:	f002 fc17 	bl	800340c <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000be4:	f000 f8f6 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	200000d4 	.word	0x200000d4
 8000bf0:	40003800 	.word	0x40003800

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000bfa:	4a24      	ldr	r2, [pc, #144]	; (8000c8c <MX_USART1_UART_Init+0x98>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bfe:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c14:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000c18:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c1c:	220c      	movs	r2, #12
 8000c1e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c40:	f002 ff7a 	bl	8003b38 <HAL_UART_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000c4a:	f000 f8c3 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c4e:	2100      	movs	r1, #0
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c52:	f003 fc60 	bl	8004516 <HAL_UARTEx_SetTxFifoThreshold>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000c5c:	f000 f8ba 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c60:	2100      	movs	r1, #0
 8000c62:	4809      	ldr	r0, [pc, #36]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c64:	f003 fc95 	bl	8004592 <HAL_UARTEx_SetRxFifoThreshold>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000c6e:	f000 f8b1 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_USART1_UART_Init+0x94>)
 8000c74:	f003 fc16 	bl	80044a4 <HAL_UARTEx_DisableFifoMode>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000c7e:	f000 f8a9 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000138 	.word	0x20000138
 8000c8c:	40013800 	.word	0x40013800

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca4:	2004      	movs	r0, #4
 8000ca6:	f7ff fe65 	bl	8000974 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000caa:	2001      	movs	r0, #1
 8000cac:	f7ff fe62 	bl	8000974 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb0:	2002      	movs	r0, #2
 8000cb2:	f7ff fe5f 	bl	8000974 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2008      	movs	r0, #8
 8000cb8:	f7ff fe5c 	bl	8000974 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2123      	movs	r1, #35	; 0x23
 8000cc0:	4838      	ldr	r0, [pc, #224]	; (8000da4 <MX_GPIO_Init+0x114>)
 8000cc2:	f000 fdbd 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EPD_DC_Pin|EPD_CS_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8000ccc:	4836      	ldr	r0, [pc, #216]	; (8000da8 <MX_GPIO_Init+0x118>)
 8000cce:	f000 fdb7 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EPD_RST_GPIO_Port, EPD_RST_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cdc:	f000 fdb0 	bl	8001840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	2310      	movs	r3, #16
 8000ce2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	4619      	mov	r1, r3
 8000cf0:	482d      	ldr	r0, [pc, #180]	; (8000da8 <MX_GPIO_Init+0x118>)
 8000cf2:	f000 fc1d 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8000cf6:	2323      	movs	r3, #35	; 0x23
 8000cf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	2300      	movs	r3, #0
 8000d04:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	1d3b      	adds	r3, r7, #4
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4826      	ldr	r0, [pc, #152]	; (8000da4 <MX_GPIO_Init+0x114>)
 8000d0c:	f000 fc10 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_BUSY_Pin */
  GPIO_InitStruct.Pin = EPD_BUSY_Pin;
 8000d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(EPD_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	4619      	mov	r1, r3
 8000d22:	4820      	ldr	r0, [pc, #128]	; (8000da4 <MX_GPIO_Init+0x114>)
 8000d24:	f000 fc04 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : EPD_DC_Pin EPD_CS_Pin */
  GPIO_InitStruct.Pin = EPD_DC_Pin|EPD_CS_Pin;
 8000d28:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8000d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	481a      	ldr	r0, [pc, #104]	; (8000da8 <MX_GPIO_Init+0x118>)
 8000d40:	f000 fbf6 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d48:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8000d56:	230a      	movs	r3, #10
 8000d58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f000 fbe5 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pin : EPD_RST_Pin */
  GPIO_InitStruct.Pin = EPD_RST_Pin;
 8000d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(EPD_RST_GPIO_Port, &GPIO_InitStruct);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d80:	f000 fbd6 	bl	8001530 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8000d84:	2303      	movs	r3, #3
 8000d86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_GPIO_Init+0x11c>)
 8000d96:	f000 fbcb 	bl	8001530 <HAL_GPIO_Init>

}
 8000d9a:	bf00      	nop
 8000d9c:	3718      	adds	r7, #24
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	48000400 	.word	0x48000400
 8000da8:	48000800 	.word	0x48000800
 8000dac:	48000c00 	.word	0x48000c00

08000db0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000db8:	1d39      	adds	r1, r7, #4
 8000dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <__io_putchar+0x20>)
 8000dc2:	f002 ff09 	bl	8003bd8 <HAL_UART_Transmit>

  return ch;
 8000dc6:	687b      	ldr	r3, [r7, #4]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000138 	.word	0x20000138

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>

08000dde <LL_AHB2_GRP1_EnableClock>:
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000de6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dfa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e34:	68fb      	ldr	r3, [r7, #12]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000e4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4013      	ands	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	bf00      	nop
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e78:	2007      	movs	r0, #7
 8000e7a:	f000 fb27 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a19      	ldr	r2, [pc, #100]	; (8000f08 <HAL_SPI_MspInit+0x84>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d12b      	bne.n	8000efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ea6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000eaa:	f7ff ffb1 	bl	8000e10 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f7ff ff95 	bl	8000dde <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f7ff ff92 	bl	8000dde <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PA9     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_SPI2;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ece:	f107 030c 	add.w	r3, r7, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <HAL_SPI_MspInit+0x88>)
 8000ed6:	f000 fb2b 	bl	8001530 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000eda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ede:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eec:	2305      	movs	r3, #5
 8000eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 fb19 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40003800 	.word	0x40003800
 8000f0c:	48000800 	.word	0x48000800

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b09c      	sub	sp, #112	; 0x70
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	2250      	movs	r2, #80	; 0x50
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f003 fbed 	bl	8004710 <memset>
  if(huart->Instance==USART1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <HAL_UART_MspInit+0x84>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d124      	bne.n	8000f8a <HAL_UART_MspInit+0x7a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f40:	2301      	movs	r3, #1
 8000f42:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000f44:	2302      	movs	r3, #2
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 ffd6 	bl	8002efe <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f58:	f7ff ff3c 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f60:	f7ff ff6f 	bl	8000e42 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	2002      	movs	r0, #2
 8000f66:	f7ff ff3a 	bl	8000dde <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f6a:	23c0      	movs	r3, #192	; 0xc0
 8000f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6e:	2302      	movs	r3, #2
 8000f70:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f72:	2300      	movs	r3, #0
 8000f74:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000f82:	4619      	mov	r1, r3
 8000f84:	4804      	ldr	r0, [pc, #16]	; (8000f98 <HAL_UART_MspInit+0x88>)
 8000f86:	f000 fad3 	bl	8001530 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f8a:	bf00      	nop
 8000f8c:	3770      	adds	r7, #112	; 0x70
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40013800 	.word	0x40013800
 8000f98:	48000400 	.word	0x48000400

08000f9c <PendSV_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fae:	f000 f98b 	bl	80012c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b086      	sub	sp, #24
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	60f8      	str	r0, [r7, #12]
 8000fbe:	60b9      	str	r1, [r7, #8]
 8000fc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	e00a      	b.n	8000fde <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fc8:	f3af 8000 	nop.w
 8000fcc:	4601      	mov	r1, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1c5a      	adds	r2, r3, #1
 8000fd2:	60ba      	str	r2, [r7, #8]
 8000fd4:	b2ca      	uxtb	r2, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	617b      	str	r3, [r7, #20]
 8000fde:	697a      	ldr	r2, [r7, #20]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	dbf0      	blt.n	8000fc8 <_read+0x12>
  }

  return len;
 8000fe6:	687b      	ldr	r3, [r7, #4]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	e009      	b.n	8001016 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fed0 	bl	8000db0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbf1      	blt.n	8001002 <_write+0x12>
  }
  return len;
 800101e:	687b      	ldr	r3, [r7, #4]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_close>:

int _close(int file)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001034:	4618      	mov	r0, r3
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001050:	605a      	str	r2, [r3, #4]
  return 0;
 8001052:	2300      	movs	r3, #0
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_isatty>:

int _isatty(int file)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001076:	b480      	push	{r7}
 8001078:	b085      	sub	sp, #20
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <_sbrk+0x5c>)
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <_sbrk+0x60>)
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a4:	4b13      	ldr	r3, [pc, #76]	; (80010f4 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ac:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <_sbrk+0x64>)
 80010ae:	4a12      	ldr	r2, [pc, #72]	; (80010f8 <_sbrk+0x68>)
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b2:	4b10      	ldr	r3, [pc, #64]	; (80010f4 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d207      	bcs.n	80010d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c0:	f003 faf4 	bl	80046ac <__errno>
 80010c4:	4603      	mov	r3, r0
 80010c6:	220c      	movs	r2, #12
 80010c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ce:	e009      	b.n	80010e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010d6:	4b07      	ldr	r3, [pc, #28]	; (80010f4 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <_sbrk+0x64>)
 80010e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e2:	68fb      	ldr	r3, [r7, #12]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20030000 	.word	0x20030000
 80010f0:	00000400 	.word	0x00000400
 80010f4:	200001cc 	.word	0x200001cc
 80010f8:	200001e8 	.word	0x200001e8

080010fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <SystemInit+0x98>)
 8001102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <SystemInit+0x98>)
 8001108:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800110c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001124:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001128:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800112a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <SystemInit+0x9c>)
 8001136:	4013      	ands	r3, r2
 8001138:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001146:	f023 0305 	bic.w	r3, r3, #5
 800114a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800114e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001156:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800115a:	f023 0301 	bic.w	r3, r3, #1
 800115e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001166:	4a0d      	ldr	r2, [pc, #52]	; (800119c <SystemInit+0xa0>)
 8001168:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <SystemInit+0xa0>)
 8001170:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800117c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001182:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00
 8001198:	faf6fefb 	.word	0xfaf6fefb
 800119c:	22041000 	.word	0x22041000

080011a0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80011a0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a4:	3304      	adds	r3, #4

080011a6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80011aa:	d3f9      	bcc.n	80011a0 <CopyDataInit>
  bx lr
 80011ac:	4770      	bx	lr

080011ae <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80011ae:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80011b0:	3004      	adds	r0, #4

080011b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80011b2:	4288      	cmp	r0, r1
  bcc FillZerobss
 80011b4:	d3fb      	bcc.n	80011ae <FillZerobss>
  bx lr
 80011b6:	4770      	bx	lr

080011b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f7ff ff9e 	bl	80010fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80011c0:	480b      	ldr	r0, [pc, #44]	; (80011f0 <LoopForever+0x6>)
 80011c2:	490c      	ldr	r1, [pc, #48]	; (80011f4 <LoopForever+0xa>)
 80011c4:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <LoopForever+0xe>)
 80011c6:	2300      	movs	r3, #0
 80011c8:	f7ff ffed 	bl	80011a6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011cc:	480b      	ldr	r0, [pc, #44]	; (80011fc <LoopForever+0x12>)
 80011ce:	490c      	ldr	r1, [pc, #48]	; (8001200 <LoopForever+0x16>)
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <LoopForever+0x1a>)
 80011d2:	2300      	movs	r3, #0
 80011d4:	f7ff ffe7 	bl	80011a6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <LoopForever+0x1e>)
 80011da:	490c      	ldr	r1, [pc, #48]	; (800120c <LoopForever+0x22>)
 80011dc:	2300      	movs	r3, #0
 80011de:	f7ff ffe8 	bl	80011b2 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011e2:	f003 fa69 	bl	80046b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011e6:	f7ff fbdf 	bl	80009a8 <main>

080011ea <LoopForever>:

LoopForever:
  b LoopForever
 80011ea:	e7fe      	b.n	80011ea <LoopForever>
  ldr   r0, =_estack
 80011ec:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80011f0:	20000008 	.word	0x20000008
 80011f4:	20000098 	.word	0x20000098
 80011f8:	080059d0 	.word	0x080059d0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80011fc:	20030000 	.word	0x20030000
 8001200:	20030000 	.word	0x20030000
 8001204:	08005a60 	.word	0x08005a60
  INIT_BSS _sbss, _ebss
 8001208:	20000098 	.word	0x20000098
 800120c:	200001e4 	.word	0x200001e4

08001210 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC1_IRQHandler>
	...

08001214 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <HAL_Init+0x3c>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <HAL_Init+0x3c>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122a:	2003      	movs	r0, #3
 800122c:	f000 f94e 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001230:	2000      	movs	r0, #0
 8001232:	f000 f80f 	bl	8001254 <HAL_InitTick>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	e001      	b.n	8001246 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001242:	f7ff fe17 	bl	8000e74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001246:	79fb      	ldrb	r3, [r7, #7]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	58004000 	.word	0x58004000

08001254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001260:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_InitTick+0x6c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d024      	beq.n	80012b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001268:	f001 fbb8 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 800126c:	4602      	mov	r2, r0
 800126e:	4b14      	ldr	r3, [pc, #80]	; (80012c0 <HAL_InitTick+0x6c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001278:	fbb3 f3f1 	udiv	r3, r3, r1
 800127c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f948 	bl	8001516 <HAL_SYSTICK_Config>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d10f      	bne.n	80012ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	d809      	bhi.n	80012a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001292:	2200      	movs	r2, #0
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129a:	f000 f922 	bl	80014e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800129e:	4a09      	ldr	r2, [pc, #36]	; (80012c4 <HAL_InitTick+0x70>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	e007      	b.n	80012b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	e004      	b.n	80012b6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	73fb      	strb	r3, [r7, #15]
 80012b0:	e001      	b.n	80012b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000030 	.word	0x20000030
 80012c4:	2000002c 	.word	0x2000002c

080012c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <HAL_IncTick+0x20>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	461a      	mov	r2, r3
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <HAL_IncTick+0x24>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4413      	add	r3, r2
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_IncTick+0x24>)
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	20000030 	.word	0x20000030
 80012ec:	200001d0 	.word	0x200001d0

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b03      	ldr	r3, [pc, #12]	; (8001304 <HAL_GetTick+0x14>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	200001d0 	.word	0x200001d0

08001308 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800130c:	4b03      	ldr	r3, [pc, #12]	; (800131c <HAL_GetTickPrio+0x14>)
 800130e:	681b      	ldr	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000002c 	.word	0x2000002c

08001320 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001328:	f7ff ffe2 	bl	80012f0 <HAL_GetTick>
 800132c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001338:	d005      	beq.n	8001346 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <HAL_Delay+0x44>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	461a      	mov	r2, r3
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	4413      	add	r3, r2
 8001344:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001346:	bf00      	nop
 8001348:	f7ff ffd2 	bl	80012f0 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	68fa      	ldr	r2, [r7, #12]
 8001354:	429a      	cmp	r2, r3
 8001356:	d8f7      	bhi.n	8001348 <HAL_Delay+0x28>
  {
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000030 	.word	0x20000030

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	60d3      	str	r3, [r2, #12]
}
 80013a0:	bf00      	nop
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	; (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
         );
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff47 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff5e 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ffb2 	bl	8001488 <SysTick_Config>
 8001524:	4603      	mov	r3, r0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001530:	b480      	push	{r7}
 8001532:	b087      	sub	sp, #28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800153e:	e14c      	b.n	80017da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	2101      	movs	r1, #1
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	4013      	ands	r3, r2
 800154e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 813e 	beq.w	80017d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b01      	cmp	r3, #1
 8001562:	d005      	beq.n	8001570 <HAL_GPIO_Init+0x40>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d130      	bne.n	80015d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68da      	ldr	r2, [r3, #12]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4313      	orrs	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	693a      	ldr	r2, [r7, #16]
 800159e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015a6:	2201      	movs	r2, #1
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4013      	ands	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	f003 0201 	and.w	r2, r3, #1
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b03      	cmp	r3, #3
 80015dc:	d017      	beq.n	800160e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68db      	ldr	r3, [r3, #12]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	2203      	movs	r2, #3
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 0303 	and.w	r3, r3, #3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d123      	bne.n	8001662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	08da      	lsrs	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3208      	adds	r2, #8
 8001622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	220f      	movs	r2, #15
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	6939      	ldr	r1, [r7, #16]
 800165e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f003 0203 	and.w	r2, r3, #3
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	f000 8098 	beq.w	80017d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80016a4:	4a54      	ldr	r2, [pc, #336]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	089b      	lsrs	r3, r3, #2
 80016aa:	3302      	adds	r3, #2
 80016ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016ce:	d019      	beq.n	8001704 <HAL_GPIO_Init+0x1d4>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x2cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d013      	beq.n	8001700 <HAL_GPIO_Init+0x1d0>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a49      	ldr	r2, [pc, #292]	; (8001800 <HAL_GPIO_Init+0x2d0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d00d      	beq.n	80016fc <HAL_GPIO_Init+0x1cc>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a48      	ldr	r2, [pc, #288]	; (8001804 <HAL_GPIO_Init+0x2d4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d007      	beq.n	80016f8 <HAL_GPIO_Init+0x1c8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a47      	ldr	r2, [pc, #284]	; (8001808 <HAL_GPIO_Init+0x2d8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d101      	bne.n	80016f4 <HAL_GPIO_Init+0x1c4>
 80016f0:	2304      	movs	r3, #4
 80016f2:	e008      	b.n	8001706 <HAL_GPIO_Init+0x1d6>
 80016f4:	2307      	movs	r3, #7
 80016f6:	e006      	b.n	8001706 <HAL_GPIO_Init+0x1d6>
 80016f8:	2303      	movs	r3, #3
 80016fa:	e004      	b.n	8001706 <HAL_GPIO_Init+0x1d6>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e002      	b.n	8001706 <HAL_GPIO_Init+0x1d6>
 8001700:	2301      	movs	r3, #1
 8001702:	e000      	b.n	8001706 <HAL_GPIO_Init+0x1d6>
 8001704:	2300      	movs	r3, #0
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	f002 0203 	and.w	r2, r2, #3
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	4093      	lsls	r3, r2
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001716:	4938      	ldr	r1, [pc, #224]	; (80017f8 <HAL_GPIO_Init+0x2c8>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001724:	4b39      	ldr	r3, [pc, #228]	; (800180c <HAL_GPIO_Init+0x2dc>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	43db      	mvns	r3, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4013      	ands	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d003      	beq.n	8001748 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001748:	4a30      	ldr	r2, [pc, #192]	; (800180c <HAL_GPIO_Init+0x2dc>)
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800174e:	4b2f      	ldr	r3, [pc, #188]	; (800180c <HAL_GPIO_Init+0x2dc>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	43db      	mvns	r3, r3
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	4013      	ands	r3, r2
 800175c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001772:	4a26      	ldr	r2, [pc, #152]	; (800180c <HAL_GPIO_Init+0x2dc>)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001778:	4b24      	ldr	r3, [pc, #144]	; (800180c <HAL_GPIO_Init+0x2dc>)
 800177a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800177e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4013      	ands	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4313      	orrs	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80017a6:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80017a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017cc:	4a0f      	ldr	r2, [pc, #60]	; (800180c <HAL_GPIO_Init+0x2dc>)
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	3301      	adds	r3, #1
 80017d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f aeab 	bne.w	8001540 <HAL_GPIO_Init+0x10>
  }
}
 80017ea:	bf00      	nop
 80017ec:	bf00      	nop
 80017ee:	371c      	adds	r7, #28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40010000 	.word	0x40010000
 80017fc:	48000400 	.word	0x48000400
 8001800:	48000800 	.word	0x48000800
 8001804:	48000c00 	.word	0x48000c00
 8001808:	48001000 	.word	0x48001000
 800180c:	58000800 	.word	0x58000800

08001810 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691a      	ldr	r2, [r3, #16]
 8001820:	887b      	ldrh	r3, [r7, #2]
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
 800182c:	e001      	b.n	8001832 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001832:	7bfb      	ldrb	r3, [r7, #15]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	460b      	mov	r3, r1
 800184a:	807b      	strh	r3, [r7, #2]
 800184c:	4613      	mov	r3, r2
 800184e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001850:	787b      	ldrb	r3, [r7, #1]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d003      	beq.n	800185e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001856:	887a      	ldrh	r2, [r7, #2]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800185c:	e002      	b.n	8001864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	58000400 	.word	0x58000400

08001890 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001894:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800189c:	4618      	mov	r0, r3
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	58000400 	.word	0x58000400

080018ac <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80018b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018be:	d101      	bne.n	80018c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80018d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	6013      	str	r3, [r2, #0]
}
 8001902:	bf00      	nop
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800191e:	d101      	bne.n	8001924 <LL_RCC_HSE_IsReady+0x18>
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <LL_RCC_HSE_IsReady+0x1a>
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001934:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	6013      	str	r3, [r2, #0]
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800194e:	b480      	push	{r7}
 8001950:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001960:	6013      	str	r3, [r2, #0]
}
 8001962:	bf00      	nop
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001970:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800197e:	d101      	bne.n	8001984 <LL_RCC_HSI_IsReady+0x18>
 8001980:	2301      	movs	r3, #1
 8001982:	e000      	b.n	8001986 <LL_RCC_HSI_IsReady+0x1a>
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001998:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	061b      	lsls	r3, r3, #24
 80019a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019aa:	4313      	orrs	r3, r2
 80019ac:	604b      	str	r3, [r1, #4]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ca:	f043 0301 	orr.w	r3, r3, #1
 80019ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019d2:	bf00      	nop
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80019e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d101      	bne.n	8001a16 <LL_RCC_HSI48_IsReady+0x18>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <LL_RCC_HSI48_IsReady+0x1a>
 8001a16:	2300      	movs	r3, #0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a76:	f043 0304 	orr.w	r3, r3, #4
 8001a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001a7e:	bf00      	nop
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a98:	f023 0304 	bic.w	r3, r3, #4
 8001a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d101      	bne.n	8001ac2 <LL_RCC_LSE_IsReady+0x18>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e000      	b.n	8001ac4 <LL_RCC_LSE_IsReady+0x1a>
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ada:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001ae6:	bf00      	nop
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8001af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b00:	f023 0301 	bic.w	r3, r3, #1
 8001b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8001b16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d101      	bne.n	8001b2a <LL_RCC_LSI1_IsReady+0x18>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <LL_RCC_LSI1_IsReady+0x1a>
 8001b2a:	2300      	movs	r3, #0
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr

08001b36 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b4e:	bf00      	nop
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8001b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b68:	f023 0304 	bic.w	r3, r3, #4
 8001b6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001b70:	bf00      	nop
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8001b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d101      	bne.n	8001b92 <LL_RCC_LSI2_IsReady+0x18>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <LL_RCC_LSI2_IsReady+0x1a>
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr

08001b9e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8001ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bae:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	6013      	str	r3, [r2, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d101      	bne.n	8001c1e <LL_RCC_MSI_IsReady+0x16>
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e000      	b.n	8001c20 <LL_RCC_MSI_IsReady+0x18>
 8001c1e:	2300      	movs	r3, #0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8001c32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	600b      	str	r3, [r1, #0]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8001c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c62:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2bb0      	cmp	r3, #176	; 0xb0
 8001c68:	d901      	bls.n	8001c6e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8001c6a:	23b0      	movs	r3, #176	; 0xb0
 8001c6c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8001c6e:	687b      	ldr	r3, [r7, #4]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	021b      	lsls	r3, r3, #8
 8001c92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f023 0203 	bic.w	r2, r3, #3
 8001cb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	608b      	str	r3, [r1, #8]
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cf8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8001d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d46:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001d4a:	f023 020f 	bic.w	r2, r3, #15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	608b      	str	r3, [r1, #8]
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001da2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001dbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ddc:	011b      	lsls	r3, r3, #4
 8001dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001e08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e48:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e6a:	d101      	bne.n	8001e70 <LL_RCC_PLL_IsReady+0x18>
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e000      	b.n	8001e72 <LL_RCC_PLL_IsReady+0x1a>
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001e9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001eb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001ee2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ef0:	d101      	bne.n	8001ef6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e000      	b.n	8001ef8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001f06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f16:	d101      	bne.n	8001f1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e000      	b.n	8001f1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f30:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f3c:	d101      	bne.n	8001f42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e000      	b.n	8001f44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001f42:	2300      	movs	r3, #0
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f60:	d101      	bne.n	8001f66 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001f84:	d101      	bne.n	8001f8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f98:	b590      	push	{r4, r7, lr}
 8001f9a:	b08d      	sub	sp, #52	; 0x34
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e363      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 808d 	beq.w	80020d2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fb8:	f7ff fe89 	bl	8001cce <LL_RCC_GetSysClkSource>
 8001fbc:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fbe:	f7ff ff82 	bl	8001ec6 <LL_RCC_PLL_GetMainSource>
 8001fc2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x3e>
 8001fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fcc:	2b0c      	cmp	r3, #12
 8001fce:	d147      	bne.n	8002060 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8001fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d144      	bne.n	8002060 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e347      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8001fe6:	f7ff fe34 	bl	8001c52 <LL_RCC_MSI_GetRange>
 8001fea:	4603      	mov	r3, r0
 8001fec:	429c      	cmp	r4, r3
 8001fee:	d914      	bls.n	800201a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f000 fd31 	bl	8002a5c <RCC_SetFlashLatencyFromMSIRange>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e336      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe0e 	bl	8001c2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fe32 	bl	8001c7c <LL_RCC_MSI_SetCalibTrimming>
 8002018:	e013      	b.n	8002042 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fe03 	bl	8001c2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff fe27 	bl	8001c7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	4618      	mov	r0, r3
 8002034:	f000 fd12 	bl	8002a5c <RCC_SetFlashLatencyFromMSIRange>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e317      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002042:	f000 fccb 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002046:	4603      	mov	r3, r0
 8002048:	4aa4      	ldr	r2, [pc, #656]	; (80022dc <HAL_RCC_OscConfig+0x344>)
 800204a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800204c:	4ba4      	ldr	r3, [pc, #656]	; (80022e0 <HAL_RCC_OscConfig+0x348>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff f8ff 	bl	8001254 <HAL_InitTick>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d039      	beq.n	80020d0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e308      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69db      	ldr	r3, [r3, #28]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d01e      	beq.n	80020a6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002068:	f7ff fdb0 	bl	8001bcc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800206c:	f7ff f940 	bl	80012f0 <HAL_GetTick>
 8002070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002074:	f7ff f93c 	bl	80012f0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e2f5      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002086:	f7ff fdbf 	bl	8001c08 <LL_RCC_MSI_IsReady>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f1      	beq.n	8002074 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fdc8 	bl	8001c2a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fdec 	bl	8001c7c <LL_RCC_MSI_SetCalibTrimming>
 80020a4:	e015      	b.n	80020d2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020a6:	f7ff fda0 	bl	8001bea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020aa:	f7ff f921 	bl	80012f0 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020b2:	f7ff f91d 	bl	80012f0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e2d6      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80020c4:	f7ff fda0 	bl	8001c08 <LL_RCC_MSI_IsReady>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f1      	bne.n	80020b2 <HAL_RCC_OscConfig+0x11a>
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80020d0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d047      	beq.n	800216e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020de:	f7ff fdf6 	bl	8001cce <LL_RCC_GetSysClkSource>
 80020e2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e4:	f7ff feef 	bl	8001ec6 <LL_RCC_PLL_GetMainSource>
 80020e8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x164>
 80020f0:	6a3b      	ldr	r3, [r7, #32]
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d134      	bne.n	800216e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e2b4      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002110:	d102      	bne.n	8002118 <HAL_RCC_OscConfig+0x180>
 8002112:	f7ff fbdd 	bl	80018d0 <LL_RCC_HSE_Enable>
 8002116:	e001      	b.n	800211c <HAL_RCC_OscConfig+0x184>
 8002118:	f7ff fbe9 	bl	80018ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d012      	beq.n	800214a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002124:	f7ff f8e4 	bl	80012f0 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f8e0 	bl	80012f0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	; 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e299      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800213e:	f7ff fbe5 	bl	800190c <LL_RCC_HSE_IsReady>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f1      	beq.n	800212c <HAL_RCC_OscConfig+0x194>
 8002148:	e011      	b.n	800216e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214a:	f7ff f8d1 	bl	80012f0 <HAL_GetTick>
 800214e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002152:	f7ff f8cd 	bl	80012f0 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b64      	cmp	r3, #100	; 0x64
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e286      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002164:	f7ff fbd2 	bl	800190c <LL_RCC_HSE_IsReady>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f1      	bne.n	8002152 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d04c      	beq.n	8002214 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800217a:	f7ff fda8 	bl	8001cce <LL_RCC_GetSysClkSource>
 800217e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002180:	f7ff fea1 	bl	8001ec6 <LL_RCC_PLL_GetMainSource>
 8002184:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002186:	69bb      	ldr	r3, [r7, #24]
 8002188:	2b04      	cmp	r3, #4
 800218a:	d005      	beq.n	8002198 <HAL_RCC_OscConfig+0x200>
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b0c      	cmp	r3, #12
 8002190:	d10e      	bne.n	80021b0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2b02      	cmp	r3, #2
 8002196:	d10b      	bne.n	80021b0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e266      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fbf1 	bl	8001990 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80021ae:	e031      	b.n	8002214 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d019      	beq.n	80021ec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b8:	f7ff fbba 	bl	8001930 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021bc:	f7ff f898 	bl	80012f0 <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021c4:	f7ff f894 	bl	80012f0 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e24d      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80021d6:	f7ff fbc9 	bl	800196c <LL_RCC_HSI_IsReady>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0f1      	beq.n	80021c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fbd3 	bl	8001990 <LL_RCC_HSI_SetCalibTrimming>
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021ec:	f7ff fbaf 	bl	800194e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f87e 	bl	80012f0 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021f8:	f7ff f87a 	bl	80012f0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e233      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800220a:	f7ff fbaf 	bl	800196c <LL_RCC_HSI_IsReady>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f1      	bne.n	80021f8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80a3 	beq.w	8002374 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d076      	beq.n	8002324 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b00      	cmp	r3, #0
 8002240:	d046      	beq.n	80022d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8002242:	f7ff fc66 	bl	8001b12 <LL_RCC_LSI1_IsReady>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d113      	bne.n	8002274 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800224c:	f7ff fc3f 	bl	8001ace <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002250:	f7ff f84e 	bl	80012f0 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002258:	f7ff f84a 	bl	80012f0 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e203      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800226a:	f7ff fc52 	bl	8001b12 <LL_RCC_LSI1_IsReady>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f1      	beq.n	8002258 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8002274:	f7ff fc5f 	bl	8001b36 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f83a 	bl	80012f0 <HAL_GetTick>
 800227c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002280:	f7ff f836 	bl	80012f0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b03      	cmp	r3, #3
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e1ef      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8002292:	f7ff fc72 	bl	8001b7a <LL_RCC_LSI2_IsReady>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f1      	beq.n	8002280 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fc7c 	bl	8001b9e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80022a6:	f7ff fc23 	bl	8001af0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7ff f821 	bl	80012f0 <HAL_GetTick>
 80022ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022b2:	f7ff f81d 	bl	80012f0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e1d6      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80022c4:	f7ff fc25 	bl	8001b12 <LL_RCC_LSI1_IsReady>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f1      	bne.n	80022b2 <HAL_RCC_OscConfig+0x31a>
 80022ce:	e051      	b.n	8002374 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80022d0:	f7ff fbfd 	bl	8001ace <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff f80c 	bl	80012f0 <HAL_GetTick>
 80022d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022da:	e00c      	b.n	80022f6 <HAL_RCC_OscConfig+0x35e>
 80022dc:	20000028 	.word	0x20000028
 80022e0:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80022e4:	f7ff f804 	bl	80012f0 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e1bd      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80022f6:	f7ff fc0c 	bl	8001b12 <LL_RCC_LSI1_IsReady>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f1      	beq.n	80022e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8002300:	f7ff fc2a 	bl	8001b58 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002304:	e008      	b.n	8002318 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002306:	f7fe fff3 	bl	80012f0 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b03      	cmp	r3, #3
 8002312:	d901      	bls.n	8002318 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	e1ac      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8002318:	f7ff fc2f 	bl	8001b7a <LL_RCC_LSI2_IsReady>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f1      	bne.n	8002306 <HAL_RCC_OscConfig+0x36e>
 8002322:	e027      	b.n	8002374 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8002324:	f7ff fc18 	bl	8001b58 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7fe ffe2 	bl	80012f0 <HAL_GetTick>
 800232c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8002330:	f7fe ffde 	bl	80012f0 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b03      	cmp	r3, #3
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e197      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8002342:	f7ff fc1a 	bl	8001b7a <LL_RCC_LSI2_IsReady>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f1      	bne.n	8002330 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800234c:	f7ff fbd0 	bl	8001af0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002350:	f7fe ffce 	bl	80012f0 <HAL_GetTick>
 8002354:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8002358:	f7fe ffca 	bl	80012f0 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e183      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800236a:	f7ff fbd2 	bl	8001b12 <LL_RCC_LSI1_IsReady>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f1      	bne.n	8002358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d05b      	beq.n	8002438 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002380:	4ba7      	ldr	r3, [pc, #668]	; (8002620 <HAL_RCC_OscConfig+0x688>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002388:	2b00      	cmp	r3, #0
 800238a:	d114      	bne.n	80023b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800238c:	f7ff fa70 	bl	8001870 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002390:	f7fe ffae 	bl	80012f0 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe ffaa 	bl	80012f0 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e163      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	4b9d      	ldr	r3, [pc, #628]	; (8002620 <HAL_RCC_OscConfig+0x688>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d0f0      	beq.n	8002398 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d102      	bne.n	80023c4 <HAL_RCC_OscConfig+0x42c>
 80023be:	f7ff fb30 	bl	8001a22 <LL_RCC_LSE_Enable>
 80023c2:	e00c      	b.n	80023de <HAL_RCC_OscConfig+0x446>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	d104      	bne.n	80023d6 <HAL_RCC_OscConfig+0x43e>
 80023cc:	f7ff fb4b 	bl	8001a66 <LL_RCC_LSE_EnableBypass>
 80023d0:	f7ff fb27 	bl	8001a22 <LL_RCC_LSE_Enable>
 80023d4:	e003      	b.n	80023de <HAL_RCC_OscConfig+0x446>
 80023d6:	f7ff fb35 	bl	8001a44 <LL_RCC_LSE_Disable>
 80023da:	f7ff fb55 	bl	8001a88 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d014      	beq.n	8002410 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f7fe ff83 	bl	80012f0 <HAL_GetTick>
 80023ea:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe ff7f 	bl	80012f0 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e136      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002404:	f7ff fb51 	bl	8001aaa <LL_RCC_LSE_IsReady>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ef      	beq.n	80023ee <HAL_RCC_OscConfig+0x456>
 800240e:	e013      	b.n	8002438 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7fe ff6e 	bl	80012f0 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7fe ff6a 	bl	80012f0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	; 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e121      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800242e:	f7ff fb3c 	bl	8001aaa <LL_RCC_LSE_IsReady>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1ef      	bne.n	8002418 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002440:	2b00      	cmp	r3, #0
 8002442:	d02c      	beq.n	800249e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d014      	beq.n	8002476 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800244c:	f7ff fab5 	bl	80019ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002450:	f7fe ff4e 	bl	80012f0 <HAL_GetTick>
 8002454:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002458:	f7fe ff4a 	bl	80012f0 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e103      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800246a:	f7ff fac8 	bl	80019fe <LL_RCC_HSI48_IsReady>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f1      	beq.n	8002458 <HAL_RCC_OscConfig+0x4c0>
 8002474:	e013      	b.n	800249e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002476:	f7ff fab1 	bl	80019dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247a:	f7fe ff39 	bl	80012f0 <HAL_GetTick>
 800247e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002480:	e008      	b.n	8002494 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002482:	f7fe ff35 	bl	80012f0 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d901      	bls.n	8002494 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0ee      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8002494:	f7ff fab3 	bl	80019fe <LL_RCC_HSI48_IsReady>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f1      	bne.n	8002482 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80e4 	beq.w	8002670 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a8:	f7ff fc11 	bl	8001cce <LL_RCC_GetSysClkSource>
 80024ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	f040 80b4 	bne.w	8002628 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0203 	and.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d123      	bne.n	8002516 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d11c      	bne.n	8002516 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d114      	bne.n	8002516 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d10d      	bne.n	8002516 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d106      	bne.n	8002516 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d05d      	beq.n	80025d2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d058      	beq.n	80025ce <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800251c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0a1      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800252e:	f7ff fc84 	bl	8001e3a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002532:	f7fe fedd 	bl	80012f0 <HAL_GetTick>
 8002536:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002538:	e008      	b.n	800254c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800253a:	f7fe fed9 	bl	80012f0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e092      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800254c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1ef      	bne.n	800253a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800255a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_RCC_OscConfig+0x68c>)
 8002562:	4013      	ands	r3, r2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800256c:	4311      	orrs	r1, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002572:	0212      	lsls	r2, r2, #8
 8002574:	4311      	orrs	r1, r2
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800257a:	4311      	orrs	r1, r2
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002580:	4311      	orrs	r1, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002586:	430a      	orrs	r2, r1
 8002588:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800258c:	4313      	orrs	r3, r2
 800258e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002590:	f7ff fc44 	bl	8001e1c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800259e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a4:	f7fe fea4 	bl	80012f0 <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7fe fea0 	bl	80012f0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e059      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d0ef      	beq.n	80025ac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	e050      	b.n	8002670 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04f      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d147      	bne.n	8002670 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80025e0:	f7ff fc1c 	bl	8001e1c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80025f4:	f7fe fe7c 	bl	80012f0 <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fe78 	bl	80012f0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e031      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCC_OscConfig+0x664>
 800261c:	e028      	b.n	8002670 <HAL_RCC_OscConfig+0x6d8>
 800261e:	bf00      	nop
 8002620:	58000400 	.word	0x58000400
 8002624:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d01e      	beq.n	800266c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262e:	f7ff fc04 	bl	8001e3a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f7fe fe5d 	bl	80012f0 <HAL_GetTick>
 8002636:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263a:	f7fe fe59 	bl	80012f0 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e012      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <HAL_RCC_OscConfig+0x6e4>)
 8002666:	4013      	ands	r3, r2
 8002668:	60cb      	str	r3, [r1, #12]
 800266a:	e001      	b.n	8002670 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3734      	adds	r7, #52	; 0x34
 8002676:	46bd      	mov	sp, r7
 8002678:	bd90      	pop	{r4, r7, pc}
 800267a:	bf00      	nop
 800267c:	eefefffc 	.word	0xeefefffc

08002680 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e12d      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002694:	4b98      	ldr	r3, [pc, #608]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	683a      	ldr	r2, [r7, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d91b      	bls.n	80026da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a2:	4b95      	ldr	r3, [pc, #596]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f023 0207 	bic.w	r2, r3, #7
 80026aa:	4993      	ldr	r1, [pc, #588]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b2:	f7fe fe1d 	bl	80012f0 <HAL_GetTick>
 80026b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80026ba:	f7fe fe19 	bl	80012f0 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e111      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026cc:	4b8a      	ldr	r3, [pc, #552]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d1ef      	bne.n	80026ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d016      	beq.n	8002714 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fafb 	bl	8001ce6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80026f0:	f7fe fdfe 	bl	80012f0 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80026f8:	f7fe fdfa 	bl	80012f0 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e0f2      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800270a:	f7ff fbe8 	bl	8001ede <LL_RCC_IsActiveFlag_HPRE>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0f1      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d016      	beq.n	800274e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff faf2 	bl	8001d0e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800272a:	f7fe fde1 	bl	80012f0 <HAL_GetTick>
 800272e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002732:	f7fe fddd 	bl	80012f0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0d5      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002744:	f7ff fbdd 	bl	8001f02 <LL_RCC_IsActiveFlag_C2HPRE>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f1      	beq.n	8002732 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d016      	beq.n	8002788 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff faeb 	bl	8001d3a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002764:	f7fe fdc4 	bl	80012f0 <HAL_GetTick>
 8002768:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800276c:	f7fe fdc0 	bl	80012f0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e0b8      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800277e:	f7ff fbd3 	bl	8001f28 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f1      	beq.n	800276c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d016      	beq.n	80027c2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fae5 	bl	8001d68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800279e:	f7fe fda7 	bl	80012f0 <HAL_GetTick>
 80027a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027a4:	e008      	b.n	80027b8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027a6:	f7fe fda3 	bl	80012f0 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d901      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80027b4:	2303      	movs	r3, #3
 80027b6:	e09b      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80027b8:	f7ff fbc9 	bl	8001f4e <LL_RCC_IsActiveFlag_PPRE1>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d0f1      	beq.n	80027a6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d017      	beq.n	80027fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691b      	ldr	r3, [r3, #16]
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff fadb 	bl	8001d90 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80027da:	f7fe fd89 	bl	80012f0 <HAL_GetTick>
 80027de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027e0:	e008      	b.n	80027f4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80027e2:	f7fe fd85 	bl	80012f0 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e07d      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80027f4:	f7ff fbbd 	bl	8001f72 <LL_RCC_IsActiveFlag_PPRE2>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f1      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b00      	cmp	r3, #0
 8002808:	d043      	beq.n	8002892 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	2b02      	cmp	r3, #2
 8002810:	d106      	bne.n	8002820 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002812:	f7ff f87b 	bl	800190c <LL_RCC_HSE_IsReady>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d11e      	bne.n	800285a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e067      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b03      	cmp	r3, #3
 8002826:	d106      	bne.n	8002836 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002828:	f7ff fb16 	bl	8001e58 <LL_RCC_PLL_IsReady>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e05c      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d106      	bne.n	800284c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800283e:	f7ff f9e3 	bl	8001c08 <LL_RCC_MSI_IsReady>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e051      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800284c:	f7ff f88e 	bl	800196c <LL_RCC_HSI_IsReady>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e04a      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fa21 	bl	8001ca6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002864:	f7fe fd44 	bl	80012f0 <HAL_GetTick>
 8002868:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800286a:	e00a      	b.n	8002882 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286c:	f7fe fd40 	bl	80012f0 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	f241 3288 	movw	r2, #5000	; 0x1388
 800287a:	4293      	cmp	r3, r2
 800287c:	d901      	bls.n	8002882 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e036      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002882:	f7ff fa24 	bl	8001cce <LL_RCC_GetSysClkSource>
 8002886:	4602      	mov	r2, r0
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	429a      	cmp	r2, r3
 8002890:	d1ec      	bne.n	800286c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002892:	4b19      	ldr	r3, [pc, #100]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d21b      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f023 0207 	bic.w	r2, r3, #7
 80028a8:	4913      	ldr	r1, [pc, #76]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe fd1e 	bl	80012f0 <HAL_GetTick>
 80028b4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80028b8:	f7fe fd1a 	bl	80012f0 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e012      	b.n	80028f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCC_ClockConfig+0x278>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d1ef      	bne.n	80028b8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028d8:	f000 f880 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 80028dc:	4603      	mov	r3, r0
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_RCC_ClockConfig+0x27c>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80028e2:	f7fe fd11 	bl	8001308 <HAL_GetTickPrio>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe fcb3 	bl	8001254 <HAL_InitTick>
 80028ee:	4603      	mov	r3, r0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3710      	adds	r7, #16
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	58004000 	.word	0x58004000
 80028fc:	20000028 	.word	0x20000028

08002900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002906:	f7ff f9e2 	bl	8001cce <LL_RCC_GetSysClkSource>
 800290a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002912:	f7ff f99e 	bl	8001c52 <LL_RCC_MSI_GetRange>
 8002916:	4603      	mov	r3, r0
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	4a2b      	ldr	r2, [pc, #172]	; (80029cc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	e04b      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d102      	bne.n	8002934 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	e045      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b08      	cmp	r3, #8
 8002938:	d10a      	bne.n	8002950 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800293a:	f7fe ffb7 	bl	80018ac <LL_RCC_HSE_IsEnabledDiv2>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d102      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002944:	4b23      	ldr	r3, [pc, #140]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	e03a      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800294a:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	e037      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002950:	f7ff fab9 	bl	8001ec6 <LL_RCC_PLL_GetMainSource>
 8002954:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d003      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x64>
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x6a>
 8002962:	e00d      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002966:	60bb      	str	r3, [r7, #8]
        break;
 8002968:	e015      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800296a:	f7fe ff9f 	bl	80018ac <LL_RCC_HSE_IsEnabledDiv2>
 800296e:	4603      	mov	r3, r0
 8002970:	2b01      	cmp	r3, #1
 8002972:	d102      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002974:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002976:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002978:	e00d      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800297a:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xd8>)
 800297c:	60bb      	str	r3, [r7, #8]
        break;
 800297e:	e00a      	b.n	8002996 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8002980:	f7ff f967 	bl	8001c52 <LL_RCC_MSI_GetRange>
 8002984:	4603      	mov	r3, r0
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800298e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002992:	60bb      	str	r3, [r7, #8]
        break;
 8002994:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8002996:	f7ff fa71 	bl	8001e7c <LL_RCC_PLL_GetN>
 800299a:	4602      	mov	r2, r0
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	fb03 f402 	mul.w	r4, r3, r2
 80029a2:	f7ff fa84 	bl	8001eae <LL_RCC_PLL_GetDivider>
 80029a6:	4603      	mov	r3, r0
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	3301      	adds	r3, #1
 80029ac:	fbb4 f4f3 	udiv	r4, r4, r3
 80029b0:	f7ff fa71 	bl	8001e96 <LL_RCC_PLL_GetR>
 80029b4:	4603      	mov	r3, r0
 80029b6:	0f5b      	lsrs	r3, r3, #29
 80029b8:	3301      	adds	r3, #1
 80029ba:	fbb4 f3f3 	udiv	r3, r4, r3
 80029be:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80029c0:	68fb      	ldr	r3, [r7, #12]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd90      	pop	{r4, r7, pc}
 80029ca:	bf00      	nop
 80029cc:	080058c0 	.word	0x080058c0
 80029d0:	00f42400 	.word	0x00f42400
 80029d4:	005b8d80 	.word	0x005b8d80
 80029d8:	00b71b00 	.word	0x00b71b00

080029dc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029dc:	b598      	push	{r3, r4, r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80029e0:	f7ff ff8e 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 80029e4:	4604      	mov	r4, r0
 80029e6:	f7ff f9e7 	bl	8001db8 <LL_RCC_GetAHBPrescaler>
 80029ea:	4603      	mov	r3, r0
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	4a03      	ldr	r2, [pc, #12]	; (8002a00 <HAL_RCC_GetHCLKFreq+0x24>)
 80029f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029f8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd98      	pop	{r3, r4, r7, pc}
 8002a00:	08005860 	.word	0x08005860

08002a04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a04:	b598      	push	{r3, r4, r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a08:	f7ff ffe8 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a0c:	4604      	mov	r4, r0
 8002a0e:	f7ff f9ed 	bl	8001dec <LL_RCC_GetAPB1Prescaler>
 8002a12:	4603      	mov	r3, r0
 8002a14:	0a1b      	lsrs	r3, r3, #8
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a20:	f003 031f 	and.w	r3, r3, #31
 8002a24:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	bd98      	pop	{r3, r4, r7, pc}
 8002a2c:	080058a0 	.word	0x080058a0

08002a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a30:	b598      	push	{r3, r4, r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002a34:	f7ff ffd2 	bl	80029dc <HAL_RCC_GetHCLKFreq>
 8002a38:	4604      	mov	r4, r0
 8002a3a:	f7ff f9e3 	bl	8001e04 <LL_RCC_GetAPB2Prescaler>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	0adb      	lsrs	r3, r3, #11
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	4a04      	ldr	r2, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	bd98      	pop	{r3, r4, r7, pc}
 8002a58:	080058a0 	.word	0x080058a0

08002a5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2bb0      	cmp	r3, #176	; 0xb0
 8002a68:	d903      	bls.n	8002a72 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8002a6a:	4b15      	ldr	r3, [pc, #84]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	e007      	b.n	8002a82 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	4a11      	ldr	r2, [pc, #68]	; (8002ac0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8002a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8002a82:	f7ff f9a5 	bl	8001dd0 <LL_RCC_GetAHB4Prescaler>
 8002a86:	4603      	mov	r3, r0
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	4a0d      	ldr	r2, [pc, #52]	; (8002ac4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8002a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9a:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ac8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	0c9c      	lsrs	r4, r3, #18
 8002aa6:	f7fe fef3 	bl	8001890 <HAL_PWREx_GetVoltageRange>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	4620      	mov	r0, r4
 8002ab0:	f000 f80c 	bl	8002acc <RCC_SetFlashLatency>
 8002ab4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd90      	pop	{r4, r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	080058c0 	.word	0x080058c0
 8002ac4:	08005860 	.word	0x08005860
 8002ac8:	431bde83 	.word	0x431bde83

08002acc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002acc:	b590      	push	{r4, r7, lr}
 8002ace:	b093      	sub	sp, #76	; 0x4c
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8002ad6:	4b37      	ldr	r3, [pc, #220]	; (8002bb4 <RCC_SetFlashLatency+0xe8>)
 8002ad8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002adc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ade:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <RCC_SetFlashLatency+0xec>)
 8002ae4:	f107 031c 	add.w	r3, r7, #28
 8002ae8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8002aee:	4b33      	ldr	r3, [pc, #204]	; (8002bbc <RCC_SetFlashLatency+0xf0>)
 8002af0:	f107 040c 	add.w	r4, r7, #12
 8002af4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002afa:	2300      	movs	r3, #0
 8002afc:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d11a      	bne.n	8002b3c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b06:	2300      	movs	r3, #0
 8002b08:	643b      	str	r3, [r7, #64]	; 0x40
 8002b0a:	e013      	b.n	8002b34 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	3348      	adds	r3, #72	; 0x48
 8002b12:	443b      	add	r3, r7
 8002b14:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d807      	bhi.n	8002b2e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3348      	adds	r3, #72	; 0x48
 8002b24:	443b      	add	r3, r7
 8002b26:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b2a:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b2c:	e020      	b.n	8002b70 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b30:	3301      	adds	r3, #1
 8002b32:	643b      	str	r3, [r7, #64]	; 0x40
 8002b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	d9e8      	bls.n	8002b0c <RCC_SetFlashLatency+0x40>
 8002b3a:	e019      	b.n	8002b70 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b40:	e013      	b.n	8002b6a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3348      	adds	r3, #72	; 0x48
 8002b48:	443b      	add	r3, r7
 8002b4a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d807      	bhi.n	8002b64 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	3348      	adds	r3, #72	; 0x48
 8002b5a:	443b      	add	r3, r7
 8002b5c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002b60:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8002b62:	e005      	b.n	8002b70 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b66:	3301      	adds	r3, #1
 8002b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d9e8      	bls.n	8002b42 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <RCC_SetFlashLatency+0xf4>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	4911      	ldr	r1, [pc, #68]	; (8002bc0 <RCC_SetFlashLatency+0xf4>)
 8002b7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002b80:	f7fe fbb6 	bl	80012f0 <HAL_GetTick>
 8002b84:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b86:	e008      	b.n	8002b9a <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b88:	f7fe fbb2 	bl	80012f0 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e007      	b.n	8002baa <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002b9a:	4b09      	ldr	r3, [pc, #36]	; (8002bc0 <RCC_SetFlashLatency+0xf4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1ef      	bne.n	8002b88 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	374c      	adds	r7, #76	; 0x4c
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	08005814 	.word	0x08005814
 8002bb8:	08005824 	.word	0x08005824
 8002bbc:	08005830 	.word	0x08005830
 8002bc0:	58004000 	.word	0x58004000

08002bc4 <LL_RCC_LSE_IsEnabled>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8002bc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <LL_RCC_LSE_IsEnabled+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_RCC_LSE_IsEnabled+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_RCC_LSE_IsReady>:
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002bec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d101      	bne.n	8002c00 <LL_RCC_LSE_IsReady+0x18>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <LL_RCC_LSE_IsReady+0x1a>
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <LL_RCC_SetRFWKPClockSource>:
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8002c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_RCC_SetSMPSClockSource>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8002c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f023 0203 	bic.w	r2, r3, #3
 8002c4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_RCC_SetSMPSPrescaler>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8002c68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_RCC_SetUSARTClockSource>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8002c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	f023 0203 	bic.w	r2, r3, #3
 8002c9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr

08002cb4 <LL_RCC_SetLPUARTClockSource>:
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002cbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cc8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <LL_RCC_SetI2CClockSource>:
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002ce8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cec:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_RCC_SetLPTIMClockSource>:
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d26:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0c1b      	lsrs	r3, r3, #16
 8002d2e:	041b      	lsls	r3, r3, #16
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	041b      	lsls	r3, r3, #16
 8002d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d42:	bf00      	nop
 8002d44:	370c      	adds	r7, #12
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr

08002d4e <LL_RCC_SetSAIClockSource>:
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b083      	sub	sp, #12
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8002d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr

08002d7a <LL_RCC_SetRNGClockSource>:
{
 8002d7a:	b480      	push	{r7}
 8002d7c:	b083      	sub	sp, #12
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8002d82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <LL_RCC_SetCLK48ClockSource>:
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8002dae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <LL_RCC_SetUSBClockSource>:
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ffe3 	bl	8002da6 <LL_RCC_SetCLK48ClockSource>
}
 8002de0:	bf00      	nop
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <LL_RCC_SetADCClockSource>:
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr

08002e14 <LL_RCC_SetRTCClockSource>:
{
 8002e14:	b480      	push	{r7}
 8002e16:	b083      	sub	sp, #12
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002e1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_RCC_GetRTCClockSource>:
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_RCC_ForceBackupDomainReset>:
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e72:	bf00      	nop
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <LL_RCC_ReleaseBackupDomainReset>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002e94:	bf00      	nop
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <LL_RCC_PLLSAI1_Enable>:
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002eb0:	6013      	str	r3, [r2, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_RCC_PLLSAI1_Disable>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8002ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ece:	6013      	str	r3, [r2, #0]
}
 8002ed0:	bf00      	nop
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <LL_RCC_PLLSAI1_IsReady>:
{
 8002eda:	b480      	push	{r7}
 8002edc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8002ede:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ee8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eec:	d101      	bne.n	8002ef2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e000      	b.n	8002ef4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002efe:	b580      	push	{r7, lr}
 8002f00:	b088      	sub	sp, #32
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8002f06:	2300      	movs	r3, #0
 8002f08:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d034      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f22:	d021      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002f24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002f28:	d81b      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f2e:	d01d      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8002f30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002f34:	d815      	bhi.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f3e:	d110      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8002f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f4e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f50:	e00d      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3304      	adds	r3, #4
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 f947 	bl	80031ea <RCCEx_PLLSAI1_ConfigNP>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002f60:	e005      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	77fb      	strb	r3, [r7, #31]
        break;
 8002f66:	e002      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f68:	bf00      	nop
 8002f6a:	e000      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8002f6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff fee8 	bl	8002d4e <LL_RCC_SetSAIClockSource>
 8002f7e:	e001      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f80:	7ffb      	ldrb	r3, [r7, #31]
 8002f82:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d046      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8002f90:	f7ff ff56 	bl	8002e40 <LL_RCC_GetRTCClockSource>
 8002f94:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d03c      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002fa0:	f7fe fc66 	bl	8001870 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d105      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff ff30 	bl	8002e14 <LL_RCC_SetRTCClockSource>
 8002fb4:	e02e      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8002fc0:	f7ff ff4b 	bl	8002e5a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8002fc4:	f7ff ff5a 	bl	8002e7c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8002fd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8002fe0:	f7ff fdf0 	bl	8002bc4 <LL_RCC_LSE_IsEnabled>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d114      	bne.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fea:	f7fe f981 	bl	80012f0 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8002ff0:	e00b      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ff2:	f7fe f97d 	bl	80012f0 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003000:	4293      	cmp	r3, r2
 8003002:	d902      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	77fb      	strb	r3, [r7, #31]
              break;
 8003008:	e004      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800300a:	f7ff fded 	bl	8002be8 <LL_RCC_LSE_IsReady>
 800300e:	4603      	mov	r3, r0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d1ee      	bne.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8003014:	7ffb      	ldrb	r3, [r7, #31]
 8003016:	77bb      	strb	r3, [r7, #30]
 8003018:	e001      	b.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800301a:	7ffb      	ldrb	r3, [r7, #31]
 800301c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	2b00      	cmp	r3, #0
 8003028:	d004      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	4618      	mov	r0, r3
 8003030:	f7ff fe2a 	bl	8002c88 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d004      	beq.n	800304a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	4618      	mov	r0, r3
 8003046:	f7ff fe35 	bl	8002cb4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d004      	beq.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fe5d 	bl	8002d1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0320 	and.w	r3, r3, #32
 8003068:	2b00      	cmp	r3, #0
 800306a:	d004      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff fe52 	bl	8002d1a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d004      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fe2a 	bl	8002ce0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d004      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe1f 	bl	8002ce0 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d022      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff fe8d 	bl	8002dd2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c0:	d107      	bne.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80030c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030d0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3304      	adds	r3, #4
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f8dd 	bl	80032a0 <RCCEx_PLLSAI1_ConfigNQ>
 80030e6:	4603      	mov	r3, r0
 80030e8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80030ea:	7ffb      	ldrb	r3, [r7, #31]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80030f0:	7ffb      	ldrb	r3, [r7, #31]
 80030f2:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d008      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800310e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003112:	d003      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	2b00      	cmp	r3, #0
 800311a:	d105      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	4618      	mov	r0, r3
 8003122:	f7ff fe2a 	bl	8002d7a <LL_RCC_SetRNGClockSource>
 8003126:	e00a      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	2000      	movs	r0, #0
 8003134:	f7ff fe21 	bl	8002d7a <LL_RCC_SetRNGClockSource>
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f7ff fe34 	bl	8002da6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003142:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8003146:	d107      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003152:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003156:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	2b00      	cmp	r3, #0
 8003162:	d022      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fe3d 	bl	8002de8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003176:	d107      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003186:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800318c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003190:	d10b      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3304      	adds	r3, #4
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f8dd 	bl	8003356 <RCCEx_PLLSAI1_ConfigNR>
 800319c:	4603      	mov	r3, r0
 800319e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80031a0:	7ffb      	ldrb	r3, [r7, #31]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fd26 	bl	8002c0c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d009      	beq.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fd45 	bl	8002c60 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fd2c 	bl	8002c38 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80031e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80031f6:	f7ff fe61 	bl	8002ebc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031fa:	f7fe f879 	bl	80012f0 <HAL_GetTick>
 80031fe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003200:	e009      	b.n	8003216 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003202:	f7fe f875 	bl	80012f0 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d902      	bls.n	8003216 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e004      	b.n	8003220 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003216:	f7ff fe60 	bl	8002eda <LL_RCC_PLLSAI1_IsReady>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1f0      	bne.n	8003202 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8003220:	7bfb      	ldrb	r3, [r7, #15]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d137      	bne.n	8003296 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	021b      	lsls	r3, r3, #8
 8003236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800323a:	4313      	orrs	r3, r2
 800323c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800323e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003250:	4313      	orrs	r3, r2
 8003252:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8003254:	f7ff fe23 	bl	8002e9e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003258:	f7fe f84a 	bl	80012f0 <HAL_GetTick>
 800325c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800325e:	e009      	b.n	8003274 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003260:	f7fe f846 	bl	80012f0 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d902      	bls.n	8003274 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	73fb      	strb	r3, [r7, #15]
        break;
 8003272:	e004      	b.n	800327e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003274:	f7ff fe31 	bl	8002eda <LL_RCC_PLLSAI1_IsReady>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d1f0      	bne.n	8003260 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800327e:	7bfb      	ldrb	r3, [r7, #15]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d108      	bne.n	8003296 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8003284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003288:	691a      	ldr	r2, [r3, #16]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003292:	4313      	orrs	r3, r2
 8003294:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003296:	7bfb      	ldrb	r3, [r7, #15]
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80032ac:	f7ff fe06 	bl	8002ebc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032b0:	f7fe f81e 	bl	80012f0 <HAL_GetTick>
 80032b4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032b6:	e009      	b.n	80032cc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032b8:	f7fe f81a 	bl	80012f0 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ca:	e004      	b.n	80032d6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80032cc:	f7ff fe05 	bl	8002eda <LL_RCC_PLLSAI1_IsReady>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d137      	bne.n	800334c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80032dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80032f0:	4313      	orrs	r3, r2
 80032f2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003306:	4313      	orrs	r3, r2
 8003308:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800330a:	f7ff fdc8 	bl	8002e9e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330e:	f7fd ffef 	bl	80012f0 <HAL_GetTick>
 8003312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8003314:	e009      	b.n	800332a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003316:	f7fd ffeb 	bl	80012f0 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d902      	bls.n	800332a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	73fb      	strb	r3, [r7, #15]
        break;
 8003328:	e004      	b.n	8003334 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800332a:	f7ff fdd6 	bl	8002eda <LL_RCC_PLLSAI1_IsReady>
 800332e:	4603      	mov	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d1f0      	bne.n	8003316 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800333a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003348:	4313      	orrs	r3, r2
 800334a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8003362:	f7ff fdab 	bl	8002ebc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003366:	f7fd ffc3 	bl	80012f0 <HAL_GetTick>
 800336a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800336c:	e009      	b.n	8003382 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800336e:	f7fd ffbf 	bl	80012f0 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d902      	bls.n	8003382 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e004      	b.n	800338c <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8003382:	f7ff fdaa 	bl	8002eda <LL_RCC_PLLSAI1_IsReady>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800338c:	7bfb      	ldrb	r3, [r7, #15]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d137      	bne.n	8003402 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8003392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033a6:	4313      	orrs	r3, r2
 80033a8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80033aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033bc:	4313      	orrs	r3, r2
 80033be:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80033c0:	f7ff fd6d 	bl	8002e9e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c4:	f7fd ff94 	bl	80012f0 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033ca:	e009      	b.n	80033e0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033cc:	f7fd ff90 	bl	80012f0 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d902      	bls.n	80033e0 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	73fb      	strb	r3, [r7, #15]
        break;
 80033de:	e004      	b.n	80033ea <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80033e0:	f7ff fd7b 	bl	8002eda <LL_RCC_PLLSAI1_IsReady>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d1f0      	bne.n	80033cc <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80033ea:	7bfb      	ldrb	r3, [r7, #15]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d108      	bne.n	8003402 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80033f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033fe:	4313      	orrs	r3, r2
 8003400:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e095      	b.n	800354a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003422:	2b00      	cmp	r3, #0
 8003424:	d108      	bne.n	8003438 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800342e:	d009      	beq.n	8003444 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	61da      	str	r2, [r3, #28]
 8003436:	e005      	b.n	8003444 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d106      	bne.n	8003464 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7fd fd10 	bl	8000e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800347a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003484:	d902      	bls.n	800348c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e002      	b.n	8003492 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800348c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003490:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800349a:	d007      	beq.n	80034ac <HAL_SPI_Init+0xa0>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80034a4:	d002      	beq.n	80034ac <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	695b      	ldr	r3, [r3, #20]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ee:	ea42 0103 	orr.w	r1, r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	0c1b      	lsrs	r3, r3, #16
 8003508:	f003 0204 	and.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	f003 0310 	and.w	r3, r3, #16
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b088      	sub	sp, #32
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	60b9      	str	r1, [r7, #8]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	4613      	mov	r3, r2
 8003560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003562:	2300      	movs	r3, #0
 8003564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_SPI_Transmit+0x22>
 8003570:	2302      	movs	r3, #2
 8003572:	e158      	b.n	8003826 <HAL_SPI_Transmit+0x2d4>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800357c:	f7fd feb8 	bl	80012f0 <HAL_GetTick>
 8003580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003582:	88fb      	ldrh	r3, [r7, #6]
 8003584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	d002      	beq.n	8003598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003592:	2302      	movs	r3, #2
 8003594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003596:	e13d      	b.n	8003814 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d002      	beq.n	80035a4 <HAL_SPI_Transmit+0x52>
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d102      	bne.n	80035aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80035a8:	e134      	b.n	8003814 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	88fa      	ldrh	r2, [r7, #6]
 80035c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2200      	movs	r2, #0
 80035e4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035f4:	d10f      	bne.n	8003616 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003614:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003620:	2b40      	cmp	r3, #64	; 0x40
 8003622:	d007      	beq.n	8003634 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800363c:	d94b      	bls.n	80036d6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d002      	beq.n	800364c <HAL_SPI_Transmit+0xfa>
 8003646:	8afb      	ldrh	r3, [r7, #22]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d13e      	bne.n	80036ca <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003650:	881a      	ldrh	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	1c9a      	adds	r2, r3, #2
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003666:	b29b      	uxth	r3, r3
 8003668:	3b01      	subs	r3, #1
 800366a:	b29a      	uxth	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003670:	e02b      	b.n	80036ca <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b02      	cmp	r3, #2
 800367e:	d112      	bne.n	80036a6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	881a      	ldrh	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003690:	1c9a      	adds	r2, r3, #2
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800369a:	b29b      	uxth	r3, r3
 800369c:	3b01      	subs	r3, #1
 800369e:	b29a      	uxth	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036a4:	e011      	b.n	80036ca <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036a6:	f7fd fe23 	bl	80012f0 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d803      	bhi.n	80036be <HAL_SPI_Transmit+0x16c>
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036bc:	d102      	bne.n	80036c4 <HAL_SPI_Transmit+0x172>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80036c8:	e0a4      	b.n	8003814 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1ce      	bne.n	8003672 <HAL_SPI_Transmit+0x120>
 80036d4:	e07c      	b.n	80037d0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_Transmit+0x192>
 80036de:	8afb      	ldrh	r3, [r7, #22]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d170      	bne.n	80037c6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d912      	bls.n	8003714 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	881a      	ldrh	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	1c9a      	adds	r2, r3, #2
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b02      	subs	r3, #2
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003712:	e058      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	330c      	adds	r3, #12
 800371e:	7812      	ldrb	r2, [r2, #0]
 8003720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800373a:	e044      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b02      	cmp	r3, #2
 8003748:	d12b      	bne.n	80037a2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	d912      	bls.n	800377a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	1c9a      	adds	r2, r3, #2
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b02      	subs	r3, #2
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003778:	e025      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	330c      	adds	r3, #12
 8003784:	7812      	ldrb	r2, [r2, #0]
 8003786:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003796:	b29b      	uxth	r3, r3
 8003798:	3b01      	subs	r3, #1
 800379a:	b29a      	uxth	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037a0:	e011      	b.n	80037c6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037a2:	f7fd fda5 	bl	80012f0 <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d803      	bhi.n	80037ba <HAL_SPI_Transmit+0x268>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037b8:	d102      	bne.n	80037c0 <HAL_SPI_Transmit+0x26e>
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d102      	bne.n	80037c6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037c4:	e026      	b.n	8003814 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1b5      	bne.n	800373c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f949 	bl	8003a6c <SPI_EndRxTxTransaction>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ee:	2300      	movs	r3, #0
 80037f0:	613b      	str	r3, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	613b      	str	r3, [r7, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003808:	2b00      	cmp	r3, #0
 800380a:	d002      	beq.n	8003812 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	77fb      	strb	r3, [r7, #31]
 8003810:	e000      	b.n	8003814 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003824:	7ffb      	ldrb	r3, [r7, #31]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003840:	f7fd fd56 	bl	80012f0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	4413      	add	r3, r2
 800384e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003850:	f7fd fd4e 	bl	80012f0 <HAL_GetTick>
 8003854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003856:	4b39      	ldr	r3, [pc, #228]	; (800393c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	015b      	lsls	r3, r3, #5
 800385c:	0d1b      	lsrs	r3, r3, #20
 800385e:	69fa      	ldr	r2, [r7, #28]
 8003860:	fb02 f303 	mul.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003866:	e054      	b.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800386e:	d050      	beq.n	8003912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003870:	f7fd fd3e 	bl	80012f0 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	429a      	cmp	r2, r3
 800387e:	d902      	bls.n	8003886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d13d      	bne.n	8003902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800389e:	d111      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038a8:	d004      	beq.n	80038b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b2:	d107      	bne.n	80038c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038cc:	d10f      	bne.n	80038ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e017      	b.n	8003932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	3b01      	subs	r3, #1
 8003910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4013      	ands	r3, r2
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	bf0c      	ite	eq
 8003922:	2301      	moveq	r3, #1
 8003924:	2300      	movne	r3, #0
 8003926:	b2db      	uxtb	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	429a      	cmp	r2, r3
 800392e:	d19b      	bne.n	8003868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3720      	adds	r7, #32
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	20000028 	.word	0x20000028

08003940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08a      	sub	sp, #40	; 0x28
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003952:	f7fd fccd 	bl	80012f0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	4413      	add	r3, r2
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003962:	f7fd fcc5 	bl	80012f0 <HAL_GetTick>
 8003966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	330c      	adds	r3, #12
 800396e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003970:	4b3d      	ldr	r3, [pc, #244]	; (8003a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	00da      	lsls	r2, r3, #3
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	0d1b      	lsrs	r3, r3, #20
 8003980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003982:	fb02 f303 	mul.w	r3, r2, r3
 8003986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003988:	e060      	b.n	8003a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003990:	d107      	bne.n	80039a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d104      	bne.n	80039a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	b2db      	uxtb	r3, r3
 800399e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80039a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039a8:	d050      	beq.n	8003a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039aa:	f7fd fca1 	bl	80012f0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a3b      	ldr	r3, [r7, #32]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d902      	bls.n	80039c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d13d      	bne.n	8003a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039d8:	d111      	bne.n	80039fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e2:	d004      	beq.n	80039ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ec:	d107      	bne.n	80039fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a06:	d10f      	bne.n	8003a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e010      	b.n	8003a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a3c:	69bb      	ldr	r3, [r7, #24]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	4013      	ands	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d196      	bne.n	800398a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000028 	.word	0x20000028

08003a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7ff ff5b 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d007      	beq.n	8003aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e027      	b.n	8003af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f7ff fec0 	bl	8003830 <SPI_WaitFlagStateUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d007      	beq.n	8003ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aba:	f043 0220 	orr.w	r2, r3, #32
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e014      	b.n	8003af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f7ff ff34 	bl	8003940 <SPI_WaitFifoStateUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	f043 0220 	orr.w	r2, r3, #32
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e000      	b.n	8003af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003aee:	2300      	movs	r3, #0
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <LL_RCC_GetUSARTClockSource>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8003b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4013      	ands	r3, r2
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_RCC_GetLPUARTClockSource>:
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4013      	ands	r3, r2
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e042      	b.n	8003bd0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d106      	bne.n	8003b62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7fd f9d7 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2224      	movs	r2, #36	; 0x24
 8003b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0201 	bic.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f8b2 	bl	8003ce4 <UART_SetConfig>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d101      	bne.n	8003b8a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e022      	b.n	8003bd0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 face 	bl	8004134 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f042 0201 	orr.w	r2, r2, #1
 8003bc6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb55 	bl	8004278 <UART_CheckIdleState>
 8003bce:	4603      	mov	r3, r0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b08a      	sub	sp, #40	; 0x28
 8003bdc:	af02      	add	r7, sp, #8
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	603b      	str	r3, [r7, #0]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	2b20      	cmp	r3, #32
 8003bf0:	d173      	bne.n	8003cda <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_UART_Transmit+0x26>
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e06c      	b.n	8003cdc <HAL_UART_Transmit+0x104>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2221      	movs	r2, #33	; 0x21
 8003c0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c12:	f7fd fb6d 	bl	80012f0 <HAL_GetTick>
 8003c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c30:	d108      	bne.n	8003c44 <HAL_UART_Transmit+0x6c>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61bb      	str	r3, [r7, #24]
 8003c42:	e003      	b.n	8003c4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c4c:	e02c      	b.n	8003ca8 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2200      	movs	r2, #0
 8003c56:	2180      	movs	r1, #128	; 0x80
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f000 fb5b 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e039      	b.n	8003cdc <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	3302      	adds	r3, #2
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	e007      	b.n	8003c96 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	781a      	ldrb	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	3301      	adds	r3, #1
 8003c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1cc      	bne.n	8003c4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	9300      	str	r3, [sp, #0]
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2140      	movs	r1, #64	; 0x40
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 fb28 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d001      	beq.n	8003cce <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e006      	b.n	8003cdc <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2220      	movs	r2, #32
 8003cd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	e000      	b.n	8003cdc <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
  }
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3720      	adds	r7, #32
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce8:	b08c      	sub	sp, #48	; 0x30
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	4baf      	ldr	r3, [pc, #700]	; (8003fd0 <UART_SetConfig+0x2ec>)
 8003d14:	4013      	ands	r3, r2
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	68da      	ldr	r2, [r3, #12]
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4aa4      	ldr	r2, [pc, #656]	; (8003fd4 <UART_SetConfig+0x2f0>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d004      	beq.n	8003d50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003d5a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d6e:	f023 010f 	bic.w	r1, r3, #15
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a95      	ldr	r2, [pc, #596]	; (8003fd8 <UART_SetConfig+0x2f4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d125      	bne.n	8003dd4 <UART_SetConfig+0xf0>
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f7ff feb5 	bl	8003af8 <LL_RCC_GetUSARTClockSource>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b03      	cmp	r3, #3
 8003d92:	d81b      	bhi.n	8003dcc <UART_SetConfig+0xe8>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0xb8>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003dbd 	.word	0x08003dbd
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dc5 	.word	0x08003dc5
 8003dac:	2301      	movs	r3, #1
 8003dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db2:	e042      	b.n	8003e3a <UART_SetConfig+0x156>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dba:	e03e      	b.n	8003e3a <UART_SetConfig+0x156>
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc2:	e03a      	b.n	8003e3a <UART_SetConfig+0x156>
 8003dc4:	2308      	movs	r3, #8
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e036      	b.n	8003e3a <UART_SetConfig+0x156>
 8003dcc:	2310      	movs	r3, #16
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e032      	b.n	8003e3a <UART_SetConfig+0x156>
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a7e      	ldr	r2, [pc, #504]	; (8003fd4 <UART_SetConfig+0x2f0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d12a      	bne.n	8003e34 <UART_SetConfig+0x150>
 8003dde:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003de2:	f7ff fe99 	bl	8003b18 <LL_RCC_GetLPUARTClockSource>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dec:	d01a      	beq.n	8003e24 <UART_SetConfig+0x140>
 8003dee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df2:	d81b      	bhi.n	8003e2c <UART_SetConfig+0x148>
 8003df4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df8:	d00c      	beq.n	8003e14 <UART_SetConfig+0x130>
 8003dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfe:	d815      	bhi.n	8003e2c <UART_SetConfig+0x148>
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <UART_SetConfig+0x128>
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d008      	beq.n	8003e1c <UART_SetConfig+0x138>
 8003e0a:	e00f      	b.n	8003e2c <UART_SetConfig+0x148>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e12:	e012      	b.n	8003e3a <UART_SetConfig+0x156>
 8003e14:	2302      	movs	r3, #2
 8003e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1a:	e00e      	b.n	8003e3a <UART_SetConfig+0x156>
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e22:	e00a      	b.n	8003e3a <UART_SetConfig+0x156>
 8003e24:	2308      	movs	r3, #8
 8003e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e2a:	e006      	b.n	8003e3a <UART_SetConfig+0x156>
 8003e2c:	2310      	movs	r3, #16
 8003e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e32:	e002      	b.n	8003e3a <UART_SetConfig+0x156>
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a65      	ldr	r2, [pc, #404]	; (8003fd4 <UART_SetConfig+0x2f0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	f040 8097 	bne.w	8003f74 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d823      	bhi.n	8003e96 <UART_SetConfig+0x1b2>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <UART_SetConfig+0x170>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e79 	.word	0x08003e79
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e81 	.word	0x08003e81
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e87 	.word	0x08003e87
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003e97 	.word	0x08003e97
 8003e70:	08003e97 	.word	0x08003e97
 8003e74:	08003e8f 	.word	0x08003e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e78:	f7fe fdc4 	bl	8002a04 <HAL_RCC_GetPCLK1Freq>
 8003e7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e7e:	e010      	b.n	8003ea2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b56      	ldr	r3, [pc, #344]	; (8003fdc <UART_SetConfig+0x2f8>)
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e84:	e00d      	b.n	8003ea2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7fe fd3b 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003e8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e8c:	e009      	b.n	8003ea2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e94:	e005      	b.n	8003ea2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ea0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 812b 	beq.w	8004100 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <UART_SetConfig+0x2fc>)
 8003eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	685a      	ldr	r2, [r3, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	4413      	add	r3, r2
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d305      	bcc.n	8003eda <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ee0:	e10e      	b.n	8004100 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	60fa      	str	r2, [r7, #12]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	4a3c      	ldr	r2, [pc, #240]	; (8003fe0 <UART_SetConfig+0x2fc>)
 8003ef0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	603b      	str	r3, [r7, #0]
 8003efa:	607a      	str	r2, [r7, #4]
 8003efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f04:	f7fc f98c 	bl	8000220 <__aeabi_uldivmod>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	460b      	mov	r3, r1
 8003f0c:	4610      	mov	r0, r2
 8003f0e:	4619      	mov	r1, r3
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	020b      	lsls	r3, r1, #8
 8003f1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f1e:	0202      	lsls	r2, r0, #8
 8003f20:	6979      	ldr	r1, [r7, #20]
 8003f22:	6849      	ldr	r1, [r1, #4]
 8003f24:	0849      	lsrs	r1, r1, #1
 8003f26:	2000      	movs	r0, #0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	4605      	mov	r5, r0
 8003f2c:	eb12 0804 	adds.w	r8, r2, r4
 8003f30:	eb43 0905 	adc.w	r9, r3, r5
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	469a      	mov	sl, r3
 8003f3c:	4693      	mov	fp, r2
 8003f3e:	4652      	mov	r2, sl
 8003f40:	465b      	mov	r3, fp
 8003f42:	4640      	mov	r0, r8
 8003f44:	4649      	mov	r1, r9
 8003f46:	f7fc f96b 	bl	8000220 <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d308      	bcc.n	8003f6c <UART_SetConfig+0x288>
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f60:	d204      	bcs.n	8003f6c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e0c9      	b.n	8004100 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f72:	e0c5      	b.n	8004100 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d16d      	bne.n	800405a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8003f7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f82:	3b01      	subs	r3, #1
 8003f84:	2b07      	cmp	r3, #7
 8003f86:	d82d      	bhi.n	8003fe4 <UART_SetConfig+0x300>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x2ac>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fb1 	.word	0x08003fb1
 8003f94:	08003fb9 	.word	0x08003fb9
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fbf 	.word	0x08003fbf
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fe5 	.word	0x08003fe5
 8003fac:	08003fc7 	.word	0x08003fc7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb0:	f7fe fd3e 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8003fb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fb6:	e01b      	b.n	8003ff0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <UART_SetConfig+0x2f8>)
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fbc:	e018      	b.n	8003ff0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fbe:	f7fe fc9f 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 8003fc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc4:	e014      	b.n	8003ff0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fcc:	e010      	b.n	8003ff0 <UART_SetConfig+0x30c>
 8003fce:	bf00      	nop
 8003fd0:	cfff69f3 	.word	0xcfff69f3
 8003fd4:	40008000 	.word	0x40008000
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	00f42400 	.word	0x00f42400
 8003fe0:	08005900 	.word	0x08005900
      default:
        pclk = 0U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 8084 	beq.w	8004100 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	4a4b      	ldr	r2, [pc, #300]	; (800412c <UART_SetConfig+0x448>)
 8003ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004002:	461a      	mov	r2, r3
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	fbb3 f3f2 	udiv	r3, r3, r2
 800400a:	005a      	lsls	r2, r3, #1
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	441a      	add	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	fbb2 f3f3 	udiv	r3, r2, r3
 800401c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2b0f      	cmp	r3, #15
 8004022:	d916      	bls.n	8004052 <UART_SetConfig+0x36e>
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800402a:	d212      	bcs.n	8004052 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	b29b      	uxth	r3, r3
 8004030:	f023 030f 	bic.w	r3, r3, #15
 8004034:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	085b      	lsrs	r3, r3, #1
 800403a:	b29b      	uxth	r3, r3
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	b29a      	uxth	r2, r3
 8004042:	8bfb      	ldrh	r3, [r7, #30]
 8004044:	4313      	orrs	r3, r2
 8004046:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	8bfa      	ldrh	r2, [r7, #30]
 800404e:	60da      	str	r2, [r3, #12]
 8004050:	e056      	b.n	8004100 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004058:	e052      	b.n	8004100 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800405e:	3b01      	subs	r3, #1
 8004060:	2b07      	cmp	r3, #7
 8004062:	d822      	bhi.n	80040aa <UART_SetConfig+0x3c6>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x388>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	0800408d 	.word	0x0800408d
 8004070:	08004095 	.word	0x08004095
 8004074:	080040ab 	.word	0x080040ab
 8004078:	0800409b 	.word	0x0800409b
 800407c:	080040ab 	.word	0x080040ab
 8004080:	080040ab 	.word	0x080040ab
 8004084:	080040ab 	.word	0x080040ab
 8004088:	080040a3 	.word	0x080040a3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800408c:	f7fe fcd0 	bl	8002a30 <HAL_RCC_GetPCLK2Freq>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004092:	e010      	b.n	80040b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004094:	4b26      	ldr	r3, [pc, #152]	; (8004130 <UART_SetConfig+0x44c>)
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004098:	e00d      	b.n	80040b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800409a:	f7fe fc31 	bl	8002900 <HAL_RCC_GetSysClockFreq>
 800409e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040a0:	e009      	b.n	80040b6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040a8:	e005      	b.n	80040b6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040b4:	bf00      	nop
    }

    if (pclk != 0U)
 80040b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	4a1a      	ldr	r2, [pc, #104]	; (800412c <UART_SetConfig+0x448>)
 80040c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040c6:	461a      	mov	r2, r3
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	441a      	add	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	fbb2 f3f3 	udiv	r3, r2, r3
 80040de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b0f      	cmp	r3, #15
 80040e4:	d909      	bls.n	80040fa <UART_SetConfig+0x416>
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ec:	d205      	bcs.n	80040fa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ee:	6a3b      	ldr	r3, [r7, #32]
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	60da      	str	r2, [r3, #12]
 80040f8:	e002      	b.n	8004100 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	2201      	movs	r2, #1
 8004104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2201      	movs	r2, #1
 800410c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800411c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004120:	4618      	mov	r0, r3
 8004122:	3730      	adds	r7, #48	; 0x30
 8004124:	46bd      	mov	sp, r7
 8004126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800412a:	bf00      	nop
 800412c:	08005900 	.word	0x08005900
 8004130:	00f42400 	.word	0x00f42400

08004134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d00a      	beq.n	800415e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f003 0308 	and.w	r3, r3, #8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	f003 0310 	and.w	r3, r3, #16
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01a      	beq.n	800424a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004232:	d10a      	bne.n	800424a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	430a      	orrs	r2, r1
 8004248:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	430a      	orrs	r2, r1
 800426a:	605a      	str	r2, [r3, #4]
  }
}
 800426c:	bf00      	nop
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af02      	add	r7, sp, #8
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004288:	f7fd f832 	bl	80012f0 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0308 	and.w	r3, r3, #8
 8004298:	2b08      	cmp	r3, #8
 800429a:	d10e      	bne.n	80042ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800429c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042a0:	9300      	str	r3, [sp, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f832 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e028      	b.n	800430c <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b04      	cmp	r3, #4
 80042c6:	d10e      	bne.n	80042e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f81c 	bl	8004314 <UART_WaitOnFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e012      	b.n	800430c <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2220      	movs	r2, #32
 80042ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b09c      	sub	sp, #112	; 0x70
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	603b      	str	r3, [r7, #0]
 8004320:	4613      	mov	r3, r2
 8004322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004324:	e0a9      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004326:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004328:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432c:	f000 80a5 	beq.w	800447a <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004330:	f7fc ffde 	bl	80012f0 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800433c:	429a      	cmp	r2, r3
 800433e:	d302      	bcc.n	8004346 <UART_WaitOnFlagUntilTimeout+0x32>
 8004340:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004342:	2b00      	cmp	r3, #0
 8004344:	d140      	bne.n	80043c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004356:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800435a:	667b      	str	r3, [r7, #100]	; 0x64
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	461a      	mov	r2, r3
 8004362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004364:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004366:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800436a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e6      	bne.n	8004346 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3308      	adds	r3, #8
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	663b      	str	r3, [r7, #96]	; 0x60
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004398:	64ba      	str	r2, [r7, #72]	; 0x48
 800439a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800439e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e069      	b.n	800449c <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0304 	and.w	r3, r3, #4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d051      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043e4:	d149      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f8:	e853 3f00 	ldrex	r3, [r3]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004404:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	461a      	mov	r2, r3
 800440c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004416:	e841 2300 	strex	r3, r2, [r1]
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1e6      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	e853 3f00 	ldrex	r3, [r3]
 8004430:	613b      	str	r3, [r7, #16]
   return(result);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	f023 0301 	bic.w	r3, r3, #1
 8004438:	66bb      	str	r3, [r7, #104]	; 0x68
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3308      	adds	r3, #8
 8004440:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004442:	623a      	str	r2, [r7, #32]
 8004444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	6a3a      	ldr	r2, [r7, #32]
 800444a:	e841 2300 	strex	r3, r2, [r1]
 800444e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d1e5      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e010      	b.n	800449c <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	f43f af46 	beq.w	8004326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3770      	adds	r7, #112	; 0x70
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b085      	sub	sp, #20
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_UARTEx_DisableFifoMode+0x16>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e027      	b.n	800450a <HAL_UARTEx_DisableFifoMode+0x66>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2224      	movs	r2, #36	; 0x24
 80044c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b084      	sub	sp, #16
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800452a:	2302      	movs	r3, #2
 800452c:	e02d      	b.n	800458a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2224      	movs	r2, #36	; 0x24
 800453a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f022 0201 	bic.w	r2, r2, #1
 8004554:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f850 	bl	8004610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b084      	sub	sp, #16
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e02d      	b.n	8004606 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2224      	movs	r2, #36	; 0x24
 80045b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f812 	bl	8004610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461c:	2b00      	cmp	r3, #0
 800461e:	d108      	bne.n	8004632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004630:	e031      	b.n	8004696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004632:	2308      	movs	r3, #8
 8004634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004636:	2308      	movs	r3, #8
 8004638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	0e5b      	lsrs	r3, r3, #25
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	0f5b      	lsrs	r3, r3, #29
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800465a:	7bbb      	ldrb	r3, [r7, #14]
 800465c:	7b3a      	ldrb	r2, [r7, #12]
 800465e:	4911      	ldr	r1, [pc, #68]	; (80046a4 <UARTEx_SetNbDataToProcess+0x94>)
 8004660:	5c8a      	ldrb	r2, [r1, r2]
 8004662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004666:	7b3a      	ldrb	r2, [r7, #12]
 8004668:	490f      	ldr	r1, [pc, #60]	; (80046a8 <UARTEx_SetNbDataToProcess+0x98>)
 800466a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800466c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004670:	b29a      	uxth	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004678:	7bfb      	ldrb	r3, [r7, #15]
 800467a:	7b7a      	ldrb	r2, [r7, #13]
 800467c:	4909      	ldr	r1, [pc, #36]	; (80046a4 <UARTEx_SetNbDataToProcess+0x94>)
 800467e:	5c8a      	ldrb	r2, [r1, r2]
 8004680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004684:	7b7a      	ldrb	r2, [r7, #13]
 8004686:	4908      	ldr	r1, [pc, #32]	; (80046a8 <UARTEx_SetNbDataToProcess+0x98>)
 8004688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800468a:	fb93 f3f2 	sdiv	r3, r3, r2
 800468e:	b29a      	uxth	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004696:	bf00      	nop
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	08005918 	.word	0x08005918
 80046a8:	08005920 	.word	0x08005920

080046ac <__errno>:
 80046ac:	4b01      	ldr	r3, [pc, #4]	; (80046b4 <__errno+0x8>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000034 	.word	0x20000034

080046b8 <__libc_init_array>:
 80046b8:	b570      	push	{r4, r5, r6, lr}
 80046ba:	4d0d      	ldr	r5, [pc, #52]	; (80046f0 <__libc_init_array+0x38>)
 80046bc:	4c0d      	ldr	r4, [pc, #52]	; (80046f4 <__libc_init_array+0x3c>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	2600      	movs	r6, #0
 80046c4:	42a6      	cmp	r6, r4
 80046c6:	d109      	bne.n	80046dc <__libc_init_array+0x24>
 80046c8:	4d0b      	ldr	r5, [pc, #44]	; (80046f8 <__libc_init_array+0x40>)
 80046ca:	4c0c      	ldr	r4, [pc, #48]	; (80046fc <__libc_init_array+0x44>)
 80046cc:	f001 f82c 	bl	8005728 <_init>
 80046d0:	1b64      	subs	r4, r4, r5
 80046d2:	10a4      	asrs	r4, r4, #2
 80046d4:	2600      	movs	r6, #0
 80046d6:	42a6      	cmp	r6, r4
 80046d8:	d105      	bne.n	80046e6 <__libc_init_array+0x2e>
 80046da:	bd70      	pop	{r4, r5, r6, pc}
 80046dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80046e0:	4798      	blx	r3
 80046e2:	3601      	adds	r6, #1
 80046e4:	e7ee      	b.n	80046c4 <__libc_init_array+0xc>
 80046e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ea:	4798      	blx	r3
 80046ec:	3601      	adds	r6, #1
 80046ee:	e7f2      	b.n	80046d6 <__libc_init_array+0x1e>
 80046f0:	080059c8 	.word	0x080059c8
 80046f4:	080059c8 	.word	0x080059c8
 80046f8:	080059c8 	.word	0x080059c8
 80046fc:	080059cc 	.word	0x080059cc

08004700 <malloc>:
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <malloc+0xc>)
 8004702:	4601      	mov	r1, r0
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	f000 b877 	b.w	80047f8 <_malloc_r>
 800470a:	bf00      	nop
 800470c:	20000034 	.word	0x20000034

08004710 <memset>:
 8004710:	4402      	add	r2, r0
 8004712:	4603      	mov	r3, r0
 8004714:	4293      	cmp	r3, r2
 8004716:	d100      	bne.n	800471a <memset+0xa>
 8004718:	4770      	bx	lr
 800471a:	f803 1b01 	strb.w	r1, [r3], #1
 800471e:	e7f9      	b.n	8004714 <memset+0x4>

08004720 <_free_r>:
 8004720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004722:	2900      	cmp	r1, #0
 8004724:	d044      	beq.n	80047b0 <_free_r+0x90>
 8004726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800472a:	9001      	str	r0, [sp, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	f1a1 0404 	sub.w	r4, r1, #4
 8004732:	bfb8      	it	lt
 8004734:	18e4      	addlt	r4, r4, r3
 8004736:	f000 fc51 	bl	8004fdc <__malloc_lock>
 800473a:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <_free_r+0x94>)
 800473c:	9801      	ldr	r0, [sp, #4]
 800473e:	6813      	ldr	r3, [r2, #0]
 8004740:	b933      	cbnz	r3, 8004750 <_free_r+0x30>
 8004742:	6063      	str	r3, [r4, #4]
 8004744:	6014      	str	r4, [r2, #0]
 8004746:	b003      	add	sp, #12
 8004748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800474c:	f000 bc4c 	b.w	8004fe8 <__malloc_unlock>
 8004750:	42a3      	cmp	r3, r4
 8004752:	d908      	bls.n	8004766 <_free_r+0x46>
 8004754:	6825      	ldr	r5, [r4, #0]
 8004756:	1961      	adds	r1, r4, r5
 8004758:	428b      	cmp	r3, r1
 800475a:	bf01      	itttt	eq
 800475c:	6819      	ldreq	r1, [r3, #0]
 800475e:	685b      	ldreq	r3, [r3, #4]
 8004760:	1949      	addeq	r1, r1, r5
 8004762:	6021      	streq	r1, [r4, #0]
 8004764:	e7ed      	b.n	8004742 <_free_r+0x22>
 8004766:	461a      	mov	r2, r3
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	b10b      	cbz	r3, 8004770 <_free_r+0x50>
 800476c:	42a3      	cmp	r3, r4
 800476e:	d9fa      	bls.n	8004766 <_free_r+0x46>
 8004770:	6811      	ldr	r1, [r2, #0]
 8004772:	1855      	adds	r5, r2, r1
 8004774:	42a5      	cmp	r5, r4
 8004776:	d10b      	bne.n	8004790 <_free_r+0x70>
 8004778:	6824      	ldr	r4, [r4, #0]
 800477a:	4421      	add	r1, r4
 800477c:	1854      	adds	r4, r2, r1
 800477e:	42a3      	cmp	r3, r4
 8004780:	6011      	str	r1, [r2, #0]
 8004782:	d1e0      	bne.n	8004746 <_free_r+0x26>
 8004784:	681c      	ldr	r4, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	6053      	str	r3, [r2, #4]
 800478a:	4421      	add	r1, r4
 800478c:	6011      	str	r1, [r2, #0]
 800478e:	e7da      	b.n	8004746 <_free_r+0x26>
 8004790:	d902      	bls.n	8004798 <_free_r+0x78>
 8004792:	230c      	movs	r3, #12
 8004794:	6003      	str	r3, [r0, #0]
 8004796:	e7d6      	b.n	8004746 <_free_r+0x26>
 8004798:	6825      	ldr	r5, [r4, #0]
 800479a:	1961      	adds	r1, r4, r5
 800479c:	428b      	cmp	r3, r1
 800479e:	bf04      	itt	eq
 80047a0:	6819      	ldreq	r1, [r3, #0]
 80047a2:	685b      	ldreq	r3, [r3, #4]
 80047a4:	6063      	str	r3, [r4, #4]
 80047a6:	bf04      	itt	eq
 80047a8:	1949      	addeq	r1, r1, r5
 80047aa:	6021      	streq	r1, [r4, #0]
 80047ac:	6054      	str	r4, [r2, #4]
 80047ae:	e7ca      	b.n	8004746 <_free_r+0x26>
 80047b0:	b003      	add	sp, #12
 80047b2:	bd30      	pop	{r4, r5, pc}
 80047b4:	200001d4 	.word	0x200001d4

080047b8 <sbrk_aligned>:
 80047b8:	b570      	push	{r4, r5, r6, lr}
 80047ba:	4e0e      	ldr	r6, [pc, #56]	; (80047f4 <sbrk_aligned+0x3c>)
 80047bc:	460c      	mov	r4, r1
 80047be:	6831      	ldr	r1, [r6, #0]
 80047c0:	4605      	mov	r5, r0
 80047c2:	b911      	cbnz	r1, 80047ca <sbrk_aligned+0x12>
 80047c4:	f000 f91a 	bl	80049fc <_sbrk_r>
 80047c8:	6030      	str	r0, [r6, #0]
 80047ca:	4621      	mov	r1, r4
 80047cc:	4628      	mov	r0, r5
 80047ce:	f000 f915 	bl	80049fc <_sbrk_r>
 80047d2:	1c43      	adds	r3, r0, #1
 80047d4:	d00a      	beq.n	80047ec <sbrk_aligned+0x34>
 80047d6:	1cc4      	adds	r4, r0, #3
 80047d8:	f024 0403 	bic.w	r4, r4, #3
 80047dc:	42a0      	cmp	r0, r4
 80047de:	d007      	beq.n	80047f0 <sbrk_aligned+0x38>
 80047e0:	1a21      	subs	r1, r4, r0
 80047e2:	4628      	mov	r0, r5
 80047e4:	f000 f90a 	bl	80049fc <_sbrk_r>
 80047e8:	3001      	adds	r0, #1
 80047ea:	d101      	bne.n	80047f0 <sbrk_aligned+0x38>
 80047ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80047f0:	4620      	mov	r0, r4
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	200001d8 	.word	0x200001d8

080047f8 <_malloc_r>:
 80047f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fc:	1ccd      	adds	r5, r1, #3
 80047fe:	f025 0503 	bic.w	r5, r5, #3
 8004802:	3508      	adds	r5, #8
 8004804:	2d0c      	cmp	r5, #12
 8004806:	bf38      	it	cc
 8004808:	250c      	movcc	r5, #12
 800480a:	2d00      	cmp	r5, #0
 800480c:	4607      	mov	r7, r0
 800480e:	db01      	blt.n	8004814 <_malloc_r+0x1c>
 8004810:	42a9      	cmp	r1, r5
 8004812:	d905      	bls.n	8004820 <_malloc_r+0x28>
 8004814:	230c      	movs	r3, #12
 8004816:	603b      	str	r3, [r7, #0]
 8004818:	2600      	movs	r6, #0
 800481a:	4630      	mov	r0, r6
 800481c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004820:	4e2e      	ldr	r6, [pc, #184]	; (80048dc <_malloc_r+0xe4>)
 8004822:	f000 fbdb 	bl	8004fdc <__malloc_lock>
 8004826:	6833      	ldr	r3, [r6, #0]
 8004828:	461c      	mov	r4, r3
 800482a:	bb34      	cbnz	r4, 800487a <_malloc_r+0x82>
 800482c:	4629      	mov	r1, r5
 800482e:	4638      	mov	r0, r7
 8004830:	f7ff ffc2 	bl	80047b8 <sbrk_aligned>
 8004834:	1c43      	adds	r3, r0, #1
 8004836:	4604      	mov	r4, r0
 8004838:	d14d      	bne.n	80048d6 <_malloc_r+0xde>
 800483a:	6834      	ldr	r4, [r6, #0]
 800483c:	4626      	mov	r6, r4
 800483e:	2e00      	cmp	r6, #0
 8004840:	d140      	bne.n	80048c4 <_malloc_r+0xcc>
 8004842:	6823      	ldr	r3, [r4, #0]
 8004844:	4631      	mov	r1, r6
 8004846:	4638      	mov	r0, r7
 8004848:	eb04 0803 	add.w	r8, r4, r3
 800484c:	f000 f8d6 	bl	80049fc <_sbrk_r>
 8004850:	4580      	cmp	r8, r0
 8004852:	d13a      	bne.n	80048ca <_malloc_r+0xd2>
 8004854:	6821      	ldr	r1, [r4, #0]
 8004856:	3503      	adds	r5, #3
 8004858:	1a6d      	subs	r5, r5, r1
 800485a:	f025 0503 	bic.w	r5, r5, #3
 800485e:	3508      	adds	r5, #8
 8004860:	2d0c      	cmp	r5, #12
 8004862:	bf38      	it	cc
 8004864:	250c      	movcc	r5, #12
 8004866:	4629      	mov	r1, r5
 8004868:	4638      	mov	r0, r7
 800486a:	f7ff ffa5 	bl	80047b8 <sbrk_aligned>
 800486e:	3001      	adds	r0, #1
 8004870:	d02b      	beq.n	80048ca <_malloc_r+0xd2>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	442b      	add	r3, r5
 8004876:	6023      	str	r3, [r4, #0]
 8004878:	e00e      	b.n	8004898 <_malloc_r+0xa0>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	1b52      	subs	r2, r2, r5
 800487e:	d41e      	bmi.n	80048be <_malloc_r+0xc6>
 8004880:	2a0b      	cmp	r2, #11
 8004882:	d916      	bls.n	80048b2 <_malloc_r+0xba>
 8004884:	1961      	adds	r1, r4, r5
 8004886:	42a3      	cmp	r3, r4
 8004888:	6025      	str	r5, [r4, #0]
 800488a:	bf18      	it	ne
 800488c:	6059      	strne	r1, [r3, #4]
 800488e:	6863      	ldr	r3, [r4, #4]
 8004890:	bf08      	it	eq
 8004892:	6031      	streq	r1, [r6, #0]
 8004894:	5162      	str	r2, [r4, r5]
 8004896:	604b      	str	r3, [r1, #4]
 8004898:	4638      	mov	r0, r7
 800489a:	f104 060b 	add.w	r6, r4, #11
 800489e:	f000 fba3 	bl	8004fe8 <__malloc_unlock>
 80048a2:	f026 0607 	bic.w	r6, r6, #7
 80048a6:	1d23      	adds	r3, r4, #4
 80048a8:	1af2      	subs	r2, r6, r3
 80048aa:	d0b6      	beq.n	800481a <_malloc_r+0x22>
 80048ac:	1b9b      	subs	r3, r3, r6
 80048ae:	50a3      	str	r3, [r4, r2]
 80048b0:	e7b3      	b.n	800481a <_malloc_r+0x22>
 80048b2:	6862      	ldr	r2, [r4, #4]
 80048b4:	42a3      	cmp	r3, r4
 80048b6:	bf0c      	ite	eq
 80048b8:	6032      	streq	r2, [r6, #0]
 80048ba:	605a      	strne	r2, [r3, #4]
 80048bc:	e7ec      	b.n	8004898 <_malloc_r+0xa0>
 80048be:	4623      	mov	r3, r4
 80048c0:	6864      	ldr	r4, [r4, #4]
 80048c2:	e7b2      	b.n	800482a <_malloc_r+0x32>
 80048c4:	4634      	mov	r4, r6
 80048c6:	6876      	ldr	r6, [r6, #4]
 80048c8:	e7b9      	b.n	800483e <_malloc_r+0x46>
 80048ca:	230c      	movs	r3, #12
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	4638      	mov	r0, r7
 80048d0:	f000 fb8a 	bl	8004fe8 <__malloc_unlock>
 80048d4:	e7a1      	b.n	800481a <_malloc_r+0x22>
 80048d6:	6025      	str	r5, [r4, #0]
 80048d8:	e7de      	b.n	8004898 <_malloc_r+0xa0>
 80048da:	bf00      	nop
 80048dc:	200001d4 	.word	0x200001d4

080048e0 <iprintf>:
 80048e0:	b40f      	push	{r0, r1, r2, r3}
 80048e2:	4b0a      	ldr	r3, [pc, #40]	; (800490c <iprintf+0x2c>)
 80048e4:	b513      	push	{r0, r1, r4, lr}
 80048e6:	681c      	ldr	r4, [r3, #0]
 80048e8:	b124      	cbz	r4, 80048f4 <iprintf+0x14>
 80048ea:	69a3      	ldr	r3, [r4, #24]
 80048ec:	b913      	cbnz	r3, 80048f4 <iprintf+0x14>
 80048ee:	4620      	mov	r0, r4
 80048f0:	f000 fa6e 	bl	8004dd0 <__sinit>
 80048f4:	ab05      	add	r3, sp, #20
 80048f6:	9a04      	ldr	r2, [sp, #16]
 80048f8:	68a1      	ldr	r1, [r4, #8]
 80048fa:	9301      	str	r3, [sp, #4]
 80048fc:	4620      	mov	r0, r4
 80048fe:	f000 fba3 	bl	8005048 <_vfiprintf_r>
 8004902:	b002      	add	sp, #8
 8004904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004908:	b004      	add	sp, #16
 800490a:	4770      	bx	lr
 800490c:	20000034 	.word	0x20000034

08004910 <_puts_r>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	460e      	mov	r6, r1
 8004914:	4605      	mov	r5, r0
 8004916:	b118      	cbz	r0, 8004920 <_puts_r+0x10>
 8004918:	6983      	ldr	r3, [r0, #24]
 800491a:	b90b      	cbnz	r3, 8004920 <_puts_r+0x10>
 800491c:	f000 fa58 	bl	8004dd0 <__sinit>
 8004920:	69ab      	ldr	r3, [r5, #24]
 8004922:	68ac      	ldr	r4, [r5, #8]
 8004924:	b913      	cbnz	r3, 800492c <_puts_r+0x1c>
 8004926:	4628      	mov	r0, r5
 8004928:	f000 fa52 	bl	8004dd0 <__sinit>
 800492c:	4b2c      	ldr	r3, [pc, #176]	; (80049e0 <_puts_r+0xd0>)
 800492e:	429c      	cmp	r4, r3
 8004930:	d120      	bne.n	8004974 <_puts_r+0x64>
 8004932:	686c      	ldr	r4, [r5, #4]
 8004934:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004936:	07db      	lsls	r3, r3, #31
 8004938:	d405      	bmi.n	8004946 <_puts_r+0x36>
 800493a:	89a3      	ldrh	r3, [r4, #12]
 800493c:	0598      	lsls	r0, r3, #22
 800493e:	d402      	bmi.n	8004946 <_puts_r+0x36>
 8004940:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004942:	f000 fae3 	bl	8004f0c <__retarget_lock_acquire_recursive>
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	0719      	lsls	r1, r3, #28
 800494a:	d51d      	bpl.n	8004988 <_puts_r+0x78>
 800494c:	6923      	ldr	r3, [r4, #16]
 800494e:	b1db      	cbz	r3, 8004988 <_puts_r+0x78>
 8004950:	3e01      	subs	r6, #1
 8004952:	68a3      	ldr	r3, [r4, #8]
 8004954:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004958:	3b01      	subs	r3, #1
 800495a:	60a3      	str	r3, [r4, #8]
 800495c:	bb39      	cbnz	r1, 80049ae <_puts_r+0x9e>
 800495e:	2b00      	cmp	r3, #0
 8004960:	da38      	bge.n	80049d4 <_puts_r+0xc4>
 8004962:	4622      	mov	r2, r4
 8004964:	210a      	movs	r1, #10
 8004966:	4628      	mov	r0, r5
 8004968:	f000 f858 	bl	8004a1c <__swbuf_r>
 800496c:	3001      	adds	r0, #1
 800496e:	d011      	beq.n	8004994 <_puts_r+0x84>
 8004970:	250a      	movs	r5, #10
 8004972:	e011      	b.n	8004998 <_puts_r+0x88>
 8004974:	4b1b      	ldr	r3, [pc, #108]	; (80049e4 <_puts_r+0xd4>)
 8004976:	429c      	cmp	r4, r3
 8004978:	d101      	bne.n	800497e <_puts_r+0x6e>
 800497a:	68ac      	ldr	r4, [r5, #8]
 800497c:	e7da      	b.n	8004934 <_puts_r+0x24>
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <_puts_r+0xd8>)
 8004980:	429c      	cmp	r4, r3
 8004982:	bf08      	it	eq
 8004984:	68ec      	ldreq	r4, [r5, #12]
 8004986:	e7d5      	b.n	8004934 <_puts_r+0x24>
 8004988:	4621      	mov	r1, r4
 800498a:	4628      	mov	r0, r5
 800498c:	f000 f898 	bl	8004ac0 <__swsetup_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	d0dd      	beq.n	8004950 <_puts_r+0x40>
 8004994:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004998:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800499a:	07da      	lsls	r2, r3, #31
 800499c:	d405      	bmi.n	80049aa <_puts_r+0x9a>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	059b      	lsls	r3, r3, #22
 80049a2:	d402      	bmi.n	80049aa <_puts_r+0x9a>
 80049a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049a6:	f000 fab2 	bl	8004f0e <__retarget_lock_release_recursive>
 80049aa:	4628      	mov	r0, r5
 80049ac:	bd70      	pop	{r4, r5, r6, pc}
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da04      	bge.n	80049bc <_puts_r+0xac>
 80049b2:	69a2      	ldr	r2, [r4, #24]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	dc06      	bgt.n	80049c6 <_puts_r+0xb6>
 80049b8:	290a      	cmp	r1, #10
 80049ba:	d004      	beq.n	80049c6 <_puts_r+0xb6>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	1c5a      	adds	r2, r3, #1
 80049c0:	6022      	str	r2, [r4, #0]
 80049c2:	7019      	strb	r1, [r3, #0]
 80049c4:	e7c5      	b.n	8004952 <_puts_r+0x42>
 80049c6:	4622      	mov	r2, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	f000 f827 	bl	8004a1c <__swbuf_r>
 80049ce:	3001      	adds	r0, #1
 80049d0:	d1bf      	bne.n	8004952 <_puts_r+0x42>
 80049d2:	e7df      	b.n	8004994 <_puts_r+0x84>
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	250a      	movs	r5, #10
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	6022      	str	r2, [r4, #0]
 80049dc:	701d      	strb	r5, [r3, #0]
 80049de:	e7db      	b.n	8004998 <_puts_r+0x88>
 80049e0:	0800594c 	.word	0x0800594c
 80049e4:	0800596c 	.word	0x0800596c
 80049e8:	0800592c 	.word	0x0800592c

080049ec <puts>:
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <puts+0xc>)
 80049ee:	4601      	mov	r1, r0
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	f7ff bf8d 	b.w	8004910 <_puts_r>
 80049f6:	bf00      	nop
 80049f8:	20000034 	.word	0x20000034

080049fc <_sbrk_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	4d06      	ldr	r5, [pc, #24]	; (8004a18 <_sbrk_r+0x1c>)
 8004a00:	2300      	movs	r3, #0
 8004a02:	4604      	mov	r4, r0
 8004a04:	4608      	mov	r0, r1
 8004a06:	602b      	str	r3, [r5, #0]
 8004a08:	f7fc fb42 	bl	8001090 <_sbrk>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_sbrk_r+0x1a>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_sbrk_r+0x1a>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	200001e0 	.word	0x200001e0

08004a1c <__swbuf_r>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	460e      	mov	r6, r1
 8004a20:	4614      	mov	r4, r2
 8004a22:	4605      	mov	r5, r0
 8004a24:	b118      	cbz	r0, 8004a2e <__swbuf_r+0x12>
 8004a26:	6983      	ldr	r3, [r0, #24]
 8004a28:	b90b      	cbnz	r3, 8004a2e <__swbuf_r+0x12>
 8004a2a:	f000 f9d1 	bl	8004dd0 <__sinit>
 8004a2e:	4b21      	ldr	r3, [pc, #132]	; (8004ab4 <__swbuf_r+0x98>)
 8004a30:	429c      	cmp	r4, r3
 8004a32:	d12b      	bne.n	8004a8c <__swbuf_r+0x70>
 8004a34:	686c      	ldr	r4, [r5, #4]
 8004a36:	69a3      	ldr	r3, [r4, #24]
 8004a38:	60a3      	str	r3, [r4, #8]
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	071a      	lsls	r2, r3, #28
 8004a3e:	d52f      	bpl.n	8004aa0 <__swbuf_r+0x84>
 8004a40:	6923      	ldr	r3, [r4, #16]
 8004a42:	b36b      	cbz	r3, 8004aa0 <__swbuf_r+0x84>
 8004a44:	6923      	ldr	r3, [r4, #16]
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	1ac0      	subs	r0, r0, r3
 8004a4a:	6963      	ldr	r3, [r4, #20]
 8004a4c:	b2f6      	uxtb	r6, r6
 8004a4e:	4283      	cmp	r3, r0
 8004a50:	4637      	mov	r7, r6
 8004a52:	dc04      	bgt.n	8004a5e <__swbuf_r+0x42>
 8004a54:	4621      	mov	r1, r4
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 f926 	bl	8004ca8 <_fflush_r>
 8004a5c:	bb30      	cbnz	r0, 8004aac <__swbuf_r+0x90>
 8004a5e:	68a3      	ldr	r3, [r4, #8]
 8004a60:	3b01      	subs	r3, #1
 8004a62:	60a3      	str	r3, [r4, #8]
 8004a64:	6823      	ldr	r3, [r4, #0]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	6022      	str	r2, [r4, #0]
 8004a6a:	701e      	strb	r6, [r3, #0]
 8004a6c:	6963      	ldr	r3, [r4, #20]
 8004a6e:	3001      	adds	r0, #1
 8004a70:	4283      	cmp	r3, r0
 8004a72:	d004      	beq.n	8004a7e <__swbuf_r+0x62>
 8004a74:	89a3      	ldrh	r3, [r4, #12]
 8004a76:	07db      	lsls	r3, r3, #31
 8004a78:	d506      	bpl.n	8004a88 <__swbuf_r+0x6c>
 8004a7a:	2e0a      	cmp	r6, #10
 8004a7c:	d104      	bne.n	8004a88 <__swbuf_r+0x6c>
 8004a7e:	4621      	mov	r1, r4
 8004a80:	4628      	mov	r0, r5
 8004a82:	f000 f911 	bl	8004ca8 <_fflush_r>
 8004a86:	b988      	cbnz	r0, 8004aac <__swbuf_r+0x90>
 8004a88:	4638      	mov	r0, r7
 8004a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a8c:	4b0a      	ldr	r3, [pc, #40]	; (8004ab8 <__swbuf_r+0x9c>)
 8004a8e:	429c      	cmp	r4, r3
 8004a90:	d101      	bne.n	8004a96 <__swbuf_r+0x7a>
 8004a92:	68ac      	ldr	r4, [r5, #8]
 8004a94:	e7cf      	b.n	8004a36 <__swbuf_r+0x1a>
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <__swbuf_r+0xa0>)
 8004a98:	429c      	cmp	r4, r3
 8004a9a:	bf08      	it	eq
 8004a9c:	68ec      	ldreq	r4, [r5, #12]
 8004a9e:	e7ca      	b.n	8004a36 <__swbuf_r+0x1a>
 8004aa0:	4621      	mov	r1, r4
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 f80c 	bl	8004ac0 <__swsetup_r>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d0cb      	beq.n	8004a44 <__swbuf_r+0x28>
 8004aac:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004ab0:	e7ea      	b.n	8004a88 <__swbuf_r+0x6c>
 8004ab2:	bf00      	nop
 8004ab4:	0800594c 	.word	0x0800594c
 8004ab8:	0800596c 	.word	0x0800596c
 8004abc:	0800592c 	.word	0x0800592c

08004ac0 <__swsetup_r>:
 8004ac0:	4b32      	ldr	r3, [pc, #200]	; (8004b8c <__swsetup_r+0xcc>)
 8004ac2:	b570      	push	{r4, r5, r6, lr}
 8004ac4:	681d      	ldr	r5, [r3, #0]
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	460c      	mov	r4, r1
 8004aca:	b125      	cbz	r5, 8004ad6 <__swsetup_r+0x16>
 8004acc:	69ab      	ldr	r3, [r5, #24]
 8004ace:	b913      	cbnz	r3, 8004ad6 <__swsetup_r+0x16>
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 f97d 	bl	8004dd0 <__sinit>
 8004ad6:	4b2e      	ldr	r3, [pc, #184]	; (8004b90 <__swsetup_r+0xd0>)
 8004ad8:	429c      	cmp	r4, r3
 8004ada:	d10f      	bne.n	8004afc <__swsetup_r+0x3c>
 8004adc:	686c      	ldr	r4, [r5, #4]
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ae4:	0719      	lsls	r1, r3, #28
 8004ae6:	d42c      	bmi.n	8004b42 <__swsetup_r+0x82>
 8004ae8:	06dd      	lsls	r5, r3, #27
 8004aea:	d411      	bmi.n	8004b10 <__swsetup_r+0x50>
 8004aec:	2309      	movs	r3, #9
 8004aee:	6033      	str	r3, [r6, #0]
 8004af0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004af4:	81a3      	strh	r3, [r4, #12]
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004afa:	e03e      	b.n	8004b7a <__swsetup_r+0xba>
 8004afc:	4b25      	ldr	r3, [pc, #148]	; (8004b94 <__swsetup_r+0xd4>)
 8004afe:	429c      	cmp	r4, r3
 8004b00:	d101      	bne.n	8004b06 <__swsetup_r+0x46>
 8004b02:	68ac      	ldr	r4, [r5, #8]
 8004b04:	e7eb      	b.n	8004ade <__swsetup_r+0x1e>
 8004b06:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <__swsetup_r+0xd8>)
 8004b08:	429c      	cmp	r4, r3
 8004b0a:	bf08      	it	eq
 8004b0c:	68ec      	ldreq	r4, [r5, #12]
 8004b0e:	e7e6      	b.n	8004ade <__swsetup_r+0x1e>
 8004b10:	0758      	lsls	r0, r3, #29
 8004b12:	d512      	bpl.n	8004b3a <__swsetup_r+0x7a>
 8004b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b16:	b141      	cbz	r1, 8004b2a <__swsetup_r+0x6a>
 8004b18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b1c:	4299      	cmp	r1, r3
 8004b1e:	d002      	beq.n	8004b26 <__swsetup_r+0x66>
 8004b20:	4630      	mov	r0, r6
 8004b22:	f7ff fdfd 	bl	8004720 <_free_r>
 8004b26:	2300      	movs	r3, #0
 8004b28:	6363      	str	r3, [r4, #52]	; 0x34
 8004b2a:	89a3      	ldrh	r3, [r4, #12]
 8004b2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004b30:	81a3      	strh	r3, [r4, #12]
 8004b32:	2300      	movs	r3, #0
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	6923      	ldr	r3, [r4, #16]
 8004b38:	6023      	str	r3, [r4, #0]
 8004b3a:	89a3      	ldrh	r3, [r4, #12]
 8004b3c:	f043 0308 	orr.w	r3, r3, #8
 8004b40:	81a3      	strh	r3, [r4, #12]
 8004b42:	6923      	ldr	r3, [r4, #16]
 8004b44:	b94b      	cbnz	r3, 8004b5a <__swsetup_r+0x9a>
 8004b46:	89a3      	ldrh	r3, [r4, #12]
 8004b48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b50:	d003      	beq.n	8004b5a <__swsetup_r+0x9a>
 8004b52:	4621      	mov	r1, r4
 8004b54:	4630      	mov	r0, r6
 8004b56:	f000 fa01 	bl	8004f5c <__smakebuf_r>
 8004b5a:	89a0      	ldrh	r0, [r4, #12]
 8004b5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004b60:	f010 0301 	ands.w	r3, r0, #1
 8004b64:	d00a      	beq.n	8004b7c <__swsetup_r+0xbc>
 8004b66:	2300      	movs	r3, #0
 8004b68:	60a3      	str	r3, [r4, #8]
 8004b6a:	6963      	ldr	r3, [r4, #20]
 8004b6c:	425b      	negs	r3, r3
 8004b6e:	61a3      	str	r3, [r4, #24]
 8004b70:	6923      	ldr	r3, [r4, #16]
 8004b72:	b943      	cbnz	r3, 8004b86 <__swsetup_r+0xc6>
 8004b74:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004b78:	d1ba      	bne.n	8004af0 <__swsetup_r+0x30>
 8004b7a:	bd70      	pop	{r4, r5, r6, pc}
 8004b7c:	0781      	lsls	r1, r0, #30
 8004b7e:	bf58      	it	pl
 8004b80:	6963      	ldrpl	r3, [r4, #20]
 8004b82:	60a3      	str	r3, [r4, #8]
 8004b84:	e7f4      	b.n	8004b70 <__swsetup_r+0xb0>
 8004b86:	2000      	movs	r0, #0
 8004b88:	e7f7      	b.n	8004b7a <__swsetup_r+0xba>
 8004b8a:	bf00      	nop
 8004b8c:	20000034 	.word	0x20000034
 8004b90:	0800594c 	.word	0x0800594c
 8004b94:	0800596c 	.word	0x0800596c
 8004b98:	0800592c 	.word	0x0800592c

08004b9c <__sflush_r>:
 8004b9c:	898a      	ldrh	r2, [r1, #12]
 8004b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	0710      	lsls	r0, r2, #28
 8004ba6:	460c      	mov	r4, r1
 8004ba8:	d458      	bmi.n	8004c5c <__sflush_r+0xc0>
 8004baa:	684b      	ldr	r3, [r1, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	dc05      	bgt.n	8004bbc <__sflush_r+0x20>
 8004bb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	dc02      	bgt.n	8004bbc <__sflush_r+0x20>
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004bbe:	2e00      	cmp	r6, #0
 8004bc0:	d0f9      	beq.n	8004bb6 <__sflush_r+0x1a>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004bc8:	682f      	ldr	r7, [r5, #0]
 8004bca:	602b      	str	r3, [r5, #0]
 8004bcc:	d032      	beq.n	8004c34 <__sflush_r+0x98>
 8004bce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	075a      	lsls	r2, r3, #29
 8004bd4:	d505      	bpl.n	8004be2 <__sflush_r+0x46>
 8004bd6:	6863      	ldr	r3, [r4, #4]
 8004bd8:	1ac0      	subs	r0, r0, r3
 8004bda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004bdc:	b10b      	cbz	r3, 8004be2 <__sflush_r+0x46>
 8004bde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004be0:	1ac0      	subs	r0, r0, r3
 8004be2:	2300      	movs	r3, #0
 8004be4:	4602      	mov	r2, r0
 8004be6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004be8:	6a21      	ldr	r1, [r4, #32]
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b0      	blx	r6
 8004bee:	1c43      	adds	r3, r0, #1
 8004bf0:	89a3      	ldrh	r3, [r4, #12]
 8004bf2:	d106      	bne.n	8004c02 <__sflush_r+0x66>
 8004bf4:	6829      	ldr	r1, [r5, #0]
 8004bf6:	291d      	cmp	r1, #29
 8004bf8:	d82c      	bhi.n	8004c54 <__sflush_r+0xb8>
 8004bfa:	4a2a      	ldr	r2, [pc, #168]	; (8004ca4 <__sflush_r+0x108>)
 8004bfc:	40ca      	lsrs	r2, r1
 8004bfe:	07d6      	lsls	r6, r2, #31
 8004c00:	d528      	bpl.n	8004c54 <__sflush_r+0xb8>
 8004c02:	2200      	movs	r2, #0
 8004c04:	6062      	str	r2, [r4, #4]
 8004c06:	04d9      	lsls	r1, r3, #19
 8004c08:	6922      	ldr	r2, [r4, #16]
 8004c0a:	6022      	str	r2, [r4, #0]
 8004c0c:	d504      	bpl.n	8004c18 <__sflush_r+0x7c>
 8004c0e:	1c42      	adds	r2, r0, #1
 8004c10:	d101      	bne.n	8004c16 <__sflush_r+0x7a>
 8004c12:	682b      	ldr	r3, [r5, #0]
 8004c14:	b903      	cbnz	r3, 8004c18 <__sflush_r+0x7c>
 8004c16:	6560      	str	r0, [r4, #84]	; 0x54
 8004c18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c1a:	602f      	str	r7, [r5, #0]
 8004c1c:	2900      	cmp	r1, #0
 8004c1e:	d0ca      	beq.n	8004bb6 <__sflush_r+0x1a>
 8004c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c24:	4299      	cmp	r1, r3
 8004c26:	d002      	beq.n	8004c2e <__sflush_r+0x92>
 8004c28:	4628      	mov	r0, r5
 8004c2a:	f7ff fd79 	bl	8004720 <_free_r>
 8004c2e:	2000      	movs	r0, #0
 8004c30:	6360      	str	r0, [r4, #52]	; 0x34
 8004c32:	e7c1      	b.n	8004bb8 <__sflush_r+0x1c>
 8004c34:	6a21      	ldr	r1, [r4, #32]
 8004c36:	2301      	movs	r3, #1
 8004c38:	4628      	mov	r0, r5
 8004c3a:	47b0      	blx	r6
 8004c3c:	1c41      	adds	r1, r0, #1
 8004c3e:	d1c7      	bne.n	8004bd0 <__sflush_r+0x34>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d0c4      	beq.n	8004bd0 <__sflush_r+0x34>
 8004c46:	2b1d      	cmp	r3, #29
 8004c48:	d001      	beq.n	8004c4e <__sflush_r+0xb2>
 8004c4a:	2b16      	cmp	r3, #22
 8004c4c:	d101      	bne.n	8004c52 <__sflush_r+0xb6>
 8004c4e:	602f      	str	r7, [r5, #0]
 8004c50:	e7b1      	b.n	8004bb6 <__sflush_r+0x1a>
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	e7ad      	b.n	8004bb8 <__sflush_r+0x1c>
 8004c5c:	690f      	ldr	r7, [r1, #16]
 8004c5e:	2f00      	cmp	r7, #0
 8004c60:	d0a9      	beq.n	8004bb6 <__sflush_r+0x1a>
 8004c62:	0793      	lsls	r3, r2, #30
 8004c64:	680e      	ldr	r6, [r1, #0]
 8004c66:	bf08      	it	eq
 8004c68:	694b      	ldreq	r3, [r1, #20]
 8004c6a:	600f      	str	r7, [r1, #0]
 8004c6c:	bf18      	it	ne
 8004c6e:	2300      	movne	r3, #0
 8004c70:	eba6 0807 	sub.w	r8, r6, r7
 8004c74:	608b      	str	r3, [r1, #8]
 8004c76:	f1b8 0f00 	cmp.w	r8, #0
 8004c7a:	dd9c      	ble.n	8004bb6 <__sflush_r+0x1a>
 8004c7c:	6a21      	ldr	r1, [r4, #32]
 8004c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c80:	4643      	mov	r3, r8
 8004c82:	463a      	mov	r2, r7
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b0      	blx	r6
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	dc06      	bgt.n	8004c9a <__sflush_r+0xfe>
 8004c8c:	89a3      	ldrh	r3, [r4, #12]
 8004c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c92:	81a3      	strh	r3, [r4, #12]
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004c98:	e78e      	b.n	8004bb8 <__sflush_r+0x1c>
 8004c9a:	4407      	add	r7, r0
 8004c9c:	eba8 0800 	sub.w	r8, r8, r0
 8004ca0:	e7e9      	b.n	8004c76 <__sflush_r+0xda>
 8004ca2:	bf00      	nop
 8004ca4:	20400001 	.word	0x20400001

08004ca8 <_fflush_r>:
 8004ca8:	b538      	push	{r3, r4, r5, lr}
 8004caa:	690b      	ldr	r3, [r1, #16]
 8004cac:	4605      	mov	r5, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	b913      	cbnz	r3, 8004cb8 <_fflush_r+0x10>
 8004cb2:	2500      	movs	r5, #0
 8004cb4:	4628      	mov	r0, r5
 8004cb6:	bd38      	pop	{r3, r4, r5, pc}
 8004cb8:	b118      	cbz	r0, 8004cc2 <_fflush_r+0x1a>
 8004cba:	6983      	ldr	r3, [r0, #24]
 8004cbc:	b90b      	cbnz	r3, 8004cc2 <_fflush_r+0x1a>
 8004cbe:	f000 f887 	bl	8004dd0 <__sinit>
 8004cc2:	4b14      	ldr	r3, [pc, #80]	; (8004d14 <_fflush_r+0x6c>)
 8004cc4:	429c      	cmp	r4, r3
 8004cc6:	d11b      	bne.n	8004d00 <_fflush_r+0x58>
 8004cc8:	686c      	ldr	r4, [r5, #4]
 8004cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d0ef      	beq.n	8004cb2 <_fflush_r+0xa>
 8004cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004cd4:	07d0      	lsls	r0, r2, #31
 8004cd6:	d404      	bmi.n	8004ce2 <_fflush_r+0x3a>
 8004cd8:	0599      	lsls	r1, r3, #22
 8004cda:	d402      	bmi.n	8004ce2 <_fflush_r+0x3a>
 8004cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cde:	f000 f915 	bl	8004f0c <__retarget_lock_acquire_recursive>
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	4621      	mov	r1, r4
 8004ce6:	f7ff ff59 	bl	8004b9c <__sflush_r>
 8004cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cec:	07da      	lsls	r2, r3, #31
 8004cee:	4605      	mov	r5, r0
 8004cf0:	d4e0      	bmi.n	8004cb4 <_fflush_r+0xc>
 8004cf2:	89a3      	ldrh	r3, [r4, #12]
 8004cf4:	059b      	lsls	r3, r3, #22
 8004cf6:	d4dd      	bmi.n	8004cb4 <_fflush_r+0xc>
 8004cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cfa:	f000 f908 	bl	8004f0e <__retarget_lock_release_recursive>
 8004cfe:	e7d9      	b.n	8004cb4 <_fflush_r+0xc>
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <_fflush_r+0x70>)
 8004d02:	429c      	cmp	r4, r3
 8004d04:	d101      	bne.n	8004d0a <_fflush_r+0x62>
 8004d06:	68ac      	ldr	r4, [r5, #8]
 8004d08:	e7df      	b.n	8004cca <_fflush_r+0x22>
 8004d0a:	4b04      	ldr	r3, [pc, #16]	; (8004d1c <_fflush_r+0x74>)
 8004d0c:	429c      	cmp	r4, r3
 8004d0e:	bf08      	it	eq
 8004d10:	68ec      	ldreq	r4, [r5, #12]
 8004d12:	e7da      	b.n	8004cca <_fflush_r+0x22>
 8004d14:	0800594c 	.word	0x0800594c
 8004d18:	0800596c 	.word	0x0800596c
 8004d1c:	0800592c 	.word	0x0800592c

08004d20 <std>:
 8004d20:	2300      	movs	r3, #0
 8004d22:	b510      	push	{r4, lr}
 8004d24:	4604      	mov	r4, r0
 8004d26:	e9c0 3300 	strd	r3, r3, [r0]
 8004d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004d2e:	6083      	str	r3, [r0, #8]
 8004d30:	8181      	strh	r1, [r0, #12]
 8004d32:	6643      	str	r3, [r0, #100]	; 0x64
 8004d34:	81c2      	strh	r2, [r0, #14]
 8004d36:	6183      	str	r3, [r0, #24]
 8004d38:	4619      	mov	r1, r3
 8004d3a:	2208      	movs	r2, #8
 8004d3c:	305c      	adds	r0, #92	; 0x5c
 8004d3e:	f7ff fce7 	bl	8004710 <memset>
 8004d42:	4b05      	ldr	r3, [pc, #20]	; (8004d58 <std+0x38>)
 8004d44:	6263      	str	r3, [r4, #36]	; 0x24
 8004d46:	4b05      	ldr	r3, [pc, #20]	; (8004d5c <std+0x3c>)
 8004d48:	62a3      	str	r3, [r4, #40]	; 0x28
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <std+0x40>)
 8004d4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <std+0x44>)
 8004d50:	6224      	str	r4, [r4, #32]
 8004d52:	6323      	str	r3, [r4, #48]	; 0x30
 8004d54:	bd10      	pop	{r4, pc}
 8004d56:	bf00      	nop
 8004d58:	080055d1 	.word	0x080055d1
 8004d5c:	080055f3 	.word	0x080055f3
 8004d60:	0800562b 	.word	0x0800562b
 8004d64:	0800564f 	.word	0x0800564f

08004d68 <_cleanup_r>:
 8004d68:	4901      	ldr	r1, [pc, #4]	; (8004d70 <_cleanup_r+0x8>)
 8004d6a:	f000 b8af 	b.w	8004ecc <_fwalk_reent>
 8004d6e:	bf00      	nop
 8004d70:	08004ca9 	.word	0x08004ca9

08004d74 <__sfmoreglue>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	2268      	movs	r2, #104	; 0x68
 8004d78:	1e4d      	subs	r5, r1, #1
 8004d7a:	4355      	muls	r5, r2
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d82:	f7ff fd39 	bl	80047f8 <_malloc_r>
 8004d86:	4604      	mov	r4, r0
 8004d88:	b140      	cbz	r0, 8004d9c <__sfmoreglue+0x28>
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d90:	300c      	adds	r0, #12
 8004d92:	60a0      	str	r0, [r4, #8]
 8004d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d98:	f7ff fcba 	bl	8004710 <memset>
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}

08004da0 <__sfp_lock_acquire>:
 8004da0:	4801      	ldr	r0, [pc, #4]	; (8004da8 <__sfp_lock_acquire+0x8>)
 8004da2:	f000 b8b3 	b.w	8004f0c <__retarget_lock_acquire_recursive>
 8004da6:	bf00      	nop
 8004da8:	200001dd 	.word	0x200001dd

08004dac <__sfp_lock_release>:
 8004dac:	4801      	ldr	r0, [pc, #4]	; (8004db4 <__sfp_lock_release+0x8>)
 8004dae:	f000 b8ae 	b.w	8004f0e <__retarget_lock_release_recursive>
 8004db2:	bf00      	nop
 8004db4:	200001dd 	.word	0x200001dd

08004db8 <__sinit_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	; (8004dc0 <__sinit_lock_acquire+0x8>)
 8004dba:	f000 b8a7 	b.w	8004f0c <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	200001de 	.word	0x200001de

08004dc4 <__sinit_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	; (8004dcc <__sinit_lock_release+0x8>)
 8004dc6:	f000 b8a2 	b.w	8004f0e <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	200001de 	.word	0x200001de

08004dd0 <__sinit>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	f7ff fff0 	bl	8004db8 <__sinit_lock_acquire>
 8004dd8:	69a3      	ldr	r3, [r4, #24]
 8004dda:	b11b      	cbz	r3, 8004de4 <__sinit+0x14>
 8004ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de0:	f7ff bff0 	b.w	8004dc4 <__sinit_lock_release>
 8004de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004de8:	6523      	str	r3, [r4, #80]	; 0x50
 8004dea:	4b13      	ldr	r3, [pc, #76]	; (8004e38 <__sinit+0x68>)
 8004dec:	4a13      	ldr	r2, [pc, #76]	; (8004e3c <__sinit+0x6c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004df2:	42a3      	cmp	r3, r4
 8004df4:	bf04      	itt	eq
 8004df6:	2301      	moveq	r3, #1
 8004df8:	61a3      	streq	r3, [r4, #24]
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 f820 	bl	8004e40 <__sfp>
 8004e00:	6060      	str	r0, [r4, #4]
 8004e02:	4620      	mov	r0, r4
 8004e04:	f000 f81c 	bl	8004e40 <__sfp>
 8004e08:	60a0      	str	r0, [r4, #8]
 8004e0a:	4620      	mov	r0, r4
 8004e0c:	f000 f818 	bl	8004e40 <__sfp>
 8004e10:	2200      	movs	r2, #0
 8004e12:	60e0      	str	r0, [r4, #12]
 8004e14:	2104      	movs	r1, #4
 8004e16:	6860      	ldr	r0, [r4, #4]
 8004e18:	f7ff ff82 	bl	8004d20 <std>
 8004e1c:	68a0      	ldr	r0, [r4, #8]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	2109      	movs	r1, #9
 8004e22:	f7ff ff7d 	bl	8004d20 <std>
 8004e26:	68e0      	ldr	r0, [r4, #12]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	2112      	movs	r1, #18
 8004e2c:	f7ff ff78 	bl	8004d20 <std>
 8004e30:	2301      	movs	r3, #1
 8004e32:	61a3      	str	r3, [r4, #24]
 8004e34:	e7d2      	b.n	8004ddc <__sinit+0xc>
 8004e36:	bf00      	nop
 8004e38:	08005928 	.word	0x08005928
 8004e3c:	08004d69 	.word	0x08004d69

08004e40 <__sfp>:
 8004e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e42:	4607      	mov	r7, r0
 8004e44:	f7ff ffac 	bl	8004da0 <__sfp_lock_acquire>
 8004e48:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <__sfp+0x84>)
 8004e4a:	681e      	ldr	r6, [r3, #0]
 8004e4c:	69b3      	ldr	r3, [r6, #24]
 8004e4e:	b913      	cbnz	r3, 8004e56 <__sfp+0x16>
 8004e50:	4630      	mov	r0, r6
 8004e52:	f7ff ffbd 	bl	8004dd0 <__sinit>
 8004e56:	3648      	adds	r6, #72	; 0x48
 8004e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	d503      	bpl.n	8004e68 <__sfp+0x28>
 8004e60:	6833      	ldr	r3, [r6, #0]
 8004e62:	b30b      	cbz	r3, 8004ea8 <__sfp+0x68>
 8004e64:	6836      	ldr	r6, [r6, #0]
 8004e66:	e7f7      	b.n	8004e58 <__sfp+0x18>
 8004e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004e6c:	b9d5      	cbnz	r5, 8004ea4 <__sfp+0x64>
 8004e6e:	4b16      	ldr	r3, [pc, #88]	; (8004ec8 <__sfp+0x88>)
 8004e70:	60e3      	str	r3, [r4, #12]
 8004e72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004e76:	6665      	str	r5, [r4, #100]	; 0x64
 8004e78:	f000 f847 	bl	8004f0a <__retarget_lock_init_recursive>
 8004e7c:	f7ff ff96 	bl	8004dac <__sfp_lock_release>
 8004e80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e88:	6025      	str	r5, [r4, #0]
 8004e8a:	61a5      	str	r5, [r4, #24]
 8004e8c:	2208      	movs	r2, #8
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e94:	f7ff fc3c 	bl	8004710 <memset>
 8004e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ea4:	3468      	adds	r4, #104	; 0x68
 8004ea6:	e7d9      	b.n	8004e5c <__sfp+0x1c>
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	4638      	mov	r0, r7
 8004eac:	f7ff ff62 	bl	8004d74 <__sfmoreglue>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	6030      	str	r0, [r6, #0]
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1d5      	bne.n	8004e64 <__sfp+0x24>
 8004eb8:	f7ff ff78 	bl	8004dac <__sfp_lock_release>
 8004ebc:	230c      	movs	r3, #12
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	e7ee      	b.n	8004ea0 <__sfp+0x60>
 8004ec2:	bf00      	nop
 8004ec4:	08005928 	.word	0x08005928
 8004ec8:	ffff0001 	.word	0xffff0001

08004ecc <_fwalk_reent>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	4606      	mov	r6, r0
 8004ed2:	4688      	mov	r8, r1
 8004ed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ed8:	2700      	movs	r7, #0
 8004eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ede:	f1b9 0901 	subs.w	r9, r9, #1
 8004ee2:	d505      	bpl.n	8004ef0 <_fwalk_reent+0x24>
 8004ee4:	6824      	ldr	r4, [r4, #0]
 8004ee6:	2c00      	cmp	r4, #0
 8004ee8:	d1f7      	bne.n	8004eda <_fwalk_reent+0xe>
 8004eea:	4638      	mov	r0, r7
 8004eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef0:	89ab      	ldrh	r3, [r5, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d907      	bls.n	8004f06 <_fwalk_reent+0x3a>
 8004ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004efa:	3301      	adds	r3, #1
 8004efc:	d003      	beq.n	8004f06 <_fwalk_reent+0x3a>
 8004efe:	4629      	mov	r1, r5
 8004f00:	4630      	mov	r0, r6
 8004f02:	47c0      	blx	r8
 8004f04:	4307      	orrs	r7, r0
 8004f06:	3568      	adds	r5, #104	; 0x68
 8004f08:	e7e9      	b.n	8004ede <_fwalk_reent+0x12>

08004f0a <__retarget_lock_init_recursive>:
 8004f0a:	4770      	bx	lr

08004f0c <__retarget_lock_acquire_recursive>:
 8004f0c:	4770      	bx	lr

08004f0e <__retarget_lock_release_recursive>:
 8004f0e:	4770      	bx	lr

08004f10 <__swhatbuf_r>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	460e      	mov	r6, r1
 8004f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	b096      	sub	sp, #88	; 0x58
 8004f1c:	4614      	mov	r4, r2
 8004f1e:	461d      	mov	r5, r3
 8004f20:	da08      	bge.n	8004f34 <__swhatbuf_r+0x24>
 8004f22:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	602a      	str	r2, [r5, #0]
 8004f2a:	061a      	lsls	r2, r3, #24
 8004f2c:	d410      	bmi.n	8004f50 <__swhatbuf_r+0x40>
 8004f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f32:	e00e      	b.n	8004f52 <__swhatbuf_r+0x42>
 8004f34:	466a      	mov	r2, sp
 8004f36:	f000 fbb1 	bl	800569c <_fstat_r>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	dbf1      	blt.n	8004f22 <__swhatbuf_r+0x12>
 8004f3e:	9a01      	ldr	r2, [sp, #4]
 8004f40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f48:	425a      	negs	r2, r3
 8004f4a:	415a      	adcs	r2, r3
 8004f4c:	602a      	str	r2, [r5, #0]
 8004f4e:	e7ee      	b.n	8004f2e <__swhatbuf_r+0x1e>
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	2000      	movs	r0, #0
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	b016      	add	sp, #88	; 0x58
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08004f5c <__smakebuf_r>:
 8004f5c:	898b      	ldrh	r3, [r1, #12]
 8004f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f60:	079d      	lsls	r5, r3, #30
 8004f62:	4606      	mov	r6, r0
 8004f64:	460c      	mov	r4, r1
 8004f66:	d507      	bpl.n	8004f78 <__smakebuf_r+0x1c>
 8004f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	6123      	str	r3, [r4, #16]
 8004f70:	2301      	movs	r3, #1
 8004f72:	6163      	str	r3, [r4, #20]
 8004f74:	b002      	add	sp, #8
 8004f76:	bd70      	pop	{r4, r5, r6, pc}
 8004f78:	ab01      	add	r3, sp, #4
 8004f7a:	466a      	mov	r2, sp
 8004f7c:	f7ff ffc8 	bl	8004f10 <__swhatbuf_r>
 8004f80:	9900      	ldr	r1, [sp, #0]
 8004f82:	4605      	mov	r5, r0
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff fc37 	bl	80047f8 <_malloc_r>
 8004f8a:	b948      	cbnz	r0, 8004fa0 <__smakebuf_r+0x44>
 8004f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f90:	059a      	lsls	r2, r3, #22
 8004f92:	d4ef      	bmi.n	8004f74 <__smakebuf_r+0x18>
 8004f94:	f023 0303 	bic.w	r3, r3, #3
 8004f98:	f043 0302 	orr.w	r3, r3, #2
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	e7e3      	b.n	8004f68 <__smakebuf_r+0xc>
 8004fa0:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <__smakebuf_r+0x7c>)
 8004fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004fa4:	89a3      	ldrh	r3, [r4, #12]
 8004fa6:	6020      	str	r0, [r4, #0]
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	81a3      	strh	r3, [r4, #12]
 8004fae:	9b00      	ldr	r3, [sp, #0]
 8004fb0:	6163      	str	r3, [r4, #20]
 8004fb2:	9b01      	ldr	r3, [sp, #4]
 8004fb4:	6120      	str	r0, [r4, #16]
 8004fb6:	b15b      	cbz	r3, 8004fd0 <__smakebuf_r+0x74>
 8004fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f000 fb7f 	bl	80056c0 <_isatty_r>
 8004fc2:	b128      	cbz	r0, 8004fd0 <__smakebuf_r+0x74>
 8004fc4:	89a3      	ldrh	r3, [r4, #12]
 8004fc6:	f023 0303 	bic.w	r3, r3, #3
 8004fca:	f043 0301 	orr.w	r3, r3, #1
 8004fce:	81a3      	strh	r3, [r4, #12]
 8004fd0:	89a0      	ldrh	r0, [r4, #12]
 8004fd2:	4305      	orrs	r5, r0
 8004fd4:	81a5      	strh	r5, [r4, #12]
 8004fd6:	e7cd      	b.n	8004f74 <__smakebuf_r+0x18>
 8004fd8:	08004d69 	.word	0x08004d69

08004fdc <__malloc_lock>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__malloc_lock+0x8>)
 8004fde:	f7ff bf95 	b.w	8004f0c <__retarget_lock_acquire_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	200001dc 	.word	0x200001dc

08004fe8 <__malloc_unlock>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__malloc_unlock+0x8>)
 8004fea:	f7ff bf90 	b.w	8004f0e <__retarget_lock_release_recursive>
 8004fee:	bf00      	nop
 8004ff0:	200001dc 	.word	0x200001dc

08004ff4 <__sfputc_r>:
 8004ff4:	6893      	ldr	r3, [r2, #8]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	b410      	push	{r4}
 8004ffc:	6093      	str	r3, [r2, #8]
 8004ffe:	da08      	bge.n	8005012 <__sfputc_r+0x1e>
 8005000:	6994      	ldr	r4, [r2, #24]
 8005002:	42a3      	cmp	r3, r4
 8005004:	db01      	blt.n	800500a <__sfputc_r+0x16>
 8005006:	290a      	cmp	r1, #10
 8005008:	d103      	bne.n	8005012 <__sfputc_r+0x1e>
 800500a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800500e:	f7ff bd05 	b.w	8004a1c <__swbuf_r>
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	1c58      	adds	r0, r3, #1
 8005016:	6010      	str	r0, [r2, #0]
 8005018:	7019      	strb	r1, [r3, #0]
 800501a:	4608      	mov	r0, r1
 800501c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005020:	4770      	bx	lr

08005022 <__sfputs_r>:
 8005022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005024:	4606      	mov	r6, r0
 8005026:	460f      	mov	r7, r1
 8005028:	4614      	mov	r4, r2
 800502a:	18d5      	adds	r5, r2, r3
 800502c:	42ac      	cmp	r4, r5
 800502e:	d101      	bne.n	8005034 <__sfputs_r+0x12>
 8005030:	2000      	movs	r0, #0
 8005032:	e007      	b.n	8005044 <__sfputs_r+0x22>
 8005034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005038:	463a      	mov	r2, r7
 800503a:	4630      	mov	r0, r6
 800503c:	f7ff ffda 	bl	8004ff4 <__sfputc_r>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d1f3      	bne.n	800502c <__sfputs_r+0xa>
 8005044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005048 <_vfiprintf_r>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	460d      	mov	r5, r1
 800504e:	b09d      	sub	sp, #116	; 0x74
 8005050:	4614      	mov	r4, r2
 8005052:	4698      	mov	r8, r3
 8005054:	4606      	mov	r6, r0
 8005056:	b118      	cbz	r0, 8005060 <_vfiprintf_r+0x18>
 8005058:	6983      	ldr	r3, [r0, #24]
 800505a:	b90b      	cbnz	r3, 8005060 <_vfiprintf_r+0x18>
 800505c:	f7ff feb8 	bl	8004dd0 <__sinit>
 8005060:	4b89      	ldr	r3, [pc, #548]	; (8005288 <_vfiprintf_r+0x240>)
 8005062:	429d      	cmp	r5, r3
 8005064:	d11b      	bne.n	800509e <_vfiprintf_r+0x56>
 8005066:	6875      	ldr	r5, [r6, #4]
 8005068:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800506a:	07d9      	lsls	r1, r3, #31
 800506c:	d405      	bmi.n	800507a <_vfiprintf_r+0x32>
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	059a      	lsls	r2, r3, #22
 8005072:	d402      	bmi.n	800507a <_vfiprintf_r+0x32>
 8005074:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005076:	f7ff ff49 	bl	8004f0c <__retarget_lock_acquire_recursive>
 800507a:	89ab      	ldrh	r3, [r5, #12]
 800507c:	071b      	lsls	r3, r3, #28
 800507e:	d501      	bpl.n	8005084 <_vfiprintf_r+0x3c>
 8005080:	692b      	ldr	r3, [r5, #16]
 8005082:	b9eb      	cbnz	r3, 80050c0 <_vfiprintf_r+0x78>
 8005084:	4629      	mov	r1, r5
 8005086:	4630      	mov	r0, r6
 8005088:	f7ff fd1a 	bl	8004ac0 <__swsetup_r>
 800508c:	b1c0      	cbz	r0, 80050c0 <_vfiprintf_r+0x78>
 800508e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005090:	07dc      	lsls	r4, r3, #31
 8005092:	d50e      	bpl.n	80050b2 <_vfiprintf_r+0x6a>
 8005094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005098:	b01d      	add	sp, #116	; 0x74
 800509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800509e:	4b7b      	ldr	r3, [pc, #492]	; (800528c <_vfiprintf_r+0x244>)
 80050a0:	429d      	cmp	r5, r3
 80050a2:	d101      	bne.n	80050a8 <_vfiprintf_r+0x60>
 80050a4:	68b5      	ldr	r5, [r6, #8]
 80050a6:	e7df      	b.n	8005068 <_vfiprintf_r+0x20>
 80050a8:	4b79      	ldr	r3, [pc, #484]	; (8005290 <_vfiprintf_r+0x248>)
 80050aa:	429d      	cmp	r5, r3
 80050ac:	bf08      	it	eq
 80050ae:	68f5      	ldreq	r5, [r6, #12]
 80050b0:	e7da      	b.n	8005068 <_vfiprintf_r+0x20>
 80050b2:	89ab      	ldrh	r3, [r5, #12]
 80050b4:	0598      	lsls	r0, r3, #22
 80050b6:	d4ed      	bmi.n	8005094 <_vfiprintf_r+0x4c>
 80050b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050ba:	f7ff ff28 	bl	8004f0e <__retarget_lock_release_recursive>
 80050be:	e7e9      	b.n	8005094 <_vfiprintf_r+0x4c>
 80050c0:	2300      	movs	r3, #0
 80050c2:	9309      	str	r3, [sp, #36]	; 0x24
 80050c4:	2320      	movs	r3, #32
 80050c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ce:	2330      	movs	r3, #48	; 0x30
 80050d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005294 <_vfiprintf_r+0x24c>
 80050d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050d8:	f04f 0901 	mov.w	r9, #1
 80050dc:	4623      	mov	r3, r4
 80050de:	469a      	mov	sl, r3
 80050e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050e4:	b10a      	cbz	r2, 80050ea <_vfiprintf_r+0xa2>
 80050e6:	2a25      	cmp	r2, #37	; 0x25
 80050e8:	d1f9      	bne.n	80050de <_vfiprintf_r+0x96>
 80050ea:	ebba 0b04 	subs.w	fp, sl, r4
 80050ee:	d00b      	beq.n	8005108 <_vfiprintf_r+0xc0>
 80050f0:	465b      	mov	r3, fp
 80050f2:	4622      	mov	r2, r4
 80050f4:	4629      	mov	r1, r5
 80050f6:	4630      	mov	r0, r6
 80050f8:	f7ff ff93 	bl	8005022 <__sfputs_r>
 80050fc:	3001      	adds	r0, #1
 80050fe:	f000 80aa 	beq.w	8005256 <_vfiprintf_r+0x20e>
 8005102:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005104:	445a      	add	r2, fp
 8005106:	9209      	str	r2, [sp, #36]	; 0x24
 8005108:	f89a 3000 	ldrb.w	r3, [sl]
 800510c:	2b00      	cmp	r3, #0
 800510e:	f000 80a2 	beq.w	8005256 <_vfiprintf_r+0x20e>
 8005112:	2300      	movs	r3, #0
 8005114:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800511c:	f10a 0a01 	add.w	sl, sl, #1
 8005120:	9304      	str	r3, [sp, #16]
 8005122:	9307      	str	r3, [sp, #28]
 8005124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005128:	931a      	str	r3, [sp, #104]	; 0x68
 800512a:	4654      	mov	r4, sl
 800512c:	2205      	movs	r2, #5
 800512e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005132:	4858      	ldr	r0, [pc, #352]	; (8005294 <_vfiprintf_r+0x24c>)
 8005134:	f7fb f824 	bl	8000180 <memchr>
 8005138:	9a04      	ldr	r2, [sp, #16]
 800513a:	b9d8      	cbnz	r0, 8005174 <_vfiprintf_r+0x12c>
 800513c:	06d1      	lsls	r1, r2, #27
 800513e:	bf44      	itt	mi
 8005140:	2320      	movmi	r3, #32
 8005142:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005146:	0713      	lsls	r3, r2, #28
 8005148:	bf44      	itt	mi
 800514a:	232b      	movmi	r3, #43	; 0x2b
 800514c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005150:	f89a 3000 	ldrb.w	r3, [sl]
 8005154:	2b2a      	cmp	r3, #42	; 0x2a
 8005156:	d015      	beq.n	8005184 <_vfiprintf_r+0x13c>
 8005158:	9a07      	ldr	r2, [sp, #28]
 800515a:	4654      	mov	r4, sl
 800515c:	2000      	movs	r0, #0
 800515e:	f04f 0c0a 	mov.w	ip, #10
 8005162:	4621      	mov	r1, r4
 8005164:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005168:	3b30      	subs	r3, #48	; 0x30
 800516a:	2b09      	cmp	r3, #9
 800516c:	d94e      	bls.n	800520c <_vfiprintf_r+0x1c4>
 800516e:	b1b0      	cbz	r0, 800519e <_vfiprintf_r+0x156>
 8005170:	9207      	str	r2, [sp, #28]
 8005172:	e014      	b.n	800519e <_vfiprintf_r+0x156>
 8005174:	eba0 0308 	sub.w	r3, r0, r8
 8005178:	fa09 f303 	lsl.w	r3, r9, r3
 800517c:	4313      	orrs	r3, r2
 800517e:	9304      	str	r3, [sp, #16]
 8005180:	46a2      	mov	sl, r4
 8005182:	e7d2      	b.n	800512a <_vfiprintf_r+0xe2>
 8005184:	9b03      	ldr	r3, [sp, #12]
 8005186:	1d19      	adds	r1, r3, #4
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	9103      	str	r1, [sp, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	bfbb      	ittet	lt
 8005190:	425b      	neglt	r3, r3
 8005192:	f042 0202 	orrlt.w	r2, r2, #2
 8005196:	9307      	strge	r3, [sp, #28]
 8005198:	9307      	strlt	r3, [sp, #28]
 800519a:	bfb8      	it	lt
 800519c:	9204      	strlt	r2, [sp, #16]
 800519e:	7823      	ldrb	r3, [r4, #0]
 80051a0:	2b2e      	cmp	r3, #46	; 0x2e
 80051a2:	d10c      	bne.n	80051be <_vfiprintf_r+0x176>
 80051a4:	7863      	ldrb	r3, [r4, #1]
 80051a6:	2b2a      	cmp	r3, #42	; 0x2a
 80051a8:	d135      	bne.n	8005216 <_vfiprintf_r+0x1ce>
 80051aa:	9b03      	ldr	r3, [sp, #12]
 80051ac:	1d1a      	adds	r2, r3, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	9203      	str	r2, [sp, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	bfb8      	it	lt
 80051b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80051ba:	3402      	adds	r4, #2
 80051bc:	9305      	str	r3, [sp, #20]
 80051be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80052a4 <_vfiprintf_r+0x25c>
 80051c2:	7821      	ldrb	r1, [r4, #0]
 80051c4:	2203      	movs	r2, #3
 80051c6:	4650      	mov	r0, sl
 80051c8:	f7fa ffda 	bl	8000180 <memchr>
 80051cc:	b140      	cbz	r0, 80051e0 <_vfiprintf_r+0x198>
 80051ce:	2340      	movs	r3, #64	; 0x40
 80051d0:	eba0 000a 	sub.w	r0, r0, sl
 80051d4:	fa03 f000 	lsl.w	r0, r3, r0
 80051d8:	9b04      	ldr	r3, [sp, #16]
 80051da:	4303      	orrs	r3, r0
 80051dc:	3401      	adds	r4, #1
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e4:	482c      	ldr	r0, [pc, #176]	; (8005298 <_vfiprintf_r+0x250>)
 80051e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051ea:	2206      	movs	r2, #6
 80051ec:	f7fa ffc8 	bl	8000180 <memchr>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d03f      	beq.n	8005274 <_vfiprintf_r+0x22c>
 80051f4:	4b29      	ldr	r3, [pc, #164]	; (800529c <_vfiprintf_r+0x254>)
 80051f6:	bb1b      	cbnz	r3, 8005240 <_vfiprintf_r+0x1f8>
 80051f8:	9b03      	ldr	r3, [sp, #12]
 80051fa:	3307      	adds	r3, #7
 80051fc:	f023 0307 	bic.w	r3, r3, #7
 8005200:	3308      	adds	r3, #8
 8005202:	9303      	str	r3, [sp, #12]
 8005204:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005206:	443b      	add	r3, r7
 8005208:	9309      	str	r3, [sp, #36]	; 0x24
 800520a:	e767      	b.n	80050dc <_vfiprintf_r+0x94>
 800520c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005210:	460c      	mov	r4, r1
 8005212:	2001      	movs	r0, #1
 8005214:	e7a5      	b.n	8005162 <_vfiprintf_r+0x11a>
 8005216:	2300      	movs	r3, #0
 8005218:	3401      	adds	r4, #1
 800521a:	9305      	str	r3, [sp, #20]
 800521c:	4619      	mov	r1, r3
 800521e:	f04f 0c0a 	mov.w	ip, #10
 8005222:	4620      	mov	r0, r4
 8005224:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005228:	3a30      	subs	r2, #48	; 0x30
 800522a:	2a09      	cmp	r2, #9
 800522c:	d903      	bls.n	8005236 <_vfiprintf_r+0x1ee>
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0c5      	beq.n	80051be <_vfiprintf_r+0x176>
 8005232:	9105      	str	r1, [sp, #20]
 8005234:	e7c3      	b.n	80051be <_vfiprintf_r+0x176>
 8005236:	fb0c 2101 	mla	r1, ip, r1, r2
 800523a:	4604      	mov	r4, r0
 800523c:	2301      	movs	r3, #1
 800523e:	e7f0      	b.n	8005222 <_vfiprintf_r+0x1da>
 8005240:	ab03      	add	r3, sp, #12
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	462a      	mov	r2, r5
 8005246:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <_vfiprintf_r+0x258>)
 8005248:	a904      	add	r1, sp, #16
 800524a:	4630      	mov	r0, r6
 800524c:	f3af 8000 	nop.w
 8005250:	4607      	mov	r7, r0
 8005252:	1c78      	adds	r0, r7, #1
 8005254:	d1d6      	bne.n	8005204 <_vfiprintf_r+0x1bc>
 8005256:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005258:	07d9      	lsls	r1, r3, #31
 800525a:	d405      	bmi.n	8005268 <_vfiprintf_r+0x220>
 800525c:	89ab      	ldrh	r3, [r5, #12]
 800525e:	059a      	lsls	r2, r3, #22
 8005260:	d402      	bmi.n	8005268 <_vfiprintf_r+0x220>
 8005262:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005264:	f7ff fe53 	bl	8004f0e <__retarget_lock_release_recursive>
 8005268:	89ab      	ldrh	r3, [r5, #12]
 800526a:	065b      	lsls	r3, r3, #25
 800526c:	f53f af12 	bmi.w	8005094 <_vfiprintf_r+0x4c>
 8005270:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005272:	e711      	b.n	8005098 <_vfiprintf_r+0x50>
 8005274:	ab03      	add	r3, sp, #12
 8005276:	9300      	str	r3, [sp, #0]
 8005278:	462a      	mov	r2, r5
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <_vfiprintf_r+0x258>)
 800527c:	a904      	add	r1, sp, #16
 800527e:	4630      	mov	r0, r6
 8005280:	f000 f880 	bl	8005384 <_printf_i>
 8005284:	e7e4      	b.n	8005250 <_vfiprintf_r+0x208>
 8005286:	bf00      	nop
 8005288:	0800594c 	.word	0x0800594c
 800528c:	0800596c 	.word	0x0800596c
 8005290:	0800592c 	.word	0x0800592c
 8005294:	0800598c 	.word	0x0800598c
 8005298:	08005996 	.word	0x08005996
 800529c:	00000000 	.word	0x00000000
 80052a0:	08005023 	.word	0x08005023
 80052a4:	08005992 	.word	0x08005992

080052a8 <_printf_common>:
 80052a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	4616      	mov	r6, r2
 80052ae:	4699      	mov	r9, r3
 80052b0:	688a      	ldr	r2, [r1, #8]
 80052b2:	690b      	ldr	r3, [r1, #16]
 80052b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052b8:	4293      	cmp	r3, r2
 80052ba:	bfb8      	it	lt
 80052bc:	4613      	movlt	r3, r2
 80052be:	6033      	str	r3, [r6, #0]
 80052c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052c4:	4607      	mov	r7, r0
 80052c6:	460c      	mov	r4, r1
 80052c8:	b10a      	cbz	r2, 80052ce <_printf_common+0x26>
 80052ca:	3301      	adds	r3, #1
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	0699      	lsls	r1, r3, #26
 80052d2:	bf42      	ittt	mi
 80052d4:	6833      	ldrmi	r3, [r6, #0]
 80052d6:	3302      	addmi	r3, #2
 80052d8:	6033      	strmi	r3, [r6, #0]
 80052da:	6825      	ldr	r5, [r4, #0]
 80052dc:	f015 0506 	ands.w	r5, r5, #6
 80052e0:	d106      	bne.n	80052f0 <_printf_common+0x48>
 80052e2:	f104 0a19 	add.w	sl, r4, #25
 80052e6:	68e3      	ldr	r3, [r4, #12]
 80052e8:	6832      	ldr	r2, [r6, #0]
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	42ab      	cmp	r3, r5
 80052ee:	dc26      	bgt.n	800533e <_printf_common+0x96>
 80052f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052f4:	1e13      	subs	r3, r2, #0
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	bf18      	it	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	0692      	lsls	r2, r2, #26
 80052fe:	d42b      	bmi.n	8005358 <_printf_common+0xb0>
 8005300:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005304:	4649      	mov	r1, r9
 8005306:	4638      	mov	r0, r7
 8005308:	47c0      	blx	r8
 800530a:	3001      	adds	r0, #1
 800530c:	d01e      	beq.n	800534c <_printf_common+0xa4>
 800530e:	6823      	ldr	r3, [r4, #0]
 8005310:	68e5      	ldr	r5, [r4, #12]
 8005312:	6832      	ldr	r2, [r6, #0]
 8005314:	f003 0306 	and.w	r3, r3, #6
 8005318:	2b04      	cmp	r3, #4
 800531a:	bf08      	it	eq
 800531c:	1aad      	subeq	r5, r5, r2
 800531e:	68a3      	ldr	r3, [r4, #8]
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	bf0c      	ite	eq
 8005324:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005328:	2500      	movne	r5, #0
 800532a:	4293      	cmp	r3, r2
 800532c:	bfc4      	itt	gt
 800532e:	1a9b      	subgt	r3, r3, r2
 8005330:	18ed      	addgt	r5, r5, r3
 8005332:	2600      	movs	r6, #0
 8005334:	341a      	adds	r4, #26
 8005336:	42b5      	cmp	r5, r6
 8005338:	d11a      	bne.n	8005370 <_printf_common+0xc8>
 800533a:	2000      	movs	r0, #0
 800533c:	e008      	b.n	8005350 <_printf_common+0xa8>
 800533e:	2301      	movs	r3, #1
 8005340:	4652      	mov	r2, sl
 8005342:	4649      	mov	r1, r9
 8005344:	4638      	mov	r0, r7
 8005346:	47c0      	blx	r8
 8005348:	3001      	adds	r0, #1
 800534a:	d103      	bne.n	8005354 <_printf_common+0xac>
 800534c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005354:	3501      	adds	r5, #1
 8005356:	e7c6      	b.n	80052e6 <_printf_common+0x3e>
 8005358:	18e1      	adds	r1, r4, r3
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	2030      	movs	r0, #48	; 0x30
 800535e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005362:	4422      	add	r2, r4
 8005364:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005368:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800536c:	3302      	adds	r3, #2
 800536e:	e7c7      	b.n	8005300 <_printf_common+0x58>
 8005370:	2301      	movs	r3, #1
 8005372:	4622      	mov	r2, r4
 8005374:	4649      	mov	r1, r9
 8005376:	4638      	mov	r0, r7
 8005378:	47c0      	blx	r8
 800537a:	3001      	adds	r0, #1
 800537c:	d0e6      	beq.n	800534c <_printf_common+0xa4>
 800537e:	3601      	adds	r6, #1
 8005380:	e7d9      	b.n	8005336 <_printf_common+0x8e>
	...

08005384 <_printf_i>:
 8005384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005388:	7e0f      	ldrb	r7, [r1, #24]
 800538a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800538c:	2f78      	cmp	r7, #120	; 0x78
 800538e:	4691      	mov	r9, r2
 8005390:	4680      	mov	r8, r0
 8005392:	460c      	mov	r4, r1
 8005394:	469a      	mov	sl, r3
 8005396:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800539a:	d807      	bhi.n	80053ac <_printf_i+0x28>
 800539c:	2f62      	cmp	r7, #98	; 0x62
 800539e:	d80a      	bhi.n	80053b6 <_printf_i+0x32>
 80053a0:	2f00      	cmp	r7, #0
 80053a2:	f000 80d8 	beq.w	8005556 <_printf_i+0x1d2>
 80053a6:	2f58      	cmp	r7, #88	; 0x58
 80053a8:	f000 80a3 	beq.w	80054f2 <_printf_i+0x16e>
 80053ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053b4:	e03a      	b.n	800542c <_printf_i+0xa8>
 80053b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ba:	2b15      	cmp	r3, #21
 80053bc:	d8f6      	bhi.n	80053ac <_printf_i+0x28>
 80053be:	a101      	add	r1, pc, #4	; (adr r1, 80053c4 <_printf_i+0x40>)
 80053c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053c4:	0800541d 	.word	0x0800541d
 80053c8:	08005431 	.word	0x08005431
 80053cc:	080053ad 	.word	0x080053ad
 80053d0:	080053ad 	.word	0x080053ad
 80053d4:	080053ad 	.word	0x080053ad
 80053d8:	080053ad 	.word	0x080053ad
 80053dc:	08005431 	.word	0x08005431
 80053e0:	080053ad 	.word	0x080053ad
 80053e4:	080053ad 	.word	0x080053ad
 80053e8:	080053ad 	.word	0x080053ad
 80053ec:	080053ad 	.word	0x080053ad
 80053f0:	0800553d 	.word	0x0800553d
 80053f4:	08005461 	.word	0x08005461
 80053f8:	0800551f 	.word	0x0800551f
 80053fc:	080053ad 	.word	0x080053ad
 8005400:	080053ad 	.word	0x080053ad
 8005404:	0800555f 	.word	0x0800555f
 8005408:	080053ad 	.word	0x080053ad
 800540c:	08005461 	.word	0x08005461
 8005410:	080053ad 	.word	0x080053ad
 8005414:	080053ad 	.word	0x080053ad
 8005418:	08005527 	.word	0x08005527
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	1d1a      	adds	r2, r3, #4
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	602a      	str	r2, [r5, #0]
 8005424:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005428:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800542c:	2301      	movs	r3, #1
 800542e:	e0a3      	b.n	8005578 <_printf_i+0x1f4>
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	6829      	ldr	r1, [r5, #0]
 8005434:	0606      	lsls	r6, r0, #24
 8005436:	f101 0304 	add.w	r3, r1, #4
 800543a:	d50a      	bpl.n	8005452 <_printf_i+0xce>
 800543c:	680e      	ldr	r6, [r1, #0]
 800543e:	602b      	str	r3, [r5, #0]
 8005440:	2e00      	cmp	r6, #0
 8005442:	da03      	bge.n	800544c <_printf_i+0xc8>
 8005444:	232d      	movs	r3, #45	; 0x2d
 8005446:	4276      	negs	r6, r6
 8005448:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800544c:	485e      	ldr	r0, [pc, #376]	; (80055c8 <_printf_i+0x244>)
 800544e:	230a      	movs	r3, #10
 8005450:	e019      	b.n	8005486 <_printf_i+0x102>
 8005452:	680e      	ldr	r6, [r1, #0]
 8005454:	602b      	str	r3, [r5, #0]
 8005456:	f010 0f40 	tst.w	r0, #64	; 0x40
 800545a:	bf18      	it	ne
 800545c:	b236      	sxthne	r6, r6
 800545e:	e7ef      	b.n	8005440 <_printf_i+0xbc>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	6820      	ldr	r0, [r4, #0]
 8005464:	1d19      	adds	r1, r3, #4
 8005466:	6029      	str	r1, [r5, #0]
 8005468:	0601      	lsls	r1, r0, #24
 800546a:	d501      	bpl.n	8005470 <_printf_i+0xec>
 800546c:	681e      	ldr	r6, [r3, #0]
 800546e:	e002      	b.n	8005476 <_printf_i+0xf2>
 8005470:	0646      	lsls	r6, r0, #25
 8005472:	d5fb      	bpl.n	800546c <_printf_i+0xe8>
 8005474:	881e      	ldrh	r6, [r3, #0]
 8005476:	4854      	ldr	r0, [pc, #336]	; (80055c8 <_printf_i+0x244>)
 8005478:	2f6f      	cmp	r7, #111	; 0x6f
 800547a:	bf0c      	ite	eq
 800547c:	2308      	moveq	r3, #8
 800547e:	230a      	movne	r3, #10
 8005480:	2100      	movs	r1, #0
 8005482:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005486:	6865      	ldr	r5, [r4, #4]
 8005488:	60a5      	str	r5, [r4, #8]
 800548a:	2d00      	cmp	r5, #0
 800548c:	bfa2      	ittt	ge
 800548e:	6821      	ldrge	r1, [r4, #0]
 8005490:	f021 0104 	bicge.w	r1, r1, #4
 8005494:	6021      	strge	r1, [r4, #0]
 8005496:	b90e      	cbnz	r6, 800549c <_printf_i+0x118>
 8005498:	2d00      	cmp	r5, #0
 800549a:	d04d      	beq.n	8005538 <_printf_i+0x1b4>
 800549c:	4615      	mov	r5, r2
 800549e:	fbb6 f1f3 	udiv	r1, r6, r3
 80054a2:	fb03 6711 	mls	r7, r3, r1, r6
 80054a6:	5dc7      	ldrb	r7, [r0, r7]
 80054a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054ac:	4637      	mov	r7, r6
 80054ae:	42bb      	cmp	r3, r7
 80054b0:	460e      	mov	r6, r1
 80054b2:	d9f4      	bls.n	800549e <_printf_i+0x11a>
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d10b      	bne.n	80054d0 <_printf_i+0x14c>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07de      	lsls	r6, r3, #31
 80054bc:	d508      	bpl.n	80054d0 <_printf_i+0x14c>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	6861      	ldr	r1, [r4, #4]
 80054c2:	4299      	cmp	r1, r3
 80054c4:	bfde      	ittt	le
 80054c6:	2330      	movle	r3, #48	; 0x30
 80054c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054cc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80054d0:	1b52      	subs	r2, r2, r5
 80054d2:	6122      	str	r2, [r4, #16]
 80054d4:	f8cd a000 	str.w	sl, [sp]
 80054d8:	464b      	mov	r3, r9
 80054da:	aa03      	add	r2, sp, #12
 80054dc:	4621      	mov	r1, r4
 80054de:	4640      	mov	r0, r8
 80054e0:	f7ff fee2 	bl	80052a8 <_printf_common>
 80054e4:	3001      	adds	r0, #1
 80054e6:	d14c      	bne.n	8005582 <_printf_i+0x1fe>
 80054e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054ec:	b004      	add	sp, #16
 80054ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054f2:	4835      	ldr	r0, [pc, #212]	; (80055c8 <_printf_i+0x244>)
 80054f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054f8:	6829      	ldr	r1, [r5, #0]
 80054fa:	6823      	ldr	r3, [r4, #0]
 80054fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005500:	6029      	str	r1, [r5, #0]
 8005502:	061d      	lsls	r5, r3, #24
 8005504:	d514      	bpl.n	8005530 <_printf_i+0x1ac>
 8005506:	07df      	lsls	r7, r3, #31
 8005508:	bf44      	itt	mi
 800550a:	f043 0320 	orrmi.w	r3, r3, #32
 800550e:	6023      	strmi	r3, [r4, #0]
 8005510:	b91e      	cbnz	r6, 800551a <_printf_i+0x196>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	f023 0320 	bic.w	r3, r3, #32
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	2310      	movs	r3, #16
 800551c:	e7b0      	b.n	8005480 <_printf_i+0xfc>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	f043 0320 	orr.w	r3, r3, #32
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	2378      	movs	r3, #120	; 0x78
 8005528:	4828      	ldr	r0, [pc, #160]	; (80055cc <_printf_i+0x248>)
 800552a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800552e:	e7e3      	b.n	80054f8 <_printf_i+0x174>
 8005530:	0659      	lsls	r1, r3, #25
 8005532:	bf48      	it	mi
 8005534:	b2b6      	uxthmi	r6, r6
 8005536:	e7e6      	b.n	8005506 <_printf_i+0x182>
 8005538:	4615      	mov	r5, r2
 800553a:	e7bb      	b.n	80054b4 <_printf_i+0x130>
 800553c:	682b      	ldr	r3, [r5, #0]
 800553e:	6826      	ldr	r6, [r4, #0]
 8005540:	6961      	ldr	r1, [r4, #20]
 8005542:	1d18      	adds	r0, r3, #4
 8005544:	6028      	str	r0, [r5, #0]
 8005546:	0635      	lsls	r5, r6, #24
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	d501      	bpl.n	8005550 <_printf_i+0x1cc>
 800554c:	6019      	str	r1, [r3, #0]
 800554e:	e002      	b.n	8005556 <_printf_i+0x1d2>
 8005550:	0670      	lsls	r0, r6, #25
 8005552:	d5fb      	bpl.n	800554c <_printf_i+0x1c8>
 8005554:	8019      	strh	r1, [r3, #0]
 8005556:	2300      	movs	r3, #0
 8005558:	6123      	str	r3, [r4, #16]
 800555a:	4615      	mov	r5, r2
 800555c:	e7ba      	b.n	80054d4 <_printf_i+0x150>
 800555e:	682b      	ldr	r3, [r5, #0]
 8005560:	1d1a      	adds	r2, r3, #4
 8005562:	602a      	str	r2, [r5, #0]
 8005564:	681d      	ldr	r5, [r3, #0]
 8005566:	6862      	ldr	r2, [r4, #4]
 8005568:	2100      	movs	r1, #0
 800556a:	4628      	mov	r0, r5
 800556c:	f7fa fe08 	bl	8000180 <memchr>
 8005570:	b108      	cbz	r0, 8005576 <_printf_i+0x1f2>
 8005572:	1b40      	subs	r0, r0, r5
 8005574:	6060      	str	r0, [r4, #4]
 8005576:	6863      	ldr	r3, [r4, #4]
 8005578:	6123      	str	r3, [r4, #16]
 800557a:	2300      	movs	r3, #0
 800557c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005580:	e7a8      	b.n	80054d4 <_printf_i+0x150>
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	462a      	mov	r2, r5
 8005586:	4649      	mov	r1, r9
 8005588:	4640      	mov	r0, r8
 800558a:	47d0      	blx	sl
 800558c:	3001      	adds	r0, #1
 800558e:	d0ab      	beq.n	80054e8 <_printf_i+0x164>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	079b      	lsls	r3, r3, #30
 8005594:	d413      	bmi.n	80055be <_printf_i+0x23a>
 8005596:	68e0      	ldr	r0, [r4, #12]
 8005598:	9b03      	ldr	r3, [sp, #12]
 800559a:	4298      	cmp	r0, r3
 800559c:	bfb8      	it	lt
 800559e:	4618      	movlt	r0, r3
 80055a0:	e7a4      	b.n	80054ec <_printf_i+0x168>
 80055a2:	2301      	movs	r3, #1
 80055a4:	4632      	mov	r2, r6
 80055a6:	4649      	mov	r1, r9
 80055a8:	4640      	mov	r0, r8
 80055aa:	47d0      	blx	sl
 80055ac:	3001      	adds	r0, #1
 80055ae:	d09b      	beq.n	80054e8 <_printf_i+0x164>
 80055b0:	3501      	adds	r5, #1
 80055b2:	68e3      	ldr	r3, [r4, #12]
 80055b4:	9903      	ldr	r1, [sp, #12]
 80055b6:	1a5b      	subs	r3, r3, r1
 80055b8:	42ab      	cmp	r3, r5
 80055ba:	dcf2      	bgt.n	80055a2 <_printf_i+0x21e>
 80055bc:	e7eb      	b.n	8005596 <_printf_i+0x212>
 80055be:	2500      	movs	r5, #0
 80055c0:	f104 0619 	add.w	r6, r4, #25
 80055c4:	e7f5      	b.n	80055b2 <_printf_i+0x22e>
 80055c6:	bf00      	nop
 80055c8:	0800599d 	.word	0x0800599d
 80055cc:	080059ae 	.word	0x080059ae

080055d0 <__sread>:
 80055d0:	b510      	push	{r4, lr}
 80055d2:	460c      	mov	r4, r1
 80055d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055d8:	f000 f894 	bl	8005704 <_read_r>
 80055dc:	2800      	cmp	r0, #0
 80055de:	bfab      	itete	ge
 80055e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055e2:	89a3      	ldrhlt	r3, [r4, #12]
 80055e4:	181b      	addge	r3, r3, r0
 80055e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055ea:	bfac      	ite	ge
 80055ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80055ee:	81a3      	strhlt	r3, [r4, #12]
 80055f0:	bd10      	pop	{r4, pc}

080055f2 <__swrite>:
 80055f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f6:	461f      	mov	r7, r3
 80055f8:	898b      	ldrh	r3, [r1, #12]
 80055fa:	05db      	lsls	r3, r3, #23
 80055fc:	4605      	mov	r5, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4616      	mov	r6, r2
 8005602:	d505      	bpl.n	8005610 <__swrite+0x1e>
 8005604:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005608:	2302      	movs	r3, #2
 800560a:	2200      	movs	r2, #0
 800560c:	f000 f868 	bl	80056e0 <_lseek_r>
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800561a:	81a3      	strh	r3, [r4, #12]
 800561c:	4632      	mov	r2, r6
 800561e:	463b      	mov	r3, r7
 8005620:	4628      	mov	r0, r5
 8005622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005626:	f000 b817 	b.w	8005658 <_write_r>

0800562a <__sseek>:
 800562a:	b510      	push	{r4, lr}
 800562c:	460c      	mov	r4, r1
 800562e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005632:	f000 f855 	bl	80056e0 <_lseek_r>
 8005636:	1c43      	adds	r3, r0, #1
 8005638:	89a3      	ldrh	r3, [r4, #12]
 800563a:	bf15      	itete	ne
 800563c:	6560      	strne	r0, [r4, #84]	; 0x54
 800563e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005646:	81a3      	strheq	r3, [r4, #12]
 8005648:	bf18      	it	ne
 800564a:	81a3      	strhne	r3, [r4, #12]
 800564c:	bd10      	pop	{r4, pc}

0800564e <__sclose>:
 800564e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005652:	f000 b813 	b.w	800567c <_close_r>
	...

08005658 <_write_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4d07      	ldr	r5, [pc, #28]	; (8005678 <_write_r+0x20>)
 800565c:	4604      	mov	r4, r0
 800565e:	4608      	mov	r0, r1
 8005660:	4611      	mov	r1, r2
 8005662:	2200      	movs	r2, #0
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fb fcc2 	bl	8000ff0 <_write>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_write_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_write_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	200001e0 	.word	0x200001e0

0800567c <_close_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4d06      	ldr	r5, [pc, #24]	; (8005698 <_close_r+0x1c>)
 8005680:	2300      	movs	r3, #0
 8005682:	4604      	mov	r4, r0
 8005684:	4608      	mov	r0, r1
 8005686:	602b      	str	r3, [r5, #0]
 8005688:	f7fb fcce 	bl	8001028 <_close>
 800568c:	1c43      	adds	r3, r0, #1
 800568e:	d102      	bne.n	8005696 <_close_r+0x1a>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	b103      	cbz	r3, 8005696 <_close_r+0x1a>
 8005694:	6023      	str	r3, [r4, #0]
 8005696:	bd38      	pop	{r3, r4, r5, pc}
 8005698:	200001e0 	.word	0x200001e0

0800569c <_fstat_r>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	4d07      	ldr	r5, [pc, #28]	; (80056bc <_fstat_r+0x20>)
 80056a0:	2300      	movs	r3, #0
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	f7fb fcc9 	bl	8001040 <_fstat>
 80056ae:	1c43      	adds	r3, r0, #1
 80056b0:	d102      	bne.n	80056b8 <_fstat_r+0x1c>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	b103      	cbz	r3, 80056b8 <_fstat_r+0x1c>
 80056b6:	6023      	str	r3, [r4, #0]
 80056b8:	bd38      	pop	{r3, r4, r5, pc}
 80056ba:	bf00      	nop
 80056bc:	200001e0 	.word	0x200001e0

080056c0 <_isatty_r>:
 80056c0:	b538      	push	{r3, r4, r5, lr}
 80056c2:	4d06      	ldr	r5, [pc, #24]	; (80056dc <_isatty_r+0x1c>)
 80056c4:	2300      	movs	r3, #0
 80056c6:	4604      	mov	r4, r0
 80056c8:	4608      	mov	r0, r1
 80056ca:	602b      	str	r3, [r5, #0]
 80056cc:	f7fb fcc8 	bl	8001060 <_isatty>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d102      	bne.n	80056da <_isatty_r+0x1a>
 80056d4:	682b      	ldr	r3, [r5, #0]
 80056d6:	b103      	cbz	r3, 80056da <_isatty_r+0x1a>
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	200001e0 	.word	0x200001e0

080056e0 <_lseek_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	4d07      	ldr	r5, [pc, #28]	; (8005700 <_lseek_r+0x20>)
 80056e4:	4604      	mov	r4, r0
 80056e6:	4608      	mov	r0, r1
 80056e8:	4611      	mov	r1, r2
 80056ea:	2200      	movs	r2, #0
 80056ec:	602a      	str	r2, [r5, #0]
 80056ee:	461a      	mov	r2, r3
 80056f0:	f7fb fcc1 	bl	8001076 <_lseek>
 80056f4:	1c43      	adds	r3, r0, #1
 80056f6:	d102      	bne.n	80056fe <_lseek_r+0x1e>
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	b103      	cbz	r3, 80056fe <_lseek_r+0x1e>
 80056fc:	6023      	str	r3, [r4, #0]
 80056fe:	bd38      	pop	{r3, r4, r5, pc}
 8005700:	200001e0 	.word	0x200001e0

08005704 <_read_r>:
 8005704:	b538      	push	{r3, r4, r5, lr}
 8005706:	4d07      	ldr	r5, [pc, #28]	; (8005724 <_read_r+0x20>)
 8005708:	4604      	mov	r4, r0
 800570a:	4608      	mov	r0, r1
 800570c:	4611      	mov	r1, r2
 800570e:	2200      	movs	r2, #0
 8005710:	602a      	str	r2, [r5, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	f7fb fc4f 	bl	8000fb6 <_read>
 8005718:	1c43      	adds	r3, r0, #1
 800571a:	d102      	bne.n	8005722 <_read_r+0x1e>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	b103      	cbz	r3, 8005722 <_read_r+0x1e>
 8005720:	6023      	str	r3, [r4, #0]
 8005722:	bd38      	pop	{r3, r4, r5, pc}
 8005724:	200001e0 	.word	0x200001e0

08005728 <_init>:
 8005728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572a:	bf00      	nop
 800572c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572e:	bc08      	pop	{r3}
 8005730:	469e      	mov	lr, r3
 8005732:	4770      	bx	lr

08005734 <_fini>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	bf00      	nop
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr
