
lunione_module_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000211c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08002258  08002258  00012258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002304  08002304  00012304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002308  08002308  00012308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000008  0800230c  00020008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000014  08002318  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  20000034  08002318  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007d4f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000156d  00000000  00000000  00027d93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000df0  00000000  00000000  00029300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000d48  00000000  00000000  0002a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001f5af  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00008af3  00000000  00000000  0004a3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000cb64d  00000000  00000000  00052eda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0011e527  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000386c  00000000  00000000  0011e578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000014 	.word	0x20000014
 8000158:	00000000 	.word	0x00000000
 800015c:	08002240 	.word	0x08002240

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000018 	.word	0x20000018
 8000178:	08002240 	.word	0x08002240

0800017c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000180:	f000 f93e 	bl	8000400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000184:	f000 f804 	bl	8000190 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000188:	f000 f85a 	bl	8000240 <PeriphCommonClock_Config>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018c:	e7fe      	b.n	800018c <main+0x10>
	...

08000190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b09a      	sub	sp, #104	; 0x68
 8000194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000196:	f107 0320 	add.w	r3, r7, #32
 800019a:	2248      	movs	r2, #72	; 0x48
 800019c:	2100      	movs	r1, #0
 800019e:	4618      	mov	r0, r3
 80001a0:	f002 f846 	bl	8002230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	611a      	str	r2, [r3, #16]
 80001b2:	615a      	str	r2, [r3, #20]
 80001b4:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001b6:	4b21      	ldr	r3, [pc, #132]	; (800023c <SystemClock_Config+0xac>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80001be:	4a1f      	ldr	r2, [pc, #124]	; (800023c <SystemClock_Config+0xac>)
 80001c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001c4:	6013      	str	r3, [r2, #0]
 80001c6:	4b1d      	ldr	r3, [pc, #116]	; (800023c <SystemClock_Config+0xac>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80001ce:	603b      	str	r3, [r7, #0]
 80001d0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80001d2:	2322      	movs	r3, #34	; 0x22
 80001d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80001dc:	2301      	movs	r3, #1
 80001de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e0:	2340      	movs	r3, #64	; 0x40
 80001e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80001e4:	2300      	movs	r3, #0
 80001e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80001e8:	2360      	movs	r3, #96	; 0x60
 80001ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001ec:	2300      	movs	r3, #0
 80001ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f0:	f107 0320 	add.w	r3, r7, #32
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 fde9 	bl	8000dcc <HAL_RCC_OscConfig>
 80001fa:	4603      	mov	r3, r0
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d001      	beq.n	8000204 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000200:	f000 f83b 	bl	800027a <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8000204:	236f      	movs	r3, #111	; 0x6f
 8000206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000208:	2300      	movs	r3, #0
 800020a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800020c:	2300      	movs	r3, #0
 800020e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000210:	2300      	movs	r3, #0
 8000212:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f001 f945 	bl	80014b4 <HAL_RCC_ClockConfig>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000230:	f000 f823 	bl	800027a <Error_Handler>
  }
}
 8000234:	bf00      	nop
 8000236:	3768      	adds	r7, #104	; 0x68
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	58000400 	.word	0x58000400

08000240 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b094      	sub	sp, #80	; 0x50
 8000244:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000246:	463b      	mov	r3, r7
 8000248:	2250      	movs	r2, #80	; 0x50
 800024a:	2100      	movs	r1, #0
 800024c:	4618      	mov	r0, r3
 800024e:	f001 ffef 	bl	8002230 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS;
 8000252:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000256:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8000258:	2300      	movs	r3, #0
 800025a:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800025c:	2310      	movs	r3, #16
 800025e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000260:	463b      	mov	r3, r7
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fd39 	bl	8001cda <HAL_RCCEx_PeriphCLKConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800026e:	f000 f804 	bl	800027a <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8000272:	bf00      	nop
 8000274:	3750      	adds	r7, #80	; 0x50
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800027a:	b480      	push	{r7}
 800027c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800027e:	b672      	cpsid	i
}
 8000280:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000282:	e7fe      	b.n	8000282 <Error_Handler+0x8>

08000284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000288:	bf00      	nop
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000292:	b480      	push	{r7}
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000296:	e7fe      	b.n	8000296 <NMI_Handler+0x4>

08000298 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800029c:	e7fe      	b.n	800029c <HardFault_Handler+0x4>

0800029e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800029e:	b480      	push	{r7}
 80002a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002a2:	e7fe      	b.n	80002a2 <MemManage_Handler+0x4>

080002a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <BusFault_Handler+0x4>

080002aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002aa:	b480      	push	{r7}
 80002ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002ae:	e7fe      	b.n	80002ae <UsageFault_Handler+0x4>

080002b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002be:	b480      	push	{r7}
 80002c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002c2:	bf00      	nop
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr

080002cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr

080002da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002da:	b580      	push	{r7, lr}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002de:	f000 f8e9 	bl	80004b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80002ec:	4b24      	ldr	r3, [pc, #144]	; (8000380 <SystemInit+0x98>)
 80002ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002f2:	4a23      	ldr	r2, [pc, #140]	; (8000380 <SystemInit+0x98>)
 80002f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80002fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800030c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000310:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000314:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8000316:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800031a:	681a      	ldr	r2, [r3, #0]
 800031c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <SystemInit+0x9c>)
 8000322:	4013      	ands	r3, r2
 8000324:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8000326:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800032a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800032e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000332:	f023 0305 	bic.w	r3, r3, #5
 8000336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800033a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800033e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8000342:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000346:	f023 0301 	bic.w	r3, r3, #1
 800034a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800034e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000352:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <SystemInit+0xa0>)
 8000354:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8000356:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <SystemInit+0xa0>)
 800035c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800035e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000368:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800036c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800036e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00
 8000384:	faf6fefb 	.word	0xfaf6fefb
 8000388:	22041000 	.word	0x22041000

0800038c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 800038c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800038e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000390:	3304      	adds	r3, #4

08000392 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000392:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000394:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8000396:	d3f9      	bcc.n	800038c <CopyDataInit>
  bx lr
 8000398:	4770      	bx	lr

0800039a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800039a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 800039c:	3004      	adds	r0, #4

0800039e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 800039e:	4288      	cmp	r0, r1
  bcc FillZerobss
 80003a0:	d3fb      	bcc.n	800039a <FillZerobss>
  bx lr
 80003a2:	4770      	bx	lr

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480c      	ldr	r0, [pc, #48]	; (80003d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f7ff ff9e 	bl	80002e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80003ac:	480b      	ldr	r0, [pc, #44]	; (80003dc <LoopForever+0x6>)
 80003ae:	490c      	ldr	r1, [pc, #48]	; (80003e0 <LoopForever+0xa>)
 80003b0:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <LoopForever+0xe>)
 80003b2:	2300      	movs	r3, #0
 80003b4:	f7ff ffed 	bl	8000392 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <LoopForever+0x12>)
 80003ba:	490c      	ldr	r1, [pc, #48]	; (80003ec <LoopForever+0x16>)
 80003bc:	4a0c      	ldr	r2, [pc, #48]	; (80003f0 <LoopForever+0x1a>)
 80003be:	2300      	movs	r3, #0
 80003c0:	f7ff ffe7 	bl	8000392 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80003c4:	480b      	ldr	r0, [pc, #44]	; (80003f4 <LoopForever+0x1e>)
 80003c6:	490c      	ldr	r1, [pc, #48]	; (80003f8 <LoopForever+0x22>)
 80003c8:	2300      	movs	r3, #0
 80003ca:	f7ff ffe8 	bl	800039e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003ce:	f001 ff0b 	bl	80021e8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80003d2:	f7ff fed3 	bl	800017c <main>

080003d6 <LoopForever>:

LoopForever:
  b LoopForever
 80003d6:	e7fe      	b.n	80003d6 <LoopForever>
  ldr   r0, =_estack
 80003d8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80003dc:	20000008 	.word	0x20000008
 80003e0:	20000014 	.word	0x20000014
 80003e4:	0800230c 	.word	0x0800230c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80003e8:	20030000 	.word	0x20030000
 80003ec:	20030000 	.word	0x20030000
 80003f0:	08002318 	.word	0x08002318
  INIT_BSS _sbss, _ebss
 80003f4:	20000014 	.word	0x20000014
 80003f8:	20000034 	.word	0x20000034

080003fc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC1_IRQHandler>
	...

08000400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000406:	2300      	movs	r3, #0
 8000408:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_Init+0x3c>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <HAL_Init+0x3c>)
 8000410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000414:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000416:	2003      	movs	r0, #3
 8000418:	f000 f92a 	bl	8000670 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800041c:	200f      	movs	r0, #15
 800041e:	f000 f80f 	bl	8000440 <HAL_InitTick>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d002      	beq.n	800042e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000428:	2301      	movs	r3, #1
 800042a:	71fb      	strb	r3, [r7, #7]
 800042c:	e001      	b.n	8000432 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800042e:	f7ff ff29 	bl	8000284 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000432:	79fb      	ldrb	r3, [r7, #7]
}
 8000434:	4618      	mov	r0, r3
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	58004000 	.word	0x58004000

08000440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b084      	sub	sp, #16
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000448:	2300      	movs	r3, #0
 800044a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <HAL_InitTick+0x6c>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d024      	beq.n	800049e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000454:	f001 f9dc 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8000458:	4602      	mov	r2, r0
 800045a:	4b14      	ldr	r3, [pc, #80]	; (80004ac <HAL_InitTick+0x6c>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	4619      	mov	r1, r3
 8000460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000464:	fbb3 f3f1 	udiv	r3, r3, r1
 8000468:	fbb2 f3f3 	udiv	r3, r2, r3
 800046c:	4618      	mov	r0, r3
 800046e:	f000 f924 	bl	80006ba <HAL_SYSTICK_Config>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d10f      	bne.n	8000498 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b0f      	cmp	r3, #15
 800047c:	d809      	bhi.n	8000492 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800047e:	2200      	movs	r2, #0
 8000480:	6879      	ldr	r1, [r7, #4]
 8000482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000486:	f000 f8fe 	bl	8000686 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800048a:	4a09      	ldr	r2, [pc, #36]	; (80004b0 <HAL_InitTick+0x70>)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	6013      	str	r3, [r2, #0]
 8000490:	e007      	b.n	80004a2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000492:	2301      	movs	r3, #1
 8000494:	73fb      	strb	r3, [r7, #15]
 8000496:	e004      	b.n	80004a2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000498:	2301      	movs	r3, #1
 800049a:	73fb      	strb	r3, [r7, #15]
 800049c:	e001      	b.n	80004a2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800049e:	2301      	movs	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3710      	adds	r7, #16
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000010 	.word	0x20000010
 80004b0:	2000000c 	.word	0x2000000c

080004b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <HAL_IncTick+0x20>)
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	461a      	mov	r2, r3
 80004be:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <HAL_IncTick+0x24>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4413      	add	r3, r2
 80004c4:	4a04      	ldr	r2, [pc, #16]	; (80004d8 <HAL_IncTick+0x24>)
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	20000010 	.word	0x20000010
 80004d8:	20000030 	.word	0x20000030

080004dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return uwTick;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <HAL_GetTick+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000030 	.word	0x20000030

080004f4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <HAL_GetTickPrio+0x14>)
 80004fa:	681b      	ldr	r3, [r3, #0]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000000c 	.word	0x2000000c

0800050c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f003 0307 	and.w	r3, r3, #7
 800051a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000528:	4013      	ands	r3, r2
 800052a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053e:	4a04      	ldr	r2, [pc, #16]	; (8000550 <__NVIC_SetPriorityGrouping+0x44>)
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	60d3      	str	r3, [r2, #12]
}
 8000544:	bf00      	nop
 8000546:	3714      	adds	r7, #20
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__NVIC_GetPriorityGrouping+0x18>)
 800055a:	68db      	ldr	r3, [r3, #12]
 800055c:	0a1b      	lsrs	r3, r3, #8
 800055e:	f003 0307 	and.w	r3, r3, #7
}
 8000562:	4618      	mov	r0, r3
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db0a      	blt.n	800059a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	490c      	ldr	r1, [pc, #48]	; (80005bc <__NVIC_SetPriority+0x4c>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	0112      	lsls	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	440b      	add	r3, r1
 8000594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000598:	e00a      	b.n	80005b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4908      	ldr	r1, [pc, #32]	; (80005c0 <__NVIC_SetPriority+0x50>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	3b04      	subs	r3, #4
 80005a8:	0112      	lsls	r2, r2, #4
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	761a      	strb	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b089      	sub	sp, #36	; 0x24
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	f1c3 0307 	rsb	r3, r3, #7
 80005de:	2b04      	cmp	r3, #4
 80005e0:	bf28      	it	cs
 80005e2:	2304      	movcs	r3, #4
 80005e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	3304      	adds	r3, #4
 80005ea:	2b06      	cmp	r3, #6
 80005ec:	d902      	bls.n	80005f4 <NVIC_EncodePriority+0x30>
 80005ee:	69fb      	ldr	r3, [r7, #28]
 80005f0:	3b03      	subs	r3, #3
 80005f2:	e000      	b.n	80005f6 <NVIC_EncodePriority+0x32>
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80005fc:	69bb      	ldr	r3, [r7, #24]
 80005fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000602:	43da      	mvns	r2, r3
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	401a      	ands	r2, r3
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800060c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	43d9      	mvns	r1, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	4313      	orrs	r3, r2
         );
}
 800061e:	4618      	mov	r0, r3
 8000620:	3724      	adds	r7, #36	; 0x24
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3b01      	subs	r3, #1
 8000638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800063c:	d301      	bcc.n	8000642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800063e:	2301      	movs	r3, #1
 8000640:	e00f      	b.n	8000662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000642:	4a0a      	ldr	r2, [pc, #40]	; (800066c <SysTick_Config+0x40>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	3b01      	subs	r3, #1
 8000648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064a:	210f      	movs	r1, #15
 800064c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000650:	f7ff ff8e 	bl	8000570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <SysTick_Config+0x40>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <SysTick_Config+0x40>)
 800065c:	2207      	movs	r2, #7
 800065e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000660:	2300      	movs	r3, #0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	e000e010 	.word	0xe000e010

08000670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff47 	bl	800050c <__NVIC_SetPriorityGrouping>
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b086      	sub	sp, #24
 800068a:	af00      	add	r7, sp, #0
 800068c:	4603      	mov	r3, r0
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	607a      	str	r2, [r7, #4]
 8000692:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000694:	f7ff ff5e 	bl	8000554 <__NVIC_GetPriorityGrouping>
 8000698:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	6978      	ldr	r0, [r7, #20]
 80006a0:	f7ff ff90 	bl	80005c4 <NVIC_EncodePriority>
 80006a4:	4602      	mov	r2, r0
 80006a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006aa:	4611      	mov	r1, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff5f 	bl	8000570 <__NVIC_SetPriority>
}
 80006b2:	bf00      	nop
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f7ff ffb2 	bl	800062c <SysTick_Config>
 80006c8:	4603      	mov	r3, r0
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80006de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	58000400 	.word	0x58000400

080006f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_PWREx_GetVoltageRange+0x18>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	58000400 	.word	0x58000400

08000710 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800071e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000722:	d101      	bne.n	8000728 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000724:	2301      	movs	r3, #1
 8000726:	e000      	b.n	800072a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000738:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr

08000752 <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000756:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000760:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000764:	6013      	str	r3, [r2, #0]
}
 8000766:	bf00      	nop
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000774:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800077e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000782:	d101      	bne.n	8000788 <LL_RCC_HSE_IsReady+0x18>
 8000784:	2301      	movs	r3, #1
 8000786:	e000      	b.n	800078a <LL_RCC_HSE_IsReady+0x1a>
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000798:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007a6:	6013      	str	r3, [r2, #0]
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80007b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80007c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007c4:	6013      	str	r3, [r2, #0]
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80007d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80007e2:	d101      	bne.n	80007e8 <LL_RCC_HSI_IsReady+0x18>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <LL_RCC_HSI_IsReady+0x1a>
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr

080007f4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80007fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	061b      	lsls	r3, r3, #24
 800080a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800080e:	4313      	orrs	r3, r2
 8000810:	604b      	str	r3, [r1, #4]
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr

0800081e <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800082a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800082e:	f043 0301 	orr.w	r3, r3, #1
 8000832:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8000844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000848:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800084c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000850:	f023 0301 	bic.w	r3, r3, #1
 8000854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8000858:	bf00      	nop
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr

08000862 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8000866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	2b02      	cmp	r3, #2
 8000874:	d101      	bne.n	800087a <LL_RCC_HSI48_IsReady+0x18>
 8000876:	2301      	movs	r3, #1
 8000878:	e000      	b.n	800087c <LL_RCC_HSI48_IsReady+0x1a>
 800087a:	2300      	movs	r3, #0
}
 800087c:	4618      	mov	r0, r3
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000892:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80008ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008b8:	f023 0301 	bic.w	r3, r3, #1
 80008bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr

080008ca <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80008ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80008f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80008fc:	f023 0304 	bic.w	r3, r3, #4
 8000900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr

0800090e <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8000912:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	2b02      	cmp	r3, #2
 8000920:	d101      	bne.n	8000926 <LL_RCC_LSE_IsReady+0x18>
 8000922:	2301      	movs	r3, #1
 8000924:	e000      	b.n	8000928 <LL_RCC_LSE_IsReady+0x1a>
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000936:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800093a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800093e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000942:	f043 0301 	orr.w	r3, r3, #1
 8000946:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800094a:	bf00      	nop
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8000958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800095c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000964:	f023 0301 	bic.w	r3, r3, #1
 8000968:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800097a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800097e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	2b02      	cmp	r3, #2
 8000988:	d101      	bne.n	800098e <LL_RCC_LSI1_IsReady+0x18>
 800098a:	2301      	movs	r3, #1
 800098c:	e000      	b.n	8000990 <LL_RCC_LSI1_IsReady+0x1a>
 800098e:	2300      	movs	r3, #0
}
 8000990:	4618      	mov	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800099e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009aa:	f043 0304 	orr.w	r3, r3, #4
 80009ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80009c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80009cc:	f023 0304 	bic.w	r3, r3, #4
 80009d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80009e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	2b08      	cmp	r3, #8
 80009f0:	d101      	bne.n	80009f6 <LL_RCC_LSI2_IsReady+0x18>
 80009f2:	2301      	movs	r3, #1
 80009f4:	e000      	b.n	80009f8 <LL_RCC_LSI2_IsReady+0x1a>
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8000a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000a12:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	021b      	lsls	r3, r3, #8
 8000a1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8000a24:	bf00      	nop
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr

08000a4e <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8000a52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	6013      	str	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8000a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f003 0302 	and.w	r3, r3, #2
 8000a7a:	2b02      	cmp	r3, #2
 8000a7c:	d101      	bne.n	8000a82 <LL_RCC_MSI_IsReady+0x16>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e000      	b.n	8000a84 <LL_RCC_MSI_IsReady+0x18>
 8000a82:	2300      	movs	r3, #0
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000aa0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	600b      	str	r3, [r1, #0]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr

08000ab6 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	b083      	sub	sp, #12
 8000aba:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8000abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ac6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2bb0      	cmp	r3, #176	; 0xb0
 8000acc:	d901      	bls.n	8000ad2 <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8000ace:	23b0      	movs	r3, #176	; 0xb0
 8000ad0:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8000ad2:	687b      	ldr	r3, [r7, #4]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	370c      	adds	r7, #12
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000ae8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000afa:	4313      	orrs	r3, r2
 8000afc:	604b      	str	r3, [r1, #4]
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000b0a:	b480      	push	{r7}
 8000b0c:	b083      	sub	sp, #12
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f023 0203 	bic.w	r2, r3, #3
 8000b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	608b      	str	r3, [r1, #8]
}
 8000b26:	bf00      	nop
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 030c 	and.w	r3, r3, #12
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	b083      	sub	sp, #12
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000b52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4313      	orrs	r3, r2
 8000b64:	608b      	str	r3, [r1, #8]
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8000b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000b82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8000ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000baa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000bae:	f023 020f 	bic.w	r2, r3, #15
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000c06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	608b      	str	r3, [r1, #8]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8000c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8000c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c3c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000c40:	011b      	lsls	r3, r3, #4
 8000c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c62:	6013      	str	r3, [r2, #0]
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8000c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8000c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000c9e:	d101      	bne.n	8000ca4 <LL_RCC_PLL_IsReady+0x18>
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e000      	b.n	8000ca6 <LL_RCC_PLL_IsReady+0x1a>
 8000ca4:	2300      	movs	r3, #0
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8000cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb8:	68db      	ldr	r3, [r3, #12]
 8000cba:	0a1b      	lsrs	r3, r3, #8
 8000cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8000cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8000ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f003 0303 	and.w	r3, r3, #3
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8000d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d1a:	689b      	ldr	r3, [r3, #8]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d24:	d101      	bne.n	8000d2a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e000      	b.n	8000d2c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8000d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d3e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d4a:	d101      	bne.n	8000d50 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8000d60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d64:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d70:	d101      	bne.n	8000d76 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8000d76:	2300      	movs	r3, #0
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8000d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d8a:	689b      	ldr	r3, [r3, #8]
 8000d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d90:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000d94:	d101      	bne.n	8000d9a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8000d96:	2301      	movs	r3, #1
 8000d98:	e000      	b.n	8000d9c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8000daa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000db8:	d101      	bne.n	8000dbe <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
	...

08000dcc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08d      	sub	sp, #52	; 0x34
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d101      	bne.n	8000dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	e363      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f003 0320 	and.w	r3, r3, #32
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	f000 808d 	beq.w	8000f06 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dec:	f7ff fea1 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8000df0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df2:	f7ff ff82 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8000df6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8000df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d005      	beq.n	8000e0a <HAL_RCC_OscConfig+0x3e>
 8000dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e00:	2b0c      	cmp	r3, #12
 8000e02:	d147      	bne.n	8000e94 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8000e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d144      	bne.n	8000e94 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69db      	ldr	r3, [r3, #28]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d101      	bne.n	8000e16 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
 8000e14:	e347      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000e1a:	f7ff fe4c 	bl	8000ab6 <LL_RCC_MSI_GetRange>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	429c      	cmp	r4, r3
 8000e22:	d914      	bls.n	8000e4e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fd05 	bl	8001838 <RCC_SetFlashLatencyFromMSIRange>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e336      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fe26 	bl	8000a8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a1b      	ldr	r3, [r3, #32]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fe4a 	bl	8000ae0 <LL_RCC_MSI_SetCalibTrimming>
 8000e4c:	e013      	b.n	8000e76 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fe1b 	bl	8000a8e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a1b      	ldr	r3, [r3, #32]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe3f 	bl	8000ae0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 fce6 	bl	8001838 <RCC_SetFlashLatencyFromMSIRange>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e317      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e76:	f000 fccb 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4aa4      	ldr	r2, [pc, #656]	; (8001110 <HAL_RCC_OscConfig+0x344>)
 8000e7e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e80:	4ba4      	ldr	r3, [pc, #656]	; (8001114 <HAL_RCC_OscConfig+0x348>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fadb 	bl	8000440 <HAL_InitTick>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d039      	beq.n	8000f04 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e308      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	69db      	ldr	r3, [r3, #28]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d01e      	beq.n	8000eda <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000e9c:	f7ff fdc8 	bl	8000a30 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fb1c 	bl	80004dc <HAL_GetTick>
 8000ea4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fb18 	bl	80004dc <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e2f5      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8000eba:	f7ff fdd7 	bl	8000a6c <LL_RCC_MSI_IsReady>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f1      	beq.n	8000ea8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fde0 	bl	8000a8e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fe04 	bl	8000ae0 <LL_RCC_MSI_SetCalibTrimming>
 8000ed8:	e015      	b.n	8000f06 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000eda:	f7ff fdb8 	bl	8000a4e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fafd 	bl	80004dc <HAL_GetTick>
 8000ee2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ee6:	f7ff faf9 	bl	80004dc <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e2d6      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8000ef8:	f7ff fdb8 	bl	8000a6c <LL_RCC_MSI_IsReady>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d1f1      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x11a>
 8000f02:	e000      	b.n	8000f06 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8000f04:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 0301 	and.w	r3, r3, #1
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d047      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f12:	f7ff fe0e 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8000f16:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f18:	f7ff feef 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8000f1c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8000f1e:	6a3b      	ldr	r3, [r7, #32]
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	d005      	beq.n	8000f30 <HAL_RCC_OscConfig+0x164>
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	2b0c      	cmp	r3, #12
 8000f28:	d108      	bne.n	8000f3c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	2b03      	cmp	r3, #3
 8000f2e:	d105      	bne.n	8000f3c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d134      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e2b4      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d102      	bne.n	8000f4c <HAL_RCC_OscConfig+0x180>
 8000f46:	f7ff fbf5 	bl	8000734 <LL_RCC_HSE_Enable>
 8000f4a:	e001      	b.n	8000f50 <HAL_RCC_OscConfig+0x184>
 8000f4c:	f7ff fc01 	bl	8000752 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d012      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f58:	f7ff fac0 	bl	80004dc <HAL_GetTick>
 8000f5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f60:	f7ff fabc 	bl	80004dc <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b64      	cmp	r3, #100	; 0x64
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e299      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8000f72:	f7ff fbfd 	bl	8000770 <LL_RCC_HSE_IsReady>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d0f1      	beq.n	8000f60 <HAL_RCC_OscConfig+0x194>
 8000f7c:	e011      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f7e:	f7ff faad 	bl	80004dc <HAL_GetTick>
 8000f82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8000f84:	e008      	b.n	8000f98 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f86:	f7ff faa9 	bl	80004dc <HAL_GetTick>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	1ad3      	subs	r3, r2, r3
 8000f90:	2b64      	cmp	r3, #100	; 0x64
 8000f92:	d901      	bls.n	8000f98 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f94:	2303      	movs	r3, #3
 8000f96:	e286      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8000f98:	f7ff fbea 	bl	8000770 <LL_RCC_HSE_IsReady>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1f1      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d04c      	beq.n	8001048 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fae:	f7ff fdc0 	bl	8000b32 <LL_RCC_GetSysClkSource>
 8000fb2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fb4:	f7ff fea1 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8000fb8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	2b04      	cmp	r3, #4
 8000fbe:	d005      	beq.n	8000fcc <HAL_RCC_OscConfig+0x200>
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	2b0c      	cmp	r3, #12
 8000fc4:	d10e      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d10b      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d101      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e266      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	691b      	ldr	r3, [r3, #16]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fc09 	bl	80007f4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000fe2:	e031      	b.n	8001048 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d019      	beq.n	8001020 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fec:	f7ff fbd2 	bl	8000794 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff0:	f7ff fa74 	bl	80004dc <HAL_GetTick>
 8000ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8000ff6:	e008      	b.n	800100a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ff8:	f7ff fa70 	bl	80004dc <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	1ad3      	subs	r3, r2, r3
 8001002:	2b02      	cmp	r3, #2
 8001004:	d901      	bls.n	800100a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001006:	2303      	movs	r3, #3
 8001008:	e24d      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800100a:	f7ff fbe1 	bl	80007d0 <LL_RCC_HSI_IsReady>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d0f1      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fbeb 	bl	80007f4 <LL_RCC_HSI_SetCalibTrimming>
 800101e:	e013      	b.n	8001048 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001020:	f7ff fbc7 	bl	80007b2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001024:	f7ff fa5a 	bl	80004dc <HAL_GetTick>
 8001028:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800102a:	e008      	b.n	800103e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102c:	f7ff fa56 	bl	80004dc <HAL_GetTick>
 8001030:	4602      	mov	r2, r0
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b02      	cmp	r3, #2
 8001038:	d901      	bls.n	800103e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	e233      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800103e:	f7ff fbc7 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f1      	bne.n	800102c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 0308 	and.w	r3, r3, #8
 8001050:	2b00      	cmp	r3, #0
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 80a3 	beq.w	80011a8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d076      	beq.n	8001158 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0310 	and.w	r3, r3, #16
 8001072:	2b00      	cmp	r3, #0
 8001074:	d046      	beq.n	8001104 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8001076:	f7ff fc7e 	bl	8000976 <LL_RCC_LSI1_IsReady>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d113      	bne.n	80010a8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8001080:	f7ff fc57 	bl	8000932 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001084:	f7ff fa2a 	bl	80004dc <HAL_GetTick>
 8001088:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800108c:	f7ff fa26 	bl	80004dc <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e203      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800109e:	f7ff fc6a 	bl	8000976 <LL_RCC_LSI1_IsReady>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d0f1      	beq.n	800108c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 80010a8:	f7ff fc77 	bl	800099a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ac:	f7ff fa16 	bl	80004dc <HAL_GetTick>
 80010b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80010b4:	f7ff fa12 	bl	80004dc <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e1ef      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80010c6:	f7ff fc8a 	bl	80009de <LL_RCC_LSI2_IsReady>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d0f1      	beq.n	80010b4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	699b      	ldr	r3, [r3, #24]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fc94 	bl	8000a02 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80010da:	f7ff fc3b 	bl	8000954 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010de:	f7ff f9fd 	bl	80004dc <HAL_GetTick>
 80010e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80010e6:	f7ff f9f9 	bl	80004dc <HAL_GetTick>
 80010ea:	4602      	mov	r2, r0
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1d6      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80010f8:	f7ff fc3d 	bl	8000976 <LL_RCC_LSI1_IsReady>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f1      	bne.n	80010e6 <HAL_RCC_OscConfig+0x31a>
 8001102:	e051      	b.n	80011a8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8001104:	f7ff fc15 	bl	8000932 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff f9e8 	bl	80004dc <HAL_GetTick>
 800110c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800110e:	e00c      	b.n	800112a <HAL_RCC_OscConfig+0x35e>
 8001110:	20000008 	.word	0x20000008
 8001114:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8001118:	f7ff f9e0 	bl	80004dc <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d901      	bls.n	800112a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001126:	2303      	movs	r3, #3
 8001128:	e1bd      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800112a:	f7ff fc24 	bl	8000976 <LL_RCC_LSI1_IsReady>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d0f1      	beq.n	8001118 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8001134:	f7ff fc42 	bl	80009bc <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800113a:	f7ff f9cf 	bl	80004dc <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e1ac      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800114c:	f7ff fc47 	bl	80009de <LL_RCC_LSI2_IsReady>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1f1      	bne.n	800113a <HAL_RCC_OscConfig+0x36e>
 8001156:	e027      	b.n	80011a8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8001158:	f7ff fc30 	bl	80009bc <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff f9be 	bl	80004dc <HAL_GetTick>
 8001160:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8001164:	f7ff f9ba 	bl	80004dc <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e197      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8001176:	f7ff fc32 	bl	80009de <LL_RCC_LSI2_IsReady>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1f1      	bne.n	8001164 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8001180:	f7ff fbe8 	bl	8000954 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001184:	f7ff f9aa 	bl	80004dc <HAL_GetTick>
 8001188:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800118a:	e008      	b.n	800119e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800118c:	f7ff f9a6 	bl	80004dc <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b02      	cmp	r3, #2
 8001198:	d901      	bls.n	800119e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e183      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800119e:	f7ff fbea 	bl	8000976 <LL_RCC_LSI1_IsReady>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1f1      	bne.n	800118c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d05b      	beq.n	800126c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011b4:	4ba7      	ldr	r3, [pc, #668]	; (8001454 <HAL_RCC_OscConfig+0x688>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d114      	bne.n	80011ea <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80011c0:	f7ff fa88 	bl	80006d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011c4:	f7ff f98a 	bl	80004dc <HAL_GetTick>
 80011c8:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011ca:	e008      	b.n	80011de <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011cc:	f7ff f986 	bl	80004dc <HAL_GetTick>
 80011d0:	4602      	mov	r2, r0
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d901      	bls.n	80011de <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	e163      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011de:	4b9d      	ldr	r3, [pc, #628]	; (8001454 <HAL_RCC_OscConfig+0x688>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f0      	beq.n	80011cc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d102      	bne.n	80011f8 <HAL_RCC_OscConfig+0x42c>
 80011f2:	f7ff fb48 	bl	8000886 <LL_RCC_LSE_Enable>
 80011f6:	e00c      	b.n	8001212 <HAL_RCC_OscConfig+0x446>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	2b05      	cmp	r3, #5
 80011fe:	d104      	bne.n	800120a <HAL_RCC_OscConfig+0x43e>
 8001200:	f7ff fb63 	bl	80008ca <LL_RCC_LSE_EnableBypass>
 8001204:	f7ff fb3f 	bl	8000886 <LL_RCC_LSE_Enable>
 8001208:	e003      	b.n	8001212 <HAL_RCC_OscConfig+0x446>
 800120a:	f7ff fb4d 	bl	80008a8 <LL_RCC_LSE_Disable>
 800120e:	f7ff fb6d 	bl	80008ec <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d014      	beq.n	8001244 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800121a:	f7ff f95f 	bl	80004dc <HAL_GetTick>
 800121e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001220:	e00a      	b.n	8001238 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001222:	f7ff f95b 	bl	80004dc <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001230:	4293      	cmp	r3, r2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e136      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001238:	f7ff fb69 	bl	800090e <LL_RCC_LSE_IsReady>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d0ef      	beq.n	8001222 <HAL_RCC_OscConfig+0x456>
 8001242:	e013      	b.n	800126c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001244:	f7ff f94a 	bl	80004dc <HAL_GetTick>
 8001248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800124a:	e00a      	b.n	8001262 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800124c:	f7ff f946 	bl	80004dc <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f241 3288 	movw	r2, #5000	; 0x1388
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e121      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001262:	f7ff fb54 	bl	800090e <LL_RCC_LSE_IsReady>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1ef      	bne.n	800124c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001274:	2b00      	cmp	r3, #0
 8001276:	d02c      	beq.n	80012d2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127c:	2b00      	cmp	r3, #0
 800127e:	d014      	beq.n	80012aa <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001280:	f7ff facd 	bl	800081e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001284:	f7ff f92a 	bl	80004dc <HAL_GetTick>
 8001288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800128c:	f7ff f926 	bl	80004dc <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e103      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800129e:	f7ff fae0 	bl	8000862 <LL_RCC_HSI48_IsReady>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d0f1      	beq.n	800128c <HAL_RCC_OscConfig+0x4c0>
 80012a8:	e013      	b.n	80012d2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80012aa:	f7ff fac9 	bl	8000840 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ae:	f7ff f915 	bl	80004dc <HAL_GetTick>
 80012b2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80012b4:	e008      	b.n	80012c8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012b6:	f7ff f911 	bl	80004dc <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d901      	bls.n	80012c8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80012c4:	2303      	movs	r3, #3
 80012c6:	e0ee      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80012c8:	f7ff facb 	bl	8000862 <LL_RCC_HSI48_IsReady>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f1      	bne.n	80012b6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80e4 	beq.w	80014a4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012dc:	f7ff fc29 	bl	8000b32 <LL_RCC_GetSysClkSource>
 80012e0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	f040 80b4 	bne.w	800145c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f003 0203 	and.w	r2, r3, #3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	429a      	cmp	r2, r3
 8001300:	d123      	bne.n	800134a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800130c:	429a      	cmp	r2, r3
 800130e:	d11c      	bne.n	800134a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800131c:	429a      	cmp	r2, r3
 800131e:	d114      	bne.n	800134a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d10d      	bne.n	800134a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001338:	429a      	cmp	r2, r3
 800133a:	d106      	bne.n	800134a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001346:	429a      	cmp	r2, r3
 8001348:	d05d      	beq.n	8001406 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	2b0c      	cmp	r3, #12
 800134e:	d058      	beq.n	8001402 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001350:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0a1      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001362:	f7ff fc84 	bl	8000c6e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001366:	f7ff f8b9 	bl	80004dc <HAL_GetTick>
 800136a:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff f8b5 	bl	80004dc <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e092      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ef      	bne.n	800136e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_RCC_OscConfig+0x68c>)
 8001396:	4013      	ands	r3, r2
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013a0:	4311      	orrs	r1, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013a6:	0212      	lsls	r2, r2, #8
 80013a8:	4311      	orrs	r1, r2
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80013ae:	4311      	orrs	r1, r2
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013b4:	4311      	orrs	r1, r2
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80013ba:	430a      	orrs	r2, r1
 80013bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80013c0:	4313      	orrs	r3, r2
 80013c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80013c4:	f7ff fc44 	bl	8000c50 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80013c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013d8:	f7ff f880 	bl	80004dc <HAL_GetTick>
 80013dc:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013e0:	f7ff f87c 	bl	80004dc <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e059      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ef      	beq.n	80013e0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001400:	e050      	b.n	80014a4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e04f      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d147      	bne.n	80014a4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001414:	f7ff fc1c 	bl	8000c50 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001428:	f7ff f858 	bl	80004dc <HAL_GetTick>
 800142c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff f854 	bl	80004dc <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e031      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001442:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ef      	beq.n	8001430 <HAL_RCC_OscConfig+0x664>
 8001450:	e028      	b.n	80014a4 <HAL_RCC_OscConfig+0x6d8>
 8001452:	bf00      	nop
 8001454:	58000400 	.word	0x58000400
 8001458:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	2b0c      	cmp	r3, #12
 8001460:	d01e      	beq.n	80014a0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001462:	f7ff fc04 	bl	8000c6e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001466:	f7ff f839 	bl	80004dc <HAL_GetTick>
 800146a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800146e:	f7ff f835 	bl	80004dc <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e012      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001480:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1ef      	bne.n	800146e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800148e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001492:	68da      	ldr	r2, [r3, #12]
 8001494:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_RCC_OscConfig+0x6e4>)
 800149a:	4013      	ands	r3, r2
 800149c:	60cb      	str	r3, [r1, #12]
 800149e:	e001      	b.n	80014a4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e000      	b.n	80014a6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3734      	adds	r7, #52	; 0x34
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	eefefffc 	.word	0xeefefffc

080014b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e12d      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014c8:	4b98      	ldr	r3, [pc, #608]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d91b      	bls.n	800150e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b95      	ldr	r3, [pc, #596]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	4993      	ldr	r1, [pc, #588]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014e6:	f7fe fff9 	bl	80004dc <HAL_GetTick>
 80014ea:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ec:	e008      	b.n	8001500 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80014ee:	f7fe fff5 	bl	80004dc <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e111      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001500:	4b8a      	ldr	r3, [pc, #552]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0307 	and.w	r3, r3, #7
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	429a      	cmp	r2, r3
 800150c:	d1ef      	bne.n	80014ee <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d016      	beq.n	8001548 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb13 	bl	8000b4a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001524:	f7fe ffda 	bl	80004dc <HAL_GetTick>
 8001528:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800152c:	f7fe ffd6 	bl	80004dc <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e0f2      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800153e:	f7ff fbe8 	bl	8000d12 <LL_RCC_IsActiveFlag_HPRE>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0f1      	beq.n	800152c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0320 	and.w	r3, r3, #32
 8001550:	2b00      	cmp	r3, #0
 8001552:	d016      	beq.n	8001582 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb0a 	bl	8000b72 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800155e:	f7fe ffbd 	bl	80004dc <HAL_GetTick>
 8001562:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001564:	e008      	b.n	8001578 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001566:	f7fe ffb9 	bl	80004dc <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e0d5      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001578:	f7ff fbdd 	bl	8000d36 <LL_RCC_IsActiveFlag_C2HPRE>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f1      	beq.n	8001566 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d016      	beq.n	80015bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fb03 	bl	8000b9e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001598:	f7fe ffa0 	bl	80004dc <HAL_GetTick>
 800159c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015a0:	f7fe ff9c 	bl	80004dc <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e0b8      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80015b2:	f7ff fbd3 	bl	8000d5c <LL_RCC_IsActiveFlag_SHDHPRE>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f1      	beq.n	80015a0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d016      	beq.n	80015f6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fafd 	bl	8000bcc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80015d2:	f7fe ff83 	bl	80004dc <HAL_GetTick>
 80015d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80015da:	f7fe ff7f 	bl	80004dc <HAL_GetTick>
 80015de:	4602      	mov	r2, r0
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e09b      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80015ec:	f7ff fbc9 	bl	8000d82 <LL_RCC_IsActiveFlag_PPRE1>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f1      	beq.n	80015da <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d017      	beq.n	8001632 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	691b      	ldr	r3, [r3, #16]
 8001606:	00db      	lsls	r3, r3, #3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff faf3 	bl	8000bf4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800160e:	f7fe ff65 	bl	80004dc <HAL_GetTick>
 8001612:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001614:	e008      	b.n	8001628 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001616:	f7fe ff61 	bl	80004dc <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d901      	bls.n	8001628 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001624:	2303      	movs	r3, #3
 8001626:	e07d      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001628:	f7ff fbbd 	bl	8000da6 <LL_RCC_IsActiveFlag_PPRE2>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f1      	beq.n	8001616 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d043      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d106      	bne.n	8001654 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001646:	f7ff f893 	bl	8000770 <LL_RCC_HSE_IsReady>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d11e      	bne.n	800168e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e067      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b03      	cmp	r3, #3
 800165a:	d106      	bne.n	800166a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800165c:	f7ff fb16 	bl	8000c8c <LL_RCC_PLL_IsReady>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d113      	bne.n	800168e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e05c      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d106      	bne.n	8001680 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001672:	f7ff f9fb 	bl	8000a6c <LL_RCC_MSI_IsReady>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d108      	bne.n	800168e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e051      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001680:	f7ff f8a6 	bl	80007d0 <LL_RCC_HSI_IsReady>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e04a      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fa39 	bl	8000b0a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001698:	f7fe ff20 	bl	80004dc <HAL_GetTick>
 800169c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016a0:	f7fe ff1c 	bl	80004dc <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e036      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b6:	f7ff fa3c 	bl	8000b32 <LL_RCC_GetSysClkSource>
 80016ba:	4602      	mov	r2, r0
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d1ec      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c6:	4b19      	ldr	r3, [pc, #100]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d21b      	bcs.n	800170c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d4:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f023 0207 	bic.w	r2, r3, #7
 80016dc:	4913      	ldr	r1, [pc, #76]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016e4:	f7fe fefa 	bl	80004dc <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80016ec:	f7fe fef6 	bl	80004dc <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e012      	b.n	8001724 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <HAL_RCC_ClockConfig+0x278>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d1ef      	bne.n	80016ec <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800170c:	f000 f880 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001710:	4603      	mov	r3, r0
 8001712:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_RCC_ClockConfig+0x27c>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8001716:	f7fe feed 	bl	80004f4 <HAL_GetTickPrio>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fe8f 	bl	8000440 <HAL_InitTick>
 8001722:	4603      	mov	r3, r0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	58004000 	.word	0x58004000
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173a:	f7ff f9fa 	bl	8000b32 <LL_RCC_GetSysClkSource>
 800173e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10a      	bne.n	800175c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8001746:	f7ff f9b6 	bl	8000ab6 <LL_RCC_MSI_GetRange>
 800174a:	4603      	mov	r3, r0
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	4a2b      	ldr	r2, [pc, #172]	; (8001800 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e04b      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b04      	cmp	r3, #4
 8001760:	d102      	bne.n	8001768 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e045      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b08      	cmp	r3, #8
 800176c:	d10a      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800176e:	f7fe ffcf 	bl	8000710 <LL_RCC_HSE_IsEnabledDiv2>
 8001772:	4603      	mov	r3, r0
 8001774:	2b01      	cmp	r3, #1
 8001776:	d102      	bne.n	800177e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001778:	4b23      	ldr	r3, [pc, #140]	; (8001808 <HAL_RCC_GetSysClockFreq+0xd4>)
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	e03a      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800177e:	4b23      	ldr	r3, [pc, #140]	; (800180c <HAL_RCC_GetSysClockFreq+0xd8>)
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	e037      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001784:	f7ff fab9 	bl	8000cfa <LL_RCC_PLL_GetMainSource>
 8001788:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d003      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x64>
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d003      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x6a>
 8001796:	e00d      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <HAL_RCC_GetSysClockFreq+0xd0>)
 800179a:	60bb      	str	r3, [r7, #8]
        break;
 800179c:	e015      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800179e:	f7fe ffb7 	bl	8000710 <LL_RCC_HSE_IsEnabledDiv2>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d102      	bne.n	80017ae <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80017a8:	4b17      	ldr	r3, [pc, #92]	; (8001808 <HAL_RCC_GetSysClockFreq+0xd4>)
 80017aa:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80017ac:	e00d      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <HAL_RCC_GetSysClockFreq+0xd8>)
 80017b0:	60bb      	str	r3, [r7, #8]
        break;
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80017b4:	f7ff f97f 	bl	8000ab6 <LL_RCC_MSI_GetRange>
 80017b8:	4603      	mov	r3, r0
 80017ba:	091b      	lsrs	r3, r3, #4
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <HAL_RCC_GetSysClockFreq+0xcc>)
 80017c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c6:	60bb      	str	r3, [r7, #8]
        break;
 80017c8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80017ca:	f7ff fa71 	bl	8000cb0 <LL_RCC_PLL_GetN>
 80017ce:	4602      	mov	r2, r0
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	fb03 f402 	mul.w	r4, r3, r2
 80017d6:	f7ff fa84 	bl	8000ce2 <LL_RCC_PLL_GetDivider>
 80017da:	4603      	mov	r3, r0
 80017dc:	091b      	lsrs	r3, r3, #4
 80017de:	3301      	adds	r3, #1
 80017e0:	fbb4 f4f3 	udiv	r4, r4, r3
 80017e4:	f7ff fa71 	bl	8000cca <LL_RCC_PLL_GetR>
 80017e8:	4603      	mov	r3, r0
 80017ea:	0f5b      	lsrs	r3, r3, #29
 80017ec:	3301      	adds	r3, #1
 80017ee:	fbb4 f3f3 	udiv	r3, r4, r3
 80017f2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80017f4:	68fb      	ldr	r3, [r7, #12]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	080022c4 	.word	0x080022c4
 8001804:	00f42400 	.word	0x00f42400
 8001808:	003d0900 	.word	0x003d0900
 800180c:	007a1200 	.word	0x007a1200

08001810 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b598      	push	{r3, r4, r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001814:	f7ff ff8e 	bl	8001734 <HAL_RCC_GetSysClockFreq>
 8001818:	4604      	mov	r4, r0
 800181a:	f7ff f9ff 	bl	8000c1c <LL_RCC_GetAHBPrescaler>
 800181e:	4603      	mov	r3, r0
 8001820:	091b      	lsrs	r3, r3, #4
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	4a03      	ldr	r2, [pc, #12]	; (8001834 <HAL_RCC_GetHCLKFreq+0x24>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd98      	pop	{r3, r4, r7, pc}
 8001834:	08002284 	.word	0x08002284

08001838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001838:	b590      	push	{r4, r7, lr}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2bb0      	cmp	r3, #176	; 0xb0
 8001844:	d903      	bls.n	800184e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e007      	b.n	800185e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	4a11      	ldr	r2, [pc, #68]	; (800189c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8001858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800185e:	f7ff f9e9 	bl	8000c34 <LL_RCC_GetAHB4Prescaler>
 8001862:	4603      	mov	r3, r0
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	4a0d      	ldr	r2, [pc, #52]	; (80018a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800186c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9c      	lsrs	r4, r3, #18
 8001882:	f7fe ff37 	bl	80006f4 <HAL_PWREx_GetVoltageRange>
 8001886:	4603      	mov	r3, r0
 8001888:	4619      	mov	r1, r3
 800188a:	4620      	mov	r0, r4
 800188c:	f000 f80c 	bl	80018a8 <RCC_SetFlashLatency>
 8001890:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8001892:	4618      	mov	r0, r3
 8001894:	3714      	adds	r7, #20
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	080022c4 	.word	0x080022c4
 80018a0:	08002284 	.word	0x08002284
 80018a4:	431bde83 	.word	0x431bde83

080018a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b093      	sub	sp, #76	; 0x4c
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80018b2:	4b37      	ldr	r3, [pc, #220]	; (8001990 <RCC_SetFlashLatency+0xe8>)
 80018b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80018b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80018be:	4a35      	ldr	r2, [pc, #212]	; (8001994 <RCC_SetFlashLatency+0xec>)
 80018c0:	f107 031c 	add.w	r3, r7, #28
 80018c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80018ca:	4b33      	ldr	r3, [pc, #204]	; (8001998 <RCC_SetFlashLatency+0xf0>)
 80018cc:	f107 040c 	add.w	r4, r7, #12
 80018d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80018d6:	2300      	movs	r3, #0
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018e0:	d11a      	bne.n	8001918 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	643b      	str	r3, [r7, #64]	; 0x40
 80018e6:	e013      	b.n	8001910 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80018e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	3348      	adds	r3, #72	; 0x48
 80018ee:	443b      	add	r3, r7
 80018f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d807      	bhi.n	800190a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80018fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	3348      	adds	r3, #72	; 0x48
 8001900:	443b      	add	r3, r7
 8001902:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8001906:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8001908:	e020      	b.n	800194c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800190a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800190c:	3301      	adds	r3, #1
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
 8001910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001912:	2b03      	cmp	r3, #3
 8001914:	d9e8      	bls.n	80018e8 <RCC_SetFlashLatency+0x40>
 8001916:	e019      	b.n	800194c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001918:	2300      	movs	r3, #0
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800191c:	e013      	b.n	8001946 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800191e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	3348      	adds	r3, #72	; 0x48
 8001924:	443b      	add	r3, r7
 8001926:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	429a      	cmp	r2, r3
 800192e:	d807      	bhi.n	8001940 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8001930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	3348      	adds	r3, #72	; 0x48
 8001936:	443b      	add	r3, r7
 8001938:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800193e:	e005      	b.n	800194c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8001940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001942:	3301      	adds	r3, #1
 8001944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001948:	2b02      	cmp	r3, #2
 800194a:	d9e8      	bls.n	800191e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800194c:	4b13      	ldr	r3, [pc, #76]	; (800199c <RCC_SetFlashLatency+0xf4>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0207 	bic.w	r2, r3, #7
 8001954:	4911      	ldr	r1, [pc, #68]	; (800199c <RCC_SetFlashLatency+0xf4>)
 8001956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800195c:	f7fe fdbe 	bl	80004dc <HAL_GetTick>
 8001960:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001962:	e008      	b.n	8001976 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001964:	f7fe fdba 	bl	80004dc <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d901      	bls.n	8001976 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e007      	b.n	8001986 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <RCC_SetFlashLatency+0xf4>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001980:	429a      	cmp	r2, r3
 8001982:	d1ef      	bne.n	8001964 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	374c      	adds	r7, #76	; 0x4c
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}
 800198e:	bf00      	nop
 8001990:	08002258 	.word	0x08002258
 8001994:	08002268 	.word	0x08002268
 8001998:	08002274 	.word	0x08002274
 800199c:	58004000 	.word	0x58004000

080019a0 <LL_RCC_LSE_IsEnabled>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80019a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <LL_RCC_LSE_IsEnabled+0x18>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <LL_RCC_LSE_IsEnabled+0x1a>
 80019b8:	2300      	movs	r3, #0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_RCC_LSE_IsReady>:
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d101      	bne.n	80019dc <LL_RCC_LSE_IsReady+0x18>
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <LL_RCC_LSE_IsReady+0x1a>
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <LL_RCC_SetRFWKPClockSource>:
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80019f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80019fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_SetSMPSClockSource>:
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_RCC_SetSMPSPrescaler>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_RCC_SetUSARTClockSource>:
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8001a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a74:	f023 0203 	bic.w	r2, r3, #3
 8001a78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_RCC_SetLPUARTClockSource>:
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8001a98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001aa4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ab0:	bf00      	nop
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_RCC_SetI2CClockSource>:
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8001ac4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8001ae0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001aea:	bf00      	nop
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_RCC_SetLPTIMClockSource>:
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8001afe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b02:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0c1b      	lsrs	r3, r3, #16
 8001b0a:	041b      	lsls	r3, r3, #16
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	401a      	ands	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	041b      	lsls	r3, r3, #16
 8001b14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <LL_RCC_SetSAIClockSource>:
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_RCC_SetRNGClockSource>:
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8001b5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b66:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8001b6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <LL_RCC_SetCLK48ClockSource>:
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8001b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001b96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <LL_RCC_SetUSBClockSource>:
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ffe3 	bl	8001b82 <LL_RCC_SetCLK48ClockSource>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <LL_RCC_SetADCClockSource>:
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001bd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_RCC_SetRTCClockSource>:
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001bf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <LL_RCC_GetRTCClockSource>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <LL_RCC_ForceBackupDomainReset>:
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_RCC_ReleaseBackupDomainReset>:
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <LL_RCC_PLLSAI1_Enable>:
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c88:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c8c:	6013      	str	r3, [r2, #0]
}
 8001c8e:	bf00      	nop
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_RCC_PLLSAI1_Disable>:
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8001c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ca6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001caa:	6013      	str	r3, [r2, #0]
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_RCC_PLLSAI1_IsReady>:
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8001cba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001cc8:	d101      	bne.n	8001cce <LL_RCC_PLLSAI1_IsReady+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b088      	sub	sp, #32
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d034      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cfe:	d021      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001d00:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001d04:	d81b      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d0a:	d01d      	beq.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001d0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d10:	d815      	bhi.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d1a:	d110      	bne.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8001d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8001d2c:	e00d      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 f947 	bl	8001fc6 <RCCEx_PLLSAI1_ConfigNP>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8001d3c:	e005      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]
        break;
 8001d42:	e002      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8001d44:	bf00      	nop
 8001d46:	e000      	b.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8001d48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8001d4a:	7ffb      	ldrb	r3, [r7, #31]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fee8 	bl	8001b2a <LL_RCC_SetSAIClockSource>
 8001d5a:	e001      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d5c:	7ffb      	ldrb	r3, [r7, #31]
 8001d5e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d046      	beq.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8001d6c:	f7ff ff56 	bl	8001c1c <LL_RCC_GetRTCClockSource>
 8001d70:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d03c      	beq.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001d7c:	f7fe fcaa 	bl	80006d4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d105      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff ff30 	bl	8001bf0 <LL_RCC_SetRTCClockSource>
 8001d90:	e02e      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8001d9c:	f7ff ff4b 	bl	8001c36 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8001da0:	f7ff ff5a 	bl	8001c58 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8001db2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8001dbc:	f7ff fdf0 	bl	80019a0 <LL_RCC_LSE_IsEnabled>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d114      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dc6:	f7fe fb89 	bl	80004dc <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe fb85 	bl	80004dc <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d902      	bls.n	8001de6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	77fb      	strb	r3, [r7, #31]
              break;
 8001de4:	e004      	b.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8001de6:	f7ff fded 	bl	80019c4 <LL_RCC_LSE_IsReady>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d1ee      	bne.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8001df0:	7ffb      	ldrb	r3, [r7, #31]
 8001df2:	77bb      	strb	r3, [r7, #30]
 8001df4:	e001      	b.n	8001dfa <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df6:	7ffb      	ldrb	r3, [r7, #31]
 8001df8:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d004      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fe2a 	bl	8001a64 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d004      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fe35 	bl	8001a90 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fe5d 	bl	8001af6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fe52 	bl	8001af6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d004      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7ff fe2a 	bl	8001abc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d004      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fe1f 	bl	8001abc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d022      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff fe8d 	bl	8001bae <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e9c:	d107      	bne.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8001e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eac:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001eb6:	d10b      	bne.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3304      	adds	r3, #4
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 f8dd 	bl	800207c <RCCEx_PLLSAI1_ConfigNQ>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8001ec6:	7ffb      	ldrb	r3, [r7, #31]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8001ecc:	7ffb      	ldrb	r3, [r7, #31]
 8001ece:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02b      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee4:	d008      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eee:	d003      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff fe2a 	bl	8001b56 <LL_RCC_SetRNGClockSource>
 8001f02:	e00a      	b.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	2000      	movs	r0, #0
 8001f10:	f7ff fe21 	bl	8001b56 <LL_RCC_SetRNGClockSource>
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7ff fe34 	bl	8001b82 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f1e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8001f22:	d107      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f32:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d022      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe3d 	bl	8001bc4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f52:	d107      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8001f54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f62:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001f6c:	d10b      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	3304      	adds	r3, #4
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f8dd 	bl	8002132 <RCCEx_PLLSAI1_ConfigNR>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8001f82:	7ffb      	ldrb	r3, [r7, #31]
 8001f84:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7ff fd26 	bl	80019e8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff fd45 	bl	8001a3c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fd2c 	bl	8001a14 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8001fbc:	7fbb      	ldrb	r3, [r7, #30]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3720      	adds	r7, #32
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8001fd2:	f7ff fe61 	bl	8001c98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001fd6:	f7fe fa81 	bl	80004dc <HAL_GetTick>
 8001fda:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001fdc:	e009      	b.n	8001ff2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001fde:	f7fe fa7d 	bl	80004dc <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d902      	bls.n	8001ff2 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff0:	e004      	b.n	8001ffc <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8001ff2:	f7ff fe60 	bl	8001cb6 <LL_RCC_PLLSAI1_IsReady>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d1f0      	bne.n	8001fde <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d137      	bne.n	8002072 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8002002:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	021b      	lsls	r3, r3, #8
 8002012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002016:	4313      	orrs	r3, r2
 8002018:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202c:	4313      	orrs	r3, r2
 800202e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8002030:	f7ff fe23 	bl	8001c7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002034:	f7fe fa52 	bl	80004dc <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800203a:	e009      	b.n	8002050 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800203c:	f7fe fa4e 	bl	80004dc <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d902      	bls.n	8002050 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	73fb      	strb	r3, [r7, #15]
        break;
 800204e:	e004      	b.n	800205a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002050:	f7ff fe31 	bl	8001cb6 <LL_RCC_PLLSAI1_IsReady>
 8002054:	4603      	mov	r3, r0
 8002056:	2b01      	cmp	r3, #1
 8002058:	d1f0      	bne.n	800203c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d108      	bne.n	8002072 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002060:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800206e:	4313      	orrs	r3, r2
 8002070:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8002088:	f7ff fe06 	bl	8001c98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800208c:	f7fe fa26 	bl	80004dc <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002092:	e009      	b.n	80020a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002094:	f7fe fa22 	bl	80004dc <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d902      	bls.n	80020a8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	73fb      	strb	r3, [r7, #15]
      break;
 80020a6:	e004      	b.n	80020b2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80020a8:	f7ff fe05 	bl	8001cb6 <LL_RCC_PLLSAI1_IsReady>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d137      	bne.n	8002128 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80020b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020cc:	4313      	orrs	r3, r2
 80020ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80020d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80020e2:	4313      	orrs	r3, r2
 80020e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80020e6:	f7ff fdc8 	bl	8001c7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ea:	f7fe f9f7 	bl	80004dc <HAL_GetTick>
 80020ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80020f0:	e009      	b.n	8002106 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020f2:	f7fe f9f3 	bl	80004dc <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d902      	bls.n	8002106 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	73fb      	strb	r3, [r7, #15]
        break;
 8002104:	e004      	b.n	8002110 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8002106:	f7ff fdd6 	bl	8001cb6 <LL_RCC_PLLSAI1_IsReady>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d1f0      	bne.n	80020f2 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8002116:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002124:	4313      	orrs	r3, r2
 8002126:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800213e:	f7ff fdab 	bl	8001c98 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002142:	f7fe f9cb 	bl	80004dc <HAL_GetTick>
 8002146:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8002148:	e009      	b.n	800215e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800214a:	f7fe f9c7 	bl	80004dc <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d902      	bls.n	800215e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	73fb      	strb	r3, [r7, #15]
      break;
 800215c:	e004      	b.n	8002168 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800215e:	f7ff fdaa 	bl	8001cb6 <LL_RCC_PLLSAI1_IsReady>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f0      	bne.n	800214a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8002168:	7bfb      	ldrb	r3, [r7, #15]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d137      	bne.n	80021de <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800216e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	021b      	lsls	r3, r3, #8
 800217e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002182:	4313      	orrs	r3, r2
 8002184:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8002186:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002198:	4313      	orrs	r3, r2
 800219a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800219c:	f7ff fd6d 	bl	8001c7a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a0:	f7fe f99c 	bl	80004dc <HAL_GetTick>
 80021a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80021a6:	e009      	b.n	80021bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021a8:	f7fe f998 	bl	80004dc <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d902      	bls.n	80021bc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	73fb      	strb	r3, [r7, #15]
        break;
 80021ba:	e004      	b.n	80021c6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80021bc:	f7ff fd7b 	bl	8001cb6 <LL_RCC_PLLSAI1_IsReady>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d1f0      	bne.n	80021a8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80021cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d0:	691a      	ldr	r2, [r3, #16]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021da:	4313      	orrs	r3, r2
 80021dc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <__libc_init_array>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4d0d      	ldr	r5, [pc, #52]	; (8002220 <__libc_init_array+0x38>)
 80021ec:	4c0d      	ldr	r4, [pc, #52]	; (8002224 <__libc_init_array+0x3c>)
 80021ee:	1b64      	subs	r4, r4, r5
 80021f0:	10a4      	asrs	r4, r4, #2
 80021f2:	2600      	movs	r6, #0
 80021f4:	42a6      	cmp	r6, r4
 80021f6:	d109      	bne.n	800220c <__libc_init_array+0x24>
 80021f8:	4d0b      	ldr	r5, [pc, #44]	; (8002228 <__libc_init_array+0x40>)
 80021fa:	4c0c      	ldr	r4, [pc, #48]	; (800222c <__libc_init_array+0x44>)
 80021fc:	f000 f820 	bl	8002240 <_init>
 8002200:	1b64      	subs	r4, r4, r5
 8002202:	10a4      	asrs	r4, r4, #2
 8002204:	2600      	movs	r6, #0
 8002206:	42a6      	cmp	r6, r4
 8002208:	d105      	bne.n	8002216 <__libc_init_array+0x2e>
 800220a:	bd70      	pop	{r4, r5, r6, pc}
 800220c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002210:	4798      	blx	r3
 8002212:	3601      	adds	r6, #1
 8002214:	e7ee      	b.n	80021f4 <__libc_init_array+0xc>
 8002216:	f855 3b04 	ldr.w	r3, [r5], #4
 800221a:	4798      	blx	r3
 800221c:	3601      	adds	r6, #1
 800221e:	e7f2      	b.n	8002206 <__libc_init_array+0x1e>
 8002220:	08002304 	.word	0x08002304
 8002224:	08002304 	.word	0x08002304
 8002228:	08002304 	.word	0x08002304
 800222c:	08002308 	.word	0x08002308

08002230 <memset>:
 8002230:	4402      	add	r2, r0
 8002232:	4603      	mov	r3, r0
 8002234:	4293      	cmp	r3, r2
 8002236:	d100      	bne.n	800223a <memset+0xa>
 8002238:	4770      	bx	lr
 800223a:	f803 1b01 	strb.w	r1, [r3], #1
 800223e:	e7f9      	b.n	8002234 <memset+0x4>

08002240 <_init>:
 8002240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002242:	bf00      	nop
 8002244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002246:	bc08      	pop	{r3}
 8002248:	469e      	mov	lr, r3
 800224a:	4770      	bx	lr

0800224c <_fini>:
 800224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800224e:	bf00      	nop
 8002250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002252:	bc08      	pop	{r3}
 8002254:	469e      	mov	lr, r3
 8002256:	4770      	bx	lr
